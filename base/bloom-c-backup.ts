export class BloomFilter {
  private wasmModule: any;
  private bloomFilter: any;

  constructor(
    size: number,
    fpr: number,
    m: number = 0,
    k: number = 0,
    maxHashes: number = 0
  ) {
    this.wasmModule = null;
    this.bloomFilter = null;
    this.initialize(size, fpr, m, k, maxHashes);
  }

  async initialize(
    size: number,
    fpr: number,
    m: number,
    k: number,
    maxHashes: number
  ): Promise<void> {
    const wasmUrl = new URL(
      '../build/BloomFilter.js', // Note: we're loading the JS file, not the .wasm directly
      import.meta.url
    ).toString();

    try {
      // Load the JavaScript wrapper generated by Emscripten
      const createModule = await import(wasmUrl);

      // Create the module
      this.wasmModule = await createModule.default();

      // Create a BloomFilter instance
      this.bloomFilter = new this.wasmModule.BloomFilter(
        size,
        fpr,
        m,
        k,
        maxHashes
      );

      console.log('BloomFilter initialized successfully');
    } catch (error) {
      console.error('Failed to initialize WebAssembly module:', error);
      throw error;
    }
  }

  add(value: string): void {
    if (!this.bloomFilter) throw new Error('BloomFilter not initialized');
    this.bloomFilter.add(value);
  }

  possiblyContains(value: string): boolean {
    if (!this.bloomFilter) throw new Error('BloomFilter not initialized');
    return this.bloomFilter.possiblyContains(value);
  }

  serialize(): string {
    if (!this.bloomFilter) throw new Error('BloomFilter not initialized');
    return this.bloomFilter.serialize();
  }

  deserialize(data: string): void {
    if (!this.bloomFilter) throw new Error('BloomFilter not initialized');
    this.bloomFilter.deserialize(data);
  }

  printBuffer(): void {
    if (!this.bloomFilter) throw new Error('BloomFilter not initialized');
    this.bloomFilter.printBuffer();
  }
}

// Usage example
async function main() {
  const bloomFilter = new BloomFilter(1000, 0.01);
  await bloomFilter.initialize(1000, 0.01, 0, 0, 0);

  bloomFilter.add('test');
  console.log(bloomFilter.possiblyContains('test')); // Should print true
  console.log(bloomFilter.possiblyContains('not in set')); // Should print false
}

main().catch(console.error);
