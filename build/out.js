(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // styles/utils/ssr.ts
  function useSSRInstantEffect(effect, deps) {
    effect();
  }
  var import_react_18_2, import_react_dom_18_2, isServerSide, _isNextJs, isNextJs, useIsomorphicLayoutEffect, createUniversalPortal;
  var init_ssr = __esm({
    "styles/utils/ssr.ts"() {
      import_react_18_2 = __require("https://esm.sh/react@18.2.0");
      import_react_dom_18_2 = __toESM(__require("https://esm.sh/react-dom@18.2.0"));
      isServerSide = typeof window === "undefined" || typeof document === "undefined";
      _isNextJs = false;
      isNextJs = () => _isNextJs;
      useIsomorphicLayoutEffect = isServerSide ? useSSRInstantEffect : import_react_18_2.useLayoutEffect;
      createUniversalPortal = (children, container, key) => {
        if (isServerSide) {
          return null;
        }
        if (!container) {
          const rootKey = isNextJs() ? "__next" : "root";
          container = document.getElementById(rootKey);
        }
        return import_react_dom_18_2.default.createPortal(children, container, key);
      };
    }
  });

  // styles/css-objects/context.tsx
  function StyleTag({ dev }) {
    const ctx2 = (0, import_react_18_22.useContext)(StyleContext);
    const reffedDev = (0, import_react_18_22.useRef)(dev);
    (0, import_react_18_22.useEffect)(() => {
      reffedDev.current = dev;
    }, [dev]);
    (0, import_react_18_22.useEffect)(() => {
      if (!isServerSide) {
        const ssrStyle = document.getElementById("ssr-cso-styles");
        if (ssrStyle) {
          ssrStyle.remove();
        }
      }
    }, []);
    (0, import_react_18_22.useEffect)(() => {
      if (isServerSide) {
        return;
      }
      const style = document.createElement("style");
      style.id = "cso-objects";
      style.type = "text/css";
      document.head.appendChild(style);
      const initialRules = ctx2.getRules();
      style.appendChild(document.createTextNode(""));
      const tryAppendRule = (rule, index) => {
        const sheet = style.sheet;
        index = typeof index === "undefined" ? sheet.cssRules.length : index;
        try {
          sheet.insertRule(rule, index);
        } catch (error) {
          if (error instanceof SyntaxError && !reffedDev.current) {
            console.warn(`Received non-parsable rule: '${rule}'`);
          } else {
            throw error;
          }
        }
      };
      for (let i = 0; i < initialRules.length; i++) {
        tryAppendRule(initialRules[i], i);
      }
      return ctx2.listen((rule) => {
        tryAppendRule(rule);
      });
    }, [ctx2]);
    return /* @__PURE__ */ import_react_18_22.default.createElement(import_react_18_22.default.Fragment, null);
  }
  function getCss(c) {
    const res = [];
    if (c.styleRules) {
      res.push(...c.styleRules);
    }
    Object.values(c.classes || {}).forEach((x) => res.push(...getCss(x)));
    return res;
  }
  function useEnsureAttached() {
    return (0, import_react_18_22.useContext)(StyleContext).ensureAttached;
  }
  var import_react_18_22, CssRegistry, __CssRegistry, StyleContext, StyleProvider;
  var init_context = __esm({
    "styles/css-objects/context.tsx"() {
      import_react_18_22 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_ssr();
      CssRegistry = class {
        constructor() {
          this.rules = [];
          this.listeners = [];
          this.cssQueue = [];
          this.ensureAttached = (c) => {
            if (c.isAttached) {
              return false;
            }
            (c.basedOn || []).forEach(this.ensureAttached);
            const styles = getCss(c);
            for (let i = 0; i < styles.length; i++) {
              this.append(styles[i]);
            }
            c.isAttached = true;
            return true;
          };
        }
        append(css) {
          this.rules.push(css);
          this.listeners.forEach((fn) => fn(css));
        }
        getRules() {
          return this.rules;
        }
        listen(listener) {
          this.listeners.push(listener);
          return () => {
            this.listeners.splice(this.listeners.indexOf(listener), 1);
          };
        }
        appendCss(css) {
          this.append(css);
        }
      };
      __CssRegistry = new CssRegistry();
      StyleContext = import_react_18_22.default.createContext(__CssRegistry);
      StyleProvider = ({
        children,
        dev = false
      }) => {
        return /* @__PURE__ */ import_react_18_22.default.createElement(import_react_18_22.default.Fragment, null, /* @__PURE__ */ import_react_18_22.default.createElement(StyleTag, { dev, children: void 0 }), children);
      };
    }
  });

  // styles/theme.tsx
  function componentToHex(component) {
    const hex2 = component.toString(16);
    return hex2.length === 0 ? `0${hex2}` : hex2;
  }
  function rgbToHex([r, g, b]) {
    return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;
  }
  function hexToRgb(hex2) {
    if (hex2.startsWith("#")) {
      hex2 = hex2.slice(1);
    }
    const r = parseInt(hex2.slice(0, 2), 16);
    const g = parseInt(hex2.slice(2, 4), 16);
    const b = parseInt(hex2.slice(4, 6), 16);
    return [r, g, b];
  }
  function makeTransparent([r, g, b, a], background) {
    const [backR, backG, backB] = hexToRgb(background);
    const diffAlpha = 1 - a;
    const newColor = [
      ~~(r * a + backR * diffAlpha),
      ~~(g * a + backG * diffAlpha),
      ~~(b * a + backB * diffAlpha)
    ];
    return rgbToHex(newColor);
  }
  function useTheme() {
    return (0, import_react_18_23.useContext)(themeContext);
  }
  function ThemeProvider({
    theme,
    children,
    isRoot = false
  }) {
    const style = (0, import_react_18_23.useMemo)(() => {
      return {
        "--background-0": theme.background[0],
        "--background-100": theme.background[100],
        "--background-200": theme.background[200],
        "--background-300": theme.background[300],
        "--background-400": theme.background[400],
        "--background-500": theme.background[500],
        "--background-600": theme.background[600],
        "--background-700": theme.background[700],
        "--background-800": theme.background[800],
        "--background-900": theme.background[900],
        "--background-text": theme.background.text,
        "--background-text-secondary": theme.background.textSecondary,
        "--background-placeholder": theme.background.placeholderText,
        "--primary-200": theme.primary[200],
        "--primary-400": theme.primary[400],
        "--primary-500": theme.primary[500],
        "--shadows-z1": theme.shadows.z1,
        "--shadows-z2": theme.shadows.z2,
        "--shadows-z3": theme.shadows.z3,
        "--shadows-z4": theme.shadows.z4
      };
    }, [theme]);
    (0, import_react_18_23.useEffect)(() => {
      if (!isRoot) {
        return;
      }
      for (const [key, value] of Object.entries(style)) {
        document.body.style.setProperty(key, value);
      }
    }, [isRoot, style]);
    return /* @__PURE__ */ import_react_18_23.default.createElement(themeContext.Provider, { value: theme }, children({ style }));
  }
  var import_react_18_23, lightColorWheel, brandLightTheme, lightTheme, darkTheme, cssTheme, themeContext;
  var init_theme = __esm({
    "styles/theme.tsx"() {
      import_react_18_23 = __toESM(__require("https://esm.sh/react@18.2.0"));
      lightColorWheel = {
        primary: {
          p1: "#f5f9fb",
          p2: "#e0eef4",
          p3: "#cce3ed",
          p4: "#abd4ee",
          p5: "#8bc5ee",
          p6: "#6ab6ef",
          p7: "#57a5e9",
          p8: "#5793E0",
          p9: "#3184DD",
          p10: "#1960cf"
        },
        secondary: {
          s0: "#FFFBF5",
          s1: "#FBF6EF",
          s2: "#f5ecdc",
          s3: "#FBEAC8",
          s4: "#FAE2B4",
          s5: "#EFD2AB",
          s6: "#F5C36A",
          s7: "#f9b55a"
        },
        mono: {
          m0: "#ffffff",
          m1: "#e5e5e5",
          m2: "#cccccc",
          m3: "#B3B3B3",
          m4: "#8c8c8c",
          m5: "#4D4D4D",
          m6: "#3f3f3f",
          m10: "#262626"
        },
        supporting: {
          B1: "#EDE1CB",
          B2: "#CEBFA3",
          B3: "#B4A68C",
          B4: "#978461",
          G1: "#C5D9BF",
          G2: "#92AD8A",
          G3: "#75A27E",
          G4: "#4A6144",
          O1: "#FDB797",
          O2: "#E68B60",
          O3: "#C25A3E",
          O4: "#AA4428",
          R1: "#E5AFA2",
          R2: "#B78775",
          R3: "#945A52",
          R4: "#6C2C23",
          C1: "#FBD5B6",
          C2: "#F2B482",
          C4: "#BE6F2F",
          L1: "#E8ECF1",
          L2: "#CDD3DC",
          L4: "#8896AC",
          V1: "#E7E0ED",
          V2: "#C8B9D6",
          V4: "#836C98",
          T1: "#C5EAEC",
          T2: "#8BC7CB",
          T4: "#2B9CA3"
        }
      };
      brandLightTheme = {
        ...lightColorWheel,
        shadows: {
          z1: "0 3px 6px 0 rgba(14, 30, 62, 0.08)",
          z2: "0px 0px 4px rgba(151, 132, 97, 0.25)",
          z3: "0 1px 2px 0 rgb(60 64 67 / 30%), 0 1px 3px 1px rgb(60 64 67 / 15%)",
          z4: "0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%)"
        },
        colors: {
          text: lightColorWheel.mono.m10,
          grayedText: lightColorWheel.mono.m3,
          background: lightColorWheel.mono.m0,
          main: lightColorWheel.primary.p6,
          primaryButton: lightColorWheel.primary.p9,
          primaryButtonText: lightColorWheel.mono.m0,
          secondaryButton: lightColorWheel.secondary.s2,
          secondaryButtonActive: lightColorWheel.secondary.s7,
          barActionText: lightColorWheel.supporting.R4,
          placeholderText: lightColorWheel.mono.m4,
          toggleButtonActiveIcon: lightColorWheel.secondary.s1,
          toggleButtonInactiveIcon: lightColorWheel.secondary.s5
        }
      };
      lightTheme = {
        background: {
          "0": "#FFFFFF",
          "100": brandLightTheme.secondary.s0,
          "200": "#fbfcff",
          "300": "#f0f3fa",
          "400": brandLightTheme.secondary.s2,
          "500": brandLightTheme.mono.m1,
          "600": brandLightTheme.secondary.s7,
          "700": "#4a4a4a",
          "800": "#11082b",
          "900": "#1e1b33",
          text: brandLightTheme.mono.m10,
          textSecondary: makeTransparent([...hexToRgb("#121212"), 0.6], "#FFFFFF"),
          placeholderText: brandLightTheme.mono.m4
        },
        primary: {
          "200": brandLightTheme.primary.p1,
          "400": brandLightTheme.primary.p6,
          "500": brandLightTheme.primary.p9
        },
        shadows: {
          z1: "0 3px 6px 0 rgba(14, 30, 62, 0.08)",
          z2: "0px 4px 4px rgba(0, 0, 0, 0.25), 0px 1px 2px rgba(0, 0, 0, 0.1)",
          z3: "0 1px 2px 0 rgb(60 64 67 / 30%), 0 1px 3px 1px rgb(60 64 67 / 15%)",
          z4: "0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%)"
        }
      };
      darkTheme = {
        background: {
          "0": "#212121",
          "100": "#424242",
          "200": "#616161",
          "300": "#757575",
          "400": "#9E9E9E",
          "500": "#BDBDBD",
          "600": "#E0E0E0",
          "700": "#EEEEEE",
          "800": "#F5F5F5",
          "900": "#FAFAFA",
          text: "#EEEEEE",
          textSecondary: "#121212",
          placeholderText: "#f8faffb3"
        },
        primary: {
          "200": "#fff9f6",
          "400": "#ff8000",
          "500": "#f96500"
        },
        shadows: {
          z1: "0 3px 6px 0 rgba(14, 30, 62, 0.08)",
          z2: "0px 4px 4px rgba(0, 0, 0, 0.25), 0px 1px 2px rgba(0, 0, 0, 0.1)",
          z3: "0 1px 2px 0 rgb(60 64 67 / 30%), 0 1px 3px 1px rgb(60 64 67 / 15%)",
          z4: "0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%)"
        }
      };
      cssTheme = {
        background: {
          "0": `var(--background-0, ${lightTheme.background[0]})`,
          "100": `var(--background-100, ${lightTheme.background[100]})`,
          "200": `var(--background-200, ${lightTheme.background[200]})`,
          "300": `var(--background-300, ${lightTheme.background[300]})`,
          "400": `var(--background-400, ${lightTheme.background[400]})`,
          "500": `var(--background-500, ${lightTheme.background[500]})`,
          "600": `var(--background-600, ${lightTheme.background[600]})`,
          "700": `var(--background-700, ${lightTheme.background[700]})`,
          "800": `var(--background-800, ${lightTheme.background[800]})`,
          "900": `var(--background-900, ${lightTheme.background[900]})`,
          text: `var(--background-text, ${lightTheme.background.text})`,
          textSecondary: `var(--text-secondary, ${lightTheme.background.textSecondary})`,
          placeholderText: `var(--background-placeholder, ${lightTheme.background.placeholderText})`
        },
        primary: {
          "200": `var(--primary-200, ${lightTheme.primary[200]})`,
          "400": `var(--primary-400, ${lightTheme.primary[400]})`,
          "500": `var(--primary-500, ${lightTheme.primary[500]})`
        },
        shadows: {
          z1: `var(--shadow-z1, ${lightTheme.shadows.z1})`,
          z2: `var(--shadow-z2, ${lightTheme.shadows.z2})`,
          z3: `var(--shadow-z3, ${lightTheme.shadows.z3})`,
          z4: `var(--shadow-z4, ${lightTheme.shadows.z4})`
        }
      };
      themeContext = import_react_18_23.default.createContext(lightTheme);
    }
  });

  // styles/css-objects/index.ts
  function genId() {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let autoId = "";
    for (let i = 0; i < 20; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return autoId;
  }
  function defaultUnitForProperty(prop) {
    if (["z-index", "opacity", "flex-shrink", "flex-grow", "line-height"].indexOf(
      prop
    ) !== -1) {
      return "";
    }
    return "px";
  }
  function getSeparatorForKey(key) {
    switch (key) {
      case "transition":
      case "font-family":
        return ",";
      default:
        return " ";
    }
  }
  function stringify(key, val) {
    if (typeof val === "number") {
      return val + defaultUnitForProperty(key);
    }
    if (Array.isArray(val)) {
      return val.map((x) => stringify(key, x)).join(getSeparatorForKey(key));
    }
    return "" + val;
  }
  function formatKey(key) {
    if (key.startsWith("-")) {
      return [key];
    }
    const kebab = key.split("").map((x) => x.toUpperCase() === x ? `-${x.toLowerCase()}` : x).join("");
    return [kebab];
  }
  function toCss(obj, key, currentSelector, isClass, keepSelector, ns) {
    const selector = key.startsWith(":") || keepSelector ? key : `${key}_${ns}`;
    const isMediaQuery = key.startsWith("@media");
    if (!key.endsWith("&") && !isMediaQuery) {
      currentSelector = `${currentSelector}${isClass && !keepSelector ? "." : ""}${selector}`;
    } else {
      currentSelector = `${isClass ? "." : ""}${isMediaQuery ? key.replace("&", "") : selector}${isMediaQuery ? " {\n" : ""}${currentSelector}`;
    }
    let currentRuleBuilder = [`${currentSelector} {`];
    const result = {
      styleRules: [],
      rules: {},
      classes: {}
    };
    let basedOn = obj.basedOn || [];
    if (!Array.isArray(basedOn)) {
      basedOn = [basedOn];
    }
    result.basedOn = basedOn;
    if (isClass) {
      result.className = selector;
    }
    Object.keys(obj).forEach((key2) => {
      if (key2 === "basedOn") {
        return;
      }
      const val = obj[key2];
      if (typeof val === "object" && !Array.isArray(val)) {
        let sel = currentSelector;
        if (!key2.startsWith(":") && !key2.startsWith("&")) {
          sel += " ";
        }
        const k = key2.startsWith("&") ? key2.substr(1) : key2;
        result.classes[k] = toCss(
          val,
          k,
          sel,
          !key2.startsWith(":") && !key2.startsWith("@"),
          key2.startsWith("& "),
          ns
        );
      } else {
        result.rules[key2] = val;
        formatKey(key2).forEach((k) => {
          currentRuleBuilder.push(`  ${k}: ${stringify(k, val)};`);
        });
      }
    });
    if (currentRuleBuilder.length === 1 && !isMediaQuery) {
      currentRuleBuilder = [];
    } else {
      currentRuleBuilder.push("}");
      if (isMediaQuery) {
        currentRuleBuilder.push("}");
      }
    }
    const rule = currentRuleBuilder.join("");
    if (rule) {
      result.styleRules = [rule];
    }
    return result;
  }
  function getStyle(object) {
    const styles = [];
    if (object.styleRules) {
      styles.push(object.styleRules.join("\n\n"));
    }
    return Object.keys(object.classes).reduce((accum, x) => {
      accum.push(getStyle(object.classes[x]));
      return accum;
    }, styles).join("\n\n");
  }
  function isCssFn(x) {
    return typeof x === "function";
  }
  function classnames(...arr) {
    return arr.filter((x) => x).map((x) => {
      if (typeof x === "string") {
        return x;
      }
      if (Array.isArray(x)) {
        return classnames.apply(null, x);
      }
      return classnames.apply(null, [...x.basedOn || [], x.className]);
    }).join(" ");
  }
  function useStylesInternal(obj) {
    const ctxAttach = useEnsureAttached();
    useIsomorphicLayoutEffect(() => {
      for (const val of Object.values(obj)) {
        ctxAttach(val);
      }
    }, [obj, ctxAttach]);
    const [styles] = (0, import_react_18_24.useState)(
      () => Object.entries(obj).reduce((accum, [key, val]) => {
        accum[key] = cn(val);
        return accum;
      }, {})
    );
    return styles;
  }
  function makeStyles(obj, ns = genId(), opts) {
    if (isCssFn(obj)) {
      obj = obj(cssTheme, (cname) => `${cname}_${ns}`);
    }
    const useStyles85 = () => {
      return useStylesInternal(useStyles85);
    };
    for (const [key, val] of Object.entries(obj)) {
      useStyles85[key] = toCss(val, key, "", true, false, ns);
    }
    Object.keys(obj).reduce((accum, key) => {
      accum[key] = toCss(obj[key], key, "", true, false, ns);
      return accum;
    }, {});
    useStyles85.getCss = () => Object.keys(useStyles85).filter((x) => x !== "getCss").map((k) => getStyle(useStyles85[k])).join("\n\n");
    return useStyles85;
  }
  function keyframes(def, ns = genId()) {
    const name = `animation_${ns}`;
    if (isCssFn(def)) {
      def = def(cssTheme, (cname) => `${cname}_${ns}`);
    }
    const css = Object.keys(def).map((frame) => {
      const style = [];
      Object.keys(def[frame]).forEach((k) => {
        const val = def[frame][k];
        formatKey(k).forEach((x) => {
          style.push(`  ${x}: ${stringify(x, val)};`);
        });
      });
      return `${frame} { ${style.join("")} }`;
    });
    const animation = `@keyframes ${name} { ${css.join("\n")}}`;
    __CssRegistry.appendCss(animation);
    return name;
  }
  var import_react_18_24, cn;
  var init_css_objects = __esm({
    "styles/css-objects/index.ts"() {
      import_react_18_24 = __require("https://esm.sh/react@18.2.0");
      init_context();
      init_theme();
      init_ssr();
      cn = classnames;
    }
  });

  // base/common.ts
  function uniqueId(length = 20) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let autoId = "";
    for (let i = 0; i < length; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return autoId;
  }
  function* unionIter(...args) {
    for (const iter of args) {
      for (const v of iter) {
        yield v;
      }
    }
  }
  function newInstance(instance, ...args) {
    return new instance.constructor(...args);
  }
  function* mapIterable(input, mapper) {
    let i = 0;
    for (const v of input) {
      yield mapper(v, i);
      ++i;
    }
  }
  function* filterIterable(input, filter) {
    for (const v of input) {
      if (filter(v)) {
        yield v;
      }
    }
  }
  var init_common = __esm({
    "base/common.ts"() {
    }
  });

  // styles/styleguide.ts
  var gridbase, timing, duration, transition, styleguide;
  var init_styleguide = __esm({
    "styles/styleguide.ts"() {
      gridbase = 8;
      timing = {
        standard: "cubic-bezier(0.4, 0.0, 0.2, 1)",
        in: "cubic-bezier(0.0, 0.0, 0.2, 1)",
        out: "cubic-bezier(0.4, 0.0, 1, 1)"
      };
      duration = {
        standard: 300,
        short: 150
      };
      transition = {
        timing,
        duration,
        standard: {
          transitionDuration: duration.standard + "ms",
          transitionTimingFunction: timing.standard
        },
        short: {
          transitionDuration: duration.short + "ms",
          transitionTimingFunction: timing.standard
        }
      };
      styleguide = {
        gridbase,
        transition
      };
    }
  });

  // styles/layout.ts
  var layout;
  var init_layout = __esm({
    "styles/layout.ts"() {
      init_css_objects();
      layout = makeStyles(
        {
          row: {
            display: "flex",
            flexDirection: "row",
            "&startCenter": {
              alignItems: "flex-start",
              justifyContent: "center"
            }
          },
          column: {
            display: "flex",
            flexDirection: "column"
          },
          centerCenter: {
            alignItems: "center",
            justifyContent: "center"
          },
          flex: {
            flexGrow: "1",
            flexShrink: "0",
            flexBasis: "auto"
          },
          flexSpacer: {
            flexGrow: "1",
            flexShrink: "1",
            flexBasis: "auto"
          }
        },
        "layout_1535ab"
      );
    }
  });

  // styles/components/spinner-view.tsx
  var import_react_18_25, rotator, offset, dash, duration2, useStyles, SpinnerView, spinner_view_default;
  var init_spinner_view = __esm({
    "styles/components/spinner-view.tsx"() {
      import_react_18_25 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      rotator = keyframes(
        {
          "0%": {
            transform: "rotate(0deg)"
          },
          "100%": {
            transform: "rotate(270deg)"
          }
        },
        "spinner-view_56211d"
      );
      offset = 187;
      dash = keyframes(
        {
          "0%": {
            strokeDashoffset: `${offset}`
          },
          "50%": {
            strokeDashoffset: `${offset / 4}`,
            transform: "rotate(135deg)"
          },
          "100%": {
            strokeDashoffset: `${offset}`,
            transform: "rotate(450deg)"
          }
        },
        "spinner-view_93a725"
      );
      duration2 = "1.47s";
      useStyles = makeStyles((theme) => ({
        spinner: {
          animation: `${rotator} ${duration2} linear infinite`
        },
        path: {
          strokeDasharray: `${offset}`,
          strokeDashoffset: 0,
          transformOrigin: "center",
          animation: `${dash} ${duration2} ease-in-out infinite`,
          stroke: theme.primary[500]
        }
      }));
      SpinnerView = ({
        size = styleguide.gridbase * 8,
        color = void 0
      }) => {
        const styles = useStyles();
        const props = {};
        const style = {};
        if (color) {
          props.stroke = color;
          style.stroke = color;
        }
        return /* @__PURE__ */ import_react_18_25.default.createElement(
          "svg",
          {
            className: cn(styles.spinner),
            width: size,
            height: size,
            viewBox: "0 0 66 66",
            xmlns: "http://www.w3.org/2000/svg"
          },
          /* @__PURE__ */ import_react_18_25.default.createElement(
            "circle",
            {
              className: cn(styles.path),
              fill: "none",
              strokeWidth: "6",
              strokeLinecap: "round",
              cx: "33",
              cy: "33",
              r: "30",
              style,
              ...props
            }
          )
        );
      };
      spinner_view_default = SpinnerView;
    }
  });

  // styles/utils/hooks/use-window-size.ts
  function useWindowSize() {
    const [size, setSize] = (0, import_react_18_26.useState)({
      width: window.innerWidth,
      height: window.innerHeight
    });
    (0, import_react_18_26.useEffect)(() => {
      const handler = () => {
        setSize({
          width: window.innerWidth,
          height: window.innerHeight
        });
      };
      window.addEventListener("resize", handler);
      return () => {
        window.removeEventListener("resize", handler);
      };
    }, []);
    return size;
  }
  var import_react_18_26;
  var init_use_window_size = __esm({
    "styles/utils/hooks/use-window-size.ts"() {
      import_react_18_26 = __require("https://esm.sh/react@18.2.0");
    }
  });

  // styles/responsive.ts
  function getDevice(screenWidth) {
    if (screenWidth < 768 /* Medium */) {
      return 0 /* Mobile */;
    }
    if (screenWidth < 992 /* Large */) {
      return 1 /* Tablet */;
    }
    if (screenWidth < 1200 /* XLarge */) {
      return 2 /* Laptop */;
    }
    return 3 /* Desktop */;
  }
  var MediaQueries, useCurrentDevice;
  var init_responsive = __esm({
    "styles/responsive.ts"() {
      init_ssr();
      init_use_window_size();
      MediaQueries = {
        Mobile: `@media (max-width: ${768 /* Medium */}px)`,
        Tablet: `@media (min-width: ${768 /* Medium */}px)`,
        TabletOnly: `@media (min-width: ${768 /* Medium */}px) and (max-width: ${992 /* Large */}px)`,
        TabletAndMobile: `@media (max-width: ${992 /* Large */}px)`,
        Computer: `@media (min-width: ${992 /* Large */}px)`,
        LaptopOnly: `@media (min-width: ${992 /* Large */}px) and (max-width: ${1200 /* XLarge */}px)`,
        Desktop: `@media (min-width: ${1200 /* XLarge */}px)`
      };
      useCurrentDevice = isServerSide ? () => 2 /* Laptop */ : function() {
        const { width } = useWindowSize();
        return getDevice(width);
      };
    }
  });

  // styles/components/typography.tsx
  var import_react_18_27, FontFamily, useStyles2, H1, H2, H3, H4, Text, TextSm, Bold, Label, LabelSm;
  var init_typography = __esm({
    "styles/components/typography.tsx"() {
      init_css_objects();
      import_react_18_27 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_responsive();
      init_theme();
      FontFamily = [
        "'Poppins'",
        "'Heebo'",
        "sans-serif"
      ];
      useStyles2 = makeStyles(
        () => ({
          h1: {
            margin: 0,
            padding: 0,
            fontWeight: "600",
            fontSize: 34,
            lineHeight: "40px",
            color: brandLightTheme.colors.text,
            letterSpacing: 0.09,
            [MediaQueries.LaptopOnly]: {
              fontSize: 26,
              lineHeight: "32px",
              letterSpacing: 0.065
            },
            [MediaQueries.TabletAndMobile]: {
              fontSize: 24,
              lineHeight: "30px",
              letterSpacing: 0.06
            },
            [MediaQueries.Mobile]: {
              lineHeight: "22px"
            }
          },
          h2: {
            color: brandLightTheme.colors.text,
            margin: 0,
            padding: 0,
            fontWeight: "600",
            fontSize: 24,
            lineHeight: "30px",
            letterSpacing: 0.15,
            [MediaQueries.Mobile]: {
              fontSize: 18,
              lineHeight: "24px",
              letterSpacing: 0.11
            },
            [MediaQueries.Desktop]: {
              fontSize: 30,
              lineHeight: "32px",
              letterSpacing: 0.19
            }
          },
          h3: {
            color: brandLightTheme.colors.text,
            margin: 0,
            padding: 0
          },
          h4: {
            color: brandLightTheme.colors.text,
            margin: 0,
            padding: 0,
            fontWeight: "400",
            fontSize: 16,
            lineHeight: "22px",
            letterSpacing: 0.1,
            [MediaQueries.TabletAndMobile]: {
              fontSize: 14,
              lineHeight: "20px",
              letterSpacing: 0.09
            }
          },
          h5: {
            fontSize: 16,
            fontWeight: "400",
            lineHeight: "22px"
          },
          label: {
            color: brandLightTheme.colors.text,
            fontSize: 16,
            lineHeight: "24px",
            letterSpacing: 0.9,
            fontWeight: "600"
          },
          labelSmall: {
            fontSize: 14,
            lineHeight: "20px",
            fontWeight: "600"
          },
          button: {
            fontSize: 14,
            lineHeight: "20px",
            fontWeight: "500"
          },
          text: {
            color: brandLightTheme.colors.text,
            fontSize: 13,
            lineHeight: "18px",
            letterSpacing: 0.06
          },
          textSmall: {
            fontSize: 10,
            lineHeight: "14px",
            fontWeight: "400"
          },
          bold: {
            color: brandLightTheme.colors.text,
            fontWeight: "600",
            fontSize: 13,
            lineHeight: "18px",
            letterSpacing: 0.07
          }
        }),
        "typography_a4e47a"
      );
      H1 = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("h1", { ref, ...props, className: cn(styles.h1, className) }, children);
        }
      );
      H2 = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("h2", { ref, ...props, className: cn(styles.h2, className) }, children);
        }
      );
      H3 = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("h3", { ref, ...props, className: cn(styles.h3, className) }, children);
        }
      );
      H4 = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("h4", { ref, ...props, className: cn(styles.h4, className) }, children);
        }
      );
      Text = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("span", { ref, ...props, className: cn(styles.text, className) }, children);
        }
      );
      TextSm = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("span", { ref, ...props, className: cn(styles.textSmall, className) }, children);
        }
      );
      Bold = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("span", { ref, ...props, className: cn(styles.bold, className) }, children);
        }
      );
      Label = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("span", { ref, ...props, className: cn(styles.label, className) }, children);
        }
      );
      LabelSm = import_react_18_27.default.forwardRef(
        ({ children, className, ...props }, ref) => {
          const styles = useStyles2();
          return /* @__PURE__ */ import_react_18_27.default.createElement("span", { ref, ...props, className: cn(styles.labelSmall, className) }, children);
        }
      );
    }
  });

  // styles/components/buttons.tsx
  function makeButton(useStyles85, className) {
    return import_react_18_28.default.forwardRef(
      (props, ref) => {
        const styles = useStyles85();
        return /* @__PURE__ */ import_react_18_28.default.createElement(
          "button",
          {
            ref,
            ...props,
            className: cn(props.className, styles[className])
          }
        );
      }
    );
  }
  var import_react_18_28, colorTransition, useButtonStyles, useFabStyles, useIconButtonStyles, useSecondaryButtonStyles, useRaisedButtonStyles, useLinkButtonStyles, Button, FabButton, IconButton, LinkButton, RaisedButton, SecondaryButton;
  var init_buttons = __esm({
    "styles/components/buttons.tsx"() {
      import_react_18_28 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_spinner_view();
      init_typography();
      init_theme();
      colorTransition = {
        transitionDuration: styleguide.transition.duration.short + "ms",
        transitionProperty: "background-color",
        transitionTimingFunction: "linear"
      };
      useButtonStyles = makeStyles(
        () => ({
          button: {
            fontFamily: FontFamily,
            border: "none",
            outline: "none",
            backgroundColor: "transparent",
            cursor: "pointer",
            padding: 0,
            basedOn: [layout.row, layout.centerCenter]
          }
        }),
        "buttons_b9ffab"
      );
      useFabStyles = makeStyles(
        () => ({
          fab: {
            position: "absolute",
            right: styleguide.gridbase * 6,
            bottom: styleguide.gridbase * 6,
            width: styleguide.gridbase * 7,
            height: styleguide.gridbase * 7,
            zIndex: 100,
            borderRadius: "50%",
            backgroundColor: brandLightTheme.primary[500],
            ...colorTransition,
            ":hover": {
              backgroundColor: brandLightTheme.primary["400"]
            },
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            boxShadow: brandLightTheme.shadows.z2
          }
        }),
        "buttons_f97674"
      );
      useIconButtonStyles = makeStyles(
        () => ({
          iconButton: {
            width: styleguide.gridbase * 5,
            height: styleguide.gridbase * 5,
            borderRadius: "50%",
            backgroundColor: "transparent",
            ...colorTransition,
            ":hover": {
              ":not(disabled)": {
                backgroundColor: brandLightTheme.colors.background
              }
            },
            ":focus": {
              ":not(disabled)": {
                backgroundColor: brandLightTheme.colors.background
              }
            },
            basedOn: [useButtonStyles.button]
          }
        }),
        "buttons_555432"
      );
      useSecondaryButtonStyles = makeStyles(
        () => ({
          secondaryButton: {
            padding: styleguide.gridbase,
            boxSizing: "border-box",
            height: styleguide.gridbase * 5,
            borderRadius: 4,
            color: brandLightTheme.colors.text,
            border: `1px solid ${brandLightTheme.colors.background}`,
            backgroundColor: brandLightTheme.colors.background[0],
            fontSize: 14,
            fontWeight: 500,
            fontStyle: "normal",
            fontStretch: "normal",
            lineHeight: 1.14,
            letterSpacing: "normal",
            ...colorTransition,
            ":hover": {
              ":not(disabled)": {
                backgroundColor: brandLightTheme.mono.m2
              }
            },
            ":disabled": {
              backgroundColor: brandLightTheme.mono.m2,
              color: brandLightTheme.colors.placeholderText,
              cursor: "not-allowed"
            },
            basedOn: [useButtonStyles.button]
          }
        }),
        "buttons_793301"
      );
      useRaisedButtonStyles = makeStyles(
        () => ({
          raisedButton: {
            padding: styleguide.gridbase,
            boxSizing: "border-box",
            height: styleguide.gridbase * 4,
            borderRadius: styleguide.gridbase * 2,
            ...colorTransition,
            basedOn: [useButtonStyles.button, useStyles2.button]
          },
          ["primary" /* Primary */]: {
            color: brandLightTheme.colors.background,
            backgroundColor: brandLightTheme.colors.primaryButton,
            ":hover": {
              ":not(disabled)": {
                backgroundColor: brandLightTheme.primary.p6
              }
            },
            ":disabled": {
              backgroundColor: brandLightTheme.primary.p6,
              cursor: "not-allowed"
            }
          },
          ["secondary" /* Secondary */]: {
            color: brandLightTheme.colors.text,
            backgroundColor: brandLightTheme.colors.secondaryButtonActive,
            ":hover": {
              ":not(disabled)": {
                backgroundColor: brandLightTheme.secondary.s6
              }
            },
            ":disabled": {
              backgroundColor: brandLightTheme.secondary.s6,
              cursor: "not-allowed"
            }
          }
        }),
        "buttons_05a5fe"
      );
      useLinkButtonStyles = makeStyles(
        (theme) => ({
          linkButton: {
            color: theme.primary[500],
            textDecoration: "underline",
            fontSize: 16,
            height: styleguide.gridbase * 3,
            basedOn: [useButtonStyles.button]
          }
        }),
        "buttons_8deff1"
      );
      Button = makeButton(useButtonStyles, "button");
      FabButton = makeButton(useFabStyles, "fab");
      IconButton = makeButton(
        useIconButtonStyles,
        "iconButton"
      );
      LinkButton = makeButton(
        useLinkButtonStyles,
        "linkButton"
      );
      RaisedButton = import_react_18_28.default.forwardRef(function({
        className,
        children,
        disabled,
        color = "primary" /* Primary */,
        processing,
        ...rest
      }, ref) {
        const styles = useRaisedButtonStyles();
        const disAttr = { disabled: disabled || processing };
        return /* @__PURE__ */ import_react_18_28.default.createElement(
          "button",
          {
            ref,
            ...disAttr,
            className: cn(className, styles.raisedButton, styles[color]),
            ...rest
          },
          processing ? /* @__PURE__ */ import_react_18_28.default.createElement(spinner_view_default, { size: styleguide.gridbase * 3, color: "white" }) : children
        );
      });
      SecondaryButton = import_react_18_28.default.forwardRef(function({ className, children, disabled, processing, ...rest }, ref) {
        const styles = useSecondaryButtonStyles();
        const disAttr = { disabled: disabled || processing };
        return /* @__PURE__ */ import_react_18_28.default.createElement(
          "button",
          {
            ref,
            ...disAttr,
            className: cn(className, styles.secondaryButton),
            ...rest
          },
          processing ? /* @__PURE__ */ import_react_18_28.default.createElement(spinner_view_default, { size: styleguide.gridbase * 3, color: "white" }) : children
        );
      });
    }
  });

  // styles/utils/hooks/use-mounted-indicator.ts
  function useMountedIndicator() {
    const isMountedRef = (0, import_react_18_29.useRef)(true);
    (0, import_react_18_29.useEffect)(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    return isMountedRef;
  }
  var import_react_18_29;
  var init_use_mounted_indicator = __esm({
    "styles/utils/hooks/use-mounted-indicator.ts"() {
      import_react_18_29 = __require("https://esm.sh/react@18.2.0");
    }
  });

  // styles/components/transition.tsx
  function useTransitionedOpen(open, animationDuration = styleguide.transition.duration.standard) {
    const [visibility, setVisibility] = (0, import_react_18_210.useState)(
      open ? "ENTERING" /* ENTERING */ : "REMOVED" /* REMOVED */
    );
    const prevOpen = (0, import_react_18_210.useRef)(open);
    const isMounted = useMountedIndicator();
    const animDuration = (0, import_react_18_210.useRef)(animationDuration);
    (0, import_react_18_210.useEffect)(() => {
      let nextState;
      if (!open && prevOpen.current) {
        setVisibility("EXITING" /* EXITING */);
        nextState = "REMOVED" /* REMOVED */;
      } else if (open) {
        setVisibility("ENTERING" /* ENTERING */);
        nextState = "VISIBLE" /* VISIBLE */;
      }
      prevOpen.current = open;
      const timeout = window.setTimeout(() => {
        if (nextState && isMounted.current) {
          setVisibility(nextState);
        }
      }, animDuration.current + 50);
      return () => {
        window.clearTimeout(timeout);
      };
    }, [open, isMounted]);
    return [visibility, isMounted];
  }
  function useTransitioningChildren(children, duration3) {
    const timers = (0, import_react_18_210.useRef)(new TimersCounter());
    const toArray = (x) => x;
    const [newChildren, setNewChildren] = (0, import_react_18_210.useState)(children);
    const setWrapped = (fn) => setNewChildren((...args) => {
      const r = fn(...args);
      return r;
    });
    (0, import_react_18_210.useEffect)(() => {
      setWrapped((c) => {
        const childArray = toArray(
          children.map((item) => {
            const newProps = {
              transitionState: item.props.transitionState || "VISIBLE" /* VISIBLE */
            };
            if (c.every((x) => x.key !== item.key)) {
              newProps.transitionState = "ENTERING" /* ENTERING */;
              const timerId = window.setTimeout(() => {
                setWrapped(
                  (things) => things.map((i) => {
                    if (i.key !== item.key) {
                      return i;
                    }
                    timers.current.removeTimer(item.key);
                    return import_react_18_210.default.cloneElement(i, {
                      transitionState: "VISIBLE" /* VISIBLE */
                    });
                  })
                );
              }, duration3);
              timers.current.addTimer(item.key, timerId, "enter");
            }
            const e = import_react_18_210.default.cloneElement(item, newProps);
            return e;
          })
        );
        c.forEach((existing, index) => {
          const newItem = childArray.find((x) => {
            return x.key === existing.key;
          });
          if (newItem) {
            return;
          }
          console.log("removing ", existing);
          if (existing.props.transitionState === "VISIBLE" /* VISIBLE */ || existing.props.transitionState === "ENTERING" /* ENTERING */) {
            existing = import_react_18_210.default.cloneElement(existing, {
              transitionState: "EXITING" /* EXITING */
            });
            const timerId = window.setTimeout(() => {
              setWrapped(
                (c2) => c2.filter((x) => {
                  console.log(x.key, existing.key);
                  return x.key !== existing.key;
                })
              );
              timers.current.removeTimer(existing.key);
            }, duration3);
            timers.current.addTimer(existing.key, timerId, "exit");
          }
          childArray.splice(index, 0, existing);
        });
        return childArray;
      });
    }, [children, duration3]);
    return newChildren;
  }
  function TransitionGroup({
    children,
    duration: duration3 = styleguide.transition.duration.standard + 200
  }) {
    const newChildren = useTransitioningChildren(children, duration3);
    return /* @__PURE__ */ import_react_18_210.default.createElement(import_react_18_210.default.Fragment, null, newChildren);
  }
  var import_react_18_210, useStyles3, TimersCounter;
  var init_transition = __esm({
    "styles/components/transition.tsx"() {
      import_react_18_210 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_css_objects();
      init_use_mounted_indicator();
      useStyles3 = makeStyles(
        (theme) => ({
          collapseExpand: {
            overflow: "visible",
            transition: `all ${styleguide.transition.duration.standard}ms ${styleguide.transition.timing.standard}`
          },
          visible: {
            // opacity: 1,
            transform: "translateX(0)"
          },
          entering: {
            // opacity: 0,
            minHeight: 0,
            overflow: "hidden"
          },
          exiting: {
            // minHeight: 0,
            overflow: "hidden"
            // opacity: 0,
            // transform: 'translateX(-100%)',
          }
        }),
        "transition_fe904c"
      );
      TimersCounter = class {
        constructor() {
          this._timers = {};
        }
        addTimer(key, timeoutId, action) {
          if (this._timers[key]) {
            this.removeTimer(key);
          }
          this._timers[key] = {
            id: timeoutId,
            action
          };
        }
        removeTimer(key) {
          if (!this._timers[key]) {
            return;
          }
          window.clearTimeout(this._timers[key]);
          delete this._timers[key];
        }
        clear() {
          Object.keys(this._timers).forEach((key) => this.removeTimer(key));
        }
      };
    }
  });

  // styles/components/toast/index.tsx
  function Toast({
    message,
    dismiss,
    transitionState = ""
  }) {
    const styles = useStyles4();
    const [processing, setProcessing] = (0, import_react_18_211.useState)(false);
    const onClick = () => {
      setProcessing(true);
      Promise.resolve(message.action.fn(dismiss)).finally(
        () => setProcessing(false)
      );
    };
    return /* @__PURE__ */ import_react_18_211.default.createElement("div", { className: cn(styles.toast, styles[transitionState.toLowerCase()]) }, /* @__PURE__ */ import_react_18_211.default.createElement("span", null, message.text), /* @__PURE__ */ import_react_18_211.default.createElement("div", { className: cn(layout.flexSpacer) }), message.action && /* @__PURE__ */ import_react_18_211.default.createElement(
      Button,
      {
        className: cn(styles.toastButton),
        onClick,
        disabled: processing
      },
      message.action.text
    ));
  }
  function ToastsView({ messages, dismiss }) {
    const styles = useStyles4();
    return import_react_dom_18_22.default.createPortal(
      /* @__PURE__ */ import_react_18_211.default.createElement("div", { className: cn(styles.toastList) }, /* @__PURE__ */ import_react_18_211.default.createElement(TransitionGroup, null, messages.map((msg) => /* @__PURE__ */ import_react_18_211.default.createElement(Toast, { message: msg, dismiss: () => dismiss(msg), key: msg.id })))),
      window.document.getElementById("root")
    );
  }
  function ToastProvider({ children }) {
    const [messages, setMessages] = (0, import_react_18_211.useState)([]);
    let mounted = (0, import_react_18_211.useRef)(true);
    (0, import_react_18_211.useEffect)(() => {
      return () => {
        mounted.current = false;
      };
    }, []);
    const presentToast = (0, import_react_18_211.useCallback)((toastInfo) => {
      if (!mounted.current) {
        return () => {
        };
      }
      if (!toastInfo.id) {
        toastInfo.id = uniqueId();
      }
      setMessages((msgs) => [...msgs, toastInfo]);
      if (toastInfo.duration) {
        window.setTimeout(() => {
          dismiss(toastInfo);
        }, toastInfo.duration);
      }
      return () => dismiss(toastInfo);
    }, []);
    const dismiss = (toastInfo) => {
      if (!mounted) {
        return;
      }
      setMessages((msgs) => msgs.filter((x) => x !== toastInfo));
    };
    return /* @__PURE__ */ import_react_18_211.default.createElement(
      toastContext.Provider,
      {
        value: {
          displayToast: presentToast
        }
      },
      children,
      /* @__PURE__ */ import_react_18_211.default.createElement(ToastsView, { messages, dismiss })
    );
  }
  var import_react_18_211, import_react_dom_18_22, enterAnimation, exitAnimation, exitAnimationLast, useStyles4, toastContext, useToastController;
  var init_toast = __esm({
    "styles/components/toast/index.tsx"() {
      import_react_18_211 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_dom_18_22 = __toESM(__require("https://esm.sh/react-dom@18.2.0"));
      init_css_objects();
      init_common();
      init_styleguide();
      init_layout();
      init_buttons();
      init_transition();
      enterAnimation = keyframes(
        {
          from: {
            transform: "translateY(100%)"
          },
          to: {
            transform: "translateY(0)"
          }
        },
        "toast_a27e92"
      );
      exitAnimation = keyframes(
        {
          from: {
            transform: "translateX(0)",
            opacity: 1
          },
          to: {
            transform: "translateX(-100%)",
            opacity: 0
          }
        },
        "toast_a00e2d"
      );
      exitAnimationLast = keyframes(
        {
          from: {
            transform: "translateX(0)",
            opacity: 1
          },
          to: {
            transform: "translateY(100%)",
            opacity: 0
          }
        },
        "toast_62f7a9"
      );
      useStyles4 = makeStyles(
        (theme) => ({
          toastList: {
            position: "absolute",
            bottom: styleguide.gridbase * 8,
            left: styleguide.gridbase * 8,
            zIndex: 10
          },
          toast: {
            color: theme.background[0],
            paddingLeft: styleguide.gridbase * 3,
            borderRadius: 6,
            alignItems: "center",
            backgroundColor: theme.background[800],
            boxSizing: "border-box",
            height: styleguide.gridbase * 7,
            width: styleguide.gridbase * 57,
            animation: `${enterAnimation} ${styleguide.transition.duration.standard}ms ${styleguide.transition.timing.standard} forwards`,
            boxShadow: theme.shadows.z2,
            basedOn: [layout.row]
          },
          toastButton: {
            color: theme.primary[500],
            padding: styleguide.gridbase * 3
          },
          ["EXITING" /* EXITING */.toLowerCase()]: {
            animation: `${exitAnimation} ${styleguide.transition.duration.standard}ms ${styleguide.transition.timing.standard} forwards`,
            ":last-child": {
              animation: `${exitAnimationLast} ${styleguide.transition.duration.standard}ms ${styleguide.transition.timing.standard} forwards`
            }
          }
        }),
        "toast_f4e0ae"
      );
      toastContext = import_react_18_211.default.createContext({
        displayToast: (x) => {
          return () => {
          };
        }
      });
      useToastController = () => (0, import_react_18_211.useContext)(toastContext);
    }
  });

  // styles/index.ts
  var init_styles = __esm({
    "styles/index.ts"() {
      init_layout();
      init_styleguide();
    }
  });

  // logging/entry.ts
  function SeverityFromCode(code) {
    switch (code) {
      case SeverityCodes.EMERGENCY:
        return "EMERGENCY";
      case SeverityCodes.ALERT:
        return "ALERT";
      case SeverityCodes.CRITICAL:
        return "CRITICAL";
      case SeverityCodes.ERROR:
        return "ERROR";
      case SeverityCodes.WARNING:
        return "WARNING";
      case SeverityCodes.NOTICE:
        return "NOTICE";
      case SeverityCodes.INFO:
        return "INFO";
      case SeverityCodes.DEBUG:
        return "DEBUG";
      case SeverityCodes.DEFAULT:
      default:
        return "DEFAULT";
    }
  }
  function normalizeLogEntry(e) {
    const res = e;
    res.severityCode = SeverityCodes[e.severity];
    res.timestamp = /* @__PURE__ */ new Date();
    res.logId = uniqueId2();
    res.t_denoVersion = Deno.version.deno;
    res.t_v8Version = Deno.version.v8;
    res.t_tsVersion = Deno.version.typescript;
    res.t_hostname = Deno.hostname();
    res.t_pid = Deno.pid;
    res.t_osBuild = Deno.build;
    res.t_mainUrl = Deno.mainModule;
    res.t_execPath = Deno.execPath();
    for (const field of Object.keys(res)) {
      if (typeof res[field] === "undefined") {
        delete res[field];
      }
    }
    return res;
  }
  function uniqueId2(length = 20) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let autoId = "";
    for (let i = 0; i < length; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return autoId;
  }
  var SeverityCodes;
  var init_entry = __esm({
    "logging/entry.ts"() {
      SeverityCodes = {
        EMERGENCY: 800,
        ALERT: 700,
        CRITICAL: 600,
        ERROR: 500,
        WARNING: 400,
        NOTICE: 300,
        INFO: 200,
        DEBUG: 100,
        DEFAULT: 0
      };
    }
  });

  // logging/stream.ts
  var import_mod, kLogFileExpirationMs, kLogFileMaxSizeBytes, ConsoleLogStream;
  var init_stream = __esm({
    "logging/stream.ts"() {
      import_mod = __require("https://deno.land/std@0.160.0/path/mod.ts");
      init_entry();
      kLogFileExpirationMs = 60 * 60 * 1e3;
      kLogFileMaxSizeBytes = 1024 * 1024 * 100;
      ConsoleLogStream = class {
        constructor(severity = "DEFAULT") {
          this.severity = typeof severity === "number" ? SeverityFromCode(severity) : severity;
        }
        appendEntry(e) {
          let textLog = `[${e.timestamp.toISOString()}] `;
          if (typeof e.message === "string") {
            textLog += e.message + ": ";
          }
          textLog += JSON.stringify(e, null, 2);
          switch (e.severity) {
            case "EMERGENCY":
            case "ALERT":
            case "CRITICAL":
            case "ERROR":
              console.error(textLog);
              throw new Error(textLog);
            case "WARNING":
            case "NOTICE":
              console.warn(textLog);
              break;
            case "INFO":
            case "DEFAULT":
              console.log(textLog);
              break;
            case "DEBUG":
              console.debug(textLog);
              break;
          }
        }
      };
    }
  });

  // logging/log.ts
  function setGlobalLoggerStreams(streams) {
    gLogStreams = streams;
  }
  function resetGlobalLoggerStreams() {
    gLogStreams = kDefaultLoggerStreams;
  }
  function log(entry, outputStreams = gLogStreams) {
    if (SeverityCodes[entry.severity] >= gLogLevel) {
      const e = normalizeLogEntry(entry);
      for (const stream of outputStreams) {
        stream.appendEntry(e);
      }
    }
  }
  var kDefaultLoggerStreams, gLogStreams, gLogLevel, GlobalLogger;
  var init_log = __esm({
    "logging/log.ts"() {
      init_entry();
      init_stream();
      kDefaultLoggerStreams = [new ConsoleLogStream()];
      gLogStreams = kDefaultLoggerStreams;
      gLogLevel = SeverityCodes.DEFAULT;
      GlobalLogger = {
        log(entry) {
          log(entry, gLogStreams);
        }
      };
    }
  });

  // base/error.ts
  function notImplemented() {
    const error = new Error("Not Implemented");
    log({ severity: "ERROR", error: "NotImplemented", trace: error.stack });
    throw error;
  }
  function notReached(msg) {
    const error = new Error(msg);
    log({
      severity: "ERROR",
      error: "NotReached",
      message: msg,
      trace: error.stack
    });
    throw error;
  }
  function assert(condition, msg = "Failed assertion") {
    if (!condition) {
      const error = new Error("Failed Assertion");
      log({
        severity: "ERROR",
        error: "FailedAssertion",
        message: msg,
        trace: error.stack
      });
      throw error;
    }
  }
  var init_error = __esm({
    "base/error.ts"() {
      init_log();
    }
  });

  // base/math.ts
  function avg(values) {
    let result = 0;
    let count = 0;
    for (const v of values) {
      result += v;
      ++count;
    }
    return count === 0 ? 0 : result / count;
  }
  function randomInt(min, max) {
    if (min === max)
      return min;
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
  }
  var MovingAverage;
  var init_math = __esm({
    "base/math.ts"() {
      MovingAverage = class {
        constructor(readingsCount) {
          this._readingsCount = readingsCount;
          this._values = [];
        }
        get currentValue() {
          return avg(this._values);
        }
        addValue(v) {
          const values = this._values;
          if (values.length >= this._readingsCount) {
            values.shift();
          }
          values.push(v);
        }
      };
    }
  });

  // base/array.ts
  function equal(arr1, arr2, comparator) {
    if (!!arr1 != !!arr2) {
      return false;
    }
    if (arr1 === null || arr1 === void 0) {
      return true;
    }
    if (arr1.length !== arr2.length) {
      return false;
    }
    for (let i = 0; i < arr1.length; ++i) {
      if (comparator) {
        if (!comparator(arr1[i], arr2[i])) {
          return false;
        }
      } else if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }
  function append(arr, values) {
    for (const v of values) {
      arr.push(v);
    }
    return arr;
  }
  var init_array = __esm({
    "base/array.ts"() {
      init_math();
    }
  });

  // base/comparisons.ts
  function numbersEqual(n1, n2) {
    return Math.abs(n1 - n2) < Number.EPSILON;
  }
  function mapsEqual(m1, m2) {
    if (m1 === m2) {
      return true;
    }
    if (Boolean(m1) !== Boolean(m2)) {
      return false;
    }
    if (!m1) {
      return true;
    }
    if (m1.size !== m2.size) {
      return false;
    }
    for (const [key, value] of m1) {
      if (!deepEqual(value, m2.get(key))) {
        return false;
      }
    }
    return true;
  }
  function objectsEqual(obj1, obj2) {
    if (obj1 === obj2) {
      return true;
    }
    if (!obj1 !== !obj2) {
      return false;
    }
    if (!obj1) {
      return true;
    }
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const k of keys1) {
      if (!deepEqual(obj1[k], obj2[k])) {
        return false;
      }
    }
    return true;
  }
  function setsEqual(s1, s2) {
    if (Boolean(s1) !== Boolean(s2)) {
      return false;
    }
    if (s1.size !== s2.size) {
      return false;
    }
    const s2Copy = new Set(s2);
    for (const v1 of s1) {
      let match = void 0;
      for (const v2 of s2Copy) {
        if (deepEqual(v1, v2)) {
          match = v2;
          break;
        }
      }
      if (match === void 0) {
        return false;
      } else {
        s2Copy.delete(match);
      }
    }
    return true;
  }
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (!a || !b) {
      if (!a && !b) {
        return true;
      }
      return false;
    }
    if (isNumber(a) && isNumber(b)) {
      return numbersEqual(a, b);
    }
    if (isMapLike(a) && isMapLike(b)) {
      return mapsEqual(a, b);
    }
    if (isArray(a) && isArray(b)) {
      return equal(a, b, (x, y) => deepEqual(x, y));
    }
    if (isObject(a) && isObject(b)) {
      return objectsEqual(a, b);
    }
    if (a instanceof Set && b instanceof Set) {
      return setsEqual(a, b);
    }
    return false;
  }
  function isMapLike(v) {
    return v instanceof Map || Boolean(v.__IS_MAP_OBJ);
  }
  function isString(v) {
    return typeof v === "string" || v instanceof String;
  }
  function isNumber(v) {
    return typeof v === "number" || v instanceof Number;
  }
  function isObject(v) {
    return v && typeof v === "object" && Object.getPrototypeOf(v).constructor === Object;
  }
  function isArray(v) {
    return v instanceof Array;
  }
  function isBoolean(v) {
    return v === true || v === false;
  }
  function isUndefined(v) {
    return typeof v === "undefined";
  }
  function isDefined(v) {
    return !isUndefined(v);
  }
  function isNoValue(v) {
    return v === null || isUndefined(v);
  }
  function isImmutable(v) {
    return isString(v) || isNumber(v) || isBoolean(v) || isNoValue(v);
  }
  function isGenerator(obj) {
    return !isNoValue(obj) && typeof obj.next === "function" && typeof obj.throw === "function" && typeof obj.return === "function";
  }
  var init_comparisons = __esm({
    "base/comparisons.ts"() {
      init_array();
    }
  });

  // base/core-types/base.ts
  var init_base = __esm({
    "base/core-types/base.ts"() {
    }
  });

  // base/collections/hash-map.ts
  function _noClone(v) {
    return v;
  }
  var HashSet, HashMap;
  var init_hash_map = __esm({
    "base/collections/hash-map.ts"() {
      HashSet = class {
        constructor(hash, eq, clone2) {
          this._map = /* @__PURE__ */ new Map();
          this._hashFunc = hash;
          this._equalFunc = eq;
          this._cloneFunc = clone2 || _noClone;
        }
        get size() {
          return this._map.size;
        }
        add(v) {
          const key = this._hashFunc(v);
          const map2 = this._map;
          let values = map2.get(key);
          if (values === void 0) {
            values = [this._cloneFunc(v)];
            map2.set(key, values);
            return true;
          }
          const eq = this._equalFunc;
          for (let candidate of values) {
            if (eq(candidate, v)) {
              return false;
            }
          }
          values.push(this._cloneFunc(v));
          return true;
        }
        delete(v) {
          const key = this._hashFunc(v);
          const map2 = this._map;
          const values = map2.get(key);
          if (values === void 0) {
            return false;
          }
          const eq = this._equalFunc;
          const len = values.length;
          for (let i = 0; i < len; ++i) {
            if (eq(values[i], v)) {
              if (values.length === 1) {
                map2.delete(key);
              } else {
                values.splice(i, 1);
              }
              return true;
            }
          }
          return false;
        }
        clear() {
          this._map.clear();
        }
        get(v) {
          const key = this._hashFunc(v);
          const map2 = this._map;
          const values = map2.get(key);
          if (values === void 0) {
            return void 0;
          }
          const eq = this._equalFunc;
          for (let candidate of values) {
            if (eq(candidate, v)) {
              return candidate;
            }
          }
          return void 0;
        }
        has(v) {
          const key = this._hashFunc(v);
          const map2 = this._map;
          const values = map2.get(key);
          if (values === void 0) {
            return false;
          }
          const eq = this._equalFunc;
          for (let candidate of values) {
            if (eq(candidate, v)) {
              return true;
            }
          }
          return false;
        }
        *values() {
          for (const arr of this._map.values()) {
            for (const v of arr) {
              if (this.has(v)) {
                yield v;
              }
            }
          }
        }
        [Symbol.iterator]() {
          return this.values();
        }
      };
      HashMap = class {
        constructor(hash, eq, clone2) {
          let entryClone;
          if (clone2 !== void 0) {
            entryClone = (entry) => {
              const result = { key: clone2(entry.key) };
              if (entry.value !== void 0) {
                result.value = entry.value;
              }
              return result;
            };
          }
          this._set = new HashSet(
            (entry) => hash(entry.key),
            (e1, e2) => eq(e1.key, e2.key),
            entryClone
          );
        }
        get size() {
          return this._set.size;
        }
        get(key) {
          return this._set.get({ key })?.value;
        }
        has(key) {
          return this._set.has({ key });
        }
        *entries() {
          for (const e of this._set) {
            yield [e.key, e.value];
          }
        }
        *keys() {
          for (const e of this._set) {
            yield e.key;
          }
        }
        *values() {
          for (const e of this._set) {
            yield e.value;
          }
        }
        [Symbol.iterator]() {
          return this.entries();
        }
        set(key, value) {
          let e = this._set.get({ key });
          if (e === void 0) {
            e = { key, value };
            this._set.add(e);
          } else {
            e.value = value;
          }
        }
        delete(key) {
          return this._set.delete({ key });
        }
        clear() {
          this._set.clear();
        }
      };
    }
  });

  // base/collections/dict.ts
  function dictToPrimitive(map2) {
    const result = {};
    if (map2 === void 0 || map2.size <= 0) {
      return result;
    }
    for (const k of map2.keys()) {
      result[String(k)] = map2.get(k);
    }
    return result;
  }
  function dictFromPrimitive(map2) {
    return new Map(Object.entries(map2));
  }
  function dictEquals(dic1, dic2, comparer = (v1, v2) => v1 === v2) {
    if (dic1.size !== dic2.size)
      return false;
    for (const [key, value1] of dic1) {
      const value2 = dic2.get(key);
      if (value2 === void 0) {
        return false;
      }
      if (!comparer(value1, value2)) {
        return false;
      }
    }
    return true;
  }
  function isDictionary(val) {
    return val instanceof Map || val instanceof HashMap;
  }
  var init_dict = __esm({
    "base/collections/dict.ts"() {
      init_hash_map();
    }
  });

  // base/core-types/utils.ts
  function getCoreTypeOrUndef(value) {
    if (value === void 0) {
      return 9 /* Undefined */;
    }
    if (value === null) {
      return 3 /* Null */;
    }
    if (typeof value === "string") {
      return 0 /* String */;
    }
    if (typeof value === "number") {
      return 1 /* Number */;
    }
    if (typeof value === "boolean") {
      return 2 /* Boolean */;
    }
    if (value instanceof Date) {
      return 4 /* Date */;
    }
    if (value instanceof Array) {
      return 5 /* Array */;
    }
    if (value instanceof Set) {
      return 7 /* Set */;
    }
    if (isDictionary(value)) {
      return 8 /* Dictionary */;
    }
    if (isGenerator(value)) {
      return 10 /* Generator */;
    }
    if (typeof value === "object") {
      return Object.getPrototypeOf(value).constructor === Object ? 6 /* Object */ : 11 /* ClassObject */;
    }
  }
  function getCoreType(value) {
    const type = getCoreTypeOrUndef(value);
    return type !== void 0 ? type : notReached("Unsupported value type");
  }
  function isClonable(v) {
    return v !== void 0 && typeof v.clone === "function";
  }
  function isComparable(v) {
    return v !== void 0 && typeof v.compareTo === "function";
  }
  function isEquatable(v) {
    return v !== void 0 && typeof v.isEqual === "function";
  }
  function isEncodable(v) {
    if (v === void 0) {
      return false;
    }
    return v.serialize !== void 0;
  }
  function isReadonlyCoreObject(v) {
    return getCoreTypeOrUndef(v) === 6 /* Object */;
  }
  var init_utils = __esm({
    "base/core-types/utils.ts"() {
      init_comparisons();
      init_error();
      init_dict();
      init_base();
    }
  });

  // base/core-types/clone.ts
  function coreValueClone(e, opts) {
    return internalCoreValueClone(e, void 0, opts);
  }
  function coreObjectClone(obj, opts) {
    return internalCoreValueClone(obj, void 0, opts);
  }
  function internalCoreValueClone(e, objectsCache, opts) {
    switch (getCoreType(e)) {
      case 0 /* String */:
      case 1 /* Number */:
      case 2 /* Boolean */:
      case 3 /* Null */:
      case 9 /* Undefined */:
        return e;
      case 4 /* Date */:
        return new Date(e.getTime());
      case 5 /* Array */: {
        let arr = e;
        if (opts !== void 0 && opts.iterableFilter !== void 0) {
          arr = arr.filter(opts.iterableFilter);
        }
        return arr.map((v) => internalCoreValueClone(v, objectsCache, opts));
      }
      case 7 /* Set */: {
        const set = e;
        const result = /* @__PURE__ */ new Set();
        for (const v of set) {
          if (opts !== void 0 && opts.iterableFilter !== void 0) {
            if (!opts.iterableFilter(v))
              continue;
          }
          result.add(internalCoreValueClone(v, objectsCache, opts));
        }
        return result;
      }
      case 6 /* Object */: {
        if (objectsCache === void 0)
          objectsCache = /* @__PURE__ */ new Map();
        const obj = e;
        const cached = objectsCache.get(obj);
        if (cached !== void 0)
          return cached;
        if (opts && opts.objectOverride) {
          const [result2, newObj] = opts.objectOverride(obj);
          if (result2) {
            objectsCache.set(obj, newObj);
            return newObj;
          }
        }
        const result = {};
        for (const k in obj) {
          if (obj.hasOwnProperty(k) && (opts === void 0 || opts.objectFilterFields === void 0 || opts.objectFilterFields(k, obj))) {
            if (opts !== void 0 && opts.fieldCloneOverride !== void 0) {
              result[k] = opts.fieldCloneOverride(obj, k, opts);
            } else {
              result[k] = internalCoreValueClone(obj[k], objectsCache, opts);
            }
          }
        }
        objectsCache.set(obj, result);
        return result;
      }
      case 8 /* Dictionary */: {
        const newMap = /* @__PURE__ */ new Map();
        for (const [k, v] of e) {
          if (opts !== void 0 && opts.fieldCloneOverride !== void 0) {
            newMap.set(k, opts.fieldCloneOverride(e, k, opts));
          } else {
            newMap.set(k, internalCoreValueClone(v, objectsCache, opts));
          }
        }
        return newMap;
      }
      case 10 /* Generator */: {
        const arr = [];
        for (const item of e) {
          if (opts !== void 0 && opts.iterableFilter !== void 0) {
            if (opts.iterableFilter(item)) {
              arr.push(internalCoreValueClone(item, objectsCache, opts));
            }
          } else {
            arr.push(internalCoreValueClone(item, objectsCache, opts));
          }
        }
        return arr;
      }
      case 11 /* ClassObject */:
        if (isClonable(e)) {
          return e.clone(opts);
        }
        if (opts && opts.notClonableExt) {
          const fRes = opts.notClonableExt(e);
          if (fRes !== void 0)
            return fRes;
        }
        throw new Error(`${e?.constructor.name} must be Clonable`);
      default:
        notReached("clone failed");
    }
  }
  var init_clone = __esm({
    "base/core-types/clone.ts"() {
      init_error();
      init_base();
      init_utils();
    }
  });

  // base/hash.ts
  function murmurhash2_32_gc(str, seed) {
    let l = str.length, h = seed ^ l, i = 0, k;
    while (l >= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
      k ^= k >>> 24;
      k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
      h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16) ^ k;
      l -= 4;
      ++i;
    }
    switch (l) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
    }
    h ^= h >>> 13;
    h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
    h ^= h >>> 15;
    return h >>> 0;
  }
  var MurmurHash3, sharedMurmur3;
  var init_hash = __esm({
    "base/hash.ts"() {
      init_math();
      MurmurHash3 = class {
        constructor(seed) {
          if (seed === void 0) {
            seed = randomInt(0, Number.MAX_SAFE_INTEGER);
          }
          this.seed = seed;
          this.h1 = seed;
          this.rem = this.k1 = this.len = 0;
        }
        /**
         * Reset the hash object for reuse
         * @param {number} seed An optional positive integer
         */
        reset(seed) {
          if (seed !== void 0) {
            this.seed = seed;
          }
          this.h1 = this.seed;
          this.rem = this.k1 = this.len = 0;
          return this;
        }
        resetSeed() {
          return this.reset(randomInt(0, Number.MAX_SAFE_INTEGER));
        }
        /**
         * Incrementally add a string to this hash
         *
         * @param {string} key A UTF-16 or ASCII string
         * @return {object} this
         */
        hash(key) {
          let h1, k1, i, top, len;
          len = key.length;
          this.len += len;
          k1 = this.k1;
          i = 0;
          switch (this.rem) {
            case 0:
              k1 ^= len > i ? key.charCodeAt(i++) & 65535 : 0;
            case 1:
              k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 8 : 0;
            case 2:
              k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 16 : 0;
            case 3:
              k1 ^= len > i ? (key.charCodeAt(i) & 255) << 24 : 0;
              k1 ^= len > i ? (key.charCodeAt(i++) & 65280) >> 8 : 0;
          }
          this.rem = len + this.rem & 3;
          len -= this.rem;
          if (len > 0) {
            h1 = this.h1;
            while (1) {
              k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
              h1 ^= k1;
              h1 = h1 << 13 | h1 >>> 19;
              h1 = h1 * 5 + 3864292196 & 4294967295;
              if (i >= len) {
                break;
              }
              k1 = key.charCodeAt(i++) & 65535 ^ (key.charCodeAt(i++) & 65535) << 8 ^ (key.charCodeAt(i++) & 65535) << 16;
              top = key.charCodeAt(i++);
              k1 ^= (top & 255) << 24 ^ (top & 65280) >> 8;
            }
            k1 = 0;
            switch (this.rem) {
              case 3:
                k1 ^= (key.charCodeAt(i + 2) & 65535) << 16;
              case 2:
                k1 ^= (key.charCodeAt(i + 1) & 65535) << 8;
              case 1:
                k1 ^= key.charCodeAt(i) & 65535;
            }
            this.h1 = h1;
          }
          this.k1 = k1;
          return this;
        }
        /**
         * Get the result of this hash.
         * @return {number} The 32-bit hash.
         */
        result() {
          let k1, h1;
          k1 = this.k1;
          h1 = this.h1;
          if (k1 > 0) {
            k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
            h1 ^= k1;
          }
          h1 ^= this.len;
          h1 ^= h1 >>> 16;
          h1 = h1 * 51819 + (h1 & 65535) * 2246770688 & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = h1 * 44597 + (h1 & 65535) * 3266445312 & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        }
      };
      sharedMurmur3 = new MurmurHash3();
    }
  });

  // base/date.ts
  function serializeDate(date) {
    if (date instanceof Date) {
      return date.getTime() / 1e3;
    } else if (isNumber(date)) {
      return date;
    }
    throw new Error("Unsupported date value");
  }
  function deserializeDate(d) {
    if (typeof d === "string") {
      d = parseFloat(d);
    }
    if (typeof d === "number") {
      const r = /* @__PURE__ */ new Date();
      if (d < 1e12) {
        d *= 1e3;
      }
      r.setTime(d);
      return r;
    } else if (d instanceof Date) {
      return d;
    }
    throw new Error("Unsupported date value");
  }
  function formatTimeDiff(date) {
    const now = /* @__PURE__ */ new Date();
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    if (year === now.getFullYear()) {
      if (month === now.getMonth()) {
        const daysDiff = now.getDate() - day;
        if (daysDiff === 0) {
          return "Today";
        }
        if (daysDiff === 1) {
          return "Yesterday";
        }
      }
    }
    return date.toLocaleDateString(void 0, {
      dateStyle: "medium"
    });
  }
  var init_date = __esm({
    "base/date.ts"() {
      init_comparisons();
    }
  });

  // base/core-types/encoding/base-encoder.ts
  function isEncodedSet(v) {
    if (getCoreType(v) === 6 /* Object */) {
      const obj = v;
      if (obj.__t === "S" && obj.__v instanceof Array) {
        return true;
      }
    }
    return false;
  }
  function isEncodedDate(v) {
    if (getCoreType(v) === 6 /* Object */) {
      const obj = v;
      if (obj.__t === "D" && typeof obj.__v === "number") {
        return true;
      }
    }
    return false;
  }
  function isEncodedEncodable(v) {
    if (getCoreType(v) === 6 /* Object */) {
      const obj = v;
      if (obj.__t === "E" && getCoreType(obj.__v) === 6 /* Object */) {
        return true;
      }
    }
    return false;
  }
  var BaseEncoder, JSONBaseEncoder;
  var init_base_encoder = __esm({
    "base/core-types/encoding/base-encoder.ts"() {
      init_comparisons();
      init_date();
      init_dict();
      init_base();
      init_utils();
      BaseEncoder = class {
        constructor(opts) {
          this.objectFilterFields = opts?.objectFilterFields || (() => true);
          this.iterableFilter = opts?.iterableFilter;
        }
        set(key, value, options) {
          if (value === void 0) {
            return;
          }
          this.setPrimitive(
            this.convertKey(key),
            this.convertValue(value, options),
            options
          );
        }
        convertKey(key) {
          return typeof key === "string" ? key : String(key);
        }
        convertValue(value, options) {
          if (this.isNativeValue(value, options)) {
            return value;
          }
          const type = getCoreType(value);
          switch (type) {
            case 0 /* String */:
              return this.convertString(value, options);
            case 1 /* Number */:
              return this.convertNumber(value, options);
            case 2 /* Boolean */:
              return this.convertBoolean(value, options);
            case 3 /* Null */:
              return this.convertNull(options);
            case 9 /* Undefined */:
              return this.convertUndefined(options);
            case 4 /* Date */:
              return this.convertDate(value, options);
            case 5 /* Array */:
              return this.convertArray(value, options);
            case 7 /* Set */:
              return this.convertSet(value, options);
            case 6 /* Object */:
              return this.convertObject(value, options);
            case 11 /* ClassObject */:
              if (isEncodable(value)) {
                return this.convertEncodable(
                  value,
                  options
                );
              }
              throw new Error(`${value?.constructor.name} must implement Encodable`);
            case 8 /* Dictionary */:
              return this.convertDictionary(
                value,
                options
              );
            case 10 /* Generator */:
              return this.convertGenerator(value, options);
          }
        }
      };
      JSONBaseEncoder = class extends BaseEncoder {
        set(key, value, options) {
          if (value === void 0) {
            return;
          }
          this.setPrimitive(
            key,
            this.isNativeValue(value, options) ? value : this.convertValue(value, options),
            options
          );
        }
        isNativeValue(value, options) {
          if (value === void 0 || value === null) {
            return true;
          }
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          if (isEncodable(value)) {
            return false;
          } else if (value instanceof Array) {
            for (const v of value) {
              if (iterableFilter) {
                if (!iterableFilter(v))
                  return false;
              }
              if (!this.isNativeValue(v, options)) {
                return false;
              }
            }
          } else if (value instanceof Set) {
            return false;
          } else if (value instanceof Date) {
            return false;
          } else if (isDictionary(value)) {
            return false;
          } else if (isObject(value)) {
            const obj = value;
            const keyFilter = options?.objectFilterFields || this.objectFilterFields;
            for (const k in obj) {
              if (obj.hasOwnProperty(k)) {
                if (keyFilter && !keyFilter(k, obj)) {
                  return false;
                }
                if (!this.isNativeValue(obj[k], options)) {
                  return false;
                }
              }
            }
          } else if (isGenerator(value)) {
            return false;
          }
          return true;
        }
        convertEncodable(value, options) {
          const encoder = this.newEncoder();
          value.serialize(encoder, options);
          return {
            __t: "E",
            __v: encoder.getOutput()
          };
        }
        convertIterableWithFilter(iterable, iterableFilter, options) {
          const result = [];
          for (const item of iterable) {
            if (iterableFilter(item)) {
              result.push(this.convertValue(item, options));
            }
          }
          return result;
        }
        convertArray(arr, options) {
          if (arr.length === 0) {
            return [];
          }
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          if (iterableFilter) {
            return this.convertIterableWithFilter(arr, iterableFilter, options);
          }
          const result = new Array(arr.length);
          for (let i = 0; i < arr.length; i++) {
            result[i] = this.convertValue(arr[i], options);
          }
          return result;
        }
        // Default implementation returns EncodedSet
        convertSet(set, options) {
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          if (iterableFilter) {
            const arr2 = this.convertIterableWithFilter(set, iterableFilter, options);
            return {
              __t: "S",
              __v: arr2
            };
          }
          const arr = new Array(set.size);
          let i = 0;
          for (const v of set) {
            arr[i] = this.convertValue(v, options);
            i++;
          }
          return {
            __t: "S",
            __v: arr
          };
        }
        convertObject(obj, options) {
          const result = {};
          const keyFilter = options?.objectFilterFields || this.objectFilterFields;
          for (const [k, v] of Object.entries(obj)) {
            if (keyFilter(k, obj)) {
              result[k] = this.convertValue(v, options);
            }
          }
          return result;
        }
        convertNumber(n, _options) {
          return n;
        }
        convertString(str, _options) {
          return str;
        }
        convertBoolean(b, _options) {
          return b;
        }
        convertNull(_options) {
          return null;
        }
        convertUndefined(_options) {
          return null;
        }
        convertDate(date, _options) {
          return {
            __t: "D",
            __v: serializeDate(date)
          };
        }
        convertDictionary(value, _options) {
          return dictToPrimitive(value);
        }
        convertGenerator(g, options) {
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          if (iterableFilter) {
            return this.convertIterableWithFilter(g, iterableFilter, options);
          }
          const arr = [];
          for (const v of g) {
            arr.push(this.convertValue(v, options));
          }
          return arr;
        }
      };
    }
  });

  // external/md5.ts
  function md5cycle(x, k) {
    var a = x[0], b = x[1], c = x[2], d = x[3];
    a = ff(a, b, c, d, k[0], 7, -680876936);
    d = ff(d, a, b, c, k[1], 12, -389564586);
    c = ff(c, d, a, b, k[2], 17, 606105819);
    b = ff(b, c, d, a, k[3], 22, -1044525330);
    a = ff(a, b, c, d, k[4], 7, -176418897);
    d = ff(d, a, b, c, k[5], 12, 1200080426);
    c = ff(c, d, a, b, k[6], 17, -1473231341);
    b = ff(b, c, d, a, k[7], 22, -45705983);
    a = ff(a, b, c, d, k[8], 7, 1770035416);
    d = ff(d, a, b, c, k[9], 12, -1958414417);
    c = ff(c, d, a, b, k[10], 17, -42063);
    b = ff(b, c, d, a, k[11], 22, -1990404162);
    a = ff(a, b, c, d, k[12], 7, 1804603682);
    d = ff(d, a, b, c, k[13], 12, -40341101);
    c = ff(c, d, a, b, k[14], 17, -1502002290);
    b = ff(b, c, d, a, k[15], 22, 1236535329);
    a = gg(a, b, c, d, k[1], 5, -165796510);
    d = gg(d, a, b, c, k[6], 9, -1069501632);
    c = gg(c, d, a, b, k[11], 14, 643717713);
    b = gg(b, c, d, a, k[0], 20, -373897302);
    a = gg(a, b, c, d, k[5], 5, -701558691);
    d = gg(d, a, b, c, k[10], 9, 38016083);
    c = gg(c, d, a, b, k[15], 14, -660478335);
    b = gg(b, c, d, a, k[4], 20, -405537848);
    a = gg(a, b, c, d, k[9], 5, 568446438);
    d = gg(d, a, b, c, k[14], 9, -1019803690);
    c = gg(c, d, a, b, k[3], 14, -187363961);
    b = gg(b, c, d, a, k[8], 20, 1163531501);
    a = gg(a, b, c, d, k[13], 5, -1444681467);
    d = gg(d, a, b, c, k[2], 9, -51403784);
    c = gg(c, d, a, b, k[7], 14, 1735328473);
    b = gg(b, c, d, a, k[12], 20, -1926607734);
    a = hh(a, b, c, d, k[5], 4, -378558);
    d = hh(d, a, b, c, k[8], 11, -2022574463);
    c = hh(c, d, a, b, k[11], 16, 1839030562);
    b = hh(b, c, d, a, k[14], 23, -35309556);
    a = hh(a, b, c, d, k[1], 4, -1530992060);
    d = hh(d, a, b, c, k[4], 11, 1272893353);
    c = hh(c, d, a, b, k[7], 16, -155497632);
    b = hh(b, c, d, a, k[10], 23, -1094730640);
    a = hh(a, b, c, d, k[13], 4, 681279174);
    d = hh(d, a, b, c, k[0], 11, -358537222);
    c = hh(c, d, a, b, k[3], 16, -722521979);
    b = hh(b, c, d, a, k[6], 23, 76029189);
    a = hh(a, b, c, d, k[9], 4, -640364487);
    d = hh(d, a, b, c, k[12], 11, -421815835);
    c = hh(c, d, a, b, k[15], 16, 530742520);
    b = hh(b, c, d, a, k[2], 23, -995338651);
    a = ii(a, b, c, d, k[0], 6, -198630844);
    d = ii(d, a, b, c, k[7], 10, 1126891415);
    c = ii(c, d, a, b, k[14], 15, -1416354905);
    b = ii(b, c, d, a, k[5], 21, -57434055);
    a = ii(a, b, c, d, k[12], 6, 1700485571);
    d = ii(d, a, b, c, k[3], 10, -1894986606);
    c = ii(c, d, a, b, k[10], 15, -1051523);
    b = ii(b, c, d, a, k[1], 21, -2054922799);
    a = ii(a, b, c, d, k[8], 6, 1873313359);
    d = ii(d, a, b, c, k[15], 10, -30611744);
    c = ii(c, d, a, b, k[6], 15, -1560198380);
    b = ii(b, c, d, a, k[13], 21, 1309151649);
    a = ii(a, b, c, d, k[4], 6, -145523070);
    d = ii(d, a, b, c, k[11], 10, -1120210379);
    c = ii(c, d, a, b, k[2], 15, 718787259);
    b = ii(b, c, d, a, k[9], 21, -343485551);
    x[0] = add32(a, x[0]);
    x[1] = add32(b, x[1]);
    x[2] = add32(c, x[2]);
    x[3] = add32(d, x[3]);
  }
  function cmn(q, a, b, x, s, t) {
    a = add32(add32(a, q), add32(x, t));
    return add32(a << s | a >>> 32 - s, b);
  }
  function ff(a, b, c, d, x, s, t) {
    return cmn(b & c | ~b & d, a, b, x, s, t);
  }
  function gg(a, b, c, d, x, s, t) {
    return cmn(b & d | c & ~d, a, b, x, s, t);
  }
  function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
  }
  function init() {
    return [1732584193, -271733879, -1732584194, 271733878, 0, null];
  }
  function update(state, s) {
    let len = s.length;
    if (!state) {
      state = init();
    }
    state[4] += len;
    if (state[5] !== null) {
      s = (state[5] || "") + s;
      state[5] = null;
      len = s.length;
    }
    for (var i = 64; i <= len; i += 64) {
      md5cycle(state, md5blk(s.substring(i - 64, i)));
    }
    state[5] = (state[5] || "") + s.substring(i - 64);
    return state;
  }
  function finalize(state) {
    let n = state[4];
    let s = state[5];
    let i;
    let l;
    if (s !== null && s.length >= 64) {
      state[5] = null;
      state = update(state, s);
      s = state[5];
    }
    const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    if (s !== null) {
      for (i = 0, l = s.length; i < l; i++) {
        tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
      }
    }
    tail[i >> 2] |= 128 << (i % 4 << 3);
    if (i > 55) {
      md5cycle(state, tail);
      for (i = 0; i < 16; i++)
        tail[i] = 0;
    }
    tail[14] = n * 8;
    md5cycle(state, tail);
    state.pop();
    state.pop();
    return hex(state);
  }
  function md5blk(s) {
    var md5blks = [], i;
    for (i = 0; i < 64; i += 4) {
      md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
    }
    return md5blks;
  }
  function rhex(n) {
    var s = "", j = 0;
    for (; j < 4; j++)
      s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
    return s;
  }
  function hex(x) {
    for (var i = 0; i < x.length; i++)
      x[i] = rhex(x[i]);
    return x.join("");
  }
  function add32(a, b) {
    return a + b & 4294967295;
  }
  var hex_chr;
  var init_md5 = __esm({
    "external/md5.ts"() {
      hex_chr = "0123456789abcdef".split("");
    }
  });

  // base/core-types/encoding/checksum.ts
  var ChecksumEncoder, MD5Checksum, Murmur3Checksum;
  var init_checksum = __esm({
    "base/core-types/encoding/checksum.ts"() {
      init_math();
      init_common();
      init_hash();
      init_date();
      init_base_encoder();
      init_utils();
      init_md5();
      ChecksumEncoder = class extends BaseEncoder {
        constructor(opts) {
          super(opts);
          this._data = {};
          this.typeSafe = opts?.typeSafe === true;
          this._defaultOpts = opts;
        }
        newEncoder() {
          return newInstance(this);
        }
        getOutput() {
          const data = this._data;
          const keys = Object.keys(data).sort();
          const typeSafe = this.typeSafe;
          let state = this.newState();
          for (const k of keys) {
            state = this.appendValue(state, typeSafe ? "k" + k : k);
            state = this.appendValue(state, data[k]);
          }
          return this.finalizeState(state);
        }
        getDefaultOpts() {
          return this._defaultOpts;
        }
        setPrimitive(key, value, _options) {
          this._data[key] = value;
        }
        isNativeValue(value, options) {
          const typeSafe = typeof options?.typeSafe === "boolean" ? options.typeSafe : this.typeSafe;
          return typeSafe ? false : typeof value === "string";
        }
        checksumForValue(value, options) {
          return this.checksumForString(this.convertValue(value, options));
        }
        convertValue(value, options) {
          const type = getCoreType(value);
          const converted = super.convertValue(value, options);
          const typeSafe = typeof options?.typeSafe === "boolean" ? options.typeSafe : this.typeSafe;
          return typeSafe ? String(type) + converted : converted;
        }
        convertEncodable(value, options) {
          const encoder = this.newEncoder();
          value.serialize(encoder, options);
          return encoder.getOutput();
        }
        convertSet(set, options) {
          const checksums = [];
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          for (const v of set) {
            if (iterableFilter === void 0 || iterableFilter(v)) {
              checksums.push(this.checksumForValue(v, options));
            }
          }
          checksums.sort();
          return this.convertArray(checksums);
        }
        convertArray(arr, options) {
          const state = this.newState();
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          for (const v of arr) {
            if (iterableFilter === void 0 || iterableFilter(v)) {
              this.appendValue(state, this.convertValue(v, options));
            }
          }
          return this.finalizeState(state);
        }
        convertGenerator(g, options) {
          const state = this.newState();
          const iterableFilter = options?.iterableFilter || this.iterableFilter;
          for (const v of g) {
            if (iterableFilter === void 0 || iterableFilter(v)) {
              this.appendValue(state, this.convertValue(v, options));
            }
          }
          return this.finalizeState(state);
        }
        convertObject(obj, options) {
          const encoder = newInstance(this, {
            ...this.getDefaultOpts(),
            ...options
          });
          const keyFilter = options?.objectFilterFields || this.objectFilterFields;
          for (const [k, v] of Object.entries(obj)) {
            if (keyFilter(k, obj)) {
              encoder.set(k, v);
            }
          }
          return encoder.getOutput();
        }
        convertNumber(n, _options) {
          return String(n);
        }
        convertBoolean(b, _options) {
          return b ? "true" : "false";
        }
        convertString(str, _options) {
          return str;
        }
        convertNull(_options) {
          return "null";
        }
        convertUndefined(_options) {
          return "undefined";
        }
        convertDate(date, _options) {
          return String(serializeDate(date));
        }
        convertDictionary(value, _options) {
          const encoder = newInstance(this);
          for (const [k, v] of value) {
            encoder.set(k, v);
          }
          return encoder.getOutput();
        }
        checksumForString(value, options) {
          return this.finalizeState(
            this.appendValue(this.newState(options), value, options),
            options
          );
        }
      };
      MD5Checksum = class extends ChecksumEncoder {
        newState() {
          return init();
        }
        appendValue(state, value) {
          update(state, value);
          return state;
        }
        finalizeState(state) {
          return finalize(state);
        }
      };
      Murmur3Checksum = class extends ChecksumEncoder {
        constructor(options) {
          if (options === void 0) {
            options = {};
          }
          if (options.seed === void 0) {
            options.seed = randomInt(0, Number.MAX_SAFE_INTEGER);
          }
          super(options);
          this._seed = options.seed;
        }
        newState(options) {
          return new MurmurHash3(options?.seed || this._seed);
        }
        appendValue(state, value, _options) {
          state.hash(value);
          return state;
        }
        finalizeState(state, _options) {
          return String(state.result());
        }
      };
    }
  });

  // base/core-types/encoding/hash.ts
  function encodableValueHash(v, options) {
    return kMurmurEncoder.checksumForValue(v, options);
  }
  var kMurmurEncoder;
  var init_hash2 = __esm({
    "base/core-types/encoding/hash.ts"() {
      init_checksum();
      kMurmurEncoder = new Murmur3Checksum({ typeSafe: false });
    }
  });

  // base/core-types/comparable.ts
  function coreValueCompare(v1, v2, options) {
    if (v1 === v2)
      return 0;
    if (v1 === MinComparableValue) {
      if (v2 === MinComparableValue) {
        return 0;
      }
      return -1;
    }
    if (v2 === MinComparableValue) {
      return 1;
    }
    if (v1 === MaxComparableValue) {
      if (v2 === MaxComparableValue) {
        return 0;
      }
      return 1;
    }
    if (v2 === MaxComparableValue) {
      return -1;
    }
    if (v1 === void 0 && v2 !== void 0) {
      return -1;
    }
    if (v1 !== void 0 && v2 === void 0) {
      return 1;
    }
    if (v1 === null && v2 !== null) {
      return -1;
    }
    if (v1 !== null && v2 === null) {
      return 1;
    }
    if (options?.extendFunc) {
      const extRes = options.extendFunc(v1, v2);
      if (extRes !== void 0)
        return extRes;
    }
    const type1 = getCoreType(v1);
    let type2;
    switch (type1) {
      case 3 /* Null */:
        if (v2 === null)
          return 0;
        break;
      case 9 /* Undefined */:
        if (v2 === void 0)
          return 0;
        break;
      case 2 /* Boolean */:
      case 4 /* Date */:
      case 1 /* Number */:
      case 0 /* String */:
        type2 = getCoreType(v2);
        if (type1 === type2) {
          if (v1 < v2) {
            return -1;
          }
          if (v1 > v2) {
            return 1;
          }
          return 0;
        }
        break;
      case 5 /* Array */:
      case 10 /* Generator */:
        type2 = getCoreType(v2);
        if (type2 === 5 /* Array */ || type2 === 10 /* Generator */) {
          return coreIterableCompare(
            v1,
            v2,
            options
          );
        }
        break;
      case 11 /* ClassObject */: {
        if (isComparable(v1)) {
          if (v2 instanceof v1.constructor) {
            return v1.compare(v2);
          } else if (v1 instanceof v2.constructor) {
            return -1 * v2.compare(v1);
          }
        }
        if (isEquatable(v1) && v1.constructor === v2?.constructor) {
          if (v1.isEqual(v2))
            return 0;
        }
        notReached(
          `Incomparable classes ${v1?.constructor.name} and ${v2?.constructor.name}`
        );
        break;
      }
    }
    const hash1 = encodableValueHash(v1, options);
    const hash2 = encodableValueHash(v2, options);
    if (hash1 > hash2) {
      return 1;
    }
    if (hash1 < hash2) {
      return -1;
    }
    return 0;
  }
  function coreIterableCompare(i1, i2, options) {
    const iter1 = i1[Symbol.iterator]();
    const iter2 = i2[Symbol.iterator]();
    let val1 = iter1.next();
    let val2 = iter2.next();
    const iterableFilter = options && options.iterableFilter;
    while (true) {
      if (iterableFilter) {
        while (val1.done !== true) {
          if (!iterableFilter(val1.value)) {
            val1 = iter1.next();
          } else {
            break;
          }
        }
        while (val2.done !== true) {
          if (!iterableFilter(val2.value)) {
            val2 = iter2.next();
          } else {
            break;
          }
        }
      }
      if (val1.done === true && val2.done !== true) {
        return -1;
      }
      if (val1.done !== true && val2.done === true) {
        return 1;
      }
      if (val1.done === true && val2.done === true) {
        return 0;
      }
      const cmp = coreValueCompare(val1.value, val2.value, options);
      if (cmp !== 0)
        return cmp;
      val1 = iter1.next();
      val2 = iter2.next();
    }
  }
  var MinComparableValue, MaxComparableValue;
  var init_comparable = __esm({
    "base/core-types/comparable.ts"() {
      init_error();
      init_base();
      init_hash2();
      init_utils();
      MinComparableValue = {};
      MaxComparableValue = {};
    }
  });

  // base/set.ts
  function subtract(v1, v2) {
    const s2 = v2 instanceof Set ? v2 : new Set(v2);
    const result = /* @__PURE__ */ new Set();
    for (const v of v1) {
      if (!s2.has(v)) {
        result.add(v);
      }
    }
    return result;
  }
  function equals(v1, v2, filter) {
    const s1 = v1 instanceof Set ? v1 : new Set(v1);
    const s2 = v2 instanceof Set ? v2 : new Set(v2);
    if (filter === void 0 && s1.size !== s2.size) {
      return false;
    }
    let equalsC = 0;
    for (const v of s1) {
      if (filter && !filter(v)) {
        continue;
      }
      if (!s2.has(v)) {
        return false;
      }
      equalsC++;
    }
    if (filter && s2.size > equalsC) {
      for (const v of s2) {
        if (filter(v)) {
          if (!s1.has(v)) {
            return false;
          }
        }
      }
    }
    return true;
  }
  function union(i1, i2, inPlace = false) {
    let result;
    if (inPlace) {
      if (i1) {
        if (i1 instanceof Set) {
          result = i1;
        } else {
          result = new Set(i1);
        }
      } else {
        result = /* @__PURE__ */ new Set();
      }
    } else {
      result = new Set(i1);
    }
    if (i2) {
      for (const v of i2) {
        result.add(v);
      }
    }
    return result;
  }
  function* unionIter2(i1, i2) {
    if (i1 === void 0 || i2 === void 0) {
      const iter = i1 !== void 0 ? i1 : i2;
      if (iter) {
        for (const item of iter) {
          yield item;
        }
      }
      return;
    }
    let set;
    let other;
    if (i1 instanceof Set) {
      set = i1;
      other = i2;
    } else if (i2 instanceof Set) {
      set = i2;
      other = i1;
    } else {
      set = new Set(i1);
      other = i2;
    }
    for (const v of set) {
      yield v;
    }
    for (const v of other) {
      if (!set.has(v)) {
        yield v;
      }
    }
  }
  function map(input, mapper) {
    const result = /* @__PURE__ */ new Set();
    for (const v of input) {
      result.add(mapper(v));
    }
    return result;
  }
  function mapToArray(s, mapper) {
    const result = [];
    for (const v of s) {
      result.push(mapper(v));
    }
    return result;
  }
  function update2(s, iterable) {
    for (const v of iterable) {
      s.add(v);
    }
    return s;
  }
  function from(iterable, mapper) {
    if (!mapper) {
      return new Set(iterable);
    }
    const result = /* @__PURE__ */ new Set();
    for (const v of iterable) {
      result.add(mapper(v));
    }
    return result;
  }
  function hasByValue(s1, v) {
    if (s1.has(v)) {
      return true;
    }
    if (isImmutable(v)) {
      return false;
    }
    for (const x of s1) {
      if (deepEqual(x, v)) {
        return true;
      }
    }
    return false;
  }
  function addByValue(s, v) {
    if (!s) {
      return s;
    }
    if (!(s instanceof Set)) {
      s = new Set(s);
    }
    if (isImmutable(v)) {
      s.add(v);
    } else {
      if (!s.has(v)) {
        let foundMatch = false;
        for (const x of s) {
          if (deepEqual(x, v)) {
            foundMatch = true;
            break;
          }
        }
        if (!foundMatch) {
          s.add(v);
        }
      }
    }
    return s;
  }
  function subtractByValue(s1, s2) {
    if (!(s1 instanceof Set)) {
      s1 = new Set(s1);
    }
    if (!(s2 instanceof Set)) {
      s2 = new Set(s2);
    }
    const result = /* @__PURE__ */ new Set();
    for (const v of s1) {
      if (!hasByValue(s2, v)) {
        result.add(v);
      }
    }
    return result;
  }
  function unionByValue(i1, i2, inPlace = false) {
    const result = inPlace && i1 instanceof Set ? i1 : new Set(i1);
    for (const v of i2) {
      addByValue(result, v);
    }
    return result;
  }
  function toggleMembership(s1, v) {
    if (s1.has(v)) {
      s1.delete(v);
      return false;
    } else {
      s1.add(v);
      return true;
    }
  }
  var init_set = __esm({
    "base/set.ts"() {
      init_comparisons();
    }
  });

  // base/core-types/equals.ts
  function coreIterableEquals(i1, i2, iterableFilter, options) {
    const iter1 = i1[Symbol.iterator]();
    const iter2 = i2[Symbol.iterator]();
    let val1 = iter1.next();
    let val2 = iter2.next();
    while (true) {
      while (val1.done !== true) {
        if (!iterableFilter(val1.value)) {
          val1 = iter1.next();
        } else {
          break;
        }
      }
      while (val2.done !== true) {
        if (!iterableFilter(val2.value)) {
          val2 = iter2.next();
        } else {
          break;
        }
      }
      if (val1.done === true && val2.done !== true || val2.done === true && val1.done !== true) {
        return false;
      }
      if (val1.done === true && val2.done === true) {
        return true;
      }
      if (!coreValueEquals(val1.value, val2.value, options)) {
        return false;
      }
      val1 = iter1.next();
      val2 = iter2.next();
    }
  }
  function setLongMatch(s1, s2, options) {
    let matchCount = 0;
    const iterableFilter = options && options.iterableFilter;
    for (const v1 of s1) {
      if (iterableFilter && !iterableFilter(v1)) {
        continue;
      }
      let foundMatch = false;
      for (const v2 of s2) {
        if (coreValueEquals(v1, v2, options)) {
          foundMatch = true;
          break;
        }
      }
      if (!foundMatch) {
        return -1;
      }
      matchCount++;
    }
    return matchCount;
  }
  function coreValueEquals(e1, e2, options) {
    if (e1 === e2) {
      return true;
    }
    const t1 = getCoreType(e1);
    const t2 = getCoreType(e2);
    if (t1 !== t2) {
      return false;
    }
    switch (t1) {
      case 0 /* String */:
      case 2 /* Boolean */:
      case 3 /* Null */:
      case 9 /* Undefined */:
        return e1 === e2;
      case 1 /* Number */:
        return numbersEqual(e1, e2);
      case 4 /* Date */:
        return numbersEqual(e1.getTime(), e2.getTime());
      case 5 /* Array */: {
        const arr1 = e1;
        const arr2 = e2;
        const iterableFilter = options && options.iterableFilter;
        if (iterableFilter) {
          return coreIterableEquals(arr1, arr2, iterableFilter, options);
        }
        if (arr1.length !== arr2.length) {
          return false;
        }
        for (let i = 0; i < arr1.length; ++i) {
          if (!coreValueEquals(arr1[i], arr2[i], options)) {
            return false;
          }
        }
        return true;
      }
      case 7 /* Set */: {
        const s1 = e1;
        const s2 = e2;
        const iterableFilter = options && options.iterableFilter;
        if (iterableFilter === void 0 && s1.size !== s2.size) {
          return false;
        }
        if (equals(s1, s2, iterableFilter)) {
          return true;
        }
        const matchCount = setLongMatch(s1, s2, options);
        if (matchCount === -1) {
          return false;
        }
        if (iterableFilter && s2.size > matchCount) {
          if (setLongMatch(s2, s1, options) === -1) {
            return false;
          }
        }
        return true;
      }
      case 6 /* Object */: {
        const obj1 = e1;
        const obj2 = e2;
        for (const k in obj1) {
          if (obj1.hasOwnProperty(k) && (options === void 0 || options.objectFilterFields === void 0 || options.objectFilterFields(k, obj1)) && (!obj2.hasOwnProperty(k) || !coreValueEquals(obj1[k], obj2[k], options))) {
            return false;
          }
        }
        for (const k in obj2) {
          if (obj2.hasOwnProperty(k) && (options === void 0 || options.objectFilterFields === void 0 || options.objectFilterFields(k, obj1)) && !obj1.hasOwnProperty(k)) {
            return false;
          }
        }
        return true;
      }
      case 8 /* Dictionary */:
        return dictEquals(
          e1,
          e2
        );
      case 10 /* Generator */: {
        const g1 = e1;
        const g2 = e2;
        const iterableFilter = options && options.iterableFilter;
        if (iterableFilter) {
          return coreIterableEquals(g1, g2, iterableFilter, options);
        }
        while (true) {
          const v1 = g1.next();
          const v2 = g2.next();
          if (v1.done !== v2.done) {
            return false;
          }
          if (v1.done) {
            return true;
          }
          if (!coreValueEquals(v1.value, v2.value, options)) {
            return false;
          }
        }
      }
      case 11 /* ClassObject */: {
        if (isEquatable(e1) && e1.constructor === e2?.constructor) {
          return e1.isEqual(e2);
        }
        if (isComparable(e1) && e1.constructor === e2?.constructor) {
          return e1.compare(e2) === 0;
        }
        throw new Error(
          `${e1?.constructor} and ${e2?.constructor} must be Equatable or Comparable`
        );
      }
    }
  }
  var init_equals = __esm({
    "base/core-types/equals.ts"() {
      init_dict();
      init_base();
      init_utils();
      init_comparisons();
      init_set();
    }
  });

  // base/core-types/index.ts
  var init_core_types = __esm({
    "base/core-types/index.ts"() {
      init_base();
      init_utils();
      init_clone();
      init_comparable();
      init_equals();
    }
  });

  // base/core-types/encoding/utils.ts
  function isDecoderConfig(v) {
    return v !== void 0 && v.hasOwnProperty("decoder");
  }
  var init_utils2 = __esm({
    "base/core-types/encoding/utils.ts"() {
    }
  });

  // base/core-types/encoding/index.ts
  var init_encoding = __esm({
    "base/core-types/encoding/index.ts"() {
      init_utils2();
      init_hash2();
    }
  });

  // base/core-types/encoding/cyclical.ts
  function isEncodedRef(v) {
    if (getCoreType(v) === 6 /* Object */) {
      const obj = v;
      if (typeof obj.__rId === "number") {
        return true;
      }
    }
    return false;
  }
  function isEncodedRefObject(v) {
    if (getCoreType(v) === 6 /* Object */) {
      const obj = v;
      if (getCoreType(obj.__r) === 5 /* Array */ && getCoreType(obj.__d) === 6 /* Object */) {
        return true;
      }
    }
    return false;
  }
  var RefSet, BaseCyclicalEncoder;
  var init_cyclical = __esm({
    "base/core-types/encoding/cyclical.ts"() {
      init_comparisons();
      init_clone();
      init_base();
      init_utils();
      RefSet = class {
        get refValues() {
          return this._secondSet ? this._secondSet : [];
        }
        get hasMultiRef() {
          return this._secondSet !== void 0 && this._secondSet.size > 0;
        }
        set(val) {
          if (this._firstSet === void 0)
            this._firstSet = /* @__PURE__ */ new Set();
          if (!this._firstSet.has(val)) {
            this._firstSet.add(val);
            return;
          }
          if (this._secondSet === void 0)
            this._secondSet = /* @__PURE__ */ new Set();
          this._secondSet.add(val);
        }
      };
      BaseCyclicalEncoder = class {
        set(key, value, options) {
          if (isObject(value)) {
            const refSet = new RefSet();
            this.fillRefs(refSet, value, options);
            if (refSet.hasMultiRef) {
              const refsMap = /* @__PURE__ */ new Map();
              let refId = this.initRefId;
              for (const ref of refSet.refValues) {
                refsMap.set(ref, refId);
                refId = this.nextRefId(refId);
              }
              const refData = coreValueClone(value, {
                objectOverride: (obj) => {
                  const refId2 = refsMap.get(obj);
                  if (refId2 !== void 0) {
                    return [true, this.convertRef(refId2, options)];
                  }
                  return [false, void 0];
                },
                objectFilterFields: options?.objectFilterFields,
                iterableFilter: options?.iterableFilter
              });
              value = {
                __r: this.convertRefsMap(refsMap, options),
                __d: refData
              };
            }
          }
          this.encoder.set(key, value, options);
        }
        fillRefs(set, value, options) {
          const type = getCoreType(value);
          switch (type) {
            case 5 /* Array */:
            case 7 /* Set */:
              for (const item of value) {
                const iterableFilter = options && options.iterableFilter;
                if (iterableFilter) {
                  if (!iterableFilter(item))
                    continue;
                }
                this.fillRefs(set, item, options);
              }
              break;
            case 8 /* Dictionary */:
              for (const [_, v] of value) {
                this.fillRefs(set, v);
              }
              break;
            case 6 /* Object */:
              if (!isEncodedRef(value)) {
                set.set(value);
                for (const [k, v] of Object.entries(value)) {
                  this.fillRefs(set, v);
                }
              }
              break;
          }
        }
        getOutput() {
          return this.encoder.getOutput();
        }
      };
    }
  });

  // base/core-types/encoding/json.ts
  var JSONEncoder, JSONCyclicalEncoder, JSONDecoder, JSONCyclicalDecoder;
  var init_json = __esm({
    "base/core-types/encoding/json.ts"() {
      init_base();
      init_utils();
      init_base_encoder();
      init_cyclical();
      init_common();
      init_date();
      JSONEncoder = class extends JSONBaseEncoder {
        constructor() {
          super();
          this._encodedObj = {};
        }
        getOutput() {
          return this._encodedObj;
        }
        newEncoder() {
          return newInstance(this);
        }
        static toJS(value) {
          const encoder = new this();
          return encoder.convertValue(value);
        }
        setPrimitive(key, value, _options) {
          this._encodedObj[key] = value;
        }
      };
      JSONCyclicalEncoder = class extends BaseCyclicalEncoder {
        constructor() {
          super();
          this._encoder = new JSONEncoder();
        }
        get encoder() {
          return this._encoder;
        }
        get initRefId() {
          return 0;
        }
        nextRefId(prev) {
          return prev + 1;
        }
        convertRef(refId, _options) {
          const ref = {
            __rId: refId
          };
          return ref;
        }
        convertRefsMap(map2, options) {
          const refs = Array.from(map2.entries()).sort((a, b) => a[1] - b[1]).map((e) => this._encoder.convertValue(e[0], options));
          return refs;
        }
        newEncoder() {
          return new JSONCyclicalEncoder();
        }
        static serialize(obj) {
          const encoder = new JSONCyclicalEncoder();
          obj.serialize(encoder);
          return encoder.getOutput();
        }
      };
      JSONDecoder = class {
        constructor(encodedValue) {
          this._data = encodedValue || {};
        }
        get(key, defaultValue) {
          if (!this.has(key)) {
            return defaultValue;
          }
          const val = this._data[key];
          if (!this.needDecode(val)) {
            return val;
          }
          return this.decodeValue(this._data[key]);
        }
        needDecode(value) {
          if (value instanceof Array) {
            for (const item of value) {
              if (this.needDecode(item)) {
                return true;
              }
            }
          }
          if (isEncodedSet(value)) {
            return true;
          }
          if (isEncodedDate(value)) {
            return true;
          }
          if (isEncodedEncodable(value)) {
            return true;
          }
          if (getCoreType(value) === 6 /* Object */) {
            for (const val of Object.values(value)) {
              if (this.needDecode(val)) {
                return true;
              }
            }
          }
          return false;
        }
        has(key) {
          return this._data.hasOwnProperty(key);
        }
        getDecoder(key, offset2) {
          let value = this.get(key);
          if (offset2 !== void 0 && value instanceof Array) {
            value = value[offset2];
          }
          if (value instanceof JSONDecoder) {
            return value;
          }
          return newInstance(this, value);
        }
        decodeValue(value) {
          if (value instanceof Array) {
            return value.map((v) => this.decodeValue(v));
          }
          if (isEncodedSet(value)) {
            const set = /* @__PURE__ */ new Set();
            for (const v of value.__v) {
              set.add(this.decodeValue(v));
            }
            return set;
          }
          if (isEncodedDate(value)) {
            return deserializeDate(value.__v);
          }
          if (isEncodedEncodable(value)) {
            return newInstance(this, value.__v);
          }
          if (getCoreType(value) === 6 /* Object */) {
            return this.decodeObject(value);
          }
          return value;
        }
        decodeObject(jsonObj) {
          const obj = {};
          for (const [k, v] of Object.entries(jsonObj)) {
            obj[k] = this.decodeValue(v);
          }
          return obj;
        }
      };
      JSONCyclicalDecoder = class extends JSONDecoder {
        constructor(encodedValue) {
          super(encodedValue);
        }
        needDecode(value) {
          if (isEncodedRefObject(value)) {
            return true;
          }
          return super.needDecode(value);
        }
        decodeValue(value) {
          if (isEncodedRefObject(value)) {
            if (!this._tempRefs)
              this._tempRefs = [];
            this._tempRefs.push(value.__r);
            const obj = this.decodeObject(value.__d);
            this._tempRefs.pop();
            return obj;
          }
          return super.decodeValue(value);
        }
        decodeObject(jsonObj) {
          if (isEncodedRef(jsonObj) && this._tempRefs) {
            const refs = this._tempRefs[this._tempRefs.length - 1];
            return refs[jsonObj.__rId];
          }
          return super.decodeObject(jsonObj);
        }
      };
    }
  });

  // cfds/change/index.ts
  var Change;
  var init_change = __esm({
    "cfds/change/index.ts"() {
      init_error();
      init_encoding();
      Change = class {
        constructor(config) {
          if (isDecoderConfig(config)) {
            assert(config.decoder.get("changeType") === this.getType());
          }
        }
        serialize(encoder, _options) {
          encoder.set("changeType", this.getType());
        }
      };
    }
  });

  // cfds/change/field-change.ts
  var FieldChange;
  var init_field_change = __esm({
    "cfds/change/field-change.ts"() {
      init_error();
      init_types();
      init_encoding();
      init_change();
      FieldChange = class extends Change {
        constructor(config) {
          super(config);
          if (isDecoderConfig(config)) {
            const decoder = config.decoder;
            this.operation = decoder.get("operation");
            this.valueType = decoder.get("vType");
            const typeOP = getTypeOperations(this.valueType);
            this.value = typeOP.deserialize(decoder.get("value"));
          } else {
            this.operation = config.operation;
            this.valueType = config.valueType;
            const typeOP = getTypeOperations(this.valueType);
            assert(
              typeOP.validate(config.value),
              `Invalid Field value for type: ${this.valueType}`
            );
            this.value = config.value;
          }
        }
        getType() {
          return "fd";
        }
        isEqual(other) {
          if (this.constructor !== other.constructor) {
            return false;
          }
          if (this.operation !== other.operation) {
            return false;
          }
          if (this.valueType !== other.valueType) {
            return false;
          }
          return valueTypeEquals(this.valueType, this.value, other.value);
        }
        serialize(encoder, _options) {
          super.serialize(encoder, _options);
          encoder.set("operation", this.operation);
          encoder.set("vType", this.valueType);
          const typeOP = getTypeOperations(this.valueType);
          typeOP.serialize("value", this.value, encoder);
        }
        static insert(value, valueType) {
          return new FieldChange({
            operation: 1 /* Insert */,
            value,
            valueType
          });
        }
        static delete(value, valueType) {
          return new FieldChange({
            operation: -1 /* Delete */,
            value,
            valueType
          });
        }
      };
    }
  });

  // cfds/base/types/core-type.ts
  var CoreTypeOperations;
  var init_core_type = __esm({
    "cfds/base/types/core-type.ts"() {
      init_field_change();
      init_core_types();
      CoreTypeOperations = class {
        constructor(encType, valueType) {
          this._coreType = encType;
          this._valueType = valueType;
        }
        get valueType() {
          return this._valueType;
        }
        normalize(value) {
          return value;
        }
        fillRefs(refs, value) {
        }
        validate(value) {
          return getCoreTypeOrUndef(value) === this._coreType;
        }
        equals(val1, val2, options) {
          return coreValueEquals(val1, val2);
        }
        clone(value) {
          return coreValueClone(value);
        }
        serialize(key, value, encoder, options) {
          encoder.set(key, value);
        }
        deserialize(value, options) {
          return value;
        }
        valueAddedDiff(value2, options) {
          return FieldChange.insert(value2, this._valueType);
        }
        valueRemovedDiff(value1, options) {
          return FieldChange.delete(value1, this._valueType);
        }
        needGC(value) {
          return false;
        }
        gc(value) {
          return void 0;
        }
        rewriteRefs(keyMapping, value, deleteRefs) {
          if (deleteRefs && deleteRefs.has(value)) {
            return void 0;
          }
          return keyMapping.get(value) || value;
        }
      };
    }
  });

  // cfds/base/types/map-type.ts
  var MapTypeOperations;
  var init_map_type = __esm({
    "cfds/base/types/map-type.ts"() {
      init_dict();
      init_core_type();
      init_field_change();
      init_core_types();
      MapTypeOperations = class extends CoreTypeOperations {
        constructor(isRef, valueType) {
          super(8 /* Dictionary */, valueType);
          this.isRef = isRef;
        }
        patch(curValue, changes, options) {
          for (const change of changes) {
            if (change instanceof FieldChange) {
              if (change.operation === 1 /* Insert */) {
                curValue = this.patchInsert(curValue, change);
              } else if (change.operation === -1 /* Delete */) {
                curValue = this.patchDelete(curValue, change);
              }
            }
          }
          return curValue;
        }
        patchInsert(curMap, change) {
          if (!curMap) {
            curMap = this.createMap();
          }
          for (const [k, v] of change.value) {
            curMap.set(k, v);
          }
          return curMap;
        }
        patchDelete(curMap, change) {
          if (curMap === void 0)
            return curMap;
          for (const [k, v] of change.value) {
            const curValue = curMap.get(k);
            if (coreValueEquals(curValue, v)) {
              curMap.delete(k);
            }
          }
          if (!curMap.size) {
            return void 0;
          }
          return curMap;
        }
        valueChangedDiff(map1, map2, options) {
          map1 = map1 || this.createMap();
          map2 = map2 || this.createMap();
          const insertMap = this.createMap();
          const deleteMap = this.createMap();
          for (const [key, value1] of map1) {
            if (!map2.has(key)) {
              deleteMap.set(key, value1);
              continue;
            }
            if (!coreValueEquals(value1, map2.get(key))) {
              insertMap.set(key, map2.get(key));
            }
          }
          for (const [key, value2] of map2) {
            if (!map1.has(key)) {
              insertMap.set(key, value2);
            }
          }
          if (insertMap.size === 0 && deleteMap.size === 0)
            return;
          const changes = [];
          if (insertMap.size > 0) {
            changes.push(FieldChange.insert(insertMap, this.valueType));
          }
          if (deleteMap.size > 0) {
            changes.push(FieldChange.delete(deleteMap, this.valueType));
          }
          return changes;
        }
        deserialize(value, options) {
          const prim = value;
          const dict = dictFromPrimitive(prim);
          const newMap = this.createMap();
          for (const [k, v] of dict) {
            newMap.set(k, v);
          }
          return newMap;
        }
        isEmpty(value) {
          return value.size === 0;
        }
        createMap() {
          return /* @__PURE__ */ new Map();
        }
        gc(value) {
          return void 0;
        }
        fillRefs(refs, dict) {
          if (this.isRef && dict !== void 0) {
            for (const [key, value] of dict) {
              if (typeof key === "string") {
                refs.add(key);
              }
              if (typeof value === "string") {
                refs.add(value);
              }
            }
          }
        }
        rewriteRefs(keyMapping, dict, deleteRefs) {
          if (!this.isRef) {
            return dict;
          }
          const result = /* @__PURE__ */ new Map();
          for (const [key, value] of dict) {
            if (deleteRefs?.has(key) || deleteRefs?.has(value)) {
              continue;
            }
            result.set(
              keyMapping.get(key) || key,
              keyMapping.get(value) || value
            );
          }
          return result;
        }
      };
    }
  });

  // cfds/base/types/primitive-type.ts
  var PrimitiveTypeOperations;
  var init_primitive_type = __esm({
    "cfds/base/types/primitive-type.ts"() {
      init_types();
      init_core_type();
      init_field_change();
      PrimitiveTypeOperations = class extends CoreTypeOperations {
        patch(curValue, changes, options) {
          for (const change of changes) {
            if (change instanceof FieldChange) {
              if (change.operation === 1 /* Insert */) {
                curValue = change.value;
              } else if (change.operation === -1 /* Delete */) {
                curValue = valueTypeEquals(change.valueType, curValue, change.value) ? void 0 : curValue;
              }
            }
          }
          return curValue;
        }
        valueChangedDiff(value1, value2, options) {
          if (!this.equals(value1, value2, options)) {
            return FieldChange.insert(value2, this.valueType);
          }
        }
        isEmpty(value) {
          return false;
        }
      };
    }
  });

  // cfds/base/types/set-type.ts
  var SetTypeOperations;
  var init_set_type = __esm({
    "cfds/base/types/set-type.ts"() {
      init_core_type();
      init_field_change();
      init_core_types();
      init_set();
      SetTypeOperations = class extends CoreTypeOperations {
        constructor(isRef, valueType) {
          super(7 /* Set */, valueType);
          this.isRef = isRef;
        }
        patch(curValue, changes, options) {
          for (const change of changes) {
            if (change instanceof FieldChange) {
              if (change.operation === 1 /* Insert */) {
                curValue = this.patchInsert(curValue, change);
              } else if (change.operation === -1 /* Delete */) {
                curValue = this.patchDelete(curValue, change);
              }
            }
          }
          return curValue;
        }
        patchInsert(curValue, change) {
          curValue = curValue || /* @__PURE__ */ new Set();
          return unionByValue(curValue, change.value);
        }
        patchDelete(curValue, change) {
          if (curValue === void 0)
            return curValue;
          const newValue = subtractByValue(curValue, change.value);
          return newValue.size > 0 ? newValue : void 0;
        }
        fillRefs(refs, value) {
          if (this.isRef && value && value instanceof Set) {
            for (const val of value) {
              if (typeof val === "string") {
                refs.add(val);
              }
            }
          }
        }
        rewriteRefs(keyMapping, value, deleteRefs) {
          if (!this.isRef) {
            return value;
          }
          const result = /* @__PURE__ */ new Set();
          for (const v of value) {
            if (!deleteRefs?.has(v)) {
              result.add(keyMapping.get(v) || v);
            }
          }
          return result;
        }
        valueChangedDiff(value1, value2, options) {
          const added = subtractByValue(value2, value1);
          const removed = subtractByValue(value1, value2);
          if (added.size === 0 && removed.size === 0) {
            return;
          }
          const changes = [];
          if (added.size) {
            changes.push(FieldChange.insert(added, this.valueType));
          }
          if (removed.size) {
            changes.push(FieldChange.delete(removed, this.valueType));
          }
          return changes;
        }
        isEmpty(value) {
          return value.size === 0;
        }
        deserialize(value, options) {
          const desValue = super.deserialize(value, options);
          if (desValue instanceof Array) {
            return from(desValue, JSON.parse);
          }
          return desValue;
        }
      };
    }
  });

  // cfds/base/types/string-type.ts
  var StringTypeOperations;
  var init_string_type = __esm({
    "cfds/base/types/string-type.ts"() {
      init_types();
      init_core_types();
      init_primitive_type();
      StringTypeOperations = class extends PrimitiveTypeOperations {
        constructor(isRef) {
          super(0 /* String */, isRef ? "ref" /* REF */ : "string" /* STRING */);
          this.isRef = isRef;
        }
        fillRefs(refs, value) {
          if (this.isRef) {
            refs.add(value);
          }
        }
      };
    }
  });

  // external/diff-match-patch.ts
  var kNonAlphaNumericRegex_, kWhitespaceRegex_, kLinebreakRegex_, kBlanklineEndRegex_, kBlanklineStartRegex_, DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL, DiffMatchPatch, Patch;
  var init_diff_match_patch = __esm({
    "external/diff-match-patch.ts"() {
      kNonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
      kWhitespaceRegex_ = /\s/;
      kLinebreakRegex_ = /[\r\n]/;
      kBlanklineEndRegex_ = /\n\r?\n$/;
      kBlanklineStartRegex_ = /^\r?\n\r?\n/;
      DIFF_DELETE = -1 /* Delete */;
      DIFF_INSERT = 1 /* Insert */;
      DIFF_EQUAL = 0 /* Equal */;
      DiffMatchPatch = class {
        constructor() {
          // Defaults.
          // Redefine these in your program to override the defaults.
          // Number of seconds to map a diff before giving up (0 for infinity).
          this.Diff_Timeout = 1;
          // Cost of an empty edit operation in terms of edit characters.
          this.Diff_EditCost = 4;
          // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
          this.Match_Threshold = 0.5;
          // How far to search for a match (0 = exact location, 1000+ = broad match).
          // A match this many characters away from the expected location will add
          // 1.0 to the score (0.0 is a perfect match).
          this.Match_Distance = 1e3;
          // When deleting a large block of text (over ~64 characters), how close do
          // the contents have to be to match the expected contents. (0.0 = perfection,
          // 1.0 = very loose).  Note that Match_Threshold controls how closely the
          // end points of a delete need to match.
          this.Patch_DeleteThreshold = 0.5;
          // Chunk size for context length.
          this.Patch_Margin = 4;
          // The number of bits in an int.
          this.Match_MaxBits = 32;
        }
        /**
         * Find the differences between two texts.  Simplifies the problem by stripping
         * any common prefix or suffix off the texts before diffing.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
         *     then don't run a line-level diff first to identify the changed areas.
         *     Defaults to true, which does a faster, slightly less optimal diff.
         * @param {number=} opt_deadline Optional time when the diff should be complete
         *     by.  Used internally for recursive calls.  Users should set DiffTimeout
         *     instead.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         */
        diff_main(text1, text2, opt_checklines, opt_deadline) {
          if (typeof opt_deadline == "undefined") {
            if (this.Diff_Timeout <= 0) {
              opt_deadline = Number.MAX_VALUE;
            } else {
              opt_deadline = (/* @__PURE__ */ new Date()).getTime() + this.Diff_Timeout * 1e3;
            }
          }
          const deadline = opt_deadline;
          if (text1 == null || text2 == null) {
            throw new Error("Null input. (diff_main)");
          }
          if (text1 == text2) {
            if (text1) {
              return [[DIFF_EQUAL, text1]];
            }
            return [];
          }
          if (typeof opt_checklines == "undefined") {
            opt_checklines = true;
          }
          const checklines = opt_checklines;
          let commonlength = this.diff_commonPrefix(text1, text2);
          const commonprefix = text1.substring(0, commonlength);
          text1 = text1.substring(commonlength);
          text2 = text2.substring(commonlength);
          commonlength = this.diff_commonSuffix(text1, text2);
          const commonsuffix = text1.substring(text1.length - commonlength);
          text1 = text1.substring(0, text1.length - commonlength);
          text2 = text2.substring(0, text2.length - commonlength);
          const diffs = this.diff_compute_(text1, text2, checklines, deadline);
          if (commonprefix) {
            diffs.unshift([DIFF_EQUAL, commonprefix]);
          }
          if (commonsuffix) {
            diffs.push([DIFF_EQUAL, commonsuffix]);
          }
          this.diff_cleanupMerge(diffs);
          return diffs;
        }
        /**
         * Find the differences between two texts.  Assumes that the texts do not
         * have any common prefix or suffix.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {boolean} checklines Speedup flag.  If false, then don't run a
         *     line-level diff first to identify the changed areas.
         *     If true, then run a faster, slightly less optimal diff.
         * @param {number} deadline Time when the diff should be complete by.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_compute_(text1, text2, checklines, deadline) {
          let diffs;
          if (!text1) {
            return [[DIFF_INSERT, text2]];
          }
          if (!text2) {
            return [[DIFF_DELETE, text1]];
          }
          const longtext = text1.length > text2.length ? text1 : text2;
          const shorttext = text1.length > text2.length ? text2 : text1;
          const i = longtext.indexOf(shorttext);
          if (i != -1) {
            diffs = [
              [DIFF_INSERT, longtext.substring(0, i)],
              [DIFF_EQUAL, shorttext],
              [DIFF_INSERT, longtext.substring(i + shorttext.length)]
            ];
            if (text1.length > text2.length) {
              diffs[0][0] = diffs[2][0] = DIFF_DELETE;
            }
            return diffs;
          }
          if (shorttext.length == 1) {
            return [
              [DIFF_DELETE, text1],
              [DIFF_INSERT, text2]
            ];
          }
          const hm = this.diff_halfMatch_(text1, text2);
          if (hm) {
            const text1_a = hm[0];
            const text1_b = hm[1];
            const text2_a = hm[2];
            const text2_b = hm[3];
            const mid_common = hm[4];
            const diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
            const diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
            return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
          }
          if (checklines && text1.length > 100 && text2.length > 100) {
            return this.diff_lineMode_(text1, text2, deadline);
          }
          return this.diff_bisect_(text1, text2, deadline);
        }
        /**
         * Do a quick line-level diff on both strings, then rediff the parts for
         * greater accuracy.
         * This speedup can produce non-minimal diffs.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} deadline Time when the diff should be complete by.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_lineMode_(text1, text2, deadline) {
          const a = this.diff_linesToChars_(text1, text2);
          text1 = a.chars1;
          text2 = a.chars2;
          const linearray = a.lineArray;
          const diffs = this.diff_main(text1, text2, false, deadline);
          this.diff_charsToLines_(diffs, linearray);
          this.diff_cleanupSemantic(diffs);
          diffs.push([DIFF_EQUAL, ""]);
          let pointer = 0;
          let count_delete = 0;
          let count_insert = 0;
          let text_delete = "";
          let text_insert = "";
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                break;
              case DIFF_EQUAL:
                if (count_delete >= 1 && count_insert >= 1) {
                  diffs.splice(
                    pointer - count_delete - count_insert,
                    count_delete + count_insert
                  );
                  pointer = pointer - count_delete - count_insert;
                  const subDiff = this.diff_main(
                    text_delete,
                    text_insert,
                    false,
                    deadline
                  );
                  for (let j = subDiff.length - 1; j >= 0; j--) {
                    diffs.splice(pointer, 0, subDiff[j]);
                  }
                  pointer = pointer + subDiff.length;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = "";
                text_insert = "";
                break;
              default:
                break;
            }
            pointer++;
          }
          diffs.pop();
          return diffs;
        }
        /**
         * Find the 'middle snake' of a diff, split the problem in two
         * and return the recursively constructed diff.
         * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} deadline Time at which to bail if not yet complete.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_bisect_(text1, text2, deadline) {
          const text1_length = text1.length;
          const text2_length = text2.length;
          const max_d = Math.ceil((text1_length + text2_length) / 2);
          const v_offset = max_d;
          const v_length = 2 * max_d;
          const v1 = new Array(v_length);
          const v2 = new Array(v_length);
          for (let x = 0; x < v_length; x++) {
            v1[x] = -1;
            v2[x] = -1;
          }
          v1[v_offset + 1] = 0;
          v2[v_offset + 1] = 0;
          const delta = text1_length - text2_length;
          const front = delta % 2 !== 0;
          let k1start = 0;
          let k1end = 0;
          let k2start = 0;
          let k2end = 0;
          for (let d = 0; d < max_d; d++) {
            if ((/* @__PURE__ */ new Date()).getTime() > deadline) {
              break;
            }
            for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
              const k1_offset = v_offset + k1;
              let x1;
              if (k1 === -d || k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                x1 = v1[k1_offset + 1];
              } else {
                x1 = v1[k1_offset - 1] + 1;
              }
              let y1 = x1 - k1;
              while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) === text2.charAt(y1)) {
                x1++;
                y1++;
              }
              v1[k1_offset] = x1;
              if (x1 > text1_length) {
                k1end += 2;
              } else if (y1 > text2_length) {
                k1start += 2;
              } else if (front) {
                const k2_offset = v_offset + delta - k1;
                if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
                  const x2 = text1_length - v2[k2_offset];
                  if (x1 >= x2) {
                    return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                  }
                }
              }
            }
            for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
              const k2_offset = v_offset + k2;
              let x2;
              if (k2 === -d || k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                x2 = v2[k2_offset + 1];
              } else {
                x2 = v2[k2_offset - 1] + 1;
              }
              let y2 = x2 - k2;
              while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)) {
                x2++;
                y2++;
              }
              v2[k2_offset] = x2;
              if (x2 > text1_length) {
                k2end += 2;
              } else if (y2 > text2_length) {
                k2start += 2;
              } else if (!front) {
                const k1_offset = v_offset + delta - k2;
                if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                  const x1 = v1[k1_offset];
                  const y1 = v_offset + x1 - k1_offset;
                  x2 = text1_length - x2;
                  if (x1 >= x2) {
                    return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                  }
                }
              }
            }
          }
          return [
            [DIFF_DELETE, text1],
            [DIFF_INSERT, text2]
          ];
        }
        /**
         * Given the location of the 'middle snake', split the diff in two parts
         * and recurse.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} x Index of split point in text1.
         * @param {number} y Index of split point in text2.
         * @param {number} deadline Time at which to bail if not yet complete.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_bisectSplit_(text1, text2, x, y, deadline) {
          const text1a = text1.substring(0, x);
          const text2a = text2.substring(0, y);
          const text1b = text1.substring(x);
          const text2b = text2.substring(y);
          const diffs = this.diff_main(text1a, text2a, false, deadline);
          const diffsb = this.diff_main(text1b, text2b, false, deadline);
          return diffs.concat(diffsb);
        }
        /**
         * Split two texts into an array of strings.  Reduce the texts to a string of
         * hashes where each Unicode character represents one line.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
         *     An object containing the encoded text1, the encoded text2 and
         *     the array of unique strings.
         *     The zeroth element of the array of unique strings is intentionally blank.
         * @private
         */
        diff_linesToChars_(text1, text2) {
          const lineArray = [];
          const lineHash = {};
          lineArray[0] = "";
          function diff_linesToCharsMunge_(text) {
            let chars = "";
            let lineStart = 0;
            let lineEnd = -1;
            let lineArrayLength = lineArray.length;
            while (lineEnd < text.length - 1) {
              lineEnd = text.indexOf("\n", lineStart);
              if (lineEnd === -1) {
                lineEnd = text.length - 1;
              }
              let line = text.substring(lineStart, lineEnd + 1);
              if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {
                chars += String.fromCharCode(lineHash[line]);
              } else {
                if (lineArrayLength === maxLines) {
                  line = text.substring(lineStart);
                  lineEnd = text.length;
                }
                chars += String.fromCharCode(lineArrayLength);
                lineHash[line] = lineArrayLength;
                lineArray[lineArrayLength++] = line;
              }
              lineStart = lineEnd + 1;
            }
            return chars;
          }
          let maxLines = 4e4;
          const chars1 = diff_linesToCharsMunge_(text1);
          maxLines = 65535;
          const chars2 = diff_linesToCharsMunge_(text2);
          return { chars1, chars2, lineArray };
        }
        /**
         * Rehydrate the text in a diff from a string of line hashes to real lines of
         * text.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @param {!Array.<string>} lineArray Array of unique strings.
         * @private
         */
        diff_charsToLines_(diffs, lineArray) {
          for (let i = 0; i < diffs.length; i++) {
            const chars = diffs[i][1];
            const text = [];
            for (let j = 0; j < chars.length; j++) {
              text[j] = lineArray[chars.charCodeAt(j)];
            }
            diffs[i][1] = text.join("");
          }
        }
        /**
         * Determine the common prefix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the start of each
         *     string.
         */
        diff_commonPrefix(text1, text2) {
          if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
            return 0;
          }
          let pointermin = 0;
          let pointermax = Math.min(text1.length, text2.length);
          let pointermid = pointermax;
          let pointerstart = 0;
          while (pointermin < pointermid) {
            if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
              pointermin = pointermid;
              pointerstart = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }
        /**
         * Determine the common suffix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the end of each string.
         */
        diff_commonSuffix(text1, text2) {
          if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
            return 0;
          }
          let pointermin = 0;
          let pointermax = Math.min(text1.length, text2.length);
          let pointermid = pointermax;
          let pointerend = 0;
          while (pointermin < pointermid) {
            if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
              pointermin = pointermid;
              pointerend = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }
        /**
         * Determine if the suffix of one string is the prefix of another.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the end of the first
         *     string and the start of the second string.
         * @private
         */
        diff_commonOverlap_(text1, text2) {
          const text1_length = text1.length;
          const text2_length = text2.length;
          if (text1_length == 0 || text2_length == 0) {
            return 0;
          }
          if (text1_length > text2_length) {
            text1 = text1.substring(text1_length - text2_length);
          } else if (text1_length < text2_length) {
            text2 = text2.substring(0, text1_length);
          }
          const text_length = Math.min(text1_length, text2_length);
          if (text1 == text2) {
            return text_length;
          }
          let best = 0;
          let length = 1;
          while (true) {
            const pattern = text1.substring(text_length - length);
            const found = text2.indexOf(pattern);
            if (found == -1) {
              return best;
            }
            length += found;
            if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
              best = length;
              length++;
            }
          }
        }
        /**
         * Do the two texts share a substring which is at least half the length of the
         * longer text?
         * This speedup can produce non-minimal diffs.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {Array.<string>} Five element Array, containing the prefix of
         *     text1, the suffix of text1, the prefix of text2, the suffix of
         *     text2 and the common middle.  Or null if there was no match.
         * @private
         */
        diff_halfMatch_(text1, text2) {
          if (this.Diff_Timeout <= 0) {
            return null;
          }
          const longtext = text1.length > text2.length ? text1 : text2;
          const shorttext = text1.length > text2.length ? text2 : text1;
          if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
            return null;
          }
          const dmp = this;
          function diff_halfMatchI_(longtext2, shorttext2, i) {
            const seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
            let j = -1;
            let best_common = "";
            let best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
            while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
              const prefixLength = dmp.diff_commonPrefix(
                longtext2.substring(i),
                shorttext2.substring(j)
              );
              const suffixLength = dmp.diff_commonSuffix(
                longtext2.substring(0, i),
                shorttext2.substring(0, j)
              );
              if (best_common.length < suffixLength + prefixLength) {
                best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
                best_longtext_a = longtext2.substring(0, i - suffixLength);
                best_longtext_b = longtext2.substring(i + prefixLength);
                best_shorttext_a = shorttext2.substring(0, j - suffixLength);
                best_shorttext_b = shorttext2.substring(j + prefixLength);
              }
            }
            if (best_common.length * 2 >= longtext2.length) {
              return [
                best_longtext_a,
                best_longtext_b,
                best_shorttext_a,
                best_shorttext_b,
                best_common
              ];
            } else {
              return null;
            }
          }
          const hm1 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 4)
          );
          const hm2 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 2)
          );
          let hm;
          if (!hm1 && !hm2) {
            return null;
          } else if (!hm2) {
            hm = hm1;
          } else if (!hm1) {
            hm = hm2;
          } else {
            hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
          }
          let text1_a, text1_b, text2_a, text2_b;
          if (text1.length > text2.length) {
            text1_a = hm[0];
            text1_b = hm[1];
            text2_a = hm[2];
            text2_b = hm[3];
          } else {
            text2_a = hm[0];
            text2_b = hm[1];
            text1_a = hm[2];
            text1_b = hm[3];
          }
          const mid_common = hm[4];
          return [text1_a, text1_b, text2_a, text2_b, mid_common];
        }
        /**
         * Reduce the number of edits by eliminating semantically trivial equalities.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_cleanupSemantic(diffs) {
          let changes = false;
          const equalities = [];
          let equalitiesLength = 0;
          let lastEquality = null;
          let pointer = 0;
          let length_insertions1 = 0;
          let length_deletions1 = 0;
          let length_insertions2 = 0;
          let length_deletions2 = 0;
          while (pointer < diffs.length) {
            if (diffs[pointer][0] == DIFF_EQUAL) {
              equalities[equalitiesLength++] = pointer;
              length_insertions1 = length_insertions2;
              length_deletions1 = length_deletions2;
              length_insertions2 = 0;
              length_deletions2 = 0;
              lastEquality = diffs[pointer][1];
            } else {
              if (diffs[pointer][0] == DIFF_INSERT) {
                length_insertions2 += diffs[pointer][1].length;
              } else {
                length_deletions2 += diffs[pointer][1].length;
              }
              if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2)) {
                diffs.splice(equalities[equalitiesLength - 1], 0, [
                  DIFF_DELETE,
                  lastEquality
                ]);
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                equalitiesLength--;
                equalitiesLength--;
                pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                length_insertions1 = 0;
                length_deletions1 = 0;
                length_insertions2 = 0;
                length_deletions2 = 0;
                lastEquality = null;
                changes = true;
              }
            }
            pointer++;
          }
          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
          this.diff_cleanupSemanticLossless(diffs);
          pointer = 1;
          while (pointer < diffs.length) {
            if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {
              const deletion = diffs[pointer - 1][1];
              const insertion = diffs[pointer][1];
              const overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
              const overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
              if (overlap_length1 >= overlap_length2) {
                if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
                  diffs.splice(pointer, 0, [
                    DIFF_EQUAL,
                    insertion.substring(0, overlap_length1)
                  ]);
                  diffs[pointer - 1][1] = deletion.substring(
                    0,
                    deletion.length - overlap_length1
                  );
                  diffs[pointer + 1][1] = insertion.substring(overlap_length1);
                  pointer++;
                }
              } else {
                if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
                  diffs.splice(pointer, 0, [
                    DIFF_EQUAL,
                    deletion.substring(0, overlap_length2)
                  ]);
                  diffs[pointer - 1][0] = DIFF_INSERT;
                  diffs[pointer - 1][1] = insertion.substring(
                    0,
                    insertion.length - overlap_length2
                  );
                  diffs[pointer + 1][0] = DIFF_DELETE;
                  diffs[pointer + 1][1] = deletion.substring(overlap_length2);
                  pointer++;
                }
              }
              pointer++;
            }
            pointer++;
          }
        }
        /**
         * Look for single edits surrounded on both sides by equalities
         * which can be shifted sideways to align the edit to a word boundary.
         * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_cleanupSemanticLossless(diffs) {
          function diff_cleanupSemanticScore_(one, two) {
            if (!one || !two) {
              return 6;
            }
            const char1 = one.charAt(one.length - 1);
            const char2 = two.charAt(0);
            const nonAlphaNumeric1 = char1.match(kNonAlphaNumericRegex_);
            const nonAlphaNumeric2 = char2.match(kNonAlphaNumericRegex_);
            const whitespace1 = nonAlphaNumeric1 && char1.match(kWhitespaceRegex_);
            const whitespace2 = nonAlphaNumeric2 && char2.match(kWhitespaceRegex_);
            const lineBreak1 = whitespace1 && char1.match(kLinebreakRegex_);
            const lineBreak2 = whitespace2 && char2.match(kLinebreakRegex_);
            const blankLine1 = lineBreak1 && one.match(kBlanklineEndRegex_);
            const blankLine2 = lineBreak2 && two.match(kBlanklineStartRegex_);
            if (blankLine1 || blankLine2) {
              return 5;
            } else if (lineBreak1 || lineBreak2) {
              return 4;
            } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
              return 3;
            } else if (whitespace1 || whitespace2) {
              return 2;
            } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
              return 1;
            }
            return 0;
          }
          let pointer = 1;
          while (pointer < diffs.length - 1) {
            if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
              let equality1 = diffs[pointer - 1][1];
              let edit = diffs[pointer][1];
              let equality2 = diffs[pointer + 1][1];
              const commonOffset = this.diff_commonSuffix(equality1, edit);
              if (commonOffset) {
                const commonString = edit.substring(edit.length - commonOffset);
                equality1 = equality1.substring(0, equality1.length - commonOffset);
                edit = commonString + edit.substring(0, edit.length - commonOffset);
                equality2 = commonString + equality2;
              }
              let bestEquality1 = equality1;
              let bestEdit = edit;
              let bestEquality2 = equality2;
              let bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
              while (edit.charAt(0) === equality2.charAt(0)) {
                equality1 += edit.charAt(0);
                edit = edit.substring(1) + equality2.charAt(0);
                equality2 = equality2.substring(1);
                const score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
                if (score >= bestScore) {
                  bestScore = score;
                  bestEquality1 = equality1;
                  bestEdit = edit;
                  bestEquality2 = equality2;
                }
              }
              if (diffs[pointer - 1][1] != bestEquality1) {
                if (bestEquality1) {
                  diffs[pointer - 1][1] = bestEquality1;
                } else {
                  diffs.splice(pointer - 1, 1);
                  pointer--;
                }
                diffs[pointer][1] = bestEdit;
                if (bestEquality2) {
                  diffs[pointer + 1][1] = bestEquality2;
                } else {
                  diffs.splice(pointer + 1, 1);
                  pointer--;
                }
              }
            }
            pointer++;
          }
        }
        /**
         * Reduce the number of edits by eliminating operationally trivial equalities.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_cleanupEfficiency(diffs) {
          let changes = false;
          const equalities = [];
          let equalitiesLength = 0;
          let lastEquality = null;
          let pointer = 0;
          let pre_ins = 0;
          let pre_del = 0;
          let post_ins = 0;
          let post_del = 0;
          while (pointer < diffs.length) {
            if (diffs[pointer][0] == DIFF_EQUAL) {
              if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {
                equalities[equalitiesLength++] = pointer;
                pre_ins = post_ins;
                pre_del = post_del;
                lastEquality = diffs[pointer][1];
              } else {
                equalitiesLength = 0;
                lastEquality = null;
              }
              post_ins = post_del = 0;
            } else {
              if (diffs[pointer][0] == DIFF_DELETE) {
                post_del = 1;
              } else {
                post_ins = 1;
              }
              if (lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {
                diffs.splice(equalities[equalitiesLength - 1], 0, [
                  DIFF_DELETE,
                  lastEquality
                ]);
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                equalitiesLength--;
                lastEquality = null;
                if (pre_ins && pre_del) {
                  post_ins = post_del = 1;
                  equalitiesLength = 0;
                } else {
                  equalitiesLength--;
                  pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                  post_ins = post_del = 0;
                }
                changes = true;
              }
            }
            pointer++;
          }
          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
        }
        /**
         * Reorder and merge like edit sections.  Merge equalities.
         * Any edit section can move as long as it doesn't cross an equality.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_cleanupMerge(diffs) {
          diffs.push([DIFF_EQUAL, ""]);
          let pointer = 0;
          let count_delete = 0;
          let count_insert = 0;
          let text_delete = "";
          let text_insert = "";
          let commonlength;
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_EQUAL:
                if (count_delete + count_insert > 1) {
                  if (count_delete !== 0 && count_insert !== 0) {
                    commonlength = this.diff_commonPrefix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                        diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                      } else {
                        diffs.splice(0, 0, [
                          DIFF_EQUAL,
                          text_insert.substring(0, commonlength)
                        ]);
                        pointer++;
                      }
                      text_insert = text_insert.substring(commonlength);
                      text_delete = text_delete.substring(commonlength);
                    }
                    commonlength = this.diff_commonSuffix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                      text_insert = text_insert.substring(
                        0,
                        text_insert.length - commonlength
                      );
                      text_delete = text_delete.substring(
                        0,
                        text_delete.length - commonlength
                      );
                    }
                  }
                  pointer -= count_delete + count_insert;
                  diffs.splice(pointer, count_delete + count_insert);
                  if (text_delete.length) {
                    diffs.splice(pointer, 0, [DIFF_DELETE, text_delete]);
                    pointer++;
                  }
                  if (text_insert.length) {
                    diffs.splice(pointer, 0, [DIFF_INSERT, text_insert]);
                    pointer++;
                  }
                  pointer++;
                } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                  diffs[pointer - 1][1] += diffs[pointer][1];
                  diffs.splice(pointer, 1);
                } else {
                  pointer++;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = "";
                text_insert = "";
                break;
            }
          }
          if (diffs[diffs.length - 1][1] === "") {
            diffs.pop();
          }
          let changes = false;
          pointer = 1;
          while (pointer < diffs.length - 1) {
            if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
              if (diffs[pointer][1].substring(
                diffs[pointer][1].length - diffs[pointer - 1][1].length
              ) == diffs[pointer - 1][1]) {
                diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(
                  0,
                  diffs[pointer][1].length - diffs[pointer - 1][1].length
                );
                diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                diffs.splice(pointer - 1, 1);
                changes = true;
              } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                diffs[pointer - 1][1] += diffs[pointer + 1][1];
                diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                diffs.splice(pointer + 1, 1);
                changes = true;
              }
            }
            pointer++;
          }
          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
        }
        /**
         * loc is a location in text1, compute and return the equivalent location in
         * text2.
         * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @param {number} loc Location within text1.
         * @return {number} Location within text2.
         */
        diff_xIndex(diffs, loc) {
          let chars1 = 0;
          let chars2 = 0;
          let last_chars1 = 0;
          let last_chars2 = 0;
          let x;
          for (x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_INSERT) {
              chars1 += diffs[x][1].length;
            }
            if (diffs[x][0] !== DIFF_DELETE) {
              chars2 += diffs[x][1].length;
            }
            if (chars1 > loc) {
              break;
            }
            last_chars1 = chars1;
            last_chars2 = chars2;
          }
          if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
            return last_chars2;
          }
          return last_chars2 + (loc - last_chars1);
        }
        /**
         * Convert a diff array into a pretty HTML report.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} HTML representation.
         */
        diff_prettyHtml(diffs) {
          const html = [];
          const pattern_amp = /&/g;
          const pattern_lt = /</g;
          const pattern_gt = />/g;
          const pattern_para = /\n/g;
          for (let x = 0; x < diffs.length; x++) {
            const op = diffs[x][0];
            const data = diffs[x][1];
            const text = data.replace(pattern_amp, "&amp;").replace(pattern_lt, "&lt;").replace(pattern_gt, "&gt;").replace(pattern_para, "&para;<br>");
            switch (op) {
              case DIFF_INSERT:
                html[x] = '<ins style="background:#e6ffe6;">' + text + "</ins>";
                break;
              case DIFF_DELETE:
                html[x] = '<del style="background:#ffe6e6;">' + text + "</del>";
                break;
              case DIFF_EQUAL:
                html[x] = "<span>" + text + "</span>";
                break;
            }
          }
          return html.join("");
        }
        /**
         * Compute and return the source text (all equalities and deletions).
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Source text.
         */
        diff_text1(diffs) {
          const text = [];
          for (let x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_INSERT) {
              text[x] = diffs[x][1];
            }
          }
          return text.join("");
        }
        /**
         * Compute and return the destination text (all equalities and insertions).
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Destination text.
         */
        diff_text2(diffs) {
          const text = [];
          for (let x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_DELETE) {
              text[x] = diffs[x][1];
            }
          }
          return text.join("");
        }
        /**
         * Compute the Levenshtein distance; the number of inserted, deleted or
         * substituted characters.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {number} Number of changes.
         */
        diff_levenshtein(diffs) {
          let levenshtein = 0;
          let insertions = 0;
          let deletions = 0;
          for (let x = 0; x < diffs.length; x++) {
            const op = diffs[x][0];
            const data = diffs[x][1];
            switch (op) {
              case DIFF_INSERT:
                insertions += data.length;
                break;
              case DIFF_DELETE:
                deletions += data.length;
                break;
              case DIFF_EQUAL:
                levenshtein += Math.max(insertions, deletions);
                insertions = 0;
                deletions = 0;
                break;
            }
          }
          levenshtein += Math.max(insertions, deletions);
          return levenshtein;
        }
        /**
         * Crush the diff into an encoded string which describes the operations
         * required to transform text1 into text2.
         * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
         * Operations are tab-separated.  Inserted text is escaped using %xx notation.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Delta text.
         */
        diff_toDelta(diffs) {
          const text = [];
          for (let x = 0; x < diffs.length; x++) {
            switch (diffs[x][0]) {
              case DIFF_INSERT:
                text[x] = "+" + encodeURI(diffs[x][1]);
                break;
              case DIFF_DELETE:
                text[x] = "-" + diffs[x][1].length;
                break;
              case DIFF_EQUAL:
                text[x] = "=" + diffs[x][1].length;
                break;
            }
          }
          return text.join("	").replace(/%20/g, " ");
        }
        /**
         * Given the original text1, and an encoded string which describes the
         * operations required to transform text1 into text2, compute the full diff.
         * @param {string} text1 Source string for the diff.
         * @param {string} delta Delta text.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @throws {!Error} If invalid input.
         */
        diff_fromDelta(text1, delta) {
          const diffs = [];
          let diffsLength = 0;
          let pointer = 0;
          const tokens = delta.split(/\t/g);
          for (let x = 0; x < tokens.length; x++) {
            const param = tokens[x].substring(1);
            switch (tokens[x].charAt(0)) {
              case "+":
                try {
                  diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
                } catch (ex) {
                  throw new Error("Illegal escape in diff_fromDelta: " + param);
                }
                break;
              case "-":
              case "=":
                const n = parseInt(param, 10);
                if (isNaN(n) || n < 0) {
                  throw new Error("Invalid number in diff_fromDelta: " + param);
                }
                const text = text1.substring(pointer, pointer += n);
                if (tokens[x].charAt(0) == "=") {
                  diffs[diffsLength++] = [DIFF_EQUAL, text];
                } else {
                  diffs[diffsLength++] = [DIFF_DELETE, text];
                }
                break;
              default:
                if (tokens[x]) {
                  throw new Error(
                    "Invalid diff operation in diff_fromDelta: " + tokens[x]
                  );
                }
            }
          }
          if (pointer != text1.length) {
            throw new Error(
              "Delta length (" + pointer + ") does not equal source text length (" + text1.length + ")."
            );
          }
          return diffs;
        }
        //  MATCH FUNCTIONS
        /**
         * Locate the best instance of 'pattern' in 'text' near 'loc'.
         * @param {string} text The text to search.
         * @param {string} pattern The pattern to search for.
         * @param {number} loc The location to search around.
         * @return {number} Best match index or -1.
         */
        match_main(text, pattern, loc) {
          if (text == null || pattern == null || loc == null) {
            throw new Error("Null input. (match_main)");
          }
          loc = Math.max(0, Math.min(loc, text.length));
          if (text == pattern) {
            return 0;
          } else if (!text.length) {
            return -1;
          } else if (text.substring(loc, loc + pattern.length) == pattern) {
            return loc;
          } else {
            return this.match_bitap_(text, pattern, loc);
          }
        }
        /**
         * Locate the best instance of 'pattern' in 'text' near 'loc' using the
         * Bitap algorithm.
         * @param {string} text The text to search.
         * @param {string} pattern The pattern to search for.
         * @param {number} loc The location to search around.
         * @return {number} Best match index or -1.
         * @private
         */
        match_bitap_(text, pattern, loc) {
          if (pattern.length > this.Match_MaxBits) {
            throw new Error("Pattern too long for this browser.");
          }
          const s = this.match_alphabet_(pattern);
          const dmp = this;
          function match_bitapScore_(e, x) {
            const accuracy = e / pattern.length;
            const proximity = Math.abs(loc - x);
            if (!dmp.Match_Distance) {
              return proximity ? 1 : accuracy;
            }
            return accuracy + proximity / dmp.Match_Distance;
          }
          let score_threshold = this.Match_Threshold;
          let best_loc = text.indexOf(pattern, loc);
          if (best_loc != -1) {
            score_threshold = Math.min(
              match_bitapScore_(0, best_loc),
              score_threshold
            );
            best_loc = text.lastIndexOf(pattern, loc + pattern.length);
            if (best_loc != -1) {
              score_threshold = Math.min(
                match_bitapScore_(0, best_loc),
                score_threshold
              );
            }
          }
          const matchmask = 1 << pattern.length - 1;
          best_loc = -1;
          let bin_min, bin_mid;
          let bin_max = pattern.length + text.length;
          let last_rd;
          for (let d = 0; d < pattern.length; d++) {
            bin_min = 0;
            bin_mid = bin_max;
            while (bin_min < bin_mid) {
              if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
                bin_min = bin_mid;
              } else {
                bin_max = bin_mid;
              }
              bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
            }
            bin_max = bin_mid;
            let start = Math.max(1, loc - bin_mid + 1);
            const finish = Math.min(loc + bin_mid, text.length) + pattern.length;
            const rd = Array(finish + 2);
            rd[finish + 1] = (1 << d) - 1;
            for (let j = finish; j >= start; j--) {
              const charMatch = s[text.charAt(j - 1)];
              if (d === 0) {
                rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
              } else {
                rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];
              }
              if (rd[j] & matchmask) {
                const score = match_bitapScore_(d, j - 1);
                if (score <= score_threshold) {
                  score_threshold = score;
                  best_loc = j - 1;
                  if (best_loc > loc) {
                    start = Math.max(1, 2 * loc - best_loc);
                  } else {
                    break;
                  }
                }
              }
            }
            if (match_bitapScore_(d + 1, loc) > score_threshold) {
              break;
            }
            last_rd = rd;
          }
          return best_loc;
        }
        /**
         * Initialise the alphabet for the Bitap algorithm.
         * @param {string} pattern The text to encode.
         * @return {!Object} Hash of character locations.
         * @private
         */
        match_alphabet_(pattern) {
          const s = {};
          for (let i = 0; i < pattern.length; i++) {
            s[pattern.charAt(i)] = 0;
          }
          for (let i = 0; i < pattern.length; i++) {
            s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
          }
          return s;
        }
        //  PATCH FUNCTIONS
        /**
         * Increase the context until it is unique,
         * but don't let the pattern expand beyond Match_MaxBits.
         * @param {!diff_match_patch.patch_obj} patch The patch to grow.
         * @param {string} text Source text.
         * @private
         */
        patch_addContext_(patch4, text) {
          if (text.length == 0) {
            return;
          }
          if (patch4.start2 === null) {
            throw Error("patch not initialized");
          }
          let pattern = text.substring(patch4.start2, patch4.start2 + patch4.length1);
          let padding = 0;
          while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {
            padding += this.Patch_Margin;
            pattern = text.substring(
              patch4.start2 - padding,
              patch4.start2 + patch4.length1 + padding
            );
          }
          padding += this.Patch_Margin;
          const prefix = text.substring(patch4.start2 - padding, patch4.start2);
          if (prefix) {
            patch4.diffs.unshift([DIFF_EQUAL, prefix]);
          }
          const suffix = text.substring(
            patch4.start2 + patch4.length1,
            patch4.start2 + patch4.length1 + padding
          );
          if (suffix) {
            patch4.diffs.push([DIFF_EQUAL, suffix]);
          }
          patch4.start1 = patch4.start1 || 0 - prefix.length;
          patch4.start2 = patch4.start2 || 0 - prefix.length;
          patch4.length1 += prefix.length + suffix.length;
          patch4.length2 += prefix.length + suffix.length;
        }
        /**
         * Compute a list of patches to turn text1 into text2.
         * Use diffs if provided, otherwise compute it ourselves.
         * There are four ways to call this function, depending on what data is
         * available to the caller:
         * Method 1:
         * a = text1, b = text2
         * Method 2:
         * a = diffs
         * Method 3 (optimal):
         * a = text1, b = diffs
         * Method 4 (deprecated, use method 3):
         * a = text1, b = text2, c = diffs
         *
         * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
         * Array of diff tuples for text1 to text2 (method 2).
         * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or
         * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
         * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples
         * for text1 to text2 (method 4) or undefined (methods 1,2,3).
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         */
        patch_make(a, opt_b, opt_c) {
          let text1, diffs;
          if (typeof a == "string" && typeof opt_b == "string" && typeof opt_c == "undefined") {
            text1 = /** @type {string} */
            a;
            diffs = this.diff_main(
              text1,
              /** @type {string} */
              opt_b,
              true
            );
            if (diffs.length > 2) {
              this.diff_cleanupSemantic(diffs);
              this.diff_cleanupEfficiency(diffs);
            }
          } else if (a && typeof a == "object" && typeof opt_b == "undefined" && typeof opt_c == "undefined") {
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
            a;
            text1 = this.diff_text1(diffs);
          } else if (typeof a == "string" && opt_b && typeof opt_b == "object" && typeof opt_c == "undefined") {
            text1 = /** @type {string} */
            a;
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
            opt_b;
          } else if (typeof a == "string" && typeof opt_b == "string" && opt_c && typeof opt_c == "object") {
            text1 = /** @type {string} */
            a;
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
            opt_c;
          } else {
            throw new Error("Unknown call format to patch_make.");
          }
          if (diffs.length === 0) {
            return [];
          }
          const patches = [];
          let patch4 = new Patch();
          let patchDiffLength = 0;
          let char_count1 = 0;
          let char_count2 = 0;
          let prepatch_text = text1;
          let postpatch_text = text1;
          for (let x = 0; x < diffs.length; x++) {
            const diff_type = diffs[x][0];
            const diff_text = diffs[x][1];
            if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
              patch4.start1 = char_count1;
              patch4.start2 = char_count2;
            }
            switch (diff_type) {
              case DIFF_INSERT:
                patch4.diffs[patchDiffLength++] = diffs[x];
                patch4.length2 += diff_text.length;
                postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);
                break;
              case DIFF_DELETE:
                patch4.length1 += diff_text.length;
                patch4.diffs[patchDiffLength++] = diffs[x];
                postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);
                break;
              case DIFF_EQUAL:
                if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {
                  patch4.diffs[patchDiffLength++] = diffs[x];
                  patch4.length1 += diff_text.length;
                  patch4.length2 += diff_text.length;
                } else if (diff_text.length >= 2 * this.Patch_Margin) {
                  if (patchDiffLength) {
                    this.patch_addContext_(patch4, prepatch_text);
                    patches.push(patch4);
                    patch4 = new Patch();
                    patchDiffLength = 0;
                    prepatch_text = postpatch_text;
                    char_count1 = char_count2;
                  }
                }
                break;
            }
            if (diff_type !== DIFF_INSERT) {
              char_count1 += diff_text.length;
            }
            if (diff_type !== DIFF_DELETE) {
              char_count2 += diff_text.length;
            }
          }
          if (patchDiffLength) {
            this.patch_addContext_(patch4, prepatch_text);
            patches.push(patch4);
          }
          return patches;
        }
        /**
         * Given an array of patches, return another array that is identical.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         */
        patch_deepCopy(patches) {
          const patchesCopy = [];
          for (let x = 0; x < patches.length; x++) {
            const patch4 = patches[x];
            const patchCopy = new Patch();
            patchCopy.diffs = [];
            for (let y = 0; y < patch4.diffs.length; y++) {
              patchCopy.diffs[y] = [patch4.diffs[y][0], patch4.diffs[y][1]];
            }
            patchCopy.start1 = patch4.start1;
            patchCopy.start2 = patch4.start2;
            patchCopy.length1 = patch4.length1;
            patchCopy.length2 = patch4.length2;
            patchesCopy[x] = patchCopy;
          }
          return patchesCopy;
        }
        /**
         * Merge a set of patches onto the text.  Return a patched text, as well
         * as a list of true/false values indicating which patches were applied.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @param {string} text Old text.
         * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
         *      new text and an array of boolean values.
         */
        patch_apply(patches, text) {
          if (patches.length == 0) {
            return [text, []];
          }
          patches = this.patch_deepCopy(patches);
          const nullPadding = this.patch_addPadding(patches);
          text = nullPadding + text + nullPadding;
          this.patch_splitMax(patches);
          let delta = 0;
          const results = [];
          for (let x = 0; x < patches.length; x++) {
            const expected_loc = patches[x].start2 || 0 + delta;
            const text1 = this.diff_text1(patches[x].diffs);
            let start_loc;
            let end_loc = -1;
            if (text1.length > this.Match_MaxBits) {
              start_loc = this.match_main(
                text,
                text1.substring(0, this.Match_MaxBits),
                expected_loc
              );
              if (start_loc != -1) {
                end_loc = this.match_main(
                  text,
                  text1.substring(text1.length - this.Match_MaxBits),
                  expected_loc + text1.length - this.Match_MaxBits
                );
                if (end_loc == -1 || start_loc >= end_loc) {
                  start_loc = -1;
                }
              }
            } else {
              start_loc = this.match_main(text, text1, expected_loc);
            }
            if (start_loc == -1) {
              results[x] = false;
              delta -= patches[x].length2 - patches[x].length1;
            } else {
              results[x] = true;
              delta = start_loc - expected_loc;
              let text2;
              if (end_loc == -1) {
                text2 = text.substring(start_loc, start_loc + text1.length);
              } else {
                text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
              }
              if (text1 == text2) {
                text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);
              } else {
                const diffs = this.diff_main(text1, text2, false);
                if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {
                  results[x] = false;
                } else {
                  this.diff_cleanupSemanticLossless(diffs);
                  let index1 = 0;
                  let index2;
                  for (let y = 0; y < patches[x].diffs.length; y++) {
                    const mod = patches[x].diffs[y];
                    if (mod[0] !== DIFF_EQUAL) {
                      index2 = this.diff_xIndex(diffs, index1);
                    }
                    if (mod[0] === DIFF_INSERT) {
                      text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);
                    } else if (mod[0] === DIFF_DELETE) {
                      text = text.substring(0, start_loc + index2) + text.substring(
                        start_loc + this.diff_xIndex(diffs, index1 + mod[1].length)
                      );
                    }
                    if (mod[0] !== DIFF_DELETE) {
                      index1 += mod[1].length;
                    }
                  }
                }
              }
            }
          }
          text = text.substring(nullPadding.length, text.length - nullPadding.length);
          return [text, results];
        }
        /**
         * Add some padding on text start and end so that edges can match something.
         * Intended to be called only from within patch_apply.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {string} The padding string added to each side.
         */
        patch_addPadding(patches) {
          let paddingLength = this.Patch_Margin;
          let nullPadding = "";
          for (let x = 1; x <= paddingLength; x++) {
            nullPadding += String.fromCharCode(x);
          }
          for (let x = 0; x < patches.length; x++) {
            patches[x].start1 = patches[x].start1 || 0 + paddingLength;
            patches[x].start2 = patches[x].start2 || 0 + paddingLength;
          }
          let patch4 = patches[0];
          let diffs = patch4.diffs;
          if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
            diffs.unshift([DIFF_EQUAL, nullPadding]);
            patch4.start1 -= paddingLength;
            patch4.start2 -= paddingLength;
            patch4.length1 += paddingLength;
            patch4.length2 += paddingLength;
          } else if (paddingLength > diffs[0][1].length) {
            const extraLength = paddingLength - diffs[0][1].length;
            diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
            patch4.start1 -= extraLength;
            patch4.start2 -= extraLength;
            patch4.length1 += extraLength;
            patch4.length2 += extraLength;
          }
          patch4 = patches[patches.length - 1];
          diffs = patch4.diffs;
          if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
            diffs.push([DIFF_EQUAL, nullPadding]);
            patch4.length1 += paddingLength;
            patch4.length2 += paddingLength;
          } else if (paddingLength > diffs[diffs.length - 1][1].length) {
            const extraLength = paddingLength - diffs[diffs.length - 1][1].length;
            diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
            patch4.length1 += extraLength;
            patch4.length2 += extraLength;
          }
          return nullPadding;
        }
        /**
         * Look through the patches and break up any which are longer than the maximum
         * limit of the match algorithm.
         * Intended to be called only from within patch_apply.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         */
        patch_splitMax(patches) {
          const patch_size = this.Match_MaxBits;
          for (let x = 0; x < patches.length; x++) {
            if (patches[x].length1 <= patch_size) {
              continue;
            }
            const bigpatch = patches[x];
            patches.splice(x--, 1);
            let start1 = bigpatch.start1 || 0;
            let start2 = bigpatch.start2 || 0;
            let precontext = "";
            while (bigpatch.diffs.length !== 0) {
              const patch4 = new Patch();
              let empty = true;
              patch4.start1 = start1 - precontext.length;
              patch4.start2 = start2 - precontext.length;
              if (precontext !== "") {
                patch4.length1 = patch4.length2 = precontext.length;
                patch4.diffs.push([DIFF_EQUAL, precontext]);
              }
              while (bigpatch.diffs.length !== 0 && patch4.length1 < patch_size - this.Patch_Margin) {
                const diff_type = bigpatch.diffs[0][0];
                let diff_text = bigpatch.diffs[0][1];
                if (diff_type === DIFF_INSERT) {
                  patch4.length2 += diff_text.length;
                  start2 += diff_text.length;
                  patch4.diffs.push(bigpatch.diffs.shift());
                  empty = false;
                } else if (diff_type === DIFF_DELETE && patch4.diffs.length == 1 && patch4.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {
                  patch4.length1 += diff_text.length;
                  start1 += diff_text.length;
                  empty = false;
                  patch4.diffs.push([diff_type, diff_text]);
                  bigpatch.diffs.shift();
                } else {
                  diff_text = diff_text.substring(
                    0,
                    patch_size - patch4.length1 - this.Patch_Margin
                  );
                  patch4.length1 += diff_text.length;
                  start1 += diff_text.length;
                  if (diff_type === DIFF_EQUAL) {
                    patch4.length2 += diff_text.length;
                    start2 += diff_text.length;
                  } else {
                    empty = false;
                  }
                  patch4.diffs.push([diff_type, diff_text]);
                  if (diff_text == bigpatch.diffs[0][1]) {
                    bigpatch.diffs.shift();
                  } else {
                    bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(
                      diff_text.length
                    );
                  }
                }
              }
              precontext = this.diff_text2(patch4.diffs);
              precontext = precontext.substring(
                precontext.length - this.Patch_Margin
              );
              const postcontext = this.diff_text1(bigpatch.diffs).substring(
                0,
                this.Patch_Margin
              );
              if (postcontext !== "") {
                patch4.length1 += postcontext.length;
                patch4.length2 += postcontext.length;
                if (patch4.diffs.length !== 0 && patch4.diffs[patch4.diffs.length - 1][0] === DIFF_EQUAL) {
                  patch4.diffs[patch4.diffs.length - 1][1] += postcontext;
                } else {
                  patch4.diffs.push([DIFF_EQUAL, postcontext]);
                }
              }
              if (!empty) {
                patches.splice(++x, 0, patch4);
              }
            }
          }
        }
        /**
         * Take a list of patches and return a textual representation.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {string} Text representation of patches.
         */
        patch_toText(patches) {
          const text = [];
          for (let x = 0; x < patches.length; x++) {
            text[x] = patches[x];
          }
          return text.join("");
        }
        /**
         * Parse a textual representation of patches and return a list of Patch objects.
         * @param {string} textline Text representation of patches.
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         * @throws {!Error} If invalid input.
         */
        patch_fromText(textline) {
          const patches = [];
          if (!textline) {
            return patches;
          }
          const text = textline.split("\n");
          let textPointer = 0;
          const patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
          while (textPointer < text.length) {
            const m = text[textPointer].match(patchHeader);
            if (!m) {
              throw new Error("Invalid patch string: " + text[textPointer]);
            }
            const patch4 = new Patch();
            patches.push(patch4);
            patch4.start1 = parseInt(m[1], 10);
            if (m[2] === "") {
              patch4.start1--;
              patch4.length1 = 1;
            } else if (m[2] == "0") {
              patch4.length1 = 0;
            } else {
              patch4.start1--;
              patch4.length1 = parseInt(m[2], 10);
            }
            patch4.start2 = parseInt(m[3], 10);
            if (m[4] === "") {
              patch4.start2--;
              patch4.length2 = 1;
            } else if (m[4] == "0") {
              patch4.length2 = 0;
            } else {
              patch4.start2--;
              patch4.length2 = parseInt(m[4], 10);
            }
            textPointer++;
            while (textPointer < text.length) {
              const sign = text[textPointer].charAt(0);
              const line = decodeURI(text[textPointer].substring(1));
              if (sign == "-") {
                patch4.diffs.push([DIFF_DELETE, line]);
              } else if (sign == "+") {
                patch4.diffs.push([DIFF_INSERT, line]);
              } else if (sign == " ") {
                patch4.diffs.push([DIFF_EQUAL, line]);
              } else if (sign == "@") {
                break;
              } else if (sign === "") {
              } else {
                throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
              }
              textPointer++;
            }
          }
          return patches;
        }
      };
      Patch = class {
        constructor() {
          this.start1 = null;
          this.start2 = null;
          this.length1 = 0;
          this.length2 = 0;
          this.diffs = [];
        }
        /**
         * Emulate GNU diff's format.
         * Header: @@ -382,8 +481,9 @@
         * Indices are printed as 1-based, not 0-based.
         * @return {string} The GNU diff string.
         */
        toString() {
          let coords1, coords2;
          if (this.length1 === 0) {
            coords1 = this.start1 + ",0";
          } else if (this.length1 == 1) {
            coords1 = this.start1 + 1;
          } else {
            coords1 = this.start1 + 1 + "," + this.length1;
          }
          if (this.length2 === 0) {
            coords2 = this.start2 + ",0";
          } else if (this.length2 == 1) {
            coords2 = this.start2 + 1;
          } else {
            coords2 = this.start2 + 1 + "," + this.length2;
          }
          const text = ["@@ -" + coords1 + " +" + coords2 + " @@\n"];
          let op;
          for (let x = 0; x < this.diffs.length; x++) {
            switch (this.diffs[x][0]) {
              case DIFF_INSERT:
                op = "+";
                break;
              case DIFF_DELETE:
                op = "-";
                break;
              case DIFF_EQUAL:
                op = " ";
                break;
            }
            text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\n";
          }
          return text.join("").replace(/%20/g, " ");
        }
      };
    }
  });

  // cfds/base/defs.ts
  var kDMP;
  var init_defs = __esm({
    "cfds/base/defs.ts"() {
      init_diff_match_patch();
      kDMP = new DiffMatchPatch();
      kDMP.Diff_Timeout = 0.5;
    }
  });

  // cfds/richtext/string-rep.ts
  var kReservedCodePoints, kNewlineCodePoint, StringRep;
  var init_string_rep = __esm({
    "cfds/richtext/string-rep.ts"() {
      init_error();
      init_hash_map();
      init_core_types();
      init_hash2();
      init_flat_rep();
      kReservedCodePoints = /* @__PURE__ */ new Set(["\0", "\n"]);
      kNewlineCodePoint = "\n".codePointAt(0);
      StringRep = class {
        constructor(opts) {
          this._dict = new HashMap(
            (v) => encodableValueHash(v, opts),
            (v1, v2) => coreValueEquals(v1, v2, opts)
          );
          this._reverseMapping = [];
        }
        encode(iter) {
          const dict = this._dict;
          const reverseMapping = this._reverseMapping;
          let result = "";
          for (const value of iter) {
            if (isElementSpacer(value)) {
              result += "\n";
              continue;
            }
            let encodedChar = dict.get(value);
            if (encodedChar === void 0) {
              do {
                assert(reverseMapping.length < 65536, "Max encoded values reached");
                encodedChar = String.fromCodePoint(reverseMapping.length);
                if (kReservedCodePoints.has(encodedChar)) {
                  reverseMapping.push(null);
                } else {
                  break;
                }
              } while (true);
              dict.set(value, encodedChar);
              reverseMapping.push(value);
            }
            result += encodedChar;
          }
          return result;
        }
        *decode(str) {
          const reverseMapping = this._reverseMapping;
          const len = str.length;
          for (let i = 0; i < len; ++i) {
            const codePoint = str.codePointAt(i);
            if (codePoint === kNewlineCodePoint) {
              yield kElementSpacer;
            }
            assert(
              codePoint < reverseMapping.length || kReservedCodePoints.has(String.fromCodePoint(codePoint)),
              "Unexpected code point"
            );
            const value = reverseMapping[codePoint];
            if (value === void 0 || value === null) {
              continue;
            }
            yield value;
          }
        }
      };
    }
  });

  // cfds/richtext/merge-context.ts
  function* recursiveFlattenTextNodes(changeNodes) {
    for (const node of changeNodes) {
      if (isTextNode(node)) {
        for (const atom of flattenTextNode(node, true, void 0, false)) {
          yield atom;
        }
      } else {
        yield node;
        if (isElementNode(node)) {
          for (const atom of recursiveFlattenTextNodes(node.children)) {
            yield atom;
          }
        }
      }
    }
  }
  var MergeContext;
  var init_merge_context = __esm({
    "cfds/richtext/merge-context.ts"() {
      init_diff_match_patch();
      init_error();
      init_defs();
      init_core_types();
      init_flat_rep();
      init_string_rep();
      init_tree();
      init_array();
      MergeContext = class {
        constructor(origValues, eqOpts) {
          this._origValues = origValues;
          this._deletions = /* @__PURE__ */ new Set();
          this._insertions = /* @__PURE__ */ new Map();
          this._eqOpts = eqOpts;
          this._finalized = false;
        }
        delete(index) {
          this._deletions.add(index);
        }
        deleteRange(start, end) {
          for (let i = start; i < end; ++i) {
            this.delete(i);
          }
        }
        insert(index, value) {
          const insertions = this._insertions;
          const curValue = insertions.get(index);
          if (curValue === void 0) {
            insertions.set(index, this.boxValueIfNeeded(value));
          } else {
            insertions.set(index, this.mergeValues(curValue, value));
          }
        }
        apply(change) {
          switch (change.op) {
            case 1 /* Insert */: {
              this.insert(change.start, recursiveFlattenTextNodes(change.values));
              break;
            }
            case -1 /* Delete */:
              this.delete(change.start);
              break;
            case -2 /* DeleteRange */:
              this.deleteRange(change.start, change.end);
              break;
          }
        }
        *finalize() {
          assert(!this._finalized);
          const deletions = this._deletions;
          const insertions = this._insertions;
          let idx = 0;
          for (const origAtom of this._origValues) {
            const insertedValues2 = insertions.get(idx);
            if (insertedValues2 !== void 0) {
              for (const v of insertedValues2) {
                yield v;
              }
            }
            if (!deletions.has(idx)) {
              yield origAtom;
            }
            ++idx;
          }
          const insertedValues = insertions.get(idx);
          if (insertedValues !== void 0) {
            for (const v of insertedValues) {
              yield v;
            }
          }
          this._finalized = true;
        }
        boxValueIfNeeded(value) {
          const type = getCoreType(value);
          switch (type) {
            case 5 /* Array */:
              return value;
            case 0 /* String */:
            case 10 /* Generator */:
            case 8 /* Dictionary */:
            case 7 /* Set */:
              return Array.from(value);
            default:
              return [value];
          }
        }
        /**
         * Merges values by attempting to remove duplicates. Multiple values inserted
         * at the same index will be grouped as an array. Whenever a new value (or
         * array/string of values) is being inserted, it'll be diff'ed against the
         * existing values array to remove redundant runs.
         *
         * @param curValue
         * @param insertedValue
         * @returns An array of merged values
         */
        mergeValues(curValue, insertedValue) {
          const strRep = new StringRep(this._eqOpts);
          const curStr = strRep.encode(curValue);
          const newStr = strRep.encode(this.boxValueIfNeeded(insertedValue));
          const textDiffs = kDMP.diff_main(curStr, newStr, true);
          const result = [];
          for (const diff4 of textDiffs) {
            append(result, strRep.decode(diff4[1]));
          }
          return result;
        }
        static *diffToChanges(diffs) {
          const length = diffs.length;
          let text1Idx = 0;
          let text2Idx = 0;
          for (let changeIdx = 0; changeIdx < length; ++changeIdx) {
            const change = diffs[changeIdx];
            const op = change[0];
            const text = change[1];
            if (text.length === 0) {
              continue;
            }
            switch (op) {
              case DIFF_EQUAL:
                text1Idx += text.length;
                text2Idx += text.length;
                break;
              case DIFF_DELETE: {
                if (text.length === 1) {
                  yield {
                    operation: -1 /* Delete */,
                    start: text1Idx
                  };
                } else {
                  yield {
                    operation: -2 /* DeleteRange */,
                    start: text1Idx,
                    end: text1Idx + text.length
                  };
                }
                text1Idx += text.length;
                break;
              }
              case DIFF_INSERT: {
                yield {
                  operation: 1 /* Insert */,
                  start: text1Idx,
                  value: text
                };
                text2Idx += text.length;
                break;
              }
            }
          }
        }
      };
    }
  });

  // cfds/richtext/flat-rep.ts
  function isTreeNode(node) {
    return isReadonlyCoreObject(node) && !isDepthMarker(node) && !isPointer(node) && !isPointerValue(node) && !isElementSpacer(node);
  }
  function isDepthMarker(obj) {
    return isReadonlyCoreObject(obj) && typeof obj.depthMarker === "number";
  }
  function isElementSpacer(obj) {
    return isReadonlyCoreObject(obj) && obj.__elementSpacer === true;
  }
  function isPointerValue(obj) {
    return isReadonlyCoreObject(obj) && typeof obj.key === "string" && typeof obj.dir === "number" && typeof obj.type === "string";
  }
  function getFrozenTextNode(node, char) {
    let dict = gFrozenTextNodes.get(node);
    if (dict === void 0) {
      dict = /* @__PURE__ */ new Map();
      gFrozenTextNodes.set(node, dict);
    }
    let result = dict.get(char);
    if (result === void 0) {
      result = coreValueClone(node, kCoreValueTreeNodeOpts);
      result.text = char;
      result = Object.freeze(result);
      dict.set(char, result);
    }
    return result;
  }
  function unfreezeTextNode(node) {
    if (Object.isFrozen(node)) {
      return coreValueClone(node);
    }
    return node;
  }
  function* pointersForNode(ptrSet, node, local, offset2) {
    if (ptrSet === void 0) {
      return;
    }
    for (const ptr of ptrSet) {
      if (!local && ptr.isLocal === true) {
        continue;
      }
      if (ptr.node === node && (offset2 === void 0 || ptr.offset === offset2)) {
        yield ptr;
      }
    }
  }
  function* flattenTextNode(node, local, sortedPointers, trailingTextNode = true) {
    let idx = 0;
    for (const c of node.text) {
      yield getFrozenTextNode(node, c);
      if (sortedPointers !== void 0) {
        for (const ptrAtom of pointersForNode(sortedPointers, node, local, idx)) {
          yield ptrAtom;
        }
      }
      ++idx;
    }
    let emittedEmptyText = false;
    if (trailingTextNode || node.text.length === 0) {
      yield getFrozenTextNode(node, "");
      emittedEmptyText = true;
    }
    if (sortedPointers !== void 0) {
      for (const ptrAtom of pointersForNode(sortedPointers, node, local, idx)) {
        if (!emittedEmptyText) {
          yield getFrozenTextNode(node, "");
          emittedEmptyText = true;
        }
        yield ptrAtom;
      }
    }
  }
  function* splitTextNodeOnPointers(node, local, sortedPointers) {
    if (!sortedPointers || !sortedPointers.length) {
      yield Object.freeze(coreValueClone(node));
      return;
    }
    const sortedPtrsForNode = Array.from(
      pointersForNode(sortedPointers, node, local)
    ).sort(
      (p1, p2) => p1.offset === p2.offset ? comparePointers(p1, p2) : p1.offset - p2.offset
    );
    const nodeText = node.text;
    let start = 0;
    for (const ptr of sortedPtrsForNode) {
      const offset2 = ptr.offset;
      if (offset2 >= start) {
        if (offset2 !== start) {
          yield Object.freeze({
            ...node,
            text: nodeText.substring(start, offset2)
          });
        }
        yield getFrozenTextNode(
          node,
          offset2 < nodeText.length ? nodeText[offset2] : ""
        );
        start = ptr.offset + 1;
      }
      yield ptr;
    }
    if (start < node.text.length) {
      yield Object.freeze({
        ...node,
        text: nodeText.substring(start)
      });
    } else if (start === node.text.length) {
      yield getFrozenTextNode(node, "");
    }
  }
  function* flattenChildNodes(parent, parentDepth, local, sortedPointers, flattenText) {
    const children = parent.children;
    let didOpen = false;
    for (const child of children) {
      if (!local && child.isLocal === true) {
        continue;
      }
      if (!didOpen) {
        yield {
          depthMarker: parentDepth + 1
        };
        didOpen = true;
      }
      for (const atom of flattenTreeNode(
        child,
        parentDepth + 1,
        local,
        sortedPointers,
        flattenText
      )) {
        yield atom;
      }
    }
    if (didOpen) {
      yield {
        depthMarker: parentDepth
      };
    }
  }
  function* flattenTreeNode(node, depth, local, sortedPointers, flattenText) {
    if (!local && node.isLocal === true) {
      return;
    }
    if (isTextNode(node)) {
      if (flattenText) {
        for (const v of flattenTextNode(node, local, sortedPointers)) {
          yield v;
        }
      } else {
        for (const v of splitTextNodeOnPointers(node, local, sortedPointers)) {
          yield v;
        }
      }
    } else if (isElementNode(node)) {
      yield kElementSpacer;
      yield node;
      for (const v of flattenChildNodes(
        node,
        depth,
        local,
        sortedPointers,
        flattenText
      )) {
        yield v;
      }
    } else {
      yield node;
    }
  }
  function flattenRichText(rt, local, flattenText = true) {
    return flattenSiblingNodes(
      rt.root.children,
      0,
      local,
      rt.pointers,
      flattenText
    );
  }
  function stripDuplicatePointers(ptrs) {
    const result = new HashSet(
      encodableValueHash,
      (p1, p2) => comparePointers(p1, p2) === 0
    );
    for (const p of ptrs) {
      result.add(p);
    }
    return new Set(result);
  }
  function* flattenSiblingNodes(iter, parentDepth, local, pointers, flattenText) {
    const sortedPointers = pointers !== void 0 ? Array.from(stripDuplicatePointers(pointers)).sort(
      comparePointers
    ) : void 0;
    for (const atom of iter) {
      for (const flatAtom of flattenTreeNode(
        atom,
        parentDepth,
        local,
        sortedPointers,
        flattenText
      )) {
        yield flatAtom;
      }
    }
  }
  function cleanCloneTreeAtomField(obj, key, _opts) {
    if (key === "children" && isElementNode(obj)) {
      return [];
    }
    const type = getCoreType(obj);
    if (type === 8 /* Dictionary */) {
      return obj.get(key);
    } else {
      return obj[key];
    }
  }
  function* reconstructPointers(flatRep, outPtrs) {
    let pendingTextNode;
    for (const atom of flatRep) {
      if (isPointerValue(atom)) {
        if (pendingTextNode === void 0) {
          pendingTextNode = { text: "" };
        }
        let ptrSet = outPtrs.get(pendingTextNode);
        if (ptrSet === void 0) {
          ptrSet = /* @__PURE__ */ new Set();
          outPtrs.set(pendingTextNode, ptrSet);
        }
        ptrSet.add({
          ...atom,
          node: pendingTextNode,
          offset: Math.max(pendingTextNode.text.length - 1, 0)
        });
      } else {
        if (pendingTextNode !== void 0) {
          yield pendingTextNode;
        }
        if (isTextNode(atom)) {
          pendingTextNode = unfreezeTextNode(atom);
        } else {
          pendingTextNode = void 0;
          yield atom;
        }
      }
    }
    if (pendingTextNode !== void 0) {
      yield pendingTextNode;
    }
  }
  function* reconstructTextNodes(flatRep, ptrOffsetter) {
    let lastTextNode2;
    for (const atom of flatRep) {
      if (isTextNode(atom) && // If we have an offsetter, we can handle empty text nodes that exist for
      // pointers. Otherwise, we must leave them unmodified so later steps can
      // handle them
      (ptrOffsetter || atom.text.length > 0) && coreValueEquals(atom, lastTextNode2, kFilterTextField)) {
        lastTextNode2.text += atom.text;
        if (ptrOffsetter !== void 0) {
          const offset2 = lastTextNode2.text.length - atom.text.length;
          ptrOffsetter(atom, lastTextNode2, offset2);
        }
      } else {
        if (isTextNode(atom)) {
          lastTextNode2 = unfreezeTextNode(atom);
          yield lastTextNode2;
          if (ptrOffsetter !== void 0) {
            ptrOffsetter(atom, lastTextNode2, 0);
            for (let i = 1; i < lastTextNode2.text.length; ++i) {
              ptrOffsetter(atom, lastTextNode2, i);
            }
          }
        } else {
          lastTextNode2 = void 0;
          yield atom;
        }
      }
    }
  }
  function reconstructRichText(flatRep) {
    const root = { children: [] };
    const pointers = /* @__PURE__ */ new Set();
    const path = [root];
    const charPointersMap = /* @__PURE__ */ new Map();
    flatRep = reconstructPointers(flatRep, charPointersMap);
    flatRep = reconstructTextNodes(flatRep, (deletedNode, newNode, newOffset) => {
      const ptrs = charPointersMap.get(deletedNode);
      if (ptrs) {
        for (const p of ptrs) {
          p.node = newNode;
          p.offset = newOffset;
          pointers.add(p);
        }
      }
    });
    for (let value of flatRep) {
      if (isElementSpacer(value)) {
        continue;
      } else if (isDepthMarker(value)) {
        if (value.depthMarker >= path.length) {
          const curParent = path[path.length - 1];
          const children = curParent.children;
          if (children.length > 0) {
            const lastChild = children[children.length - 1];
            if (isElementNode(lastChild)) {
              path.push(lastChild);
            }
          }
        }
        while (value.depthMarker < path.length - 1) {
          path.pop();
        }
      } else if (isTreeNode(value)) {
        const parent = path[path.length - 1];
        const children = parent.children;
        if (!isTextNode(value)) {
          value = coreValueClone(value, {
            fieldCloneOverride: cleanCloneTreeAtomField
          });
        }
        children.push(value);
      } else {
        notReached("Unknown atom");
      }
    }
    const result = {
      root
    };
    if (pointers.size > 0) {
      result.pointers = pointers;
    }
    return result;
  }
  function* convertPtrsToValues(flatRep) {
    for (const atom of flatRep) {
      if (isPointer(atom)) {
        yield coreValueClone(atom, kCoreValuePtrToValue);
      } else {
        yield atom;
      }
    }
  }
  function* filterExpiredPointers(flatRep) {
    for (const atom of flatRep) {
      if (!isPointerValue(atom) || !isExpiredPointer(atom)) {
        yield atom;
      }
    }
  }
  function* filteredPointersRep(flatRep, filter, outFilteredPointers) {
    let idx = 0;
    for (let atom of flatRep) {
      if (isPointerValue(atom) && filter(atom)) {
        if (isPointer(atom)) {
          atom = coreValueClone(atom, kCoreValuePtrToValue);
        }
        if (outFilteredPointers) {
          outFilteredPointers.push([Math.max(0, idx - 1), atom]);
        }
      } else {
        yield atom;
        ++idx;
      }
    }
  }
  function flatDestForPointerProjection(dstRt, needFilter, filter) {
    const flat = flattenRichText(dstRt, true, true);
    if (needFilter) {
      return filteredPointersRep(flat, filter);
    }
    return flat;
  }
  function pointerIsExpired(ptr) {
    const expiration = ptr.expiration;
    return expiration !== void 0 && expiration.getTime() < Date.now();
  }
  function hasPointersToProject(ptrSet, filter, skipExpired) {
    for (const ptr of ptrSet) {
      if (filter(ptr) && (!skipExpired || !pointerIsExpired(ptr))) {
        return true;
      }
    }
    return false;
  }
  function projectPointers(srcRt, dstRt, filter, skipExpired = true, filterDest = false) {
    if (srcRt.pointers === void 0 || srcRt.pointers.size === 0 || !hasPointersToProject(srcRt.pointers, filter, skipExpired) || coreValueEquals(srcRt, dstRt)) {
      return coreValueClone(dstRt);
    }
    const ptrsToProject = [];
    let flatRepSrc = flattenRichText(srcRt, true, true);
    if (skipExpired) {
      flatRepSrc = filterExpiredPointers(flatRepSrc);
    }
    flatRepSrc = filteredPointersRep(flatRepSrc, filter, ptrsToProject);
    const strRep = new StringRep(kCoreValueTreeNodeOpts);
    const str1 = strRep.encode(flatRepSrc);
    const str2 = strRep.encode(
      flatDestForPointerProjection(dstRt, filterDest, filter)
    );
    const textDiffs = kDMP.diff_main(str1, str2, true);
    const mergeCtx = new MergeContext(
      flatDestForPointerProjection(dstRt, filterDest, filter),
      kCoreValueTreeNodeOpts
    );
    for (const [srcIdx, ptrValue] of ptrsToProject) {
      mergeCtx.insert(kDMP.diff_xIndex(textDiffs, srcIdx) + 1, ptrValue);
    }
    return reconstructRichText(mergeCtx.finalize());
  }
  function* stripFormattingFilter(flatRep) {
    let depth = 0;
    let hasOpenParagraph = false;
    for (const atom of flatRep) {
      if (isDepthMarker(atom)) {
        depth = atom.depthMarker;
      }
      if (!isTreeNode(atom)) {
        yield atom;
        continue;
      }
      if (isTextNode(atom) || !isElementNode(atom)) {
        if (!hasOpenParagraph) {
          ++depth;
          yield {
            tagName: "p",
            children: []
          };
          yield {
            depthMarker: depth
          };
          hasOpenParagraph = true;
        }
        if (isTrivialTextNode(atom) || !isElementNode(atom)) {
          yield atom;
        } else {
          const copy = {
            text: atom.text
          };
          if (copy.isLocal === true) {
            copy.isLocal = true;
          }
          yield copy;
        }
      } else if (isElementNode(atom) && atom.isLocal === true) {
        if (hasOpenParagraph) {
          yield {
            depthMarker: --depth
          };
          hasOpenParagraph = false;
        }
        yield atom;
      }
    }
    if (hasOpenParagraph) {
      yield {
        depthMarker: --depth
      };
      hasOpenParagraph = false;
    }
  }
  var kElementSpacer, gFrozenTextNodes, kFilterTextField, kCoreValuePtrToValue;
  var init_flat_rep = __esm({
    "cfds/richtext/flat-rep.ts"() {
      init_error();
      init_defs();
      init_hash_map();
      init_core_types();
      init_encoding();
      init_merge_context();
      init_string_rep();
      init_tree();
      kElementSpacer = { __elementSpacer: true };
      gFrozenTextNodes = new HashMap(
        (v) => encodableValueHash(v, kCoreValueTreeNodeOpts),
        (v1, v2) => coreValueEquals(v1, v2, kCoreValueTreeNodeOpts),
        (v) => {
          return coreValueClone(v, {
            ...kCoreValueTreeNodeOpts,
            fieldCloneOverride: (obj, key) => {
              if (getCoreType(obj) === 8 /* Dictionary */) {
                return key === "children" ? [] : obj.get(key);
              }
              return key === "children" ? [] : obj[key];
            }
          });
        }
      );
      kFilterTextField = {
        objectFilterFields: (key) => key !== "text"
      };
      kCoreValuePtrToValue = {
        objectFilterFields: (key) => key !== "node" && key !== "offset"
      };
    }
  });

  // cfds/richtext/tree.ts
  function isRichText(v) {
    return isReadonlyCoreObject(v) && isElementNode(v.root);
  }
  function onlyNoneLocal(v) {
    return isReadonlyCoreObject(v) && v.isLocal !== true;
  }
  function treeAtomKeyFilterIgnoreText(key, obj) {
    if (key === "children" && isElementNode(obj)) {
      return false;
    }
    if ((key === "node" || key === "offset") && isPointer(obj)) {
      return false;
    }
    return true;
  }
  function isTextNode(node) {
    return isReadonlyCoreObject(node) && typeof node.text === "string";
  }
  function isElementNode(node) {
    return isReadonlyCoreObject(node) && node.children instanceof Array;
  }
  function isPointer(obj) {
    return isReadonlyCoreObject(obj) && isTextNode(obj.node);
  }
  function isNodeSameLocality(n1, n2) {
    if (n1.isLocal === true) {
      return n2.isLocal === true;
    }
    if (n2.isLocal === true) {
      return false;
    }
    return true;
  }
  function isTrivialTextNode(node) {
    if (!isTextNode(node)) {
      return false;
    }
    for (const k in node) {
      if (node.hasOwnProperty(k) && k !== "text") {
        return false;
      }
    }
    return true;
  }
  function comparePointers(ptr1, ptr2) {
    if (ptr1.key !== ptr2.key) {
      if (ptr1.key < ptr2.key) {
        return -1;
      } else {
        return 1;
      }
    }
    if (ptr1.type !== ptr2.type) {
      if (ptr1.type < ptr2.type) {
        return -1;
      } else {
        return 1;
      }
    }
    if (ptr1.dir !== ptr2.dir) {
      return ptr1.dir - ptr2.dir;
    }
    if (!ptr1.expiration) {
      if (ptr2.expiration) {
        return -1;
      }
    } else if (!ptr2.expiration) {
      return 1;
    } else if (ptr1.expiration.getTime() !== ptr2.expiration.getTime()) {
      return ptr1.expiration.getTime() - ptr2.expiration.getTime();
    }
    return 0;
  }
  function initRichText() {
    return {
      root: initRichTextRoot()
    };
  }
  function initRichTextRoot() {
    return {
      children: [
        {
          tagName: "p",
          children: [
            {
              text: ""
            }
          ]
        }
      ]
    };
  }
  function* dfs(root, mutate = false, _depth = 0, _path = []) {
    const children = mutate ? Array.from(root.children) : root.children;
    for (const child of children) {
      yield [child, _depth, _path];
      if (isElementNode(child)) {
        _path.push(child);
        for (const value of dfs(child, mutate, _depth + 1, _path)) {
          yield value;
        }
        assert(_path.pop() === child);
      }
    }
  }
  function isExpiredPointer(v, buffer = 0) {
    return isPointer(v) && v.expiration !== void 0 && v.expiration.getTime() + buffer < Date.now();
  }
  function purgeExpiredPointers(rt, buffer = 0) {
    if (rt.pointers === void 0 || rt.pointers.size === 0) {
      return void 0;
    }
    const now = Date.now();
    let foundExpired = false;
    for (const ptr of rt.pointers) {
      if (ptr.expiration !== void 0 && ptr.expiration.getTime() + buffer < now) {
        foundExpired = true;
        break;
      }
    }
    if (foundExpired) {
      const newPtrs = /* @__PURE__ */ new Set();
      for (const ptr of rt.pointers) {
        if (ptr.expiration === void 0 || ptr.expiration.getTime() >= now) {
          newPtrs.add(ptr);
        }
      }
      const result = {
        root: rt.root
      };
      if (newPtrs.size > 0) {
        result.pointers = newPtrs;
      }
      return result;
    }
    return void 0;
  }
  function* pointersForNode2(ptrSet, node, local, offset2) {
    if (ptrSet === void 0) {
      return;
    }
    for (const ptr of ptrSet) {
      if (!local && ptr.isLocal === true) {
        continue;
      }
      if (ptr.node === node && (offset2 === void 0 || ptr.offset === offset2)) {
        yield ptr;
      }
    }
  }
  function treeToPlaintext(root) {
    if (!root) {
      return "";
    }
    let result = "";
    let prevDepth = 1;
    for (const [node, depth] of dfs(root)) {
      if (depth !== prevDepth) {
        result += "\n";
        prevDepth = depth;
      }
      if (isTextNode(node)) {
        result += node.text;
      }
    }
    return result.trim();
  }
  var kCoreValueTreeNodeOpts;
  var init_tree = __esm({
    "cfds/richtext/tree.ts"() {
      init_error();
      init_core_types();
      init_flat_rep();
      kCoreValueTreeNodeOpts = {
        objectFilterFields: treeAtomKeyFilterIgnoreText
      };
    }
  });

  // cfds/richtext/model.ts
  function isRefNode(atom) {
    return isReadonlyCoreObject(atom) && atom.tagName === "ref" && typeof atom.ref === "string" && typeof atom.type === "string";
  }
  function isRefMarker(atom) {
    return isReadonlyCoreObject(atom) && typeof atom.ref === "string" && typeof atom.type === "string" && (atom.local === void 0 || atom.local === true);
  }
  var init_model = __esm({
    "cfds/richtext/model.ts"() {
      init_core_types();
      init_tree();
    }
  });

  // cfds/change/richtext-change.ts
  var RichTextChange;
  var init_richtext_change = __esm({
    "cfds/change/richtext-change.ts"() {
      init_change();
      init_core_types();
      init_encoding();
      RichTextChange = class extends Change {
        constructor(config) {
          super(config);
          if (isDecoderConfig(config)) {
            this.op = config.decoder.get("op");
            this.start = config.decoder.get("start");
            if (config.decoder.has("end")) {
              this.end = config.decoder.get("end");
            }
            if (config.decoder.has("values")) {
              this.values = config.decoder.get("values");
            }
          } else {
            this.op = config.op;
            this.start = config.start;
            if (config.end !== void 0) {
              this.end = config.end;
            }
            if (config.values !== void 0) {
              this.values = config.values;
            }
          }
        }
        getType() {
          return "rt";
        }
        serialize(encoder, opts) {
          super.serialize(encoder, opts);
          encoder.set("op", this.op);
          encoder.set("start", this.start);
          if (this.end !== void 0) {
            encoder.set("end", this.end);
          }
          if (this.values !== void 0) {
            encoder.set("values", coreValueClone(this.values, opts));
          }
        }
        isEqual(other) {
          return this.op === other.op && this.start === other.start && this.end === other.end && coreValueEquals(this.values, other.values);
        }
      };
    }
  });

  // cfds/richtext/diff-patch.ts
  function* cleanCopyElementNodes(flatRep) {
    for (const atom of flatRep) {
      if (isElementNode(atom)) {
        const copy = coreValueClone(atom, kCoreValueTreeNodeOpts);
        copy.children = [];
        yield copy;
      } else {
        yield atom;
      }
    }
  }
  function* decodeStringDiff(diff4, strRep) {
    for (const cmd of MergeContext.diffToChanges(diff4)) {
      let values;
      if (cmd.value !== void 0) {
        values = Array.from(
          convertPtrsToValues(
            cleanCopyElementNodes(reconstructTextNodes(strRep.decode(cmd.value)))
          )
        );
      }
      const config = {
        op: cmd.operation,
        start: cmd.start
      };
      if (values !== void 0) {
        config.values = values;
      }
      if (cmd.end !== void 0) {
        config.end = cmd.end;
      }
      yield new RichTextChange(config);
    }
  }
  function diff(rt1, rt2, local = true) {
    if (coreValueEquals(rt1, rt2)) {
      return [];
    }
    const strRep = new StringRep(kCoreValueTreeNodeOpts);
    const str1 = strRep.encode(flattenRichText(rt1, local, true));
    const str2 = strRep.encode(flattenRichText(rt2, local, true));
    const textDiffs = kDMP.diff_main(str1, str2, true);
    return Array.from(decodeStringDiff(textDiffs, strRep));
  }
  function patch(base, changes, local = true) {
    const mergeCtx = new MergeContext(
      flattenRichText(base, local),
      kCoreValueTreeNodeOpts
    );
    for (const c of changes) {
      mergeCtx.apply(c);
    }
    const result = reconstructRichText(mergeCtx.finalize());
    return result;
  }
  var init_diff_patch = __esm({
    "cfds/richtext/diff-patch.ts"() {
      init_richtext_change();
      init_tree();
      init_merge_context();
      init_string_rep();
      init_defs();
      init_flat_rep();
      init_core_types();
    }
  });

  // cfds/richtext/normalize/setup.ts
  var userDefinedRules, inlineElementTags;
  var init_setup = __esm({
    "cfds/richtext/normalize/setup.ts"() {
      init_tree();
      userDefinedRules = [
        {
          node: { tags: ["p", "h1", "h2", "ol", "ul", "li"] },
          condition: { source: "parent", tags: ["table", "tr"] },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { tag: "p" },
          condition: { source: "parent", tag: "li" },
          action: {
            name: "remove-child"
          }
        },
        {
          node: { tags: ["p", "h1", "h2", "ol", "ul"] },
          condition: { source: "parent", tag: "p" },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { tag: "li" },
          condition: {
            source: "parent",
            tags: ["p", "h1", "h2", "td"],
            hasTag: false
          },
          action: {
            name: "add-parent",
            tag: "ul"
          }
        },
        {
          node: { tag: "li" },
          condition: { source: "parent", tag: "li" },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { tag: "table" },
          condition: { source: "parent", tags: ["table", "tr"] },
          action: {
            name: "remove-child"
          }
        },
        {
          node: { tag: "tr" },
          condition: { source: "parent", tags: ["p", "h1", "h2", "ul", "ol", "li"] },
          action: {
            name: "add-parent",
            tag: "table"
          }
        },
        {
          node: { tag: "tr" },
          condition: { source: "parent", tags: ["tr", "td"] },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { tag: "td" },
          condition: {
            source: "parent",
            tags: ["p", "h1", "h2", "ul", "ol", "li", "table"]
          },
          action: {
            name: "add-parent",
            tag: "tr"
          }
        },
        {
          node: { tag: "td" },
          condition: { source: "parent", tag: "td" },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { isRefMarker: true, tag: "inline-task" },
          condition: { source: "grandparent", isDefined: true },
          action: {
            name: "to-sibling-below"
          }
        },
        {
          node: { isText: true },
          condition: { source: "parent", tags: ["table", "tr"] },
          action: {
            name: "add-parent",
            tag: "td"
          }
        },
        {
          node: { tags: ["object", "img"] },
          condition: { source: "parent", tags: ["table", "tr"] },
          action: {
            name: "add-parent",
            tag: "td"
          }
        },
        {
          node: { isText: true, tags: ["object", "img"] },
          condition: { source: "grandparent", isDefined: false },
          action: {
            name: "add-parent",
            tag: "p"
          }
        },
        {
          node: { tags: ["object", "img"] },
          action: {
            name: "wrap-text"
          }
        },
        {
          node: { isElement: true },
          action: {
            name: "no-empty-element"
          }
        },
        {
          node: { tags: ["ref", "inline-task"] },
          condition: {
            source: "node",
            func: (n) => {
              const firstChild = n.children[0];
              return firstChild && isElementNode(firstChild);
            }
          },
          action: {
            name: "add-to-element",
            func: () => {
              return { text: "" };
            },
            index: 0
          }
        },
        {
          node: { isElement: true },
          action: {
            name: "element-consistent-children"
          }
        },
        {
          node: { isText: true },
          action: {
            name: "empty-local-text"
          }
        },
        {
          node: { isText: true },
          action: {
            name: "single-local-text"
          }
        },
        {
          node: { tag: "p" },
          condition: { source: "parent", tags: ["ul", "ol"] },
          action: {
            name: "replace-tag",
            newTag: "li"
          }
        },
        {
          node: { isText: true },
          condition: { source: "parent", tags: ["ul", "ol"] },
          action: {
            name: "add-parent",
            tag: "li"
          }
        }
      ];
      inlineElementTags = ["mention"];
    }
  });

  // cfds/richtext/normalize/rules.ts
  function getKeysForNode(node) {
    if (typeof node.tagName === "string") {
      if (tagsCache[node.tagName] !== void 0)
        return tagsCache[node.tagName];
      let tags = [];
      if (isElementNode(node)) {
        tags.push(...ELEMENT_KEYS);
      } else if (isTextNode(node)) {
        tags.push(...TEXT_KEYS);
      } else if (isRefMarker(node)) {
        tags.push(...REF_MARKER_KEYS);
      } else {
        tags.push(...NON_KEYS);
      }
      tags.push("t_" + node.tagName);
      tagsCache[node.tagName] = tags;
      return tags;
    }
    if (isElementNode(node)) {
      return ELEMENT_KEYS;
    } else if (isTextNode(node)) {
      return TEXT_KEYS;
    } else if (isRefMarker(node)) {
      return REF_MARKER_KEYS;
    }
    return NON_KEYS;
  }
  function* getRuleActions(node, parent, grandParent) {
    for (const key of getKeysForNode(node)) {
      if (rules[key] !== void 0) {
        for (const rule of rules[key]) {
          if (rule.condition === void 0) {
            yield rule.action;
            continue;
          }
          switch (rule.condition.source) {
            case "node":
              if (checkCondition(rule.condition, node)) {
                yield rule.action;
              }
              break;
            case "parent":
              if (checkCondition(rule.condition, parent)) {
                yield rule.action;
              }
              break;
            case "grandparent":
              if (checkCondition(rule.condition, grandParent)) {
                yield rule.action;
              }
              break;
            case "first-sibling":
              if (node !== parent.children[0]) {
                if (checkCondition(rule.condition, parent.children[0])) {
                  yield rule.action;
                }
              }
              break;
          }
        }
      }
    }
  }
  function checkCondition(condition, node) {
    const nodeTagName = node !== void 0 && typeof node.tagName === "string" ? node.tagName : void 0;
    if (condition.tags !== void 0 && nodeTagName !== void 0) {
      if (condition.tags.has(nodeTagName)) {
        return true;
      }
    }
    if (condition.isElement !== void 0 && node !== void 0) {
      const nodeIsElement = isElementNode(node);
      if (condition.isElement && nodeIsElement) {
        return true;
      }
      if (!condition.isElement && !nodeIsElement) {
        return true;
      }
    }
    if (condition.isDefined !== void 0) {
      if (condition.isDefined && node !== void 0) {
        return true;
      }
      if (!condition.isDefined && node === void 0) {
        return true;
      }
    }
    if (condition.hasTag !== void 0) {
      if (condition.hasTag && nodeTagName !== void 0) {
        return true;
      }
      if (!condition.hasTag && nodeTagName === void 0) {
        return true;
      }
    }
    if (condition.func !== void 0) {
      if (condition.func(node)) {
        return true;
      }
    }
    return false;
  }
  function convertNodeCondition(node) {
    const keys = [];
    if (typeof node.tag === "string") {
      keys.push("t_" + node.tag);
    }
    if (node.tags !== void 0 && Array.isArray(node.tags)) {
      keys.push(...node.tags.map((t) => "t_" + t));
    }
    if (typeof node.isElement === "boolean") {
      if (node.isElement) {
        keys.push(ELEMENT_KEY);
      } else {
        keys.push(NOT_ELEMENT_KEY);
      }
    }
    if (typeof node.isText === "boolean") {
      if (node.isText) {
        keys.push(TEXT_KEY);
      } else {
        keys.push(NOT_TEXT_KEY);
      }
    }
    if (typeof node.isRefMarker === "boolean") {
      if (node.isRefMarker) {
        keys.push(REF_MARKER_KEY);
      } else {
        keys.push(NOT_REF_MARKER_KEY);
      }
    }
    return keys;
  }
  function convertRuleCondition(condition) {
    if (condition === void 0)
      return;
    const converted = {
      source: condition.source
    };
    if (typeof condition.tag === "string") {
      converted.tags = /* @__PURE__ */ new Set([condition.tag]);
    }
    if (condition.tags !== void 0 && Array.isArray(condition.tags)) {
      converted.tags = union(
        converted.tags || /* @__PURE__ */ new Set(),
        condition.tags
      );
    }
    if (typeof condition.isDefined === "boolean") {
      converted.isDefined = condition.isDefined;
    }
    if (typeof condition.hasTag === "boolean") {
      converted.hasTag = condition.hasTag;
    }
    if (typeof condition.isElement === "boolean") {
      converted.isElement = condition.isElement;
    }
    if (typeof condition.func === "function") {
      converted.func = condition.func;
    }
    return converted;
  }
  function convertSetupRules() {
    for (const uRule of userDefinedRules) {
      const keys = convertNodeCondition(uRule.node);
      if (keys === void 0)
        continue;
      const condition = convertRuleCondition(uRule.condition);
      for (const key of keys) {
        if (rules[key] === void 0) {
          rules[key] = [];
        }
        rules[key].push({
          condition,
          action: uRule.action
        });
      }
    }
  }
  var rules, tagsCache, ELEMENT_KEY, NOT_ELEMENT_KEY, TEXT_KEY, NOT_TEXT_KEY, REF_MARKER_KEY, NOT_REF_MARKER_KEY, ELEMENT_KEYS, TEXT_KEYS, REF_MARKER_KEYS, NON_KEYS;
  var init_rules = __esm({
    "cfds/richtext/normalize/rules.ts"() {
      init_model();
      init_tree();
      init_setup();
      init_set();
      rules = {};
      tagsCache = {};
      ELEMENT_KEY = "elem";
      NOT_ELEMENT_KEY = "n_elem";
      TEXT_KEY = "txt";
      NOT_TEXT_KEY = "n_txt";
      REF_MARKER_KEY = "rm";
      NOT_REF_MARKER_KEY = "n_rm";
      ELEMENT_KEYS = [ELEMENT_KEY, NOT_TEXT_KEY, NOT_REF_MARKER_KEY];
      TEXT_KEYS = [TEXT_KEY, NOT_ELEMENT_KEY, NOT_REF_MARKER_KEY];
      REF_MARKER_KEYS = [REF_MARKER_KEY, NOT_ELEMENT_KEY, NOT_TEXT_KEY];
      NON_KEYS = [NOT_TEXT_KEY, NOT_ELEMENT_KEY, NOT_REF_MARKER_KEY];
      convertSetupRules();
    }
  });

  // cfds/richtext/normalize/index.ts
  function normalizeRichText(richText) {
    richText = coreValueClone(richText);
    stripTrivialTextNodes(richText);
    richText = reconstructRichText(
      // stripTrivialTextNodes(
      flattenRichText(richText, true, false)
      // richText.pointers
      // )
    );
    while (runNodeRules(richText.root) > 0) {
    }
    if (richText.root.children.length === 0) {
      richText.root = initRichTextRoot();
    }
    if (richText.pointers && richText.pointers.size === 0) {
      delete richText.pointers;
    }
    return richText;
  }
  function hasPointers(node, ptrSet) {
    if (!ptrSet) {
      return false;
    }
    for (const _ of pointersForNode2(ptrSet, node, true)) {
      return true;
    }
    return false;
  }
  function stripTrivialTextNodes(rt) {
    for (const [node, _depth, path] of dfs(rt.root, true)) {
      if (isTrivialTextNode(node) && node.text.length === 0 && !hasPointers(node, rt.pointers)) {
        const parent = path[path.length - 1];
        if (parent.children.length > 1) {
          const idx = parent.children.indexOf(node);
          assert(idx >= 0);
          parent.children.splice(idx, 1);
        }
      }
    }
  }
  function runNodeRules(parent, grandParent, gpIndex) {
    let i = parent.children.length - 1;
    let counter = 0;
    let result;
    while (i >= 0 && i < parent.children.length) {
      const child = parent.children[i];
      result = 0 /* CONTINUE */;
      for (const action of getRuleActions(child, parent, grandParent)) {
        switch (action.name) {
          case "add-parent": {
            const newParent = {
              children: [child],
              tagName: action.tag
            };
            if (child.isLocal !== void 0)
              newParent.isLocal = child.isLocal;
            parent.children[i] = newParent;
            counter++;
            result = 1 /* RETURN_TO_PARENT */;
            break;
          }
          case "to-sibling-below": {
            if (grandParent !== void 0 && gpIndex !== void 0) {
              let toI = gpIndex + 1;
              parent.children.splice(i, 1);
              grandParent.children.splice(toI, 0, child);
              counter++;
              result = 2 /* SAME_CHILD */;
            }
            break;
          }
          case "remove-child": {
            if (isElementNode(child)) {
              parent.children.splice(i, 1, ...child.children);
            } else {
              parent.children.splice(i, 1);
            }
            counter++;
            result = 2 /* SAME_CHILD */;
            break;
          }
          case "replace-tag": {
            child.tagName = action.newTag;
            break;
          }
          case "wrap-text": {
            if (i === 0 || !isTextNode(parent.children[i - 1])) {
              const tIndex = i > 0 ? i - 1 : 0;
              parent.children.splice(tIndex, 0, { text: "" });
              i++;
              counter++;
              result = 1 /* RETURN_TO_PARENT */;
            }
            if (i === parent.children.length - 1 || !isTextNode(parent.children[i + 1])) {
              parent.children.splice(i + 1, 0, { text: "" });
              counter++;
              result = 1 /* RETURN_TO_PARENT */;
            }
            break;
          }
          case "no-empty-element": {
            if (isElementNode(child) && child.children.length === 0) {
              parent.children.splice(i, 1);
              result = 2 /* SAME_CHILD */;
            }
            break;
          }
          case "add-to-element": {
            if (isElementNode(child)) {
              const newNode = action.func();
              delete newNode.isLocal;
              if (child.isLocal !== void 0)
                newNode.isLocal = child.isLocal;
              if (action.index !== void 0) {
                child.children.splice(action.index, 0, newNode);
              } else {
                child.children.push(newNode);
              }
              counter++;
            }
            break;
          }
          case "element-consistent-children": {
            if (isElementNode(child) && child.children.length >= 2) {
              const fTextOrInline = isTextOrInline(child.children[0]);
              let j = 1;
              for (; j < child.children.length; j++) {
                if (fTextOrInline !== isTextOrInline(child.children[j])) {
                  break;
                }
              }
              if (j < child.children.length) {
                const newP = {
                  tagName: "p",
                  children: child.children.slice(j)
                };
                parent.children.splice(i + 1, 0, newP);
                child.children.splice(j, child.children.length);
                counter++;
                result = 1 /* RETURN_TO_PARENT */;
              }
            }
            break;
          }
          case "empty-local-text": {
            if ((i === 0 || i + 1 === parent.children.length) && //First or Last Child
            isTextNode(child) && child.text === "" && child.isLocal === void 0) {
              const brother = i === 0 ? parent.children[1] : parent.children[i - 1];
              if (i + 1 === parent.children.length) {
                const firstChild = parent.children[0];
                if (isTextNode(firstChild) && firstChild.text === "") {
                  continue;
                }
              }
              if (brother) {
                if (brother.isLocal === void 0) {
                  delete child.isLocal;
                } else if (brother.isLocal !== child.isLocal) {
                  child.isLocal = brother.isLocal;
                }
              }
            }
            break;
          }
          case "single-local-text": {
            if (parent.children.length === 1 && //Only Child
            isTextNode(child) && child.text === "" && !isNodeSameLocality(parent, child)) {
              if (parent.isLocal === void 0) {
                delete child.isLocal;
              } else {
                child.isLocal = parent.isLocal;
              }
            }
            break;
          }
          default: {
            throw new Error(
              `Rule action: ${action.name} is not defined!`
            );
          }
        }
        if (result !== 0 /* CONTINUE */) {
          break;
        }
      }
      if (result === 1 /* RETURN_TO_PARENT */) {
        break;
      }
      if (result === 2 /* SAME_CHILD */) {
        continue;
      }
      if (isElementNode(child)) {
        counter += runNodeRules(child, parent, i);
      }
      i--;
    }
    return counter;
  }
  function isTextOrInline(node) {
    if (isElementNode(node)) {
      return typeof node.tagName === "string" && inlineElementTags.includes(node.tagName);
    }
    return true;
  }
  var init_normalize = __esm({
    "cfds/richtext/normalize/index.ts"() {
      init_error();
      init_core_types();
      init_flat_rep();
      init_tree();
      init_rules();
      init_setup();
    }
  });

  // cfds/base/types/richtext3-type.ts
  var kCoreValueOpts, expiredPointersBuffer, RichText3TypeOperations;
  var init_richtext3_type = __esm({
    "cfds/base/types/richtext3-type.ts"() {
      init_model();
      init_types();
      init_core_types();
      init_diff_patch();
      init_flat_rep();
      init_normalize();
      init_tree();
      init_core_type();
      kCoreValueOpts = {
        objectFilterFields: treeAtomKeyFilterIgnoreText
      };
      expiredPointersBuffer = 1e3 * 60 * 10;
      RichText3TypeOperations = class extends CoreTypeOperations {
        constructor() {
          super(6 /* Object */, "richtext-3" /* RICHTEXT_V3 */);
        }
        patch(curValue, changes, _options) {
          if (curValue === void 0) {
            curValue = initRichText();
          }
          const newValue = patch(curValue, changes, true);
          return newValue;
        }
        normalize(val) {
          return normalizeRichText(val);
        }
        getRefOperation() {
          return void 0;
        }
        validate(value) {
          return isRichText(value);
        }
        serialize(key, value, encoder, options) {
          const local = options?.local === true;
          if (options?.flatRep === true) {
            const flat = flattenRichText(value, local, false);
            encoder.set(key, flat, kCoreValueOpts);
          } else {
            const func = local ? void 0 : onlyNoneLocal;
            encoder.set(key, value, {
              iterableFilter: func
            });
          }
        }
        deserialize(value, options) {
          return value;
        }
        valueAddedDiff(value2, options) {
          const local = options?.local === true;
          const empty = initRichText();
          return diff(empty, value2, local);
        }
        valueRemovedDiff(value1, options) {
          const local = options?.local === true;
          const empty = initRichText();
          return diff(value1, empty, local);
        }
        valueChangedDiff(value1, value2, options) {
          const local = options?.local === true;
          return diff(value1, value2, local);
        }
        isEmpty(_value) {
          return false;
        }
        equals(val1, val2, options) {
          const local = options?.local === true;
          const func = local ? void 0 : onlyNoneLocal;
          return coreValueEquals(val1, val2, {
            iterableFilter: func
          });
        }
        clone(value) {
          return coreValueClone(value);
        }
        needGC(value) {
          if (value.pointers) {
            for (const pointer of value.pointers) {
              if (isExpiredPointer(pointer, expiredPointersBuffer)) {
                return true;
              }
            }
          }
          return false;
        }
        gc(value) {
          return purgeExpiredPointers(value, expiredPointersBuffer);
        }
        fillRefs(refs, value) {
          for (const [node] of dfs(value.root)) {
            if (isRefMarker(node)) {
              refs.add(node.ref);
            }
          }
        }
        rewriteRefs(keyMapping, value, deleteRefs) {
          for (const [node, _depth, path] of dfs(value.root, true)) {
            if (isRefMarker(node)) {
              if (deleteRefs?.has(node.ref)) {
                const children = path[path.length - 1].children;
                children.splice(children.indexOf(node), 1);
              } else {
                node.ref = keyMapping.get(node.ref) || node.ref;
              }
            }
          }
          return value;
        }
      };
    }
  });

  // cfds/base/types/date-type.ts
  var DateTypeOperations;
  var init_date_type = __esm({
    "cfds/base/types/date-type.ts"() {
      init_date();
      init_types();
      init_core_types();
      init_primitive_type();
      DateTypeOperations = class extends PrimitiveTypeOperations {
        constructor() {
          super(4 /* Date */, "date" /* DATE */);
        }
        deserialize(value, options) {
          const date = super.deserialize(value, options);
          if (typeof date === "number") {
            return deserializeDate(date);
          }
          return date;
        }
      };
    }
  });

  // cfds/base/types/index.ts
  function isRefValueType(type) {
    return type === "ref" /* REF */ || type === "refset" /* REF_SET */ || type === "richtext-3" /* RICHTEXT_V3 */;
  }
  function getTypeOperations(type) {
    const op = typeOperations[type];
    if (op === void 0) {
      throw new Error(`type operations for: ${type} has not been implemented`);
    }
    return op;
  }
  function getTypeOperationsByValue(value) {
    for (const typeOP of Object.values(typeOperations)) {
      if (typeOP.validate(value)) {
        return typeOP;
      }
    }
    throw new Error(`getTypeOperationsByValue failed for: ${value}`);
  }
  function registerTypeOperations() {
    if (Object.entries(typeOperations).length === 0) {
      const register2 = (op) => {
        typeOperations[op.valueType] = op;
      };
      register2(new StringTypeOperations(false));
      register2(new StringTypeOperations(true));
      register2(new PrimitiveTypeOperations(1 /* Number */, "number" /* NUMBER */));
      register2(new PrimitiveTypeOperations(2 /* Boolean */, "boolean" /* BOOLEAN */));
      register2(new DateTypeOperations());
      register2(new SetTypeOperations(false, "set" /* SET */));
      register2(new SetTypeOperations(false, "stringset" /* STR_SET */));
      register2(new SetTypeOperations(true, "refset" /* REF_SET */));
      register2(new MapTypeOperations(false, "map" /* MAP */));
      register2(new MapTypeOperations(true, "refmap" /* REF_MAP */));
      register2(new RichText3TypeOperations());
    }
  }
  function valueTypeEquals(type, value1, value2, options) {
    if (value1 === void 0 && value2 !== void 0) {
      return false;
    }
    if (value1 !== void 0 && value2 === void 0) {
      return false;
    }
    if (value1 === void 0 && value2 === void 0) {
      return true;
    }
    const typeOP = getTypeOperations(type);
    return typeOP.equals(value1, value2, options);
  }
  var typeOperations;
  var init_types = __esm({
    "cfds/base/types/index.ts"() {
      init_map_type();
      init_primitive_type();
      init_set_type();
      init_string_type();
      init_richtext3_type();
      init_core_types();
      init_date_type();
      typeOperations = {};
      registerTypeOperations();
    }
  });

  // cfds/change/decode.ts
  function decodeChange(decoder) {
    const type = decoder.get("changeType");
    switch (type) {
      case "fd":
        return new FieldChange({ decoder });
      case "rt":
        return new RichTextChange({ decoder });
      default:
        notReached("Unsupported format: " + type);
    }
  }
  var init_decode = __esm({
    "cfds/change/decode.ts"() {
      init_field_change();
      init_richtext_change();
      init_error();
    }
  });

  // cfds/base/object.ts
  function isValidData(scheme, data) {
    const requiredFields = scheme.getRequiredFields();
    if (requiredFields !== void 0) {
      for (const k of requiredFields) {
        if (!data.hasOwnProperty(k) && !scheme.hasInitForField(k)) {
          return [false, `Missing required field "${k}"`];
        }
      }
    }
    return validateFieldTypes(scheme.getFields(), data);
  }
  function validateFieldTypes(fieldsScheme, data) {
    for (const [key, value] of Object.entries(data)) {
      const type = fieldsScheme[key];
      if (!type) {
        return [false, `Unknown field ${key}`];
      }
      const typeOP = getTypeOperations(type);
      if (!typeOP.validate(value)) {
        return [false, `Invalid value for field "${key}". Expected ${type}`];
      }
    }
    return [true, ""];
  }
  function serialize(encoder, fieldsScheme, data, options = {}, overrides = {}) {
    if (!data) {
      return;
    }
    for (const [key, value] of Object.entries(data)) {
      const type = fieldsScheme[key];
      assert(type !== void 0, `Unknown field ${key}`);
      if (overrides[type]) {
        try {
          overrides[type](encoder, key, value, options);
          continue;
        } catch (e) {
          log({
            severity: "INFO",
            error: "SerializeError",
            trace: e.stack,
            message: e.message,
            key,
            valueType: type
          });
        }
      }
      if (data[key] === void 0) {
        continue;
      }
      const typeOP = getTypeOperations(type);
      typeOP.serialize(key, value, encoder, options);
    }
  }
  function deserialize(decoder, fieldsScheme, options = {}, overrides = {}) {
    const data = {};
    for (const [key, type] of Object.entries(fieldsScheme)) {
      assert(type !== void 0, `Unknown field ${key}`);
      const decValue = decoder.get(key);
      if (decValue === void 0)
        continue;
      if (overrides[type]) {
        try {
          const value2 = overrides[type](decValue, options);
          if (value2 !== void 0) {
            data[key] = value2;
          }
          continue;
        } catch (e) {
          log({
            severity: "INFO",
            error: "SerializeError",
            trace: e.stack,
            message: e.message,
            key,
            valueType: type
          });
        }
      }
      const typeOP = getTypeOperations(type);
      const value = typeOP.deserialize(decValue, options);
      if (value !== void 0) {
        data[key] = value;
      }
    }
    return data;
  }
  function equals2(fields, data1, data2, options = {}) {
    if (!data1 && !data2) {
      return true;
    }
    if (!data1 && data2) {
      return false;
    }
    if (data1 && !data2) {
      return false;
    }
    for (const [key, type] of Object.entries(fields)) {
      if (!valueTypeEquals(type, data1[key], data2[key], options)) {
        return false;
      }
    }
    return true;
  }
  function clone(fieldsScheme, data, onlyFields) {
    const result = {};
    for (const key of Object.keys(data)) {
      const type = fieldsScheme[key];
      if (!type) {
        continue;
      }
      if (onlyFields && !onlyFields.includes(key)) {
        continue;
      }
      const value = data[key];
      if (value === void 0) {
        result[key] = value;
        continue;
      }
      const typeOP = getTypeOperations(type);
      result[key] = typeOP.clone(value);
    }
    return result;
  }
  function diff2(schemeFields, data1, data2, options = {}) {
    const changes = {};
    const addChanges = (field, fChanges) => {
      if (fChanges === void 0)
        return;
      if (Array.isArray(fChanges)) {
        if (fChanges.length === 0)
          return;
      } else {
        fChanges = [fChanges];
      }
      for (const change of fChanges) {
        if (changes[field] === void 0)
          changes[field] = [];
        changes[field].push(change);
      }
    };
    for (const [key, type] of Object.entries(schemeFields)) {
      const value1 = data1[key];
      const value2 = data2[key];
      if (value1 === void 0 && value2 === void 0)
        continue;
      const typeOP = getTypeOperations(type);
      let fChanges;
      if (value1 === void 0 && value2 !== void 0) {
        fChanges = typeOP.valueAddedDiff(value2, options);
      } else if (value1 !== void 0 && value2 === void 0) {
        fChanges = typeOP.valueRemovedDiff(value1, options);
      } else {
        fChanges = typeOP.valueChangedDiff(value1, value2, options);
      }
      addChanges(key, fChanges);
    }
    return changes;
  }
  function patch2(fieldsScheme, data, changes, options = {}) {
    for (const [field, fChanges] of Object.entries(changes)) {
      const type = fieldsScheme[field];
      const typeOP = getTypeOperations(type);
      const newValue = typeOP.patch(data[field], fChanges, options);
      if (newValue === void 0) {
        delete data[field];
      } else {
        data[field] = newValue;
      }
    }
    return data;
  }
  function getRefs(schemeFields, data) {
    const refs = /* @__PURE__ */ new Set();
    for (const [key, type] of Object.entries(schemeFields)) {
      getTypeOperations(type).fillRefs(refs, data[key]);
    }
    return refs;
  }
  function normalize(scheme, data) {
    for (const [key, type] of Object.entries(scheme.fields)) {
      let value = data[key];
      const typeOP = getTypeOperations(type);
      if (value === void 0 || typeOP.isEmpty(value)) {
        if (scheme.hasInitForField(key)) {
          value = scheme.initValueForField(key, data);
          data[key] = value;
        }
      }
      if (value !== void 0) {
        data[key] = typeOP.normalize(value);
      }
    }
  }
  function needGC(scheme, data) {
    for (const [key, type] of Object.entries(scheme.fields)) {
      let value = data[key];
      if (value === void 0)
        continue;
      const typeOP = getTypeOperations(type);
      if (typeOP.needGC(value)) {
        return true;
      }
    }
    return false;
  }
  function gc(scheme, data) {
    let result = false;
    for (const [key, type] of Object.entries(scheme.fields)) {
      let value = data[key];
      if (value === void 0)
        continue;
      const typeOP = getTypeOperations(type);
      const newValue = typeOP.gc(value);
      if (newValue !== void 0) {
        data[key] = newValue;
        result = true;
      }
    }
    return result;
  }
  function diffKeys(schemeFields, data1, data2, options = {}) {
    const result = /* @__PURE__ */ new Set();
    for (const key of Object.keys(data1)) {
      if (schemeFields[key] && !data2.hasOwnProperty(key)) {
        result.add(key);
      }
    }
    for (const key of Object.keys(data2)) {
      const type = schemeFields[key];
      if (!type) {
        continue;
      }
      if (!data1.hasOwnProperty(key)) {
        result.add(key);
        continue;
      }
      const typeOP = getTypeOperations(type);
      if (!typeOP.equals(data1[key], data2[key], options)) {
        result.add(key);
      }
    }
    return Array.from(result);
  }
  function decodedDataChanges(dec) {
    const changes = {};
    for (const key in dec) {
      changes[key] = dec[key].map(
        (v) => decodeChange(v)
      );
    }
    return changes;
  }
  function concatChanges(changes1, changes2) {
    const changes = {};
    const addChanges = (fromChanges) => {
      for (const key in fromChanges) {
        if (changes[key] === void 0) {
          changes[key] = [];
        }
        changes[key].push(...fromChanges[key]);
      }
    };
    addChanges(changes1);
    addChanges(changes2);
    return changes;
  }
  function rewriteRefs(scheme, data, keyMapping, deleteRefs) {
    for (const [key, value] of Object.entries(data)) {
      if (value === void 0 || !scheme.hasField(key)) {
        continue;
      }
      const type = scheme.getFieldType(key);
      const newValue = getTypeOperations(type).rewriteRefs(
        keyMapping,
        data[key],
        deleteRefs
      );
      if (newValue === void 0) {
        delete data[key];
      } else {
        data[key] = newValue;
      }
    }
    return data;
  }
  var init_object = __esm({
    "cfds/base/object.ts"() {
      init_error();
      init_types();
      init_decode();
      init_log();
    }
  });

  // cfds/base/scheme-types.ts
  var SchemeNamespace, namespaces, NS_WORKSPACE, NS_NOTES, NS_TAGS, NS_USERS, NS_USER_SETTINGS, NS_ORGANIZATION, NS_FILTER, TYPE_STR, TYPE_NUMBER, TYPE_DATE, TYPE_RICHTEXT_V3, TYPE_STR_SET, TYPE_SET, TYPE_REF, TYPE_REF_SET, TYPE_MAP, TYPE_REF_MAP, kRecordIdField, SchemeDef, FilterSortByValues;
  var init_scheme_types = __esm({
    "cfds/base/scheme-types.ts"() {
      init_types();
      SchemeNamespace = /* @__PURE__ */ ((SchemeNamespace2) => {
        SchemeNamespace2["WORKSPACE"] = "workspaces";
        SchemeNamespace2["NOTES"] = "notes";
        SchemeNamespace2["TAGS"] = "tags";
        SchemeNamespace2["USERS"] = "users";
        SchemeNamespace2["USER_SETTINGS"] = "user-settings";
        SchemeNamespace2["ORGANIZATION"] = "organization";
        SchemeNamespace2["FILTER"] = "filter";
        SchemeNamespace2["Null"] = "";
        return SchemeNamespace2;
      })(SchemeNamespace || {});
      namespaces = [];
      for (const key in SchemeNamespace) {
        namespaces.push(SchemeNamespace[key]);
      }
      NS_WORKSPACE = "workspaces" /* WORKSPACE */;
      NS_NOTES = "notes" /* NOTES */;
      NS_TAGS = "tags" /* TAGS */;
      NS_USERS = "users" /* USERS */;
      NS_USER_SETTINGS = "user-settings" /* USER_SETTINGS */;
      NS_ORGANIZATION = "organization" /* ORGANIZATION */;
      NS_FILTER = "filter" /* FILTER */;
      TYPE_STR = "string" /* STRING */;
      TYPE_NUMBER = "number" /* NUMBER */;
      TYPE_DATE = "date" /* DATE */;
      TYPE_RICHTEXT_V3 = "richtext-3" /* RICHTEXT_V3 */;
      TYPE_STR_SET = "stringset" /* STR_SET */;
      TYPE_SET = "set" /* SET */;
      TYPE_REF = "ref" /* REF */;
      TYPE_REF_SET = "refset" /* REF_SET */;
      TYPE_MAP = "map" /* MAP */;
      TYPE_REF_MAP = "refmap" /* REF_MAP */;
      kRecordIdField = "<id>";
      SchemeDef = class {
        constructor(namespace, fieldDescriptors, repositoryFieldName) {
          this.namespace = namespace;
          this.fieldDescriptors = fieldDescriptors;
          this.repositoryFieldName = repositoryFieldName || kRecordIdField;
        }
        derive(namespace, fields, removeFields, repositoryFieldName) {
          const newFields = Object.assign(
            Object.assign({}, this.fieldDescriptors),
            fields
          );
          if (removeFields) {
            for (const f of removeFields) {
              delete newFields[f];
            }
          }
          return new SchemeDef(
            namespace || this.namespace,
            newFields,
            repositoryFieldName || this.repositoryFieldName
          );
        }
      };
      FilterSortByValues = [
        "priority",
        "created",
        "modified",
        "due"
      ];
    }
  });

  // cfds/base/scheme-versions.ts
  function runRegister(manager) {
    manager.register(
      1,
      [SCHEME_WORKSPACE_1, SCHEME_USER_1, SCHEME_NOTE_1, SCHEME_TAG_1],
      []
    );
    manager.register(
      2,
      [SCHEME_NOTE_2],
      ["tags" /* TAGS */, "users" /* USERS */, "workspaces" /* WORKSPACE */],
      (namespace, data) => {
        if (namespace === NS_NOTES) {
          if (data.attachments) {
            let att = data.attachments;
            if (isString(att)) {
              att = JSON.parse(att);
            }
            data.attachments = new Set(att);
          }
          if (data.tags) {
            const tagMap = /* @__PURE__ */ new Map();
            for (const v of data.tags) {
              tagMap.set(v, v);
            }
            data.tags = tagMap;
          }
        }
      }
    );
    manager.register(
      3,
      [SCHEME_NOTE_3],
      ["tags" /* TAGS */, "users" /* USERS */, "workspaces" /* WORKSPACE */],
      (namespace, data) => {
        if (namespace === NS_NOTES) {
          if (data.title) {
            notReached("Unsupported old format RichText v2");
          }
          if (data.body) {
            notReached("Unsupported old format RichText v2");
          }
        }
      }
    );
    manager.register(
      4,
      [SCHEME_WORKSPACE_2],
      ["tags" /* TAGS */, "users" /* USERS */, "notes" /* NOTES */],
      (namespace, data) => {
        if (namespace === NS_WORKSPACE) {
          data.createdBy = data.owner;
          delete data.owner;
        }
      }
    );
    manager.register(
      5,
      [SCHEME_WORKSPACE_3, SCHEME_NOTE_4],
      ["tags" /* TAGS */, "users" /* USERS */],
      (namespace, data) => {
      }
    );
    manager.register(
      6,
      [
        SCHEME_WORKSPACE_4,
        SCHEME_USER_2,
        SCHEME_USER_SETTINGS_1,
        SCHEME_TAG_2,
        SCHEME_FILTER_1,
        SCHEME_NOTE_5
      ],
      [],
      (namespace, data) => {
        if (namespace === NS_TAGS) {
          delete data.color;
          delete data.workspace;
          delete data.createdBy;
        } else if (namespace === NS_USERS) {
          delete data.lastLoggedIn;
          delete data.workspaces;
          delete data.workspaceColors;
          delete data.hiddenWorkspaces;
          delete data.pinnedWorkspaces;
          delete data.onboardingStep;
          delete data.seenTutorials;
        } else if (namespace === NS_WORKSPACE) {
          delete data.noteTags;
          delete data.taskTags;
          delete data.createdBy;
        } else if (namespace === NS_NOTES) {
          delete data.status;
        }
      }
    );
  }
  var SCHEME_BASE_1, SCHEME_CONTENT_BASE_1, SCHEME_WORKSPACE_1, SCHEME_WORKSPACE_2, SCHEME_WORKSPACE_3, SCHEME_WORKSPACE_4, SCHEME_USER_1, SCHEME_USER_2, SCHEME_USER_SETTINGS_1, SCHEME_NOTE_1, SCHEME_NOTE_2, SCHEME_NOTE_3, SCHEME_NOTE_4, SCHEME_NOTE_5, SCHEME_TAG_1, SCHEME_TAG_2, SCHEME_FILTER_1;
  var init_scheme_versions = __esm({
    "cfds/base/scheme-versions.ts"() {
      init_comparisons();
      init_scheme_types();
      init_tree();
      init_error();
      SCHEME_BASE_1 = new SchemeDef("", {
        creationDate: {
          type: TYPE_DATE,
          required: true,
          default: () => /* @__PURE__ */ new Date()
        },
        isDeleted: {
          type: TYPE_NUMBER,
          default: () => 0
        },
        lastModified: {
          type: TYPE_DATE,
          default: (rec) => rec.get("creationDate")
        },
        sortStamp: TYPE_STR
      });
      SCHEME_CONTENT_BASE_1 = SCHEME_BASE_1.derive(
        "",
        {
          createdBy: {
            type: TYPE_STR
          },
          workspace: {
            type: TYPE_REF
          }
        },
        [],
        "workspace"
      );
      SCHEME_WORKSPACE_1 = SCHEME_BASE_1.derive(NS_WORKSPACE, {
        owner: {
          type: TYPE_REF,
          required: true
        },
        name: {
          type: TYPE_STR,
          required: true
        },
        users: TYPE_REF_SET,
        icon: TYPE_STR,
        noteTags: {
          type: TYPE_MAP,
          default: () => /* @__PURE__ */ new Map()
        },
        taskTags: {
          type: TYPE_MAP,
          default: () => /* @__PURE__ */ new Map()
        },
        exportImage: TYPE_STR,
        footerHtml: TYPE_STR
      });
      SCHEME_WORKSPACE_2 = SCHEME_WORKSPACE_1.derive(
        NS_WORKSPACE,
        {
          createdBy: {
            type: TYPE_REF
          }
        },
        ["owner"]
      );
      SCHEME_WORKSPACE_3 = SCHEME_WORKSPACE_2.derive(NS_WORKSPACE, {
        noteTags: {
          type: TYPE_REF_MAP,
          default: () => /* @__PURE__ */ new Map()
        },
        taskTags: {
          type: TYPE_REF_MAP,
          default: () => /* @__PURE__ */ new Map()
        }
      });
      SCHEME_WORKSPACE_4 = SCHEME_WORKSPACE_3.derive(NS_WORKSPACE, {}, [
        "noteTags",
        "taskTags"
      ]);
      SCHEME_USER_1 = SCHEME_BASE_1.derive(NS_USERS, {
        avatarUrl: TYPE_STR,
        email: TYPE_STR,
        name: TYPE_STR,
        lastLoggedIn: TYPE_DATE,
        workspaces: {
          type: TYPE_REF_SET,
          init: () => /* @__PURE__ */ new Set()
        },
        seenTutorials: {
          type: TYPE_STR_SET,
          init: () => /* @__PURE__ */ new Set()
        },
        workspaceColors: {
          type: TYPE_MAP,
          init: () => /* @__PURE__ */ new Map()
        },
        hiddenWorkspaces: {
          type: TYPE_STR_SET,
          init: () => /* @__PURE__ */ new Set()
        },
        pinnedWorkspaces: {
          type: TYPE_SET,
          init: () => /* @__PURE__ */ new Set()
        },
        onboardingStep: {
          type: TYPE_NUMBER,
          init: () => 0 /* Start */
        }
      });
      SCHEME_USER_2 = SCHEME_USER_1.derive(NS_USERS, {}, [
        "lastLoggedIn",
        "workspaces",
        "workspaceColors",
        "hiddenWorkspaces",
        "pinnedWorkspaces",
        "onboardingStep",
        "seenTutorials"
      ]);
      SCHEME_USER_SETTINGS_1 = SCHEME_BASE_1.derive(NS_USER_SETTINGS, {
        passwordHash: TYPE_STR,
        // Hash + salt
        lastLoggedIn: TYPE_DATE,
        seenTutorials: {
          type: TYPE_STR_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        workspaceColors: {
          type: TYPE_MAP,
          default: () => /* @__PURE__ */ new Map()
        },
        hiddenWorkspaces: {
          type: TYPE_STR_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        pinnedWorkspaces: {
          type: TYPE_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        onboardingStep: {
          type: TYPE_NUMBER,
          default: () => 0 /* Start */
        }
      });
      SCHEME_NOTE_1 = SCHEME_CONTENT_BASE_1.derive(NS_NOTES, {
        assignees: {
          type: TYPE_STR_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        attachments: {
          type: TYPE_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        // body: TYPE_RICHTEXT,
        dueDate: TYPE_DATE,
        // Task only, zero on convert
        // title: TYPE_RICHTEXT,
        parentNote: TYPE_STR,
        // Let's debate
        status: TYPE_NUMBER,
        // Task only, zero on convert
        tags: {
          type: TYPE_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        type: TYPE_STR
        // Undo for convert
      });
      SCHEME_NOTE_2 = SCHEME_NOTE_1.derive(NS_NOTES, {
        parentNote: TYPE_REF,
        tags: {
          type: TYPE_MAP,
          default: () => /* @__PURE__ */ new Map()
        }
      });
      SCHEME_NOTE_3 = SCHEME_NOTE_2.derive(NS_NOTES, {
        title: {
          type: TYPE_RICHTEXT_V3,
          default: () => initRichText()
        },
        body: {
          type: TYPE_RICHTEXT_V3,
          default: () => initRichText()
        }
      });
      SCHEME_NOTE_4 = SCHEME_NOTE_3.derive(NS_NOTES, {
        assignees: {
          type: TYPE_REF_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        tags: {
          type: TYPE_REF_MAP,
          default: () => /* @__PURE__ */ new Map()
        },
        pinnedBy: {
          type: TYPE_SET,
          default: () => /* @__PURE__ */ new Set()
        },
        parentNote: TYPE_REF
      });
      SCHEME_NOTE_5 = SCHEME_NOTE_4.derive(NS_NOTES, {
        status: TYPE_STR
      });
      SCHEME_TAG_1 = SCHEME_CONTENT_BASE_1.derive(NS_TAGS, {
        color: TYPE_STR,
        name: TYPE_STR,
        parentTag: TYPE_REF
      });
      SCHEME_TAG_2 = SCHEME_TAG_1.derive(NS_TAGS, {}, ["color"]);
      SCHEME_FILTER_1 = SCHEME_BASE_1.derive(
        NS_FILTER,
        {
          owner: {
            type: TYPE_REF,
            required: true
          },
          tags: TYPE_REF_SET,
          assignees: TYPE_REF_SET,
          workspaces: TYPE_REF_SET,
          noteType: TYPE_STR,
          statuses: TYPE_STR_SET,
          sortBy: TYPE_STR,
          pinned: TYPE_NUMBER,
          groupBy: TYPE_STR,
          groupByPivot: TYPE_REF,
          textQuery: TYPE_STR,
          viewType: TYPE_STR
        },
        [],
        // Filters are currently personal and live under the user's private repo
        "owner"
      );
    }
  });

  // cfds/base/scheme.ts
  function normalizeFieldDescriptors(descriptors) {
    const types = {};
    const requiredFields = [];
    for (let [k, desc] of Object.entries(descriptors)) {
      if (isString(desc)) {
        desc = {
          type: desc
        };
      }
      descriptors[k] = desc;
      types[k] = desc.type;
      if (desc.required) {
        requiredFields.push(k);
      }
    }
    return [descriptors, types, requiredFields];
  }
  var Scheme, SchemeVersion, managerLoadFunc, SchemeManager;
  var init_scheme = __esm({
    "cfds/base/scheme.ts"() {
      init_error();
      init_comparisons();
      init_core_types();
      init_encoding();
      init_json();
      init_object();
      init_scheme_types();
      init_scheme_versions();
      init_types();
      Scheme = class {
        constructor(config) {
          if (isDecoderConfig(config)) {
            const decoder = config.decoder;
            const namespace = decoder.get("ns");
            const version = decoder.get("version");
            if (namespace === "" && version === 0) {
              this.copyFrom(Scheme.nullScheme());
              return;
            }
            const scheme = SchemeManager.instance.getScheme(namespace, version);
            if (!scheme) {
              throw new Error(`Unknown scheme ${namespace}/${version}`);
            }
            this.copyFrom(scheme);
          } else {
            this._namespace = config.namespace;
            this._version = config.version || 0;
            [this._fieldDescriptors, this._fields, this._requiredFields] = normalizeFieldDescriptors(config.fieldDescriptors);
            this._repoFieldName = config.repositoryFieldName;
          }
        }
        get namespace() {
          return this._namespace;
        }
        get version() {
          return this._version;
        }
        get isNull() {
          return Object.keys(this._fieldDescriptors).length === 0;
        }
        get fields() {
          return this._fields;
        }
        get repositoryFieldName() {
          return this._repoFieldName;
        }
        getFields() {
          return this._fields;
        }
        getRequiredFields() {
          return this._requiredFields;
        }
        getVersion() {
          return this._version;
        }
        getNamespace() {
          return this._namespace;
        }
        getFieldType(fieldName) {
          const type = this.getFields()[fieldName];
          assert(
            !isNoValue(type),
            `Unknown field ${this.getNamespace()}/${fieldName}`
          );
          return type;
        }
        hasField(fieldName) {
          const desc = this._fieldDescriptors[fieldName];
          return !isNoValue(desc);
        }
        isRefField(fieldName) {
          const type = this.getFields()[fieldName];
          return !isNoValue(type) && isRefValueType(type);
        }
        isRequiredField(fieldName) {
          const requiredFields = this.getRequiredFields();
          if (requiredFields === void 0) {
            return false;
          }
          return requiredFields.indexOf(fieldName) >= 0;
        }
        hasInitForField(fieldName) {
          const desc = this._fieldDescriptors[fieldName];
          return desc && desc.init;
        }
        initValueForField(fieldName, data) {
          const desc = this._fieldDescriptors[fieldName];
          if (!desc || !desc.init) {
            return void 0;
          }
          return desc.init(data);
        }
        clone(version) {
          return new Scheme({
            namespace: this._namespace,
            version: version || this._version,
            fieldDescriptors: Object.assign({}, this._fieldDescriptors),
            repositoryFieldName: this._repoFieldName
          });
        }
        allowsAutoUpgradeFrom(oldScheme) {
          if (this.isNull) {
            return false;
          }
          const oldNS = oldScheme.getNamespace();
          assert(!oldNS || this.getNamespace() === oldScheme.getNamespace());
          if (oldScheme.isNull) {
            return true;
          }
          const oldVersion = oldScheme.getVersion();
          if (oldVersion === this.getVersion()) {
            return true;
          }
          if (oldVersion > this.getVersion()) {
            debugger;
            return false;
          }
          if (!SchemeManager.instance.schemeExists(oldNS, oldVersion + 1)) {
            debugger;
            return false;
          }
          if (!SchemeManager.instance.schemeExists(oldNS, this.getVersion())) {
            debugger;
            return false;
          }
          return true;
        }
        upgradeAvailable() {
          const latest = Scheme.getLatestVersion(this._namespace);
          return latest.version > this._version;
        }
        upgradeData(oldScheme, oldData) {
          const oldNS = oldScheme.getNamespace();
          assert(!oldNS || this.getNamespace() === oldScheme.getNamespace());
          if (oldScheme.isNull) {
            return oldData;
          }
          const oldVersion = oldScheme.getVersion();
          const newVersion = this.getVersion();
          const newData = clone(oldScheme.getFields(), oldData);
          if (oldVersion === newVersion) {
            return newData;
          }
          let curVersion = oldVersion + 1;
          while (curVersion <= newVersion) {
            if (SchemeManager.instance.schemeExists(this.namespace, curVersion)) {
              const upFunc = SchemeManager.instance.getUpFunc(curVersion);
              if (upFunc) {
                upFunc(this.getNamespace(), newData);
              }
            }
            curVersion++;
          }
          return newData;
        }
        isEqual(otherScheme) {
          if (this._version !== otherScheme.getVersion()) {
            return false;
          }
          return coreValueEquals(
            this._fieldDescriptors,
            otherScheme._fieldDescriptors
          );
        }
        serialize(encoder) {
          encoder.set("ns", this.getNamespace());
          encoder.set("version", this.getVersion());
        }
        copyFrom(other) {
          this._namespace = other._namespace;
          this._fieldDescriptors = other._fieldDescriptors;
          this._requiredFields = other._requiredFields;
          this._version = other._version;
          this._fields = other._fields;
          this._repoFieldName = other._repoFieldName;
        }
        toJS() {
          const encoder = new JSONEncoder();
          this.serialize(encoder);
          return encoder.getOutput();
        }
        static fromJS(obj) {
          const decoder = new JSONDecoder(obj);
          return new this({ decoder });
        }
        static nullScheme() {
          return new this({
            namespace: "",
            version: 0,
            fieldDescriptors: {},
            repositoryFieldName: kRecordIdField
          });
        }
        static workspace() {
          const scheme = SchemeManager.instance.getScheme(NS_WORKSPACE);
          if (!scheme)
            throw new Error("Workspace scheme not found");
          return scheme;
        }
        static note() {
          const scheme = SchemeManager.instance.getScheme(NS_NOTES);
          if (!scheme)
            throw new Error("Note scheme not found");
          return scheme;
        }
        static tag() {
          const scheme = SchemeManager.instance.getScheme(NS_TAGS);
          if (!scheme)
            throw new Error("Tag scheme not found");
          return scheme;
        }
        static user() {
          const scheme = SchemeManager.instance.getScheme(NS_USERS);
          if (!scheme)
            throw new Error("User scheme not found");
          return scheme;
        }
        static organization() {
          const scheme = SchemeManager.instance.getScheme(NS_ORGANIZATION);
          if (!scheme)
            throw new Error("Organization scheme not found");
          return scheme;
        }
        static getLatestVersion(ns) {
          const scheme = SchemeManager.instance.getScheme(ns);
          if (!scheme)
            throw new Error(`Scheme namespace: ${ns} not found`);
          return scheme;
        }
        static forKey(key) {
          const keyLen = key.length;
          let start = 0;
          let end;
          for (start = 0; start < keyLen && key[start] === "/"; ++start) {
          }
          for (end = start; end < keyLen && key[end] !== "/"; ++end) {
          }
          assert(start <= end || start >= keyLen, "Unsupported key format");
          const type = key.substring(start, end);
          switch (type) {
            case NS_WORKSPACE:
              return this.workspace();
            case NS_NOTES:
              return this.note();
            case NS_TAGS:
              return this.tag();
            case NS_USERS:
              return this.user();
            case NS_ORGANIZATION:
              return this.organization();
            default:
              break;
          }
        }
      };
      SchemeVersion = class {
        constructor(version, upFunc) {
          this._version = version;
          this._namespaces = /* @__PURE__ */ new Map();
          this._upFunc = upFunc;
        }
        get version() {
          return this._version;
        }
        get upFunc() {
          return this._upFunc;
        }
        get schemes() {
          return Array.from(this._namespaces.values());
        }
        addDef(def) {
          const scheme = new Scheme({
            namespace: def.namespace,
            version: this._version,
            fieldDescriptors: def.fieldDescriptors,
            repositoryFieldName: def.repositoryFieldName
          });
          this._namespaces.set(scheme.namespace, scheme);
        }
        addScheme(scheme) {
          const newScheme = scheme.clone(this._version);
          this._namespaces.set(newScheme.namespace, newScheme);
        }
        getScheme(namespace) {
          return this._namespaces.get(namespace);
        }
        schemeExists(namespace) {
          return this._namespaces.has(namespace);
        }
      };
      managerLoadFunc = (manager) => {
        runRegister(manager);
      };
      SchemeManager = class {
        constructor() {
          this._versions = /* @__PURE__ */ new Map();
          this._currVersion = 0;
        }
        static get instance() {
          if (!SchemeManager._instance) {
            const instance = new SchemeManager();
            managerLoadFunc(instance);
            SchemeManager._instance = instance;
          }
          return SchemeManager._instance;
        }
        /**
         * WARNING Use only for Testing!!!
         * @param manager
         */
        static setCustomInstance(manager) {
          SchemeManager._instance = manager;
        }
        /**
         * Register a new version of schemes
         * @param version
         * @param schemeDefs
         * @param upFunc Function update the records data object
         */
        register(version, schemeDefs, extraNamespaces, upFunc) {
          assert(this._currVersion + 1 === version);
          if (version === 1) {
            assert(isNoValue(upFunc));
            assert(extraNamespaces.length === 0);
          }
          if (version > 1) {
            assert(!isNoValue(upFunc));
          }
          const schVersion = new SchemeVersion(version, upFunc);
          if (version > 1 && extraNamespaces.length > 0) {
            for (const ns of extraNamespaces) {
              const prevScheme = this.getScheme(ns);
              if (prevScheme) {
                schVersion.addScheme(prevScheme);
              }
            }
          }
          for (const def of schemeDefs) {
            schVersion.addDef(def);
          }
          this._versions.set(version, schVersion);
          this._currVersion++;
        }
        /**
         * Get Scheme by namespace and version (optional)
         * @param namespace
         * @param version if version is not sent, will return the latest version
         */
        getScheme(namespace, version) {
          if (version !== void 0) {
            return this._versions.get(version)?.getScheme(namespace);
          }
          for (let v = this._currVersion; v >= 1; v--) {
            const version2 = this._versions.get(v);
            if (version2) {
              const scheme = version2.getScheme(namespace);
              if (scheme) {
                return scheme;
              }
            }
          }
        }
        schemeExists(namespace, version) {
          return this._versions.get(version)?.schemeExists(namespace) || false;
        }
        getUpFunc(version) {
          return this._versions.get(version)?.upFunc;
        }
      };
    }
  });

  // cfds/base/record.ts
  var checksumSerOptions, Record;
  var init_record = __esm({
    "cfds/base/record.ts"() {
      init_error();
      init_comparisons();
      init_scheme();
      init_object();
      init_encoding();
      init_json();
      init_scheme_types();
      init_checksum();
      checksumSerOptions = {
        // For checksum purposes we need to use the flat rep or we won't account
        // for depth changes. Computing the checksum on a DFS run of the tree
        // completely strips out the depth info.
        flatRep: true,
        local: false,
        typeSafe: true
      };
      Record = class {
        constructor(config) {
          this._normalized = false;
          if (isDecoderConfig(config)) {
            this.deserialize(config.decoder);
          } else {
            assert(isObject(config.data));
            this._scheme = config.scheme;
            this._data = config.data;
          }
          this.normalize();
          this.assertValidData();
        }
        static nullRecord() {
          return new this({ scheme: Scheme.nullScheme(), data: {} });
        }
        get isNull() {
          return this.scheme.isNull;
        }
        get scheme() {
          return this._scheme;
        }
        get isValid() {
          return isValidData(this.scheme, this._data)[0];
        }
        /**
         * Returns a strong checksum that can be used to efficiently test for
         * equality between two records. It is used to guard against diff/patch bugs
         * that'd otherwise throw both ends of the diff-sync loop out of sync and lead
         * to corruption. We use it as an alternative to the sequential versioning
         * used in the original diff-sync paper by Neil Fraser.
         *
         * Any legacy cryptographic hash would probably do here. The current
         * implementation uses MD5 simply because its so common.
         *
         * WARNING: Any change here may require to re-calculate checksums in the
         * backend's DB for ALL records and their versions (lifetime).
         */
        get checksum() {
          if (this._checksum === void 0) {
            const csEncoder = new MD5Checksum();
            serialize(csEncoder, this._scheme.fields, this._data, checksumSerOptions);
            this._checksum = csEncoder.getOutput();
          }
          return this._checksum;
        }
        get refs() {
          if (this._cachedRefs === void 0) {
            this._cachedRefs = getRefs(this.scheme.fields, this._data);
          }
          return this._cachedRefs;
        }
        get keys() {
          return Object.keys(this._data);
        }
        get repositoryId() {
          const fieldName = this.scheme.repositoryFieldName;
          if (fieldName === kRecordIdField) {
            return kRecordIdField;
          }
          const repoId = this.get(fieldName);
          return repoId ? "/data/" + repoId : "/sys/dir";
        }
        get(key, defaultValue) {
          assert(
            this.scheme.hasField(key),
            `Unknown field name '${key}' for scheme '${this.scheme.namespace}'`
          );
          const data = this._data;
          if (data.hasOwnProperty(key)) {
            return data[key];
          }
          return !isNoValue(defaultValue) ? defaultValue : void 0;
        }
        has(key) {
          assert(
            this.scheme.hasField(key),
            `Unknown field name '${key}' for scheme '${this.scheme.namespace}'`
          );
          return this._data.hasOwnProperty(key);
        }
        set(key, value) {
          assert(
            this.scheme.hasField(key),
            `Unknown field name '${key}' for scheme '${this.scheme.namespace}'`
          );
          if (value === void 0) {
            this.delete(key);
            return;
          }
          this._data[key] = value;
          this._invalidateCaches();
          this.normalize();
        }
        setMultiple(data) {
          for (const [key, value] of Object.entries(data)) {
            this.set(key, value);
          }
        }
        delete(key) {
          assert(
            this.scheme.hasField(key),
            `Unknown field name '${key}' for scheme '${this.scheme.namespace}'`
          );
          const success = delete this._data[key];
          this._invalidateCaches();
          this.normalize();
          return success;
        }
        touch() {
          this._invalidateCaches();
        }
        isEqual(other, local = false) {
          if (this === other) {
            return true;
          }
          if (!this.scheme.isEqual(other.scheme)) {
            return false;
          }
          this.normalize();
          other.normalize();
          return equals2(this.scheme.getFields(), this._data, other._data, {
            local
          });
        }
        clone() {
          const scheme = this._scheme;
          const result = new Record({
            scheme,
            data: clone(scheme.getFields(), this._data)
          });
          result._checksum = this._checksum;
          return result;
        }
        cloneData(onlyFields) {
          return clone(this._scheme.getFields(), this._data, onlyFields);
        }
        copyFrom(record) {
          this._scheme = record.scheme;
          this._data = record.cloneData();
          this._invalidateCaches();
        }
        diff(other, local) {
          assert(other instanceof Record);
          this.normalize();
          other.normalize();
          other.assertValidData();
          return diff2(other.scheme.getFields(), this._data, other._data, {
            local
          });
        }
        patch(changes) {
          const scheme = this.scheme;
          this._data = patch2(scheme.getFields(), this._data, changes);
          this._invalidateCaches();
          this.normalize();
        }
        diffKeys(other, local) {
          this.normalize();
          other.normalize();
          return diffKeys(other.scheme.fields, this._data, other._data, {
            local
          });
        }
        upgradeScheme(newScheme) {
          assert(newScheme.allowsAutoUpgradeFrom(this.scheme));
          this._data = newScheme.upgradeData(this.scheme, this._data);
          this._scheme = newScheme;
          this._invalidateCaches();
          this.normalize();
        }
        upgradeSchemeToLatest() {
          if (!this._scheme.upgradeAvailable()) {
            return false;
          }
          this.upgradeScheme(Scheme.getLatestVersion(this.scheme.namespace));
          return true;
        }
        normalize() {
          if (this._normalized) {
            return;
          }
          this._invalidateCaches();
          normalize(this.scheme, this._data);
          this._normalized = true;
        }
        gc() {
          return gc(this._scheme, this._data);
        }
        needGC() {
          return needGC(this._scheme, this._data);
        }
        serialize(encoder, options = { local: false }) {
          encoder.set("s", this.scheme);
          const dataEncoder = encoder.newEncoder();
          serialize(dataEncoder, this.scheme.getFields(), this._data, {
            local: options.local
          });
          encoder.set("d", dataEncoder.getOutput());
        }
        deserialize(decoder) {
          this._scheme = new Scheme({ decoder: decoder.getDecoder("s") });
          this._data = deserialize(decoder.getDecoder("d"), this.scheme.fields);
          this._invalidateCaches();
          this.normalize();
          this.assertValidData();
        }
        toJS(local = false) {
          const encoder = new JSONCyclicalEncoder();
          this.serialize(encoder, { local });
          return encoder.getOutput();
        }
        static fromJS(obj) {
          const decoder = new JSONCyclicalDecoder(obj);
          return new this({ decoder });
        }
        assertValidData() {
          const [valid, msg] = isValidData(this.scheme, this._data);
          assert(valid, msg);
        }
        _invalidateCaches() {
          this._checksum = void 0;
          this._cachedRefs = void 0;
          this._normalized = false;
          this._cachedRefs = void 0;
        }
        rewriteRefs(keyMapping, deleteRefs) {
          rewriteRefs(this.scheme, this._data, keyMapping, deleteRefs);
          this._invalidateCaches();
          this.normalize();
        }
      };
    }
  });

  // cfds/client/graph/mutations.ts
  function isMutation(pack) {
    return pack instanceof Array && pack.length === 3 && typeof pack[0] === "string";
  }
  function mutationPackAppend(pack, mutation) {
    if (mutation === void 0) {
      return pack;
    }
    if (pack === void 0) {
      return mutation;
    }
    if (isMutation(pack)) {
      pack = [pack];
    }
    if (isMutation(mutation)) {
      pack.push(mutation);
    } else {
      append(pack, mutation);
    }
    return mutationPackOptimize(pack);
  }
  function* mutationPackIter(pack) {
    if (pack === void 0) {
      return;
    }
    if (isMutation(pack)) {
      yield pack;
    } else {
      for (const m of pack) {
        yield m;
      }
    }
  }
  function mutationPackGetFirst(pack) {
    if (pack === void 0) {
      return void 0;
    }
    if (isMutation(pack)) {
      return pack;
    }
    return pack[0];
  }
  function mutationPackDeleteFirst(pack) {
    if (pack === void 0 || isMutation(pack) || pack.length <= 1) {
      return void 0;
    }
    pack.shift();
    return pack;
  }
  function mutationPackIsEmpty(pack) {
    return pack === void 0 || pack.length === 0;
  }
  function mutationPackOptimize(pack) {
    if (pack === void 0 || isMutation(pack) || pack.length <= 1) {
      return pack;
    }
    const seenFields = [];
    for (let i = 0; i < pack.length; ++i) {
      const [fieldName] = pack[i];
      if (seenFields.indexOf(fieldName) > -1) {
        pack.splice(i, 1);
        --i;
      } else {
        seenFields.push(fieldName);
      }
    }
    return pack;
  }
  function mutationPackClone(pack) {
    if (!pack) {
      return void 0;
    }
    if (isMutation(pack)) {
      return [pack[0], pack[1], pack[2]];
    }
    return pack.map((m) => [m[0], m[1], m[2]]);
  }
  function mutationPackHasRemote(pack) {
    if (pack !== void 0) {
      if (isMutation(pack)) {
        return pack[1] === false;
      }
      for (const [_f, local] of pack) {
        if (!local) {
          return true;
        }
      }
    }
    return false;
  }
  function mutationPackHasField(pack, ...fields) {
    for (const [field] of mutationPackIter(pack)) {
      if (fields.includes(field)) {
        return true;
      }
    }
    return false;
  }
  var init_mutations = __esm({
    "cfds/client/graph/mutations.ts"() {
      init_array();
    }
  });

  // cfds/base/types/utils.ts
  function diff3(value1, value2, typeOP, options = {}) {
    if (value1 === void 0 && value2 === void 0)
      return;
    const lTypeOP = typeOP || getTypeOperationsByValue(value1);
    if (value1 === void 0 && value2 !== void 0) {
      return lTypeOP.valueAddedDiff(value2, options);
    } else if (value1 !== void 0 && value2 === void 0) {
      return lTypeOP.valueRemovedDiff(value1, options);
    } else {
      return lTypeOP.valueChangedDiff(value1, value2, options);
    }
  }
  function patch3(value, changes, typeOP, options = {}) {
    const lTypeOP = typeOP || getTypeOperationsByValue(value);
    const newValue = lTypeOP.patch(value, changes, options);
    return newValue;
  }
  function concatChanges2(changes1, changes2) {
    const result = [];
    if (changes1) {
      if (Array.isArray(changes1)) {
        for (const c of changes1) {
          result.push(c);
        }
      } else {
        result.push(changes1);
      }
    }
    if (changes2) {
      if (Array.isArray(changes2)) {
        for (const c of changes2) {
          result.push(c);
        }
      } else {
        result.push(changes2);
      }
    }
    return result;
  }
  var init_utils3 = __esm({
    "cfds/base/types/utils.ts"() {
      init_types();
    }
  });

  // cfds/client/undo/single.ts
  function ensureLocalItem(item) {
    assert(item.type === "l" /* Local */);
    return item;
  }
  function snapshotEquals(snap1, snap2, options) {
    if (!coreValueEquals(snap1.local, snap2.local, options)) {
      return false;
    }
    if (!coreValueEquals(snap1.data, snap2.data, options)) {
      return false;
    }
    return true;
  }
  var DEFAULT_LIMIT, SingleUndoManager;
  var init_single = __esm({
    "cfds/client/undo/single.ts"() {
      init_error();
      init_object();
      init_utils3();
      init_core_types();
      DEFAULT_LIMIT = 100;
      SingleUndoManager = class {
        constructor(obj, options) {
          this._object = obj;
          options = options || {};
          this._snapshotFields = options.snapshotFields;
          this._latestSnapshot = options.initialSnapshot || obj.getSnapshot(this._snapshotFields);
          this._undoList = [
            {
              type: "l" /* Local */,
              snapshot: this._latestSnapshot,
              group: 0
            }
          ];
          this._redoList = [];
          this._limit = (options.limit !== void 0 && options.limit > 0 ? options.limit : DEFAULT_LIMIT) + 1;
          this._equalsOptions = options.equalsOptions;
        }
        get lastLocalUndo() {
          const last = this.lastUndo;
          if (last.type === "l" /* Local */) {
            return last;
          }
          const prevLast = this._undoList[this._undoList.length - 2];
          assert(prevLast.type === "l" /* Local */);
          return prevLast;
        }
        get lastRedo() {
          if (this._redoList.length === 0)
            return void 0;
          return this._redoList[this._redoList.length - 1];
        }
        get lastUndo() {
          return this._undoList[this._undoList.length - 1];
        }
        get scheme() {
          return this._object.scheme;
        }
        /**
         * Method is called after a local change has happened
         * @param group
         * @returns true if a new undo is added to the list
         */
        changedLocally(group) {
          assert(group > 0, "group must be larger than 0");
          const snapshot = this._object.getSnapshot(this._snapshotFields);
          if (snapshotEquals(this._latestSnapshot, snapshot, this._equalsOptions)) {
            const lastLocal = this.lastLocalUndo;
            lastLocal.snapshot = snapshot;
            this._latestSnapshot = lastLocal.snapshot;
            return false;
          }
          this.addToUndoList(snapshot, true, group, true);
          this._latestSnapshot = snapshot;
          return true;
        }
        /**
         * Method is called after a remote change has happened
         */
        changedRemotely() {
          const snapshot = this._object.getSnapshot(this._snapshotFields);
          this.addToUndoList(snapshot, false, void 0, true);
          this._latestSnapshot = snapshot;
        }
        addToUndoList(snapshot, local, group, resetRedoList) {
          const last = this.lastUndo;
          if (local) {
            assert(group !== void 0);
            group = group;
            if (last.type === "l" /* Local */ && last.group === group) {
              last.snapshot = snapshot;
            } else {
              this._undoList.push({
                type: "l" /* Local */,
                snapshot,
                group
              });
              this.ensureUndoSpace();
            }
            if (resetRedoList)
              this._redoList = [];
          } else {
            if (last.type === "r" /* Remote */) {
              last.snapshot = snapshot;
            } else {
              this._undoList.push({
                type: "r" /* Remote */,
                snapshot
              });
              this.ensureUndoSpace();
            }
          }
        }
        /**
         *
         * @returns true if a undo has occurred
         */
        undo() {
          const lastGroup = this.lastLocalUndo.group;
          if (lastGroup === 0) {
            return false;
          }
          const snapList = [];
          this.internalUndo(lastGroup, snapList);
          const last = snapList[snapList.length - 1];
          if (last) {
            this.updateSnapshot(last);
            return true;
          }
          return false;
        }
        updateSnapshot(newSnap) {
          this._latestSnapshot = newSnap;
          this._object.updateBySnapshot(newSnap);
        }
        internalUndo(group, snapList) {
          const last = this.lastUndo;
          if (last.type === "l" /* Local */) {
            if (last.group === 0) {
              return;
            }
            this._undoList.splice(this._undoList.length - 1, 1);
            const prevSnapshot = this.lastUndo.snapshot;
            this._redoList.push({
              snapshot: last.snapshot,
              group: last.group,
              base: prevSnapshot
            });
            snapList.push(prevSnapshot);
            return;
          } else {
            const prev1 = this._undoList[this._undoList.length - 2];
            if (prev1.type === "r" /* Remote */) {
              throw new Error("remote undo, previous snapshot must be a local one");
            }
            if (prev1.group === 0) {
              return;
            }
            const prev2 = this._undoList[this._undoList.length - 3];
            assert(prev2 !== void 0);
            const mergedSnapshot = this.threeWayMerge(
              prev1.snapshot,
              prev2.snapshot,
              last.snapshot
            );
            if (snapshotEquals(mergedSnapshot, last.snapshot, this._equalsOptions)) {
              this._undoList.splice(this._undoList.length - 2, 1);
              if (prev2.type === "r" /* Remote */) {
                prev2.snapshot = last.snapshot;
                this._undoList.splice(this._undoList.length - 1, 1);
              }
              if (this.lastLocalUndo.group === group || snapList.length === 0) {
                this.internalUndo(group, snapList);
                return;
              }
              return;
            }
            this._redoList.push({
              snapshot: last.snapshot,
              base: mergedSnapshot,
              group: prev1.group
            });
            this._undoList.splice(this._undoList.length - 2, 2);
            this.addToUndoList(mergedSnapshot, false, void 0, false);
            snapList.push(mergedSnapshot);
          }
          if (this.lastLocalUndo.group === group) {
            return this.internalUndo(group, snapList);
          }
        }
        redo() {
          if (this._redoList.length === 0)
            return false;
          const snapList = [];
          this.internalRedo(snapList);
          const last = snapList[snapList.length - 1];
          if (last) {
            this.updateSnapshot(last);
            return true;
          }
          return false;
        }
        internalRedo(snapList) {
          const lastRedo = this._redoList[this._redoList.length - 1];
          const lastGroup = lastRedo.group;
          const lastUndo = this.lastUndo;
          if (lastUndo.type === "l" /* Local */) {
            this.addToUndoList(lastRedo.snapshot, true, lastRedo.group, false);
            snapList.push(lastRedo.snapshot);
            this._redoList.splice(this._redoList.length - 1, 1);
          } else {
            const newRedoSnap = this.threeWayMerge(
              lastRedo.base,
              lastRedo.snapshot,
              lastUndo.snapshot
            );
            if (snapshotEquals(newRedoSnap, lastUndo.snapshot, this._equalsOptions)) {
              this._redoList.splice(this._redoList.length - 1, 1);
              this.internalRedo(snapList);
              return;
            }
            this.addToUndoList(newRedoSnap, true, lastRedo.group, false);
            snapList.push(newRedoSnap);
            this._redoList.splice(this._redoList.length - 1, 1);
          }
          const lastAfter = this._redoList[this._redoList.length - 1];
          if (lastAfter && lastAfter.group === lastGroup) {
            this.internalRedo(snapList);
          }
          return;
        }
        threeWayMerge(base, snap1, snap2) {
          const baseClone = clone(this.scheme.fields, base.data);
          const changes1 = diff2(this.scheme.fields, baseClone, snap1.data);
          const changes2 = diff2(this.scheme.fields, baseClone, snap2.data);
          const changes = concatChanges(changes1, changes2);
          const newData = patch2(this.scheme.fields, baseClone, changes);
          const localFields = /* @__PURE__ */ new Set();
          for (const key of Object.keys(base.local)) {
            localFields.add(key);
          }
          for (const key of Object.keys(snap1.local)) {
            localFields.add(key);
          }
          for (const key of Object.keys(snap2.local)) {
            localFields.add(key);
          }
          const newLocal = {};
          for (const field of localFields) {
            const changes12 = diff3(base.local[field], snap1.local[field]);
            const changes22 = diff3(base.local[field], snap2.local[field]);
            const changes3 = concatChanges2(changes12, changes22);
            newLocal[field] = patch3(base.local[field], changes3);
          }
          return {
            data: newData,
            local: newLocal
          };
        }
        ensureUndoSpace() {
          if (this._undoList.length <= this._limit)
            return;
          let index = this._undoList.length - this._limit;
          if (this._undoList[index].type !== "l" /* Local */) {
            index++;
          }
          const item = ensureLocalItem(this._undoList[index]);
          this._undoList.splice(0, index);
          item.group = 0;
        }
      };
    }
  });

  // cfds/client/undo/context.ts
  var equalsOptions, UndoContext;
  var init_context2 = __esm({
    "cfds/client/undo/context.ts"() {
      init_tree();
      init_mutations();
      init_single();
      equalsOptions = {
        objectFilterFields: (key, obj) => {
          if (isRichText(obj)) {
            return key !== "pointers";
          }
          if (key === "lastModified" && obj[key] instanceof Date) {
            return false;
          }
          return true;
        }
      };
      UndoContext = class {
        constructor(graph, options) {
          this._graph = graph;
          this._filters = options && options.filters ? options.filters : [];
          this._keyOptions = /* @__PURE__ */ new Map();
          this._undoMap = /* @__PURE__ */ new Map();
          this._curGroup = 1;
          this._groupStarted = false;
          if (options && options.vertices) {
            for (const vOpt of options.vertices) {
              for (const key of vOpt.keys) {
                if (this._graph.hasVertex(key)) {
                  this._keyOptions.set(key, vOpt);
                  this._undoMap.set(
                    key,
                    new SingleUndoManager(this._graph.getVertexManager(key), {
                      limit: vOpt.limit,
                      equalsOptions,
                      snapshotFields: vOpt.snapshotFields
                    })
                  );
                } else {
                  throw new Error(`Undo Vertices key: ${key} is not found in graph`);
                }
              }
            }
          }
        }
        dispose() {
          this._keyOptions.clear();
          this._filters = [];
          this._undoMap.clear();
          this._graph.undoManager.removeContext(this);
        }
        update(mutations) {
          let changedLocally = false;
          for (const [vMng, pack] of mutations) {
            if (!this.isUpdateRelevant(vMng, pack))
              continue;
            const undoManager = this._undoMap.get(vMng.key);
            if (undoManager === void 0)
              continue;
            if (mutationPackHasRemote(pack)) {
              undoManager.changedRemotely();
            } else {
              if (undoManager.changedLocally(this._curGroup)) {
                changedLocally = true;
              }
            }
          }
          if (changedLocally) {
            if (!this._groupStarted)
              this._curGroup++;
          }
        }
        isUpdateRelevant(vMng, pack) {
          const keyOptions = this._keyOptions.get(vMng.key);
          if (keyOptions) {
            if (!keyOptions.filter || keyOptions.filter(vMng.getVertexProxy(), pack)) {
              return true;
            }
            return false;
          }
          for (const filter of this._filters) {
            if (filter.filter(vMng.getVertexProxy(), pack)) {
              if (!this._undoMap.has(vMng.key)) {
                this._undoMap.set(
                  vMng.key,
                  new SingleUndoManager(this._graph.getVertexManager(vMng.key), {
                    limit: filter.limit,
                    equalsOptions,
                    initialSnapshot: filter.initialSnapshot,
                    snapshotFields: filter.snapshotFields
                  })
                );
              }
              this._keyOptions.set(vMng.key, {
                keys: [vMng.key],
                filter: filter.filter,
                limit: filter.limit,
                snapshotFields: filter.snapshotFields
              });
              return true;
            }
          }
          return false;
        }
        startGroup() {
          this._groupStarted = true;
          this._curGroup++;
        }
        endGroup() {
          this._groupStarted = false;
          this._curGroup++;
        }
        undo() {
          let maxGroup = 0;
          for (const manager of this._undoMap.values()) {
            const lastLocal = manager.lastLocalUndo;
            if (lastLocal.group > maxGroup)
              maxGroup = lastLocal.group;
          }
          if (maxGroup === 0)
            return false;
          let result = false;
          for (const manager of this._undoMap.values()) {
            if (manager.lastLocalUndo.group === maxGroup) {
              if (manager.undo()) {
                result = true;
              }
            }
          }
          this._curGroup++;
          return result;
        }
        redo() {
          let maxGroup = 0;
          for (const manager of this._undoMap.values()) {
            const last = manager.lastRedo;
            if (last && last.group > maxGroup)
              maxGroup = last.group;
          }
          if (maxGroup === 0)
            return false;
          let result = false;
          for (const manager of this._undoMap.values()) {
            if (manager.lastRedo?.group === maxGroup) {
              if (manager.redo()) {
                result = true;
              }
            }
          }
          this._curGroup++;
          return result;
        }
      };
    }
  });

  // cfds/client/undo/manager.ts
  var UndoManager;
  var init_manager = __esm({
    "cfds/client/undo/manager.ts"() {
      init_context2();
      UndoManager = class {
        constructor(graph) {
          this._graph = graph;
          this._undoContexts = /* @__PURE__ */ new Set();
        }
        createContext(options) {
          const context2 = new UndoContext(this._graph, options);
          this._undoContexts.add(context2);
          return context2;
        }
        removeContext(context2) {
          this._undoContexts.delete(context2);
        }
        update(mutations) {
          for (const context2 of this._undoContexts) {
            context2.update(mutations);
          }
        }
      };
    }
  });

  // cfds/richtext/composer.ts
  function composeRichText(resolver, rt, local = true) {
    return reconstructRichText(composeFlatRichText(resolver, rt, local));
  }
  function decomposeRichText(updater, rt, local = true) {
    return reconstructRichText(decomposeFlatRichText(updater, rt, local));
  }
  function* composeFlatRichText(resolver, rt, local) {
    let depth = 0;
    for (const v of flattenRichText(rt, local, false)) {
      if (isRefMarker(v)) {
        const replacementRT = resolver(v.ref);
        if (replacementRT === 0 /* Deleted */) {
          continue;
        }
        if (replacementRT === 1 /* Loading */) {
          yield {
            ...v,
            loading: true,
            children: []
          };
          yield {
            depthMarker: depth + 1
          };
          yield {
            text: ""
          };
          yield {
            depthMarker: depth
          };
          continue;
        }
        yield {
          tagName: "ref",
          ref: v.ref,
          type: v.type,
          isLocal: v.isLocal === true,
          children: []
        };
        yield {
          depthMarker: depth + 1
        };
        for (const innerAtom of flattenRichText(replacementRT, local, false)) {
          if (isDepthMarker(innerAtom)) {
            yield {
              depthMarker: depth + 1 + innerAtom.depthMarker,
              isLocal: innerAtom.isLocal === true
            };
          } else {
            yield innerAtom;
          }
        }
        yield {
          depthMarker: depth
        };
      } else {
        if (isDepthMarker(v)) {
          depth = v.depthMarker;
        }
        yield v;
      }
    }
  }
  function* decomposeFlatRichText(updater, rt, local) {
    let depth = 0;
    const flatRepGenerator = flattenRichText(rt, local, false);
    for (let atom of flatRepGenerator) {
      if (isRefNode(atom)) {
        yield _updateLinkedDoc(
          updater,
          atom.ref,
          flatRepGenerator,
          depth,
          atom.isLocal === true
        );
      } else if (isRefMarker(atom)) {
        const copy = {
          ref: atom.ref,
          type: atom.type
        };
        if (atom.isLocal) {
          copy.isLocal = true;
        }
        yield copy;
      } else {
        if (isDepthMarker(atom)) {
          depth = atom.depthMarker;
        }
        yield atom;
      }
    }
  }
  function _updateLinkedDoc(updater, key, flatRepGenerator, markerDepth, local) {
    const innerAtoms = [];
    let { value: innerAtm, done } = flatRepGenerator.next();
    while (!done) {
      if (isDepthMarker(innerAtm) && innerAtm.depthMarker <= markerDepth) {
        break;
      } else {
        innerAtoms.push(innerAtm);
      }
      const next = flatRepGenerator.next();
      innerAtm = next.value;
      done = next.done;
    }
    updater(key, reconstructRichText(innerAtoms));
    const refMarker = {
      ref: key,
      type: "inter-doc" /* InternalDoc */
    };
    if (local) {
      refMarker.isLocal = true;
    }
    return refMarker;
  }
  function extractRefs(root, local, outSet) {
    if (outSet === void 0) {
      outSet = /* @__PURE__ */ new Set();
    }
    for (const [node] of dfs(root)) {
      if (node.isLocal === true && !local) {
        continue;
      }
      if (isRefMarker(node) || isRefNode(node)) {
        outSet.add(node.ref);
      }
    }
    return outSet;
  }
  var init_composer = __esm({
    "cfds/richtext/composer.ts"() {
      init_error();
      init_flat_rep();
      init_model();
      init_tree();
    }
  });

  // cfds/client/graph/propagation-triggers.ts
  function triggerParent(vertCallback, parentScheme) {
    return (vert, mutation) => {
      const parent = vert.parent;
      if (parent !== void 0 && (parentScheme === void 0 || parent.manager.scheme.namespace === parentScheme)) {
        const callback = parent[vertCallback];
        assert(
          callback !== void 0,
          `Parent mutation handler '${String(
            vertCallback
          )}' does not exist on vertex of type '${vert.namespace}'`
        );
        const sideEffects = callback.call(parent, mutation[1], mutation[2], vert);
        if (!mutationPackIsEmpty(sideEffects)) {
          parent.manager.vertexDidMutate(sideEffects);
        }
      }
    };
  }
  function triggerChildren(vertCallback, childScheme) {
    return (vert, mutation) => {
      for (const [child] of vert.inEdges("parent")) {
        if (childScheme !== void 0 && child.manager.scheme.namespace !== childScheme) {
          continue;
        }
        const callback = child[vertCallback];
        assert(
          callback !== void 0,
          `Parent mutation handler '${String(
            vertCallback
          )}' does not exist on vertex of type '${vert.namespace}'`
        );
        const sideEffects = callback.call(child, mutation[1], mutation[2], vert);
        if (!mutationPackIsEmpty(sideEffects)) {
          child.manager.vertexDidMutate(sideEffects);
        }
      }
    };
  }
  function triggerCompose(t1, t2) {
    return (vert, mutation) => {
      t1(vert, mutation);
      t2(vert, mutation);
    };
  }
  var init_propagation_triggers = __esm({
    "cfds/client/graph/propagation-triggers.ts"() {
      init_error();
      init_mutations();
    }
  });

  // cfds/client/graph/vertex.ts
  function KeyFromVertexId(id) {
    return typeof id === "string" ? id : id.key;
  }
  function getDidMutateMethodName(fieldName) {
    let result = gCachedDidMutateNames.get(fieldName);
    if (result === void 0) {
      result = fieldName + "DidMutate";
      gCachedDidMutateNames.set(fieldName, result);
    }
    return result;
  }
  function keyDictToVertDict(graph, keyDict) {
    const result = /* @__PURE__ */ new Map();
    for (const [k, v] of keyDict) {
      result.set(graph.getVertex(k), graph.getVertex(v));
    }
    return result;
  }
  function vertDictToKeyDict(vertDict) {
    const result = /* @__PURE__ */ new Map();
    for (const [k, v] of vertDict) {
      result.set(k.key, v.key);
    }
    return result;
  }
  function extractFieldRefs(value, local) {
    const result = /* @__PURE__ */ new Set();
    if (value === void 0) {
      return result;
    }
    if (value instanceof Vertex) {
      result.add(value.key);
      return result;
    }
    if (isDictionary(value)) {
      for (const [k, v] of value) {
        if (k instanceof Vertex && v instanceof Vertex) {
          result.add(k.key);
          result.add(v.key);
        }
      }
      return result;
    }
    if (isRichText(value)) {
      return extractRefs(value.root, local, result);
    }
    assert(!isGenerator(value));
    if (value[Symbol.iterator] !== void 0) {
      for (const vert of value) {
        if (vert instanceof Vertex) {
          result.add(vert.key);
        }
      }
      return result;
    }
    return result;
  }
  var kNoRefsValue, _Vertex, Vertex, kFieldTriggersBase, gCachedDidMutateNames;
  var init_vertex = __esm({
    "cfds/client/graph/vertex.ts"() {
      init_dict();
      init_mutations();
      init_core_types();
      init_composer();
      init_tree();
      init_comparisons();
      init_error();
      init_propagation_triggers();
      init_types();
      kNoRefsValue = {};
      _Vertex = class {
        static registerFieldTriggers(cls, triggers) {
          assert(!this._didFinalizeFieldTriggers);
          this._fieldTriggersByClass.set(cls, triggers);
        }
        /**
         * Given a subclass of Vertex, this method returns an array of super classes
         * excluding Vertex. This method is a utility for constructing a full map of
         * field triggers per class (that respects triggers installed by super
         * classes).
         *
         * @param src The class to look up.
         * @returns An array of classes in the form of [src, ...] where Vertex is
         *          excluded from the result.
         */
        static _getVertexClasses(src) {
          const result = [_Vertex];
          while (src !== _Vertex) {
            result.push(src);
            src = Object.getPrototypeOf(src);
          }
          return result;
        }
        /**
         * Given a class and triggers per class, this method composes a triggers map
         * that takes into account triggers installed by super classes.
         *
         * @param rawTriggers
         * @param src
         * @returns
         */
        static _finalizeFieldTriggersForClass(rawTriggers, src) {
          const classHierarchy = this._getVertexClasses(src);
          const result = {};
          for (let i = classHierarchy.length - 1; i >= 0; --i) {
            const triggers = rawTriggers.get(classHierarchy[i]);
            if (triggers === void 0) {
              continue;
            }
            for (const [fieldName, func] of Object.entries(triggers)) {
              if (result.hasOwnProperty(fieldName)) {
                result[fieldName] = triggerCompose(result[fieldName], func);
              } else {
                result[fieldName] = func;
              }
            }
          }
          return result;
        }
        static _finalizeFieldTriggersIfNeeded() {
          if (this._didFinalizeFieldTriggers) {
            return;
          }
          const rawTriggers = this._fieldTriggersByClass;
          const finalizedTriggers = /* @__PURE__ */ new Map();
          for (const cls of rawTriggers.keys()) {
            finalizedTriggers.set(
              cls,
              this._finalizeFieldTriggersForClass(rawTriggers, cls)
            );
          }
          for (const [cls, triggers] of finalizedTriggers) {
            rawTriggers.set(cls, triggers);
          }
          this._didFinalizeFieldTriggers = true;
        }
        constructor(mgr, record, prevVertex, config) {
          this._manager = mgr;
          this._record = record;
          this._cachedDepth = -1;
          this._isLocal = prevVertex !== void 0 ? prevVertex._isLocal : config?.isLocal === true;
          this.isDemoData = prevVertex !== void 0 ? prevVertex.isDemoData : false;
        }
        get manager() {
          return this._manager;
        }
        get record() {
          return this._record;
        }
        get key() {
          return this._manager.key;
        }
        get isNull() {
          return this.record.isNull;
        }
        // Static value. Does not change during the lifetime of a vertex.
        get isRoot() {
          return this.manager.isRoot;
        }
        get hasPendingChanges() {
          return this.manager.hasPendingChanges;
        }
        get namespace() {
          return this._record.scheme.namespace;
        }
        get graph() {
          return this._manager.graph;
        }
        get outRefs() {
          return this._record.refs;
        }
        get isDeleted() {
          return 0;
        }
        set isDeleted(_val) {
          notImplemented();
        }
        get lastModified() {
          return void 0;
        }
        set lastModified(v) {
          notImplemented();
        }
        get depth() {
          if (this._cachedDepth < 0) {
            const parent = this.parent;
            this._cachedDepth = parent === void 0 ? 0 : parent.depth + 1;
          }
          return this._cachedDepth;
        }
        get isLocal() {
          return this._isLocal || this.parent?.isLocal === true;
        }
        set isLocal(flag) {
          this._isLocal = flag;
        }
        parentDidMutate(local, oldValue, neighbor) {
          this._cachedDepth = -1;
          return ["depth", local, oldValue === void 0 ? 0 : oldValue.depth + 1];
        }
        get parent() {
          return void 0;
        }
        *getChildren(ns) {
          for (const [vert] of this.inEdges("parent")) {
            if (ns === void 0 || vert.manager.scheme.namespace === ns) {
              yield vert;
            }
          }
        }
        diffKeys(other, local) {
          return this._record.diffKeys(other.record, local);
        }
        cloneData(onlyFields) {
          return this._record.cloneData(onlyFields);
        }
        isEqual(v) {
          if (v === void 0) {
            return false;
          }
          return this.key === v.key;
        }
        isRecordEqual(v, local) {
          return this._record.isEqual(v.record, local);
        }
        compare(other) {
          return coreValueCompare(this.key, other.key);
        }
        *inEdges(fieldName) {
          const graph = this.graph;
          for (const edge of graph.adjacencyList.inEdges(this.key, fieldName)) {
            yield [graph.getVertex(edge.vertex), edge.fieldName];
          }
        }
        *outEdges(fieldName) {
          const graph = this.graph;
          for (const edge of graph.adjacencyList.outEdges(this.key, fieldName)) {
            yield [graph.getVertex(edge.vertex), edge.fieldName];
          }
        }
        /******************************************************************
         ******************* Methods for VertexManager *******************
         ******************************************************************/
        // WARNING: Never change a vertex manager's scheme inside this callback.
        didMutate(pack) {
          const result = this._dispatchMutationCallback(pack);
          this._runFieldTriggers(pack);
          return result;
        }
        _dispatchMutationCallback(pack) {
          let result;
          let remainingMutations = mutationPackClone(pack);
          while (!mutationPackIsEmpty(remainingMutations)) {
            const [fieldName, local, oldValue] = mutationPackGetFirst(remainingMutations);
            const handlerName = getDidMutateMethodName(fieldName);
            if (typeof this[handlerName] === "function") {
              result = mutationPackAppend(
                result,
                this[handlerName](local, oldValue)
              );
            }
            remainingMutations = mutationPackDeleteFirst(remainingMutations);
          }
          return result;
        }
        _runFieldTriggers(pack) {
          _Vertex._finalizeFieldTriggersIfNeeded();
          const triggers = _Vertex._fieldTriggersByClass.get(
            this.constructor
          );
          if (triggers === void 0) {
            return;
          }
          for (const mutation of mutationPackIter(pack)) {
            const callback = triggers[mutation[0]];
            if (typeof callback === "function") {
              callback(this, mutation);
            }
          }
        }
        clone(opts) {
          return this;
        }
        getLocalFields() {
          const fields = [];
          let proto = Object.getPrototypeOf(this);
          while (proto.__proto__.constructor !== Object) {
            const descriptors = Object.getOwnPropertyDescriptors(proto);
            for (const key in descriptors) {
              const desc = descriptors[key];
              if (desc.get && desc.set && !this._record.scheme.hasField(key)) {
                fields.push(key);
              }
            }
            proto = Object.getPrototypeOf(proto);
          }
          for (const key in this) {
            if (this.hasOwnProperty(key)) {
              if (!key.startsWith("_") && !this._record.scheme.hasField(key)) {
                fields.push(key);
              }
            }
          }
          return fields;
        }
        onUserUpdatedField(mut) {
          return mut;
        }
        /******************************************************************
         ********************* Methods for Subclasses *********************
         ******************************************************************/
        /**
         * Called by this vertex's manager to ge the current value of a field for
         * the purpose of ref calculation. This hook allows subclasses to include
         * computed fields in ref calculations, as well as provide an alternative raw
         * value to avoid unneeded computations.
         *
         * Example use cases:
         * - `Note` uses this hook to avoid slow composition on the `body` field.
         * - `BaseVertex` uses this hook to include the computed `parent` field in
         *   ref computations.
         *
         * @param fieldName The field's name.
         * @returns The field's current value.
         */
        valueForRefCalc(fieldName) {
          const scheme = this.manager.scheme;
          if (scheme.hasField(fieldName)) {
            if (scheme.getFieldType(fieldName) === "richtext-3" /* RICHTEXT_V3 */) {
              return this.record.get(fieldName);
            }
            return this[fieldName];
          }
          return kNoRefsValue;
        }
        /**
         * An override point for subclasses to customize mutation behaviors.
         * Subclasses should return a (constant) map from field name to trigger
         * functions.
         * @returns A set of triggers for this instance
         */
        getFieldTriggers() {
          return {};
        }
        volatileDataFields() {
          return [];
        }
        parentIsLocalChanged(local, oldValue, parent) {
          if (!this._isLocal) {
            return ["isLocal", local, oldValue];
          }
        }
        vertSetForField(fieldName) {
          const keys = this.record.get(fieldName);
          if (!keys?.size) {
            return /* @__PURE__ */ new Set();
          }
          const graph = this.graph;
          const result = /* @__PURE__ */ new Set();
          for (const k of keys) {
            const vert = graph.getVertex(k);
            if (vert && !vert.isDeleted) {
              result.add(vert);
            }
          }
          return result;
        }
      };
      Vertex = _Vertex;
      Vertex._fieldTriggersByClass = /* @__PURE__ */ new Map();
      Vertex._didFinalizeFieldTriggers = false;
      kFieldTriggersBase = {
        isLocal: triggerChildren("parentIsLocalChanged")
      };
      Vertex.registerFieldTriggers(Vertex, kFieldTriggersBase);
      gCachedDidMutateNames = /* @__PURE__ */ new Map();
    }
  });

  // base/string.ts
  function commonPrefixLen(str1, str2) {
    const len = Math.min(str1.length, str2.length);
    let end = 0;
    for (; end < len; ++end) {
      if (str1[end] !== str2[end]) {
        break;
      }
    }
    return end;
  }
  function commonSuffixLen(str1, str2) {
    let idx1 = str1.length - 1;
    let idx2 = str2.length - 1;
    let count = 0;
    while (idx1 >= 0 && idx2 >= 0) {
      if (str1[idx1] !== str2[idx2]) {
        break;
      }
      ++count;
      --idx1;
      --idx2;
    }
    return count;
  }
  function fixedCharCodeAt(str, idx) {
    if (idx < 0 || idx >= str.length) {
      return 0;
    }
    const code = str.charCodeAt(idx);
    if (55296 <= code && code <= 56319) {
      const hi = code;
      const low = str.charCodeAt(idx + 1);
      assert(
        !isNaN(low),
        "High surrogate not followed by low surrogate in fixedCharCodeAt()"
      );
      return (hi - 55296) * 1024 + (low - 56320) + 65536;
    }
    if (56320 <= code && code <= 57343) {
      const hi = str.charCodeAt(idx - 1);
      const low = code;
      return (hi - 55296) * 1024 + (low - 56320) + 65536;
    }
    return code;
  }
  function increment(str) {
    const code = fixedCharCodeAt(str, str.length - 1);
    if (code < 1114111) {
      return str.substring(0, str.length - 1) + String.fromCodePoint(code + 1);
    }
    return str + String.fromCharCode(1);
  }
  function appendPathComponent(path, ...comps) {
    for (const c of comps) {
      if (path.endsWith("/") || c.startsWith("/")) {
        path += c;
      } else {
        path = `${path}/${c}`;
      }
    }
    return path;
  }
  var ltrChars, rtlChars, dirRegex;
  var init_string = __esm({
    "base/string.ts"() {
      init_error();
      ltrChars = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u2C00-\uFB1C\uFDFE-\uFE6F\uFEFD-\uFFFF";
      rtlChars = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
      dirRegex = new RegExp("^[^" + ltrChars + "]*[" + rtlChars + "]");
    }
  });

  // cfds/base/orderstamp.ts
  function present() {
    return fromTimestamp(/* @__PURE__ */ new Date(), uniqueId());
  }
  function past() {
    return fromTimestamp(MIN_REF_DATE, uniqueId());
  }
  function fromTimestamp(timestamp, key) {
    return ELEN.encode(serializeDate(timestamp)) + key || "";
  }
  function between(prev, next) {
    assert(prev !== next);
    if (prev > next) {
      const tmp = next;
      next = prev;
      prev = tmp;
    }
    const prefixLen = commonPrefixLen(prev, next);
    let result = prev.substring(0, prefixLen);
    const minChar = prefixLen < prev.length ? prev.charCodeAt(prefixLen) : CHAR_CODE_MIN;
    const maxChar = prefixLen > 0 ? next.charCodeAt(prefixLen) : CHAR_CODE_MAX;
    result += String.fromCharCode(randomInt(minChar, maxChar));
    for (let i = prefixLen + 1; i < prev.length; ++i) {
      const charCode = prev.charCodeAt(i);
      if (charCode < CHAR_CODE_MAX) {
        result += String.fromCharCode(randomInt(charCode + 1, CHAR_CODE_MAX));
        break;
      } else {
        result += String.fromCharCode(charCode);
      }
    }
    for (let j = 0; j < RANDOM_SUFFIX_LEN; ++j) {
      result += String.fromCharCode(randomInt(CHAR_CODE_MIN, CHAR_CODE_MAX));
    }
    return result;
  }
  var ELEN, CHAR_CODE_MIN, CHAR_CODE_MAX, RANDOM_SUFFIX_LEN, MIN_REF_DATE;
  var init_orderstamp = __esm({
    "cfds/base/orderstamp.ts"() {
      ELEN = __toESM(__require("https://esm.sh/elen@1.0.10"));
      init_string();
      init_error();
      init_math();
      init_date();
      init_common();
      CHAR_CODE_MIN = 1;
      CHAR_CODE_MAX = 254;
      RANDOM_SUFFIX_LEN = 16;
      MIN_REF_DATE = /* @__PURE__ */ new Date(1420074e6);
    }
  });

  // cfds/client/graph/vertices/workspace.ts
  var Workspace;
  var init_workspace = __esm({
    "cfds/client/graph/vertices/workspace.ts"() {
      init_set();
      init_base2();
      init_note();
      Workspace = class extends BaseVertex {
        get parent() {
          const rootKey = this.manager.graph.rootKey;
          for (const u of this.users) {
            if (u.key === rootKey) {
              return u;
            }
          }
          return void 0;
        }
        get name() {
          return this.record.get("name", "");
        }
        set name(name) {
          this.record.set("name", name);
        }
        get users() {
          return this.vertSetForField("users");
        }
        set users(users) {
          this.record.set(
            "users",
            map(users, (u) => u.key)
          );
        }
        clearUsers() {
          this.record.set("users", /* @__PURE__ */ new Set());
        }
        get icon() {
          return this.record.get("icon");
        }
        set icon(icon) {
          if (icon !== void 0) {
            this.record.set("icon", icon);
          } else {
            this.record.delete("icon");
          }
        }
        get exportImage() {
          return this.record.get("exportImage");
        }
        set exportImage(img) {
          this.record.set("exportImage", img);
        }
        get footerHtml() {
          return this.record.get("footerHtml");
        }
        set footerHtml(html) {
          this.record.set("footerHtml", html);
        }
        get notesQuery() {
          return this.graph.sharedQueriesManager.getVertexQuery(
            this.key,
            "notesQuery",
            this.graph.sharedQueriesManager.notDeleted,
            (vert) => vert instanceof Note && vert.workspace === this
          );
        }
        get pinnedNotesQuery() {
          return this.graph.sharedQueriesManager.getVertexQuery(
            this.key,
            "pinnedNotesQuery",
            this.notesQuery,
            (note) => note.isPinned
          );
        }
      };
    }
  });

  // cfds/client/graph/vertices/base.ts
  var BaseVertex, ContentVertex, kFieldTriggersBase2, kFieldTriggersContent;
  var init_base2 = __esm({
    "cfds/client/graph/vertices/base.ts"() {
      init_error();
      init_vertex();
      init_orderstamp();
      init_mutations();
      init_workspace();
      init_propagation_triggers();
      init_comparable();
      BaseVertex = class extends Vertex {
        constructor(mgr, record, prevVertex, config) {
          super(mgr, record, prevVertex, config);
          this.selected = false;
          if (prevVertex && prevVertex instanceof Workspace) {
            this.selected = prevVertex.selected;
          }
        }
        // ============================= //
        // =========== Dates =========== //
        // ============================= //
        get creationDate() {
          return this.record.get("creationDate");
        }
        // set creationDate(d: Date) {
        //   this.record.set('creationDate', d);
        // }
        get lastModified() {
          const d = this.record.get("lastModified");
          assert(d instanceof Date);
          return d;
        }
        // set lastModified(d: Date) {
        //   this.record.set('lastModified', d);
        // }
        // ============================= //
        // ======== Other Basics ======= //
        // ============================= //
        calcIsDeleted(parentDeleted) {
          if (parentDeleted) {
            return parentDeleted;
          }
          const v = this.record.get("isDeleted");
          assert(typeof v === "number");
          return v;
        }
        get isDeleted() {
          return this.calcIsDeleted(this.parent?.isDeleted);
        }
        set isDeleted(v) {
          this.record.set("isDeleted", v);
        }
        get sortStamp() {
          return this.record.get(
            "sortStamp",
            fromTimestamp(this.creationDate, this.key)
          );
        }
        set sortStamp(v) {
          this.record.set("sortStamp", v);
        }
        clearSortStamp() {
          this.record.delete("sortStamp");
        }
        clearSelected() {
          this.selected = false;
        }
        // Override by subclasses
        get parent() {
          return void 0;
        }
        // isDeleted is affected by parent changes
        parentDidMutate(local, oldValue, parent) {
          const prevIsDeleted = this.calcIsDeleted(oldValue?.isDeleted);
          if (prevIsDeleted !== this.isDeleted) {
            return ["isDeleted", local, prevIsDeleted];
          }
        }
        // If our parent's isDeleted has changed, our isDeleted may need to be updated
        parentIsDeletedChanged(local, oldValue, parent) {
          if (!this.record.get("isDeleted")) {
            return ["isDeleted", local, this.calcIsDeleted(oldValue)];
          }
        }
        onUserUpdatedField(mut) {
          let result = mut;
          for (const [field] of mutationPackIter(mut)) {
            if (this.record.scheme.hasField(field)) {
              const prevLastMod = this.lastModified;
              this.record.set("lastModified", /* @__PURE__ */ new Date());
              result = mutationPackAppend(mut, ["lastModified", true, prevLastMod]);
              break;
            }
          }
          return result;
        }
        valueForRefCalc(fieldName) {
          if (fieldName === "parent") {
            return this.parent;
          }
          return super.valueForRefCalc(fieldName);
        }
        compare(other) {
          if (other instanceof BaseVertex) {
            return coreValueCompare(other.sortStamp, this.sortStamp);
          }
          return super.compare(other);
        }
      };
      ContentVertex = class extends BaseVertex {
        get parent() {
          return this.workspace;
        }
        get createdBy() {
          const key = this.record.get("createdBy");
          return key ? this.graph.getVertex(key) : void 0;
        }
        set createdBy(v) {
          if (v) {
            assert(v.graph === this.graph);
            this.record.set("createdBy", v.key);
          } else {
            this.record.delete("createdBy");
          }
        }
        get workspace() {
          const key = this.record.get("workspace");
          assert(typeof key === "string");
          return this.graph.getVertex(key);
        }
        get workspaceKey() {
          return this.record.get("workspace");
        }
        set workspace(ws) {
          assert(ws.graph === this.graph);
          this.record.set("workspace", ws.key);
        }
        workspaceDidMutate(local, oldValue) {
          if (this.parent?.isEqual(this.workspace)) {
            return ["parent", local, oldValue];
          }
        }
        parentWorkspaceDidMutate() {
          this.workspace = this.parent.workspace;
        }
      };
      kFieldTriggersBase2 = {
        isDeleted: triggerChildren("parentIsDeletedChanged")
      };
      Vertex.registerFieldTriggers(BaseVertex, kFieldTriggersBase2);
      kFieldTriggersContent = {
        workspace: triggerChildren("parentWorkspaceDidMutate")
      };
      Vertex.registerFieldTriggers(ContentVertex, kFieldTriggersContent);
    }
  });

  // cfds/richtext/tree-keys.ts
  var gAllocatedKeys, TreeKeys;
  var init_tree_keys = __esm({
    "cfds/richtext/tree-keys.ts"() {
      init_hash_map();
      init_core_types();
      init_encoding();
      init_tree();
      gAllocatedKeys = /* @__PURE__ */ new Map();
      TreeKeys = class {
        constructor(root) {
          this._root = root;
          this._keys = /* @__PURE__ */ new Map();
          this._counts = new HashMap(
            (v) => encodableValueHash(v, kCoreValueTreeNodeOpts),
            (v1, v2) => coreValueEquals(v1, v2, kCoreValueTreeNodeOpts)
          );
          for (const [node] of dfs(root)) {
            this.keyFor(node);
          }
        }
        keyFor(node) {
          const keys = this._keys;
          let nodeKey = keys.get(node);
          if (nodeKey === void 0) {
            const counts = this._counts;
            const idx = counts.get(node) || 0;
            const hash = encodableValueHash(node, kCoreValueTreeNodeOpts);
            const id = hash + "/" + idx;
            nodeKey = gAllocatedKeys.get(id);
            if (nodeKey === void 0) {
              nodeKey = { id };
              gAllocatedKeys.set(id, nodeKey);
            }
            keys.set(node, nodeKey);
            counts.set(node, idx + 1);
          }
          return nodeKey;
        }
        clone() {
          return new TreeKeys(this._root);
        }
        isEqual(other) {
          const thisCounts = this._counts;
          const otherCounts = other._counts;
          for (const [key, value] of thisCounts) {
            if (otherCounts.get(key) !== value) {
              return false;
            }
          }
          for (const key of otherCounts.keys()) {
            if (!thisCounts.has(key)) {
              return false;
            }
          }
          return true;
        }
      };
    }
  });

  // cfds/richtext/doc-state.ts
  function docFromRT(rt) {
    const result = {
      root: rt.root,
      nodeKeys: new TreeKeys(rt.root)
    };
    if (rt.pointers !== void 0) {
      result.ranges = composeRanges(rt);
    }
    return result;
  }
  function docToRT(doc) {
    const result = {
      root: doc.root
    };
    if (doc.ranges !== void 0) {
      const pointers = decomposeRanges(doc);
      if (pointers.size > 0) {
        result.pointers = pointers;
      }
    }
    return result;
  }
  function isDocument(doc) {
    return doc.nodeKeys instanceof TreeKeys;
  }
  function unkeyedDocToDoc(doc) {
    if (isDocument(doc)) {
      return doc;
    }
    return {
      ...doc,
      nodeKeys: new TreeKeys(doc.root)
    };
  }
  function findLastTextNode(rt) {
    let textNode;
    for (const [node] of dfs(rt.root)) {
      if (isTextNode(node)) {
        textNode = node;
      }
    }
    if (textNode === void 0) {
      notReached("No text nodes found in tree");
    }
    return textNode;
  }
  function findFirstTextNode(rt) {
    for (const [node] of dfs(rt.root)) {
      if (isTextNode(node)) {
        return node;
      }
    }
    notReached("No text nodes found in tree");
  }
  function composeRanges(rt) {
    const result = {};
    if (rt.pointers === void 0) {
      return result;
    }
    let lastTextNode2;
    let firstTextNode;
    for (const ptr of rt.pointers) {
      if (isPointer(ptr)) {
        let range = result[ptr.key];
        if (range === void 0) {
          if (ptr.type === "anchor") {
            if (ptr.dir === 1 /* Forward */) {
              if (lastTextNode2 === void 0) {
                lastTextNode2 = findLastTextNode(rt);
              }
              range = {
                anchor: {
                  node: ptr.node,
                  offset: ptr.offset
                },
                focus: {
                  node: lastTextNode2,
                  offset: lastTextNode2.text.length
                }
              };
            } else if (ptr.dir === -1 /* Backward */) {
              if (firstTextNode === void 0) {
                firstTextNode = findFirstTextNode(rt);
              }
              range = {
                anchor: {
                  node: ptr.node,
                  offset: ptr.offset
                },
                focus: {
                  node: firstTextNode,
                  offset: 0
                }
              };
            }
          } else {
            assert(ptr.type === "focus");
            if (ptr.dir === -1 /* Backward */) {
              if (lastTextNode2 === void 0) {
                lastTextNode2 = findLastTextNode(rt);
              }
              range = {
                anchor: {
                  node: lastTextNode2,
                  offset: lastTextNode2.text.length
                },
                focus: {
                  node: ptr.node,
                  offset: ptr.offset
                }
              };
            } else if (ptr.dir === 1 /* Forward */) {
              if (firstTextNode === void 0) {
                firstTextNode = findFirstTextNode(rt);
              }
              range = {
                anchor: {
                  node: firstTextNode,
                  offset: 0
                },
                focus: {
                  node: ptr.node,
                  offset: ptr.offset
                }
              };
            }
          }
          if (range === void 0) {
            assert(ptr.dir === 0 /* None */);
            range = {
              anchor: {
                node: ptr.node,
                offset: ptr.offset
              },
              focus: {
                node: ptr.node,
                offset: ptr.offset
              }
            };
          }
          result[ptr.key] = range;
        } else {
          range[ptr.type] = {
            node: ptr.node,
            offset: ptr.offset
          };
        }
        if (ptr.expiration && (range.expiration === void 0 || range.expiration.getTime() < ptr.expiration.getTime())) {
          range.expiration = ptr.expiration;
        }
        if (ptr.isLocal) {
          range.isLocal = true;
        }
      }
    }
    return result;
  }
  function nodesByFlatIndexes(rt) {
    const result = /* @__PURE__ */ new Map();
    let idx = 0;
    for (const [node] of dfs(rt.root)) {
      result.set(node, idx);
      if (isTextNode(node)) {
        idx += node.text.length;
      }
      idx += 1;
    }
    return result;
  }
  function decomposeRanges(doc) {
    if (doc.ranges === void 0) {
      return /* @__PURE__ */ new Set();
    }
    const result = /* @__PURE__ */ new Set();
    const nodesToIndexes = nodesByFlatIndexes({ root: doc.root });
    for (const [key, range] of Object.entries(doc.ranges)) {
      const anchorOffset = nodesToIndexes.get(range.anchor.node);
      const focusOffset = nodesToIndexes.get(range.focus.node);
      const dir = anchorOffset < focusOffset ? 1 /* Forward */ : anchorOffset > focusOffset ? -1 /* Backward */ : 0 /* None */;
      result.add(buildRangePointer(key, range, "anchor", dir));
      result.add(buildRangePointer(key, range, "focus", dir));
    }
    return result;
  }
  function buildRangePointer(key, range, type, dir) {
    const result = {
      key,
      type,
      dir,
      node: range[type].node,
      offset: range[type].offset
    };
    if (range.expiration !== void 0) {
      result.expiration = range.expiration;
    }
    if (range.isLocal) {
      result.isLocal = true;
    }
    return result;
  }
  function projectRanges(src, dst, filter) {
    if (src.ranges === void 0) {
      return unkeyedDocToDoc(dst);
    }
    return unkeyedDocToDoc(
      docFromRT(projectPointers(docToRT(src), docToRT(dst), filter))
    );
  }
  var init_doc_state = __esm({
    "cfds/richtext/doc-state.ts"() {
      init_tree();
      init_error();
      init_tree_keys();
      init_flat_rep();
    }
  });

  // cfds/richtext/markdown.ts
  function treeToMarkdown(root) {
    if (!root) {
      return "";
    }
    let result = "";
    let prevDepth = 1;
    for (const [node, depth] of dfs(root)) {
      if (depth !== prevDepth) {
        result += "\n";
        prevDepth = depth;
      }
      switch (node.tagName) {
        case "h1":
          result += "# ";
          break;
        case "h2":
          result += "## ";
          break;
        case "li":
          result += "* ";
          break;
        case "ref":
          result += "- ";
          break;
        default:
          break;
      }
      if (isTextNode(node)) {
        result += node.text;
      }
    }
    return result;
  }
  var init_markdown = __esm({
    "cfds/richtext/markdown.ts"() {
      init_tree();
    }
  });

  // cfds/client/graph/vertices/note.ts
  function stripWhitelines(str) {
    return str.replace(kStripWhitelinesReges, " ");
  }
  var Note, kStripWhitelinesReges, kFieldTriggersNote;
  var init_note = __esm({
    "cfds/client/graph/vertices/note.ts"() {
      init_base2();
      init_scheme_types();
      init_tree();
      init_composer();
      init_vertex();
      init_mutations();
      init_doc_state();
      init_clone();
      init_flat_rep();
      init_markdown();
      init_propagation_triggers();
      init_core_types();
      init_set();
      Note = class extends ContentVertex {
        constructor(mgr, record, prevVertex, config) {
          super(mgr, record, prevVertex, config);
          if (prevVertex instanceof Note && coreValueEquals(this.body, prevVertex.body)) {
            this._cachedBodyPreview = prevVertex._cachedBodyPreview;
          }
        }
        get parent() {
          return this.parentNote || super.parent;
        }
        parentNoteDidMutate(local, oldValue) {
          return [
            ["parent", local, oldValue],
            ["parentType", local, oldValue?.type]
          ];
        }
        get assignees() {
          return this.vertSetForField("assignees");
        }
        set assignees(users) {
          this.record.set(
            "assignees",
            map(users, (u) => u.key)
          );
        }
        clearAssignees() {
          this.record.set("assignees", /* @__PURE__ */ new Set());
        }
        get attachments() {
          const attachments = this.record.get("attachments");
          if (attachments === void 0 || attachments.size === 0) {
            return /* @__PURE__ */ new Set();
          }
          const copy = map(attachments, (v) => coreObjectClone(v));
          return copy;
        }
        set attachments(set) {
          const copy = map(set, (v) => coreObjectClone(v));
          this.record.set("attachments", copy);
        }
        clearAttachments() {
          this.record.set("attachments", /* @__PURE__ */ new Set());
        }
        get body() {
          if (this._cachedBody === void 0) {
            const graph = this.graph;
            this._cachedBody = docFromRT(
              composeRichText(
                (key) => {
                  const note = graph.getVertex(key);
                  if (note.isNull) {
                    return 1 /* Loading */;
                  }
                  if (note.isDeleted) {
                    return 0 /* Deleted */;
                  }
                  return note.record.get("title");
                },
                this.record.get("body") || initRichText(),
                true
              )
            );
          }
          return this._cachedBody;
        }
        set body(rt) {
          const oldRefs = this.getBodyRefs();
          rt = projectRanges(
            this.body,
            rt,
            (ptr) => this.graph.ptrFilterFunc(ptr.key)
          );
          this._cachedBody = void 0;
          const graph = this.graph;
          const updatedBody = decomposeRichText(
            (key, rt2) => {
              let childV;
              if (!oldRefs.has(key)) {
                if (graph.hasVertex(key)) {
                  childV = graph.getVertex(key);
                  childV.isDeleted = 0;
                } else {
                  childV = graph.createVertex(
                    NS_NOTES,
                    {
                      creationDate: /* @__PURE__ */ new Date(),
                      parentNote: this.key,
                      type: "task" /* Task */,
                      createdBy: this.createdBy?.key,
                      workspace: this.workspace.key
                    },
                    key
                  );
                }
              } else {
                childV = graph.getVertex(key);
              }
              childV.titleRT = rt2;
            },
            docToRT(rt),
            true
          );
          this.record.set("body", updatedBody);
          this._cachedBody = void 0;
          const newRefs = this.getBodyRefs();
          const deletedKeys = subtract(oldRefs, newRefs);
          for (const key of deletedKeys) {
            graph.getVertex(key).isDeleted = 1;
          }
        }
        clearBody() {
          this.body = docFromRT(initRichText());
        }
        getBodyRefs() {
          const bodyRT = this.record.get("body");
          if (bodyRT === void 0) {
            return /* @__PURE__ */ new Set();
          }
          return extractRefs(bodyRT.root, true);
        }
        getRawBody() {
          return this.record.get("body");
        }
        get bodyPreview() {
          if (this._cachedBodyPreview === void 0) {
            this._cachedBodyPreview = stripWhitelines(treeToMarkdown(this.body.root));
          }
          return this._cachedBodyPreview;
        }
        bodyDidMutate(local, oldValue) {
          this._cachedBodyPreview = void 0;
          this._cachedBody = void 0;
          return [
            "bodyPreview",
            local,
            stripWhitelines(treeToMarkdown(oldValue?.root))
          ];
        }
        _invalidateBodyOnChildChange(local, childKey) {
          if (this.getBodyRefs().has(childKey)) {
            const oldValue = this._cachedBody;
            this._cachedBody = void 0;
            return ["body", local, oldValue];
          }
        }
        get childCards() {
          if (this._cachedChildCards === void 0) {
            const childCards = [];
            for (const child of this.getChildren("notes" /* NOTES */)) {
              if (!child.isDeleted) {
                childCards.push(child);
              }
            }
            this._cachedChildCards = childCards;
          }
          return this._cachedChildCards;
        }
        _invalidateChildCards(local) {
          const res = ["childCards", local, this._cachedChildCards];
          this._cachedChildCards = void 0;
          return res;
        }
        childParentNoteDidMutate(local, oldValue, child) {
          return this._invalidateChildCards(local);
        }
        // Invalidate our composite body if the title of an inner task are changes
        childTitleDidMutate(local, oldValue, child) {
          return this._invalidateBodyOnChildChange(local, child.key);
        }
        // Invalidate our composite body if the title of an inner task are changes
        childIsLoadingDidMutate(local, oldValue, child) {
          return this._invalidateBodyOnChildChange(local, child.key);
        }
        get dueDate() {
          return this.record.get("dueDate");
        }
        set dueDate(d) {
          if (d === void 0) {
            this.record.delete("dueDate");
          } else {
            this.record.set("dueDate", d);
          }
        }
        get title() {
          if (typeof this._cachedTitle === "undefined") {
            this._cachedTitle = docFromRT(this.titleRT);
          }
          return this._cachedTitle;
        }
        set title(rt) {
          this.titleRT = docToRT(rt);
        }
        clearTitle() {
          this.titleRT = initRichText();
        }
        get titleRT() {
          if (!this._cachedTitleRT) {
            this._cachedTitleRT = reconstructRichText(
              stripFormattingFilter(
                flattenRichText(
                  this.record.get("title") || initRichText(),
                  true,
                  false
                )
              )
            );
          }
          return this._cachedTitleRT;
        }
        set titleRT(rt) {
          if (rt === void 0) {
            rt = initRichText();
          }
          rt = projectPointers(
            this.titleRT,
            rt,
            (ptr) => this.graph.ptrFilterFunc(ptr.key),
            true,
            true
          );
          rt = reconstructRichText(
            stripFormattingFilter(flattenRichText(rt, true, false))
          );
          this._cachedTitle = void 0;
          this._cachedTitleRT = void 0;
          this.record.set("title", rt);
        }
        titleRTDidMutate(local, oldValue) {
          this._cachedTitle = void 0;
          this._cachedTitleRT = void 0;
          return ["title", local, docFromRT(oldValue)];
        }
        get parentNote() {
          const parentKey = this.record.get("parentNote");
          return parentKey !== void 0 ? this.graph.getVertex(parentKey) : void 0;
        }
        set parentNote(parent) {
          this.record.set("parentNote", parent?.key);
        }
        get status() {
          return this.record.get("status", "ToDo");
        }
        set status(status) {
          this.record.set("status", status);
        }
        clearStatus() {
          this.record.delete("status");
        }
        get tags() {
          const map2 = this.record.get("tags", /* @__PURE__ */ new Map());
          return keyDictToVertDict(this.graph, map2);
        }
        set tags(map2) {
          this.record.set("tags", vertDictToKeyDict(map2));
        }
        clearTags() {
          this.tags = /* @__PURE__ */ new Map();
        }
        get type() {
          return this.record.get("type");
        }
        set type(type) {
          this.record.set("type", type);
        }
        get parentType() {
          return this.parentNote?.type;
        }
        parentNoteTypeDidMutate(local, oldValue) {
          return ["parentType", local, oldValue];
        }
        get isPinned() {
          return this.record.get("pinnedBy").has(this.graph.rootKey);
        }
        set isPinned(val) {
          const current = map(this.pinnedBy, (x) => x);
          if (val) {
            current.add(this.graph.rootKey);
          } else if (current.has(this.graph.rootKey)) {
            current.delete(this.graph.rootKey);
          }
          this.pinnedBy = current;
        }
        get pinnedBy() {
          return this.record.get("pinnedBy");
        }
        set pinnedBy(pins) {
          this.record.set("pinnedBy", pins);
        }
        pinnedByDidMutate(local, oldValue) {
          return ["isPinned", local, oldValue?.has(this.graph.rootKey)];
        }
        childNoteIsDeletedDidMutate(local, oldValue, child) {
          return mutationPackAppend(
            // TODO: Actually go and remove the RefMarkers from the rich text
            this._invalidateBodyOnChildChange(local, child.key),
            this._invalidateChildCards(local)
          );
        }
        rewritePinsToRootUser() {
          const pinnedBy = this.pinnedBy;
          if (pinnedBy && pinnedBy.has("/")) {
            const updatedPins = new Set(pinnedBy);
            updatedPins.delete("/");
            updatedPins.add(this.graph.rootKey);
            this.pinnedBy = updatedPins;
          }
        }
      };
      kStripWhitelinesReges = /[\r\n]\s*/g;
      kFieldTriggersNote = {
        title: triggerParent("childTitleDidMutate", "notes" /* NOTES */),
        // Note: Any trigger installed by a superclass gets automatically triggered
        // before these triggers
        // isLoading: triggerParent('childIsLoadingDidMutate', SchemeNamespace.NOTES),
        isDeleted: triggerParent(
          "childNoteIsDeletedDidMutate",
          "notes" /* NOTES */
        ),
        parentNote: triggerParent("childParentNoteDidMutate", "notes" /* NOTES */),
        type: triggerChildren("parentNoteTypeDidMutate", "notes" /* NOTES */)
      };
      Vertex.registerFieldTriggers(Note, kFieldTriggersNote);
    }
  });

  // cfds/client/graph/vertices/tag.ts
  var Tag, kFieldTriggersTag;
  var init_tag = __esm({
    "cfds/client/graph/vertices/tag.ts"() {
      init_base2();
      init_vertex();
      init_comparable();
      init_propagation_triggers();
      Tag = class extends BaseVertex {
        get name() {
          return this.record.get("name", "");
        }
        set name(n) {
          this.record.set("name", n);
        }
        get fullName() {
          return this.fullNameForParent(this.parentTag);
        }
        get parentTag() {
          const key = this.record.get("parentTag");
          return key ? this.graph.getVertex(key) : void 0;
        }
        set parentTag(tag) {
          if (tag) {
            this.record.set("parentTag", tag.key);
          } else {
            this.record.delete("parentTag");
          }
        }
        fullNameForParent(parentTag) {
          return parentTag ? `${parentTag.name}/${this.name}` : this.name;
        }
        parentTagDidMutate(local, oldValue) {
          return [
            ["parent", local, oldValue],
            ["fullName", local, this.fullNameForParent(oldValue)]
          ];
        }
        parentNameDidMutate(local, oldValue) {
          return ["fullName", local, `${oldValue}/${this.name}`];
        }
        get parent() {
          return this.parentTag;
        }
        get childTagsQuery() {
          const queryManager = this.graph.sharedQueriesManager;
          return queryManager.getVertexQuery(
            this.key,
            "childTagsQuery",
            queryManager.tags,
            (tag) => tag.parent?.key === this.key,
            (t1, t2) => coreValueCompare(t1.sortStamp, t2.sortStamp)
          );
        }
      };
      kFieldTriggersTag = {
        name: triggerChildren("parentNameDidMutate")
      };
      Vertex.registerFieldTriggers(Tag, kFieldTriggersTag);
    }
  });

  // cfds/client/graph/vertices/user.ts
  var User;
  var init_user = __esm({
    "cfds/client/graph/vertices/user.ts"() {
      init_error();
      init_base2();
      init_scheme_types();
      init_comparable();
      User = class extends BaseVertex {
        get avatarUrl() {
          return this.record.get("avatarUrl");
        }
        set avatarUrl(url) {
          if (url !== void 0) {
            this.record.set("avatarUrl", url);
          } else {
            this.record.delete("avatarUrl");
          }
        }
        get email() {
          const email = this.record.get("email");
          assert(typeof email === "string" && email.length > 0);
          return email;
        }
        set email(email) {
          assert(typeof email === "string" && email.length > 0);
          this.record.set("email", email);
        }
        get name() {
          return this.record.get("name", this.email);
        }
        set name(n) {
          this.record.set("name", n);
        }
        clearName() {
          this.record.delete("name");
        }
        get settings() {
          return this.graph.createVertex(
            NS_USER_SETTINGS,
            {},
            this.key + "_settings",
            false
          );
        }
        compare(other) {
          const rootKey = this.graph.rootKey;
          if (this.key === rootKey) {
            return -1;
          }
          if (other.key === rootKey) {
            return 1;
          }
          return coreValueCompare(this.name, other.name) || super.compare(other);
        }
      };
    }
  });

  // cfds/client/graph/vertices/user-settings.ts
  var UserSettings;
  var init_user_settings = __esm({
    "cfds/client/graph/vertices/user-settings.ts"() {
      init_set();
      init_scheme_versions();
      init_vertex();
      UserSettings = class extends Vertex {
        get passwordHash() {
          return this.record.get("passwordHash");
        }
        set passwordHash(p) {
          if (p) {
            this.record.set("passwordHash", p);
          } else {
            this.record.delete("passwordHash");
          }
        }
        clearPasswordHash() {
          this.record.delete("passwordHash");
        }
        get lastLoggedIn() {
          return this.record.get("lastLoggedIn");
        }
        set lastLoggedIn(d) {
          if (d !== void 0) {
            this.record.set("lastLoggedIn", d);
          } else {
            this.record.delete("lastLoggedIn");
          }
        }
        get seenTutorials() {
          const seenTutorials = this.record.get("seenTutorials");
          if (seenTutorials === void 0 || seenTutorials.size === 0) {
            return /* @__PURE__ */ new Set();
          }
          const copy = map(seenTutorials, (v) => v);
          return copy;
        }
        set seenTutorials(set) {
          const copy = map(set, (v) => v);
          this.record.set("seenTutorials", copy);
        }
        clearSeenTutorials() {
          this.record.set("seenTutorials", /* @__PURE__ */ new Set());
        }
        get workspaceColors() {
          const workspaceColors = this.record.get("workspaceColors");
          if (!workspaceColors) {
            return /* @__PURE__ */ new Map();
          }
          const copy = new Map(workspaceColors.entries());
          return copy;
        }
        set workspaceColors(map2) {
          const copy = new Map(map2.entries());
          this.record.set("workspaceColors", copy);
        }
        get hiddenWorkspaces() {
          return this.record.get("hiddenWorkspaces");
        }
        set hiddenWorkspaces(set) {
          this.record.set("hiddenWorkspaces", new Set(set));
        }
        get pinnedWorkspaces() {
          return this.record.get("pinnedWorkspaces");
        }
        set pinnedWorkspaces(set) {
          this.record.set("pinnedWorkspaces", new Set(set));
        }
        get onboardingStep() {
          return this.record.get("onboardingStep", 0 /* Start */);
        }
        set onboardingStep(step) {
          this.record.set("onboardingStep", step);
        }
      };
    }
  });

  // cfds/client/graph/vertices/vertex-builder.ts
  function vertexBuilder(manager, record, prevVertex, config) {
    switch (record.scheme.namespace) {
      case "workspaces" /* WORKSPACE */:
        return new Workspace(manager, record, prevVertex, config);
      case "users" /* USERS */:
        return new User(manager, record, prevVertex, config);
      case "tags" /* TAGS */:
        return new Tag(manager, record, prevVertex, config);
      case "notes" /* NOTES */:
        return new Note(manager, record, prevVertex, config);
      case "user-settings" /* USER_SETTINGS */:
        return new UserSettings(manager, record, prevVertex, config);
      default:
        return new Vertex(manager, record, prevVertex, config);
    }
  }
  var init_vertex_builder = __esm({
    "cfds/client/graph/vertices/vertex-builder.ts"() {
      init_scheme_types();
      init_vertex();
      init_note();
      init_tag();
      init_user();
      init_workspace();
      init_user_settings();
    }
  });

  // base/time.ts
  function delay(delayMs, func) {
    if (delayMs <= 0) {
      let reject, resolve;
      const promise = new Promise((res, rej) => {
        reject = rej;
        resolve = res;
      });
      queueMicrotask(() => {
        try {
          resolve(func());
        } catch (e) {
          reject(e);
        }
      });
      return promise;
    }
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          resolve(func());
        } catch (e) {
          reject(e);
        }
      }, delayMs);
    });
  }
  async function retry(func, timeoutMs, maxDelayMs = 20, timingFunc = easeInQuad) {
    const startTime = Date.now();
    let factor = 0;
    let err = null;
    do {
      try {
        return err === null || err instanceof TryAgain ? await func() : await delay(maxDelayMs * timingFunc(factor), func);
      } catch (e) {
        if (e instanceof NoRetry) {
          throw e.origError;
        }
        err = e;
      }
      factor = (Date.now() - startTime) / timeoutMs;
    } while (factor <= 1 || err instanceof TryAgain);
    throw err instanceof RetryBaseErr ? err.origError : err;
  }
  function clip(value, min = 0, max = 1) {
    return Math.max(min, Math.min(max, value));
  }
  function easeInQuad(factor) {
    return Math.pow(clip(factor), 2);
  }
  function easeInOutSine(factor) {
    return -(Math.cos(Math.PI * clip(factor)) - 1) / 2;
  }
  var RetryBaseErr, TryAgain, NoRetry;
  var init_time = __esm({
    "base/time.ts"() {
      RetryBaseErr = class extends Error {
        constructor(origError) {
          super(origError instanceof Error ? origError.message : "Unknown Error");
          this.origError = origError;
        }
      };
      TryAgain = class extends RetryBaseErr {
      };
      NoRetry = class extends RetryBaseErr {
      };
    }
  });

  // base/algorithms.ts
  function bsearch(arr, value, comparator = (x, y) => x > y ? 1 : x < y ? -1 : 0) {
    if (!arr || arr.length <= 0) {
      return 0;
    }
    let start = 0;
    let end = arr.length - 1;
    while (start < end) {
      const mid = (start + end) / 2 | 0;
      const r = comparator(value, arr[mid]);
      if (r === 0) {
        return mid;
      }
      if (r < 0) {
        end = mid - 1;
      } else {
        start = mid + 1;
      }
    }
    return comparator(value, arr[start]) > 0 ? start + 1 : start;
  }
  var init_algorithms = __esm({
    "base/algorithms.ts"() {
    }
  });

  // base/collections/queue.ts
  function defaultComparator(a, b) {
    return a - b;
  }
  function defaultEQ(a, b) {
    return a === b;
  }
  var SortedQueue;
  var init_queue = __esm({
    "base/collections/queue.ts"() {
      init_algorithms();
      SortedQueue = class {
        constructor(comparator, eq) {
          this._arr = [];
          this._comparator = comparator || defaultComparator;
          this._eq = eq || defaultEQ;
        }
        get size() {
          return this._arr.length;
        }
        get peek() {
          return this._arr[this._arr.length - 1];
        }
        push(v) {
          const arr = this._arr;
          const idx = bsearch(arr, v, this._comparator);
          if (idx >= arr.length || !this._eq(arr[idx], v)) {
            this._arr.splice(idx, 0, v);
          }
        }
        pop() {
          return this._arr.pop();
        }
        delete(v) {
          const arr = this._arr;
          const idx = bsearch(arr, v, this._comparator);
          if (idx < arr.length && this._eq(arr[idx], v)) {
            arr.splice(idx, 1);
            return true;
          }
          return false;
        }
        has(v) {
          const arr = this._arr;
          const idx = bsearch(arr, v, this._comparator);
          return idx < arr.length && this._eq(arr[idx], v);
        }
      };
    }
  });

  // base/coroutine.ts
  function compareCoroutines(c1, c2) {
    return c1.compare(c2);
  }
  function* mapGenerator(iter, mapper) {
    const result = [];
    for (const v of iter) {
      result.push(mapper(v));
      yield result;
    }
    return result;
  }
  function getRelativeTimestamp() {
    if (gTimestampCounter === 0) {
      gPrevTimestamp = Math.max(performance.now(), gPrevTimestamp);
    }
    gTimestampCounter = (gTimestampCounter + 1) % kTimestampReadingThrottle;
    return gPrevTimestamp;
  }
  var kSingleFrameMs, kSchedulerCycleTimeMs, gActiveCoroutine, Coroutine, CoroutineScheduler, kSharedScheduler, kTimestampReadingThrottle, gTimestampCounter, gPrevTimestamp;
  var init_coroutine = __esm({
    "base/coroutine.ts"() {
      init_timer();
      kSingleFrameMs = 1e3 / 60;
      kSchedulerCycleTimeMs = kSingleFrameMs / 3;
      Coroutine = class {
        /**
         * Initializes a new Coroutine.
         *
         * @param id          The id of this routine, as assigned by the scheduler.
         *
         * @param generator   The underlying generator.
         *                    Values yielded or returned are ignored.
         *
         * @param doneHandler An optional handler that'll be called once this
         *                    coroutine transitions to a done status. This handler is
         *                    called at most once.
         *
         * @param name        An optional name for identifying this coroutine in logs.
         */
        constructor(id, generator, doneHandler, name) {
          this.id = id;
          this._cancelled = false;
          this._generator = generator;
          this._doneHandler = doneHandler;
          this._timeSpentMs = 0;
          this._completed = false;
          this.name = name;
        }
        /**
         * Pack a generator as a Coroutine instance. This method is designed be used
         * from within a scheduler, and not as a general use.
         *
         * @param id   The id of this routine, as assigned by the scheduler.
         *
         * @param g    The underlying generator.
         *             Values yielded or returned are ignored.
         *
         * @param name An optional name for identifying this coroutine in logs.
         *
         * @returns A new Coroutine instance and an accompanying promise that wraps
         *          it.
         */
        static pack(id, g, name) {
          let resolve;
          const promise = new Promise((res) => {
            resolve = res;
          });
          const coroutine = new Coroutine(id, g, resolve, name);
          promise.cancel = () => coroutine.cancel();
          promise.cancelImmediately = () => coroutine.cancelImmediately();
          return [coroutine, promise];
        }
        /**
         * Returns the currently executing Coroutine.
         *
         * @returns The current coroutine or undefined if called outside a coroutine.
         */
        static current() {
          return gActiveCoroutine;
        }
        /**
         * Returns whether this routine has completed its execution and returned
         * control to its caller. A completed coroutine will never be executed again
         * as the underlying generator had been exhausted.
         */
        get completed() {
          return this._completed;
        }
        /**
         * Returns true after a call to cancel() had been made. It's up to the
         * executing code to periodically check this flag and exit early if possible.
         * This is done to provide the running code a chance to run any needed
         * cleanups before cancelling.
         */
        get cancelled() {
          return !this._cancelled;
        }
        /**
         * Returns whether this routine should run in a future iteration of a
         * scheduler. Code inside the a running coroutine may use this flag to guard
         * against all kinds of edge cases like this:
         * `
         * if (Coroutine.current()?.shouldRun !== true) {
         *    // run any cleanups here
         *    return;
         * }
         * `
         */
        get shouldRun() {
          return !this.completed && !this.cancelled;
        }
        /**
         * Returns the last yielded value from the underlying generator, or its return
         * value on completion.
         */
        get value() {
          return this._value;
        }
        /**
         * Registers a cancellation request with the running code, which may respect
         * it or not. This is the preferred method for cancelling coroutines, since
         * it gives the executing code a chance to run cleanups before exiting.
         */
        cancel() {
          this._cancelled = true;
        }
        /**
         * Cancels this coroutine immediately, causing it to never execute again.
         * If called from within the running coroutine, this method makes the next
         * `yield` act the same as `return`.
         *
         * @warning This method doesn't give the running code chance to do any
         *          cleanups and thus must be used with care. Prefer to use `cancel()`
         *          when possible.
         */
        cancelImmediately() {
          if (this._completed) {
            return;
          }
          this._completed = true;
          this._cancelled = true;
          this._doneHandler(this.value);
        }
        /**
         * Although this method is public, it shouldn't be called directly unless
         * you're building an alternative scheduler.
         *
         * Each call to this method runs the underlying generator until its next call
         * to `yield` or `return`.
         */
        run() {
          if (this._completed) {
            return;
          }
          gActiveCoroutine = this;
          const res = this._generator.next();
          gActiveCoroutine = void 0;
          this._value = res.value;
          if (res.done === true) {
            this._completed = true;
            this._doneHandler(this.value);
          }
        }
        /**
         * Compare two coroutines to determine their execution order. Used by
         * schedulers to order running coroutines.
         *
         * @param other The Coroutine to compare to.
         *
         * @returns A positive number if `other` needs to be executed before `this`,
         *          a negative number if `this` needs to be executed before `other`,
         *          zero if the execution order is undetermined.
         */
        compare(other) {
          if (other === this) {
            return 0;
          }
          const dt = Math.round(other._timeSpentMs - this._timeSpentMs);
          if (dt !== 0) {
            return dt;
          }
          return other.id - this.id;
        }
        /**
         * Used by a scheduler to increase the running time of this routine.
         *
         * @param dt Number of milliseconds of execution to add.
         */
        appendExecutionTime(dt) {
          this._timeSpentMs += dt;
        }
      };
      CoroutineScheduler = class {
        /**
         * @returns The default, shared, scheduler instance.
         */
        static sharedScheduler() {
          return kSharedScheduler;
        }
        /**
         * Initializes a new scheduler.
         *
         * @param cycleTimeMs A time limit, in milliseconds, for a single execution
         *                    cycle after which the scheduler will return control
         *                    to the browser's event loop. You only need to change
         *                    this value if you have more than one scheduler.
         */
        constructor(cycleTimeMs = kSchedulerCycleTimeMs) {
          this._cycleTimeMs = cycleTimeMs;
          this._scheduledCoroutines = [];
          for (let priority = 0; priority < 2 /* _Count */; ++priority) {
            this._scheduledCoroutines.push([]);
          }
          this._timer = new NextEventLoopCycleTimer(() => this.tick());
          this._coroutineId = 0;
        }
        /**
         * Execute coroutines in a loop until the time limit reaches or no coroutines
         * are left in the queue.
         *
         * @param queue The queue of pending coroutines.
         *
         * @param timeLimitMs A soft time limit for execution.
         *
         * NOTE: Browsers limit our time measuring accuracy for security reasons.
         *       This combined with the cooperative nature of our coroutines makes
         *       the time limit a very soft one. Choosing the value too high will
         *       cause UI lag, while choosing too low causes unneeded overhead and
         *       slower completion of the queue (from a wall clock perspective).
         */
        _executeFromQueue(queue, timeLimitMs) {
          const startTime = getRelativeTimestamp();
          const executedCoroutines = /* @__PURE__ */ new Set();
          queue.sort(compareCoroutines);
          while (queue.length > 0 && getRelativeTimestamp() - startTime < timeLimitMs) {
            const c = queue.shift();
            c.run();
            executedCoroutines.add(c);
            if (!c.completed) {
              queue.push(c);
            }
          }
          const avgRunningTime = (getRelativeTimestamp() - startTime) / executedCoroutines.size;
          for (const c of executedCoroutines) {
            c.appendExecutionTime(avgRunningTime);
          }
        }
        /**
         * Do a single "tick" in this event loop cycle. This executed any schedules
         * routines.
         *
         * @returns true if executed something, false if no Coroutines are scheduled.
         */
        tick() {
          const normalStartTime = getRelativeTimestamp();
          const normalQueue = this._scheduledCoroutines[0 /* Normal */];
          const backgroundQueue = this._scheduledCoroutines[1 /* Background */];
          this._executeFromQueue(normalQueue, this._cycleTimeMs);
          const backgroundRunTime = this._cycleTimeMs - (getRelativeTimestamp() - normalStartTime);
          if (backgroundRunTime > 0) {
            this._executeFromQueue(backgroundQueue, backgroundRunTime);
          }
          return normalQueue.length > 0 || backgroundQueue.length > 0;
        }
        /**
         * Schedules a generator as a coroutine, and returns a promise for its
         * execution.
         *
         * @param g The generator to wrap as Coroutine.
         *
         * @param priority The desired execution priority.
         *
         * @param name An optional name used for debugging and logging.
         *
         * @returns A cancellable promise for the coroutine.
         */
        schedule(g, priority = 0 /* Normal */, name) {
          const [coroutine, promise] = Coroutine.pack(
            ++this._coroutineId,
            g,
            name
          );
          const queue = this._scheduledCoroutines[priority];
          queue.push(coroutine);
          this._timer.schedule();
          return promise;
        }
        /**
         * Maps the given iterator to an array using the mapper function.
         * The resulting coroutine may be cancelled safely at any time, and its result
         * will contain a partial array up to the cancellation point.
         *
         * @param iter The iterable to map.
         * @param mapper The mapping function.
         * @param priority The priority for the newly created coroutine.
         * @param name An optional name for the newly created coroutine.
         *
         * @returns A cancelable promise for the newly scheduled coroutine.
         */
        map(iter, mapper, priority = 0 /* Normal */, name) {
          return this.schedule(mapGenerator(iter, mapper), priority, name);
        }
      };
      kSharedScheduler = new CoroutineScheduler();
      kTimestampReadingThrottle = 150;
      gTimestampCounter = 0;
      gPrevTimestamp = 0;
    }
  });

  // base/timer.ts
  function startTimerTickerIfNeeded() {
    if (!gTimerTicker && gScheduledTimers.size > 0) {
      gTimerTicker = setInterval(() => {
        const startTime = performance.now();
        for (let now = performance.now(); now - startTime <= MAX_TIMER_PROCESSING_MS; now = performance.now()) {
          if (gScheduledTimers.size > 0 && gScheduledTimers.peek.nextFireTimestamp <= now) {
            const timer = gScheduledTimers.pop();
            assert(timer !== void 0);
            assert(!gScheduledTimers.has(timer));
            timer.fire();
          } else {
            break;
          }
        }
      }, 20);
    }
  }
  function stopTimerTickerIfNeeded() {
    if (gTimerTicker && gScheduledTimers.size <= 0) {
      clearInterval(gTimerTicker);
      gTimerTicker = void 0;
    }
  }
  function processPendingNextEventLoopTimers() {
    const scheduledTimers = gScheduledNextEventLoopCycleTimers;
    gScheduledNextEventLoopCycleTimers = [];
    gScheduledTimeoutHandler = void 0;
    for (const timer of scheduledTimers) {
      timer._fire();
    }
  }
  var MAX_TIMER_PROCESSING_MS, gScheduledTimers, gTimerTicker, gTimerId, BaseTimer, SimpleTimer, BaseDynamicTimer, EaseInOutSineTimer, MicroTaskTimer, gScheduledNextEventLoopCycleTimers, gScheduledTimeoutHandler, NextEventLoopCycleTimer;
  var init_timer = __esm({
    "base/timer.ts"() {
      init_error();
      init_time();
      init_queue();
      init_coroutine();
      MAX_TIMER_PROCESSING_MS = 30;
      gScheduledTimers = new SortedQueue(
        (t1, t2) => t1.compare(t2)
      );
      gTimerId = 0;
      BaseTimer = class {
        constructor(callback, label) {
          this.label = label;
          this._callback = callback;
          this._nextFireTimestamp = 0;
          this._id = gTimerId++;
          this._isScheduled = false;
        }
        get nextFireTimestamp() {
          return this._nextFireTimestamp;
        }
        get isScheduled() {
          return this._isScheduled;
        }
        compare(other) {
          if (other === this) {
            return 0;
          }
          const dt = other._nextFireTimestamp - this._nextFireTimestamp;
          return dt === 0 ? this._id - other._id : dt;
        }
        schedule() {
          if (gScheduledTimers.has(this)) {
            assert(this._isScheduled);
            return this;
          }
          this._nextFireTimestamp = this.calcNextFireDate();
          gScheduledTimers.push(this);
          assert(!this._isScheduled);
          this._isScheduled = true;
          startTimerTickerIfNeeded();
          return this;
        }
        unschedule() {
          if (gScheduledTimers.delete(this)) {
            this._isScheduled = false;
          }
          stopTimerTickerIfNeeded();
          return this;
        }
        fire() {
          assert(this._isScheduled);
          this._isScheduled = false;
          if (this.run()) {
            this.schedule();
          } else {
            stopTimerTickerIfNeeded();
          }
        }
        run() {
          return this._callback(this) === true;
        }
      };
      SimpleTimer = class extends BaseTimer {
        constructor(intervalMs, repeat, callback, name) {
          super(callback, name);
          this._intervalMs = intervalMs;
          this._repeat = repeat;
        }
        static once(delayMs, callback, name) {
          return new SimpleTimer(
            delayMs,
            false,
            callback,
            name
          ).schedule();
        }
        get intervalMs() {
          return this._intervalMs;
        }
        calcNextFireDate() {
          return performance.now() + this._intervalMs;
        }
        run() {
          const result = super.run();
          return this._repeat || result;
        }
      };
      BaseDynamicTimer = class extends BaseTimer {
        constructor(minFreqMs, maxFreqMs, durationMs, callback, repeat = false, name) {
          super(callback, name);
          this._lastResetTime = performance.now();
          this._durationMs = durationMs;
          this._lastFireTime = 0;
          this._minFreqMs = minFreqMs;
          this._maxFreqMs = maxFreqMs;
          this._repeat = repeat;
        }
        get minFreqMs() {
          return this._minFreqMs;
        }
        get maxFreqMs() {
          return this._maxFreqMs;
        }
        get lastTriggerTime() {
          return this._lastFireTime;
        }
        get durationMs() {
          return this._durationMs;
        }
        get lastResetTime() {
          return this._lastResetTime;
        }
        get repeat() {
          return this._repeat;
        }
        set repeat(flag) {
          this._repeat = flag;
        }
        reset() {
          this._lastResetTime = performance.now();
        }
        schedule() {
          return super.schedule();
        }
        unschedule() {
          return super.unschedule();
        }
        run() {
          const { durationMs, lastResetTime } = this;
          const now = performance.now();
          if (!this.repeat && now - lastResetTime > durationMs) {
            return false;
          }
          this._lastFireTime = now;
          return super.run() || this.repeat;
        }
        calcNextFireDate() {
          const now = performance.now();
          const { minFreqMs, maxFreqMs, durationMs } = this;
          const f = Math.min(1, (now - this.lastResetTime) / durationMs);
          const freqDiff = maxFreqMs - minFreqMs;
          const sleepDur = minFreqMs + this.timingFunc(f) * freqDiff;
          return now + sleepDur;
        }
      };
      EaseInOutSineTimer = class extends BaseDynamicTimer {
        timingFunc(f) {
          return easeInOutSine(f);
        }
      };
      MicroTaskTimer = class {
        constructor(callback) {
          this._callback = callback;
          this._hasScheduledMicrotask = false;
          this._scheduled = false;
        }
        schedule() {
          if (this._scheduled) {
            return this;
          }
          this._scheduled = true;
          if (!this._hasScheduledMicrotask) {
            queueMicrotask(() => {
              this._hasScheduledMicrotask = false;
              if (this._scheduled) {
                this._scheduled = false;
                if (this._callback(this) === true) {
                  this.schedule();
                }
              }
            });
            this._hasScheduledMicrotask = true;
          }
          return this;
        }
        unschedule() {
          this._scheduled = false;
          return this;
        }
      };
      gScheduledNextEventLoopCycleTimers = [];
      NextEventLoopCycleTimer = class {
        constructor(callback) {
          this._callback = callback;
        }
        schedule() {
          if (gScheduledNextEventLoopCycleTimers.indexOf(this) < 0) {
            gScheduledNextEventLoopCycleTimers.push(this);
            if (gScheduledTimeoutHandler === void 0) {
              gScheduledTimeoutHandler = setTimeout(
                processPendingNextEventLoopTimers
              );
            }
          }
          return this;
        }
        unschedule() {
          const idx = gScheduledNextEventLoopCycleTimers.indexOf(this);
          if (idx >= 0) {
            gScheduledNextEventLoopCycleTimers.splice(idx, 1);
            if (gScheduledNextEventLoopCycleTimers.length === 0 && gScheduledTimeoutHandler !== void 0) {
              clearTimeout(gScheduledTimeoutHandler);
              gScheduledTimeoutHandler = void 0;
            }
          }
          return this;
        }
        _fire() {
          if (this._callback(this) === true) {
            this.schedule();
          }
        }
      };
    }
  });

  // cfds/client/graph/vertex-manager.ts
  function getDeleteMethodName(prop) {
    return "clear" + prop[0].toUpperCase() + prop.substring(1);
  }
  var import_eventemitter3_4_0, EVENT_DID_CHANGE, EVENT_CRITICAL_ERROR, gVertexBuilder, VertexManager, SetProxy, DictionaryProxy;
  var init_vertex_manager = __esm({
    "cfds/client/graph/vertex-manager.ts"() {
      import_eventemitter3_4_0 = __toESM(__require("https://esm.sh/eventemitter3@4.0.7"));
      init_mutations();
      init_core_types();
      init_vertex_builder();
      init_timer();
      init_flat_rep();
      init_types();
      init_error();
      init_vertex();
      init_set();
      init_scheme_types();
      init_dict();
      EVENT_DID_CHANGE = "did-change";
      EVENT_CRITICAL_ERROR = "critical-error";
      gVertexBuilder = vertexBuilder;
      VertexManager = class extends import_eventemitter3_4_0.default {
        constructor(graph, key, initialState, local) {
          super();
          this._graph = graph;
          this._key = key;
          this._vertexConfig = {
            isLocal: local === true
          };
          this._commitDelayTimer = new SimpleTimer(300, false, () => this.commit());
          const repo = this.repository;
          this._record = initialState || repo.valueForKey(this.key, graph.session);
          this.rebuildVertex();
          this.reportInitialFields(true);
        }
        static setVertexBuilder(f) {
          gVertexBuilder = f;
        }
        /********************************/
        /********** Public API **********/
        /********************************/
        /**
         * Returns the Client of the RecordState.
         */
        get graph() {
          return this._graph;
        }
        /**
         * Returns the key this RecordState manages.
         */
        get key() {
          return this._key;
        }
        get record() {
          return this._record;
        }
        get repositoryId() {
          const id = this.record.repositoryId;
          const res = id === kRecordIdField ? this.key : id;
          assert(
            void 0 !== res,
            `Failed inferring repository id for ${this._key}`
          );
          return res;
        }
        get repository() {
          return this.graph.repository(this.repositoryId);
        }
        /**
         * Returns whether this record state has local edits that have yet been saved
         * on the server.
         */
        get hasPendingChanges() {
          return !this.isLocal && this.record.isEqual(
            this.repository.valueForKey(this.key, this.graph.session)
          );
        }
        get isRoot() {
          return this.graph.rootKey === this.key;
        }
        get isLocal() {
          return this.getVertex().isLocal;
        }
        get namespace() {
          return this.record.scheme.namespace;
        }
        get scheme() {
          return this.record.scheme;
        }
        set scheme(scheme) {
          const record = this.record;
          if (scheme.isEqual(record.scheme)) {
            return;
          }
          record.upgradeScheme(scheme);
          this.rebuildVertex();
        }
        get displayName() {
          return (this.namespace ? this.namespace + "/" : "") + this.key;
        }
        get isDeleted() {
          return this.scheme.hasField("isDeleted") && this.record.get("isDeleted", 0) !== 0 && this.getVertexProxy().isDeleted !== 0;
        }
        get vertex() {
          return this.getVertexProxy();
        }
        getVertexProxy() {
          if (this._vertex === void 0) {
            this.rebuildVertex();
          }
          return this._revocableProxy.proxy;
        }
        getVertex() {
          if (this._vertex === void 0) {
            this.rebuildVertex();
          }
          return this._vertex;
        }
        *inEdges(fieldName) {
          const graph = this.graph;
          for (const edge of graph.adjacencyList.inEdges(this.key, fieldName)) {
            yield [graph.getVertexManager(edge.vertex), edge.fieldName];
          }
        }
        *outEdges(fieldName) {
          const graph = this.graph;
          for (const edge of graph.adjacencyList.outEdges(this.key, fieldName)) {
            yield [graph.getVertexManager(edge.vertex), edge.fieldName];
          }
        }
        /**
         * This method commits any pending local edits, and merges any pending remote
         * edits. NOP if nothing needs to be done.
         */
        commit() {
          if (this.isLocal) {
            return;
          }
          const graph = this.graph;
          const repo = this.repository;
          const prevRecord = this.record;
          if (repo.setValueForKey(this.key, graph.session, this.record)) {
            const newRecord = repo.valueForKey(this.key, graph.session);
            const vert = this.getVertexProxy();
            let pack;
            for (const fieldName of Object.keys(prevRecord.diff(newRecord, true))) {
              pack = mutationPackAppend(pack, [
                fieldName,
                vert[fieldName],
                false
              ]);
            }
            const dynamicFields = this.captureDynamicFields();
            this._record = newRecord;
            this.rebuildVertex();
            if (!mutationPackIsEmpty(pack)) {
              this.vertexDidMutate(pack, dynamicFields);
            }
          }
        }
        scheduleCommitIfNeeded() {
          this._commitDelayTimer.schedule();
        }
        rebuildVertex() {
          this._vertex = gVertexBuilder(
            this,
            this.record,
            this._vertex,
            this._vertexConfig
          );
          this.rebuildVertexProxy();
        }
        rebuildVertexProxy() {
          const handler = {
            deleteProperty: (target, prop) => {
              if (prop.startsWith("_")) {
                delete target[prop];
                return true;
              }
              const dynamicFields = this.captureDynamicFields();
              const oldValue = target[prop];
              let success;
              const deleteMethodName = getDeleteMethodName(prop);
              if (typeof target[deleteMethodName] === "function") {
                success = target[deleteMethodName]() !== false;
              } else if (this.scheme.hasField(prop)) {
                assert(
                  this.scheme.isRequiredField(prop) === false,
                  `Attempting to delete required field '${prop} of '${this.namespace}'`
                );
                success = target.record.delete(prop);
              } else {
                success = delete target[prop];
              }
              if (success) {
                const mut = target.onUserUpdatedField([prop, true, oldValue]);
                this.vertexDidMutate(mut, dynamicFields);
                if (this.scheme.hasField(prop)) {
                  this.scheduleCommitIfNeeded();
                }
              }
              return success;
            },
            set: (target, prop, value) => {
              if (prop.startsWith("_")) {
                target[prop] = value;
                return true;
              }
              const oldValue = target[prop];
              if (coreValueEquals(oldValue, value)) {
                return true;
              }
              const dynamicFields = this.captureDynamicFields();
              target[prop] = value;
              const mut = target.onUserUpdatedField([prop, true, oldValue]);
              this.vertexDidMutate(mut, dynamicFields);
              return true;
            },
            // deno-lint-ignore no-explicit-any
            get: (target, prop) => {
              const value = target[prop];
              if (value instanceof Set) {
                const setProxy = new SetProxy(value, (oldValue) => {
                  target[prop] = setProxy._target;
                  this.vertexDidMutate([prop, true, oldValue]);
                });
                return setProxy;
              } else if (isDictionary(value)) {
                const dictProxy = new DictionaryProxy(value, (oldValue) => {
                  target[prop] = dictProxy._target;
                  this.vertexDidMutate([prop, true, oldValue]);
                });
                return dictProxy;
              }
              return value;
            }
          };
          if (this._revocableProxy !== void 0) {
            this._revocableProxy.revoke();
          }
          this._revocableProxy = Proxy.revocable(this._vertex, handler);
          return this._revocableProxy.proxy;
        }
        /**
         * Called whenever our vertex has been mutated for whatever reason. This
         * method is the entry point which propagates mutations information.
         *
         * @param mutations The changes that have been applied to the vertex.
         * @param dynamicFields If available, a snapshot of the dynamic fields before
         *                      the mutations where applied.
         */
        vertexDidMutate(mutations, dynamicFields) {
          mutations = mutationPackOptimize(mutations);
          const vertex = this.getVertex();
          const addedEdges = [];
          const removedEdges = [];
          for (const [prop, local, oldValue] of mutationPackIter(mutations)) {
            const newValue = vertex.valueForRefCalc(prop);
            if (newValue === kNoRefsValue) {
              continue;
            }
            const newRefs = extractFieldRefs(newValue, true);
            const oldRefs = extractFieldRefs(oldValue, true);
            if (oldRefs.size > 0 || newRefs.size > 0) {
              const graph = this.graph;
              const adjList = graph.adjacencyList;
              const addedRefs = subtract(newRefs, oldRefs);
              const removedRefs = subtract(oldRefs, newRefs);
              const srcKey = this.key;
              for (const dstKey of addedRefs) {
                adjList.addEdge(srcKey, dstKey, prop);
                addedEdges.push([dstKey, prop]);
              }
              for (const dstKey of removedRefs) {
                adjList.deleteEdge(srcKey, dstKey, prop);
                removedEdges.push([dstKey, prop]);
              }
            }
          }
          if (dynamicFields) {
            mutations = this.mutationsForDynamicFields(mutations, dynamicFields);
          }
          if (mutationPackIsEmpty(mutations)) {
            return;
          }
          const refsChange = {
            added: addedEdges,
            removed: removedEdges
          };
          this.emit(EVENT_DID_CHANGE, mutations, refsChange);
          const sideEffects = vertex.didMutate(mutations);
          if (!mutationPackIsEmpty(sideEffects)) {
            this.vertexDidMutate(sideEffects);
          }
          if (this.hasPendingChanges) {
            this.scheduleCommitIfNeeded();
          }
        }
        captureDynamicFields() {
          return {
            hasPendingChanges: this.hasPendingChanges,
            isLocal: this.isLocal
          };
        }
        mutationsForDynamicFields(outMutations, snapshot) {
          if (snapshot.hasPendingChanges !== this.hasPendingChanges) {
            outMutations = mutationPackAppend(outMutations, [
              "hasPendingChanges",
              true,
              snapshot.hasPendingChanges
            ]);
          }
          if (snapshot.isLocal !== this.isLocal) {
            outMutations = mutationPackAppend(outMutations, [
              "isLocal",
              true,
              snapshot.isLocal
            ]);
          }
          return outMutations;
        }
        /*****************************************************
         ************* Methods for Graph Manager *************
         *****************************************************/
        getCurrentStateMutations(local) {
          let pack;
          for (const fieldName of this.record.keys) {
            pack = mutationPackAppend(pack, [fieldName, local, void 0]);
          }
          pack = mutationPackAppend(pack, ["isLoading", true, void 0]);
          pack = mutationPackAppend(pack, ["hasPendingChanges", true, void 0]);
          pack = mutationPackAppend(pack, ["errorCode", true, void 0]);
          pack = mutationPackAppend(pack, ["isLocal", true, this.isLocal]);
          return pack;
        }
        /**
         * Called after locally creating a vertex to report the initial values through
         * the mutations API.
         */
        reportInitialFields(local) {
          this.vertexDidMutate(this.getCurrentStateMutations(local));
        }
        updateBySnapshot(snapshot) {
          let pack;
          const vertex = this.getVertex();
          let changed = false;
          const dynamicFields = this.captureDynamicFields();
          for (const fieldName in snapshot.data) {
            const oldValue = vertex[fieldName];
            const oldRecValue = vertex.record.get(fieldName);
            let newRecValue = snapshot.data[fieldName];
            if (!coreValueEquals(oldRecValue, newRecValue)) {
              if (oldRecValue && newRecValue && vertex.record.scheme.getFieldType(fieldName) === "richtext-3" /* RICHTEXT_V3 */) {
                newRecValue = projectPointers(
                  oldRecValue,
                  newRecValue,
                  (ptr) => this.graph.ptrFilterFunc(ptr.key)
                );
              }
              vertex.record.set(fieldName, newRecValue);
              pack = mutationPackAppend(pack, [fieldName, true, oldValue]);
              changed = true;
            }
          }
          for (const fieldName in snapshot.local) {
            const oldValue = vertex[fieldName];
            if (!coreValueEquals(oldValue, snapshot.local[fieldName])) {
              vertex[fieldName] = snapshot[fieldName];
              pack = mutationPackAppend(pack, [fieldName, true, oldValue]);
              changed = true;
            }
          }
          if (changed) {
            this.rebuildVertex();
            this.vertexDidMutate(pack, dynamicFields);
          }
        }
        getSnapshot(onlyFields) {
          const vertex = this.getVertex();
          const data = vertex.cloneData(onlyFields);
          const local = {};
          for (const key of vertex.getLocalFields()) {
            if (onlyFields && !onlyFields.includes(key))
              continue;
            local[key] = coreValueClone(
              vertex[key]
            );
          }
          return {
            data,
            local
          };
        }
        // private fixDuplicateTitleBug(): void {
        //   if (this.namespace === NS_NOTES) {
        //     const title = this.record.get('title');
        //     if (title !== undefined) {
        //       this.record.set('title', fixDuplicateTitleBug(title));
        //     }
        //   }
        // }
        isEqual(other) {
          return this._key === other.key;
        }
        compare(other) {
          return this.vertex.compare(other.vertex);
        }
      };
      SetProxy = class {
        constructor(target, didMutateCallback) {
          this._target = target;
          this._didMutateCallback = didMutateCallback;
        }
        get size() {
          return this._target.size;
        }
        [Symbol.iterator]() {
          return this._target[Symbol.iterator];
        }
        add(v) {
          if (!this._target.has(v)) {
            const oldValue = new Set(this._target);
            this._target.add(v);
            this._didMutateCallback(oldValue);
          }
          return this;
        }
        clear() {
          if (this._target.size > 0) {
            const oldValue = this._target;
            this._target = /* @__PURE__ */ new Set();
            this._didMutateCallback(oldValue);
          }
        }
        delete(v) {
          if (this._target.has(v)) {
            const oldValue = new Set(this._target);
            this._target.delete(v);
            this._didMutateCallback(oldValue);
            return true;
          }
          return false;
        }
        entries() {
          return this._target.entries();
        }
        forEach() {
          return this._target.forEach.apply(this._target, arguments);
        }
        has(v) {
          return this._target.has(v);
        }
        keys() {
          return this._target.keys();
        }
        values() {
          return this._target.values();
        }
      };
      DictionaryProxy = class {
        constructor(target, callback) {
          this._target = target;
          this._didMutateCallback = callback;
        }
        get size() {
          return this._target.size;
        }
        get(key) {
          return this._target.get(key);
        }
        has(key) {
          return this._target.has(key);
        }
        entries() {
          return this._target.entries();
        }
        keys() {
          return this._target.keys();
        }
        values() {
          return this._target.values();
        }
        set(key, value) {
          const target = this._target;
          if (!coreValueEquals(target.get(key), value)) {
            const oldValue = new Map(target);
            target.set(key, value);
            this._didMutateCallback(oldValue);
          }
        }
        delete(key) {
          if (this._target.has(key)) {
            const oldValue = new Map(this._target);
            this._target.delete(key);
            this._didMutateCallback(oldValue);
            return true;
          }
          return false;
        }
        clear() {
          if (this._target.size > 0) {
            const oldValue = new Map(this._target);
            this._target.clear();
            this._didMutateCallback(oldValue);
          }
        }
      };
    }
  });

  // cfds/client/graph/vertex-source.ts
  var import_eventemitter3_4_02, EVENT_LOADING_FINISHED, EVENT_VERTEX_CHANGED, EVENT_VERTEX_DELETED, EVENT_VERTEX_SOURCE_CLOSED, VertexSource;
  var init_vertex_source = __esm({
    "cfds/client/graph/vertex-source.ts"() {
      import_eventemitter3_4_02 = __toESM(__require("https://esm.sh/eventemitter3@4.0.7"));
      EVENT_LOADING_FINISHED = "LOADING_FINISHED";
      EVENT_VERTEX_CHANGED = "VERTEX_CHANGED";
      EVENT_VERTEX_DELETED = "VERTEX_DELETED";
      EVENT_VERTEX_SOURCE_CLOSED = "VERTEX_SOURCE_CLOSED";
      VertexSource = class extends import_eventemitter3_4_02.default {
      };
    }
  });

  // cfds/client/graph/query.ts
  function groupByFunctionResultToGroupId(res) {
    if (res instanceof Vertex || res instanceof VertexManager) {
      return res.key;
    }
    return res;
  }
  var EVENT_QUERY_RESULTS_CHANGED, gQueryId, Query, UnionQuery;
  var init_query = __esm({
    "cfds/client/graph/query.ts"() {
      init_comparable();
      init_graph_manager();
      init_vertex_source();
      init_vertex();
      init_vertex_manager();
      init_error();
      init_common();
      init_timer();
      init_coroutine();
      init_log();
      EVENT_QUERY_RESULTS_CHANGED = "QueryResultsChanged";
      gQueryId = 0;
      Query = class extends VertexSource {
        constructor(sourceOrProducer, predicate, sortDescriptorOrOpts, nameOrOpts) {
          super();
          this.predicate = predicate;
          this.logger = GlobalLogger;
          this._id = ++gQueryId;
          this._vertexChangedListener = (key) => this.vertexChanged(key);
          this._vertexDeletedListener = (key) => this.vertexDeleted(key);
          this._closeListener = () => {
            this.unlock();
            this.close();
          };
          this._resultKeys = /* @__PURE__ */ new Set();
          this._clientsNotifyTimer = new SimpleTimer(
            50,
            false,
            () => this._notifyQueryChanged()
          );
          this._isOpen = true;
          this._isLoading = true;
          this._locked = false;
          let opts;
          if (typeof sortDescriptorOrOpts === "function") {
            this._sortDescriptor = sortDescriptorOrOpts;
          } else if (typeof sortDescriptorOrOpts !== "undefined") {
            opts = sortDescriptorOrOpts;
          }
          if (typeof nameOrOpts === "string") {
            this._name = nameOrOpts;
          } else if (typeof nameOrOpts !== "undefined") {
            opts = nameOrOpts;
          }
          if (opts) {
            if (opts.name) {
              this._name = opts.name;
            }
            if (opts.deps) {
              this._deps = opts.deps;
              if (this._deps) {
                this._depsListener = () => this.onDependencyChanged();
                for (const d of this._deps) {
                  d.on(EVENT_QUERY_RESULTS_CHANGED, this._depsListener);
                  d.once(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
                }
              }
            }
            if (opts.groupBy) {
              this._groupByFunc = opts.groupBy;
              this._groupedResultKeys = /* @__PURE__ */ new Map();
            }
          }
          if (typeof sourceOrProducer === "function") {
            this._sourceProducer = sourceOrProducer;
            this._source = this._sourceProducer();
          } else {
            this._source = sourceOrProducer;
          }
          this.attachToSource();
        }
        /**
         * A single use async query for the times you only need a one-off and don't
         * care for listening to result updates.
         *
         * @param source The source to query.
         * @param predicate A predicate defining what goes into the results.
         * @param sortDescriptor An optional sort descriptor.
         * @param name An optional query name for debugging and profiling purposes.
         *
         * @returns An array of VertexManager instances.
         */
        static async(source, predicate, sortDescriptor, name) {
          let resolve;
          const promise = new Promise((res) => resolve = res);
          const query = new this(source, predicate, sortDescriptor, name);
          query.on(EVENT_QUERY_RESULTS_CHANGED, () => {
            if (!query.isLoading) {
              const results = query.results;
              query.close();
              resolve(results);
            }
          });
          return promise;
        }
        /**
         * A blocking query for the times you must absolutely get a response right
         * now.
         *
         * @param source The source to query.
         * @param predicate A predicate defining what goes into the results.
         * @param sortDescriptor An optional sort descriptor.
         *
         * @returns An array of VertexManager instances.
         */
        static blocking(source, predicate, sortDescriptor) {
          const result = [];
          const graph = source instanceof GraphManager ? source : source.graph;
          for (const key of source.keys()) {
            const vert = graph.getVertex(key);
            if (predicate(vert)) {
              result.push(vert.manager);
            }
          }
          if (sortDescriptor !== void 0) {
            result.sort(
              (mgr1, mgr2) => sortDescriptor(mgr1.getVertexProxy(), mgr2.getVertexProxy())
            );
          }
          return result;
        }
        /**
         * A blocking query for the times you must absolutely get a response right
         * now. This is similar to the `blocking()` call except it only counts the
         * results rather then actually returning them.
         *
         * @param source The source to query.
         * @param predicate A predicate defining what goes into the results.
         * @param limit An optional max limit for the resulting count.
         *
         * @returns The number of results found.
         */
        static blockingCount(source, predicate, limit) {
          let result = 0;
          const graph = source instanceof GraphManager ? source : source.graph;
          for (const key of source.keys()) {
            if (predicate(graph.getVertex(key))) {
              ++result;
              if (limit !== void 0 && result >= limit) {
                break;
              }
            }
          }
          return result;
        }
        get source() {
          return this._source;
        }
        get name() {
          return this._name;
        }
        get isOpen() {
          return this._isOpen;
        }
        get isLoading() {
          return this._isLoading;
        }
        get graph() {
          const src = this.source;
          if (src instanceof GraphManager) {
            return src;
          }
          return src.graph;
        }
        get sortDescriptor() {
          return this._sortDescriptor;
        }
        get results() {
          this._buildResultsIfNeeded();
          return this._cachedSortedResults;
        }
        get groups() {
          this._buildResultsIfNeeded();
          return this._cachedSortedGroups;
        }
        get count() {
          return this._resultKeys.size;
        }
        get scheduler() {
          return CoroutineScheduler.sharedScheduler();
        }
        onResultsChanged(handler) {
          this.on(EVENT_QUERY_RESULTS_CHANGED, handler);
          return () => {
            this.off(EVENT_QUERY_RESULTS_CHANGED, handler);
          };
        }
        hasVertex(key) {
          if (typeof key !== "string") {
            key = key.key;
          }
          return this._resultKeys.has(key);
        }
        keys() {
          return this._resultKeys.values();
        }
        groupCount() {
          return this._groupedResultKeys?.size || 0;
        }
        group(name) {
          this._buildResultsIfNeeded();
          return this._cachedSortedGroups?.get(name) || [];
        }
        forEach(f) {
          const graph = this.graph;
          for (const key of this._resultKeys) {
            f(graph.getVertex(key));
          }
        }
        map(f) {
          const graph = this.graph;
          const result = [];
          for (const key of this._resultKeys) {
            result.push(f(graph.getVertex(key)));
          }
          return result;
        }
        detachFromSource() {
          this.source.off(EVENT_VERTEX_CHANGED, this._vertexChangedListener);
          this.source.off(EVENT_VERTEX_DELETED, this._vertexDeletedListener);
          this.source.off(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
        }
        attachToSource() {
          const source = this._source;
          if (source instanceof Query || source instanceof UnionQuery) {
            assert(source.isOpen);
            source.once(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
          }
          if (source.isLoading) {
            source.once(
              EVENT_LOADING_FINISHED,
              () => this.attachToSourceAfterLoading()
            );
          } else {
            this.attachToSourceAfterLoading();
          }
        }
        close() {
          if (this._isOpen) {
            assert(!this._locked);
            this.detachFromSource();
            if (this._depsListener && this._deps) {
              for (const d of this._deps) {
                d.off(EVENT_QUERY_RESULTS_CHANGED, this._depsListener);
                d.off(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
              }
            }
            this._isOpen = false;
            this.emit(EVENT_VERTEX_SOURCE_CLOSED);
          }
        }
        lock() {
          this._locked = true;
          return this;
        }
        unlock() {
          this._locked = false;
          return this;
        }
        get isLocked() {
          return this._locked;
        }
        /*****************************************/
        /******** Private API Starts Here ********/
        /*****************************************/
        existingGroupIdsForKey(key) {
          const groupedResultKeys = this._groupedResultKeys;
          if (!groupedResultKeys) {
            return [void 0];
          }
          const result = [];
          for (const [groupId, keySet] of groupedResultKeys) {
            if (keySet.has(key)) {
              result.push(groupId);
            }
          }
          return result;
        }
        vertexChanged(key, pack) {
          const wasInSourceKeys = this.hasVertex(key);
          const prevGroupIds = this.existingGroupIdsForKey(key);
          const vertex = this.graph.getVertex(key);
          const newGroupIds = this.groupIdsForVertex(key);
          for (const groupId of prevGroupIds) {
            const prevSet = this._groupedResultKeys.get(groupId);
            if (!prevSet) {
              continue;
            }
            if (prevSet?.size === 1) {
              assert(prevSet.has(key));
              this._groupedResultKeys.delete(groupId);
            } else {
              prevSet?.delete(key);
            }
          }
          if (this.predicate(vertex)) {
            this._resultKeys.add(key);
            for (const groupId of newGroupIds) {
              let set = this._groupedResultKeys.get(groupId);
              if (!set) {
                set = /* @__PURE__ */ new Set();
                this._groupedResultKeys.set(groupId, set);
              }
              set.add(key);
            }
            this.emit(EVENT_VERTEX_CHANGED, key, pack);
          } else if (wasInSourceKeys) {
            this._resultKeys.delete(key);
            this.emit(EVENT_VERTEX_DELETED, key, pack);
          }
          if (!this.isLoading && wasInSourceKeys !== this.hasVertex(key)) {
            this._clientsNotifyTimer.schedule();
          }
        }
        vertexDeleted(key, pack) {
          if (this.hasVertex(key)) {
            this._resultKeys.delete(key);
            this.emit(EVENT_VERTEX_DELETED, key, pack);
            this._clientsNotifyTimer.schedule();
          }
        }
        *loadKeysFromSource() {
          const startTime = performance.now();
          if (!this.isOpen || Coroutine.current()?.shouldRun !== true) {
            this.logger.log({
              severity: "INFO",
              name: "QueryCancelled",
              value: performance.now() - startTime,
              unit: "Milliseconds",
              queryName: this.debugName
            });
            return;
          }
          for (const key of this.source.keys()) {
            if (!this.isOpen) {
              this.logger.log({
                severity: "INFO",
                name: "QueryCancelled",
                value: performance.now() - startTime,
                unit: "Milliseconds",
                queryName: this.debugName
              });
              return;
            }
            this.vertexChanged(key);
            yield;
          }
          this._buildResultsIfNeeded();
          const runningTime = performance.now() - startTime;
          this.logger.log({
            severity: "INFO",
            name: "QueryCompleted",
            value: runningTime,
            unit: "Milliseconds",
            queryName: this.debugName,
            itemCount: this.count
          });
          if (this._isLoading) {
            this._isLoading = false;
            this.emit(EVENT_LOADING_FINISHED);
            this._clientsNotifyTimer.schedule();
          }
        }
        compareManagers(a, b) {
          const sortDesc = this.sortDescriptor;
          const v1 = a.getVertexProxy();
          const v2 = b.getVertexProxy();
          const ret = sortDesc ? sortDesc(v1, v2) : 0;
          return ret === 0 ? coreValueCompare(v1, v2) : ret;
        }
        _buildResultsIfNeeded() {
          if (this._cachedSortedResults === void 0) {
            const results = [];
            const graph = this.graph;
            for (const key of this.keys()) {
              results.push(graph.getVertexManager(key));
            }
            const sortDesc = (a, b) => this.compareManagers(a, b);
            results.sort(sortDesc);
            this._cachedSortedResults = results;
            this._cachedSortedGroups = void 0;
            if (this._groupedResultKeys) {
              const sortedGroups = /* @__PURE__ */ new Map();
              for (const [groupKey, keys] of this._groupedResultKeys) {
                const arr = Array.from(
                  mapIterable(keys, (k) => graph.getVertexManager(k))
                );
                arr.sort(sortDesc);
                sortedGroups.set(groupKey, arr);
              }
              this._cachedSortedGroups = sortedGroups;
            } else {
              this._cachedSortedGroups = /* @__PURE__ */ new Map([
                [void 0, this._cachedSortedResults]
              ]);
            }
          }
        }
        get debugName() {
          let res = String(this._id);
          if (this.name !== void 0) {
            res += "/" + this.name;
          }
          return res;
        }
        attachToSourceAfterLoading() {
          const source = this.source;
          assert(!source.isLoading);
          source.on(EVENT_VERTEX_CHANGED, this._vertexChangedListener);
          source.on(EVENT_VERTEX_DELETED, this._vertexDeletedListener);
          this.scheduleSourceScan();
        }
        scheduleSourceScan() {
          if (this._scanSourcePromise) {
            this._scanSourcePromise.cancelImmediately();
          }
          const promise = this.scheduler.schedule(
            this.loadKeysFromSource(),
            0 /* Normal */,
            `Query.SourceScan/${this.name}`
          );
          promise.finally(() => {
            if (this._scanSourcePromise === promise) {
              this._scanSourcePromise = void 0;
            }
          });
          this._scanSourcePromise = promise;
        }
        _notifyQueryChanged() {
          if (!this.isOpen || this.isLoading) {
            return;
          }
          this._cachedSortedResults = void 0;
          this._cachedSortedGroups = void 0;
          this.emit(EVENT_QUERY_RESULTS_CHANGED);
          this.logger.log({
            severity: "INFO",
            name: "QueryFired",
            queryName: this.name,
            value: 1,
            unit: "Count"
          });
        }
        onDependencyChanged() {
          if (this._scanResultsPromise) {
            this._scanResultsPromise.cancelImmediately();
          }
          if (this._sourceProducer) {
            if (this._scanSourcePromise) {
              this._scanSourcePromise.cancelImmediately();
            }
            this.detachFromSource();
            this._source = this._sourceProducer();
            this.attachToSource();
          } else {
            this.scheduleSourceScan();
          }
          const promise = this.scheduler.schedule(
            this.scanCurrentResults(),
            0 /* Normal */,
            `Query.ResultsScan/${this.name}`
          );
          promise.finally(() => {
            if (this._scanResultsPromise === promise) {
              this._scanResultsPromise = void 0;
            }
          });
          this._scanResultsPromise = promise;
        }
        *scanCurrentResults() {
          for (const k of this._resultKeys) {
            this.vertexChanged(k);
            yield;
          }
        }
        groupIdsForVertex(v) {
          const groupByFunc = this._groupByFunc;
          if (!groupByFunc) {
            return [void 0];
          }
          if (typeof v === "string") {
            v = this.graph.getVertex(v);
          } else if (v instanceof VertexManager) {
            v = v.getVertexProxy();
          }
          let res = groupByFunc(v);
          if (typeof res === "string" || typeof res === "undefined") {
            res = [res];
          } else if (!(res instanceof Array)) {
            res = Array.from(res);
          }
          const resArr = res.map(
            groupByFunctionResultToGroupId
          );
          if (!resArr.length) {
            resArr.push(void 0);
          }
          return resArr;
        }
      };
      UnionQuery = class extends VertexSource {
        constructor(sources, name) {
          super();
          this.sources = sources;
          this.name = name;
          this._changeListeners = /* @__PURE__ */ new Map();
          this._closeListener = () => this.close();
          let loadingCount = 0;
          for (const src of sources) {
            if (src.isLoading) {
              ++loadingCount;
              src.once(EVENT_LOADING_FINISHED, () => {
                if (!this.isOpen) {
                  return;
                }
                assert(!src.isLoading);
                src.on(EVENT_VERTEX_CHANGED, this.changeListenerForQuery(src));
                src.on(EVENT_VERTEX_DELETED, this.changeListenerForQuery(src));
                src.once(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
                assert(loadingCount > 0);
                if (--loadingCount === 0) {
                  this._isLoading = false;
                  this.emit(EVENT_LOADING_FINISHED);
                }
              });
            } else {
              src.on(EVENT_VERTEX_CHANGED, this.changeListenerForQuery(src));
              src.on(EVENT_VERTEX_DELETED, this.changeListenerForQuery(src));
              src.once(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
            }
          }
          this._isLoading = loadingCount > 0;
          this._isOpen = true;
        }
        // eslint-disable-next-line getter-return
        // deno-lint-ignore getter-return
        get graph() {
          for (const q of this.queries()) {
            return q.graph;
          }
          notReached("UnionQuery has no underlying queries");
        }
        get isLoading() {
          return this._isLoading;
        }
        get isOpen() {
          return this._isOpen;
        }
        queries() {
          return this._changeListeners.keys();
        }
        *keys() {
          const processedKeys = /* @__PURE__ */ new Set();
          for (const key of unionIter(
            ...Array.from(this.queries()).map((q) => q.keys())
          )) {
            if (!processedKeys.has(key)) {
              processedKeys.add(key);
              yield key;
            }
          }
        }
        hasVertex(key) {
          for (const q of this.queries()) {
            if (q.hasVertex(key)) {
              return true;
            }
          }
          return false;
        }
        close() {
          if (this._isOpen) {
            this._isOpen = false;
            for (const q of this.queries()) {
              q.off(EVENT_VERTEX_CHANGED, this.changeListenerForQuery(q));
              q.off(EVENT_VERTEX_DELETED, this.changeListenerForQuery(q));
              q.off(EVENT_VERTEX_SOURCE_CLOSED, this._closeListener);
            }
            this.emit(EVENT_VERTEX_SOURCE_CLOSED);
          }
        }
        changeListenerForQuery(src) {
          let result = this._changeListeners.get(src);
          if (result === void 0) {
            result = (key) => {
              this.emit(
                this.hasVertex(key) ? EVENT_VERTEX_CHANGED : EVENT_VERTEX_DELETED,
                key
              );
            };
            this._changeListeners.set(src, result);
          }
          return result;
        }
      };
    }
  });

  // cfds/client/graph/shared-queries.ts
  var SharedQueriesManager;
  var init_shared_queries = __esm({
    "cfds/client/graph/shared-queries.ts"() {
      init_comparable();
      init_error();
      init_scheme_types();
      init_query();
      init_vertex_source();
      SharedQueriesManager = class {
        constructor(graph) {
          this._vertexQueries = /* @__PURE__ */ new Map();
          this.notDeleted = new Query(
            graph,
            (vert) => vert.isDeleted === 0,
            coreValueCompare,
            "SharedNotDeleted"
          ).lock();
          this.noNotes = new Query(
            this.notDeleted,
            (vert) => vert.namespace !== NS_NOTES,
            coreValueCompare,
            "SharedNoNotes"
          ).lock();
          this.workspaces = new Query(
            this.noNotes,
            (vert) => vert.namespace === NS_WORKSPACE,
            coreValueCompare,
            "SharedWorkspaces"
          ).lock();
          this.tags = new Query(
            this.noNotes,
            (vert) => vert.namespace === NS_TAGS,
            coreValueCompare,
            "SharedTags"
          ).lock();
          this.users = new Query(
            this.noNotes,
            (vert) => vert.namespace === NS_USERS,
            coreValueCompare,
            "SharedUsers"
          ).lock();
          this.selectedWorkspaces = new Query(
            this.workspaces,
            (vert) => vert.selected,
            coreValueCompare,
            "SharedSelectedWorkspaces"
          ).lock();
          this.selectedTags = new Query(
            this.tags,
            (vert) => vert.selected,
            coreValueCompare,
            "SharedSelectedTags"
          ).lock();
          this.selectedUsers = new Query(
            this.users,
            (vert) => vert.selected,
            coreValueCompare,
            "SharedSelectedUsers"
          ).lock();
          this.parentTags = new Query(
            this.tags,
            (tag) => !tag.parentTag,
            coreValueCompare,
            "SharedParentTags"
          ).lock();
          this.childTags = new Query(
            this.tags,
            (tag) => typeof tag.parentTag !== "undefined",
            coreValueCompare,
            "SharedParentTags"
          ).lock();
          this.hasPendingChanges = new Query(graph, (v) => v.hasPendingChanges);
        }
        getVertexQuery(key, name, source, predicate, sortDesc) {
          let queries = this._vertexQueries.get(key);
          if (!queries) {
            queries = /* @__PURE__ */ new Map();
            this._vertexQueries.set(key, queries);
          }
          let result = queries.get(name);
          if (!result) {
            result = new Query(
              source,
              predicate,
              sortDesc,
              name
            ).lock();
            queries.set(name, result);
            result.once(
              EVENT_VERTEX_SOURCE_CLOSED,
              () => notReached("Named queries should not be closed")
            );
          }
          return result;
        }
      };
    }
  });

  // cfds/client/graph/adj-list.ts
  function hashEdge(edge) {
    return edge.vertex + "/" + edge.fieldName;
  }
  function eqEdges(e1, e2) {
    return e1.vertex === e2.vertex && e1.fieldName === e2.fieldName;
  }
  function* filterEdges(vertKey, fieldName, dict) {
    const edges = dict.get(vertKey);
    if (edges === void 0) {
      return;
    }
    for (const edge of edges) {
      if (fieldName === void 0 || edge.fieldName === fieldName) {
        yield edge;
      }
    }
  }
  var SimpleAdjacencyList;
  var init_adj_list = __esm({
    "cfds/client/graph/adj-list.ts"() {
      init_error();
      init_set();
      init_hash_map();
      SimpleAdjacencyList = class {
        constructor() {
          this._inEdges = /* @__PURE__ */ new Map();
          this._outEdges = /* @__PURE__ */ new Map();
        }
        get isEmpty() {
          return this._inEdges.size === 0 && this._outEdges.size === 0;
        }
        addEdge(src, dst, fieldName) {
          let outSet = this._outEdges.get(src);
          if (outSet === void 0) {
            outSet = new HashSet(hashEdge, eqEdges);
            this._outEdges.set(src, outSet);
          }
          const success = outSet.add({
            vertex: dst,
            fieldName
          });
          let inSet = this._inEdges.get(dst);
          if (inSet === void 0) {
            inSet = new HashSet(hashEdge, eqEdges);
            this._inEdges.set(dst, inSet);
          }
          assert(
            success === inSet.add({
              vertex: src,
              fieldName
            }),
            `addEdge failed. src: ${src}, dest: ${dst}, fieldName: ${fieldName}`
          );
          return success;
        }
        deleteEdge(src, dst, fieldName) {
          const outSet = this._outEdges.get(src);
          const inSet = this._inEdges.get(dst);
          const success = Boolean(outSet?.delete({ vertex: dst, fieldName }));
          assert(
            success === Boolean(
              inSet?.delete({
                vertex: src,
                fieldName
              })
            ),
            `deleteEdge failed. src: ${src}, dest: ${dst}, fieldName: ${fieldName}`
          );
          return success;
        }
        inEdges(vertKey, fieldName) {
          return filterEdges(vertKey, fieldName, this._inEdges);
        }
        outEdges(vertKey, fieldName) {
          return filterEdges(vertKey, fieldName, this._outEdges);
        }
        *uniqueEdges(vertKey, fieldName) {
          const seenKeys = /* @__PURE__ */ new Set();
          for (const { vertex: key } of this.outEdges(vertKey, fieldName)) {
            seenKeys.add(key);
            yield key;
          }
          for (const { vertex: key } of this.inEdges(vertKey, fieldName)) {
            if (seenKeys.has(key)) {
              continue;
            }
            seenKeys.add(key);
            yield key;
          }
        }
        *uniqueVertexKeys() {
          for (const key of unionIter2(this._inEdges.keys(), this._outEdges.keys())) {
            if (this.hasVertex(key)) {
              yield key;
            }
          }
        }
        hasVertex(key) {
          return this._inEdges.has(key) || this._outEdges.has(key);
        }
        hasEdge(src, dst, fieldName) {
          if (fieldName) {
            return this._outEdges.get(src)?.has({ vertex: dst, fieldName }) === true;
          }
          for (const edge of this.outEdges(src)) {
            if (edge.vertex === dst) {
              return true;
            }
          }
          return false;
        }
      };
    }
  });

  // cfds/base/errors.ts
  function typeFromCode(code) {
    switch (code) {
      case 403 /* AccessDenied */:
      case 404 /* NotFound */:
        return 2 /* NoAccess */;
      case 409 /* Conflict */:
      case 408 /* Timeout */:
      case 503 /* ServiceUnavailable */:
      case 500 /* InternalServerError */:
        return 1 /* Transient */;
      default:
        return 0 /* General */;
    }
  }
  function messageForCode(code) {
    return Code[code].replace(/([A-Z])/g, " $1").trim();
  }
  function serviceUnavailable() {
    return new ServerError(503 /* ServiceUnavailable */);
  }
  function toJS(error) {
    const result = {
      msg: error.message,
      code: error instanceof ServerError ? error.code : 500 /* InternalServerError */
    };
    if (!(error instanceof ServerError)) {
      log({
        severity: "ERROR",
        error: "UncaughtServerError",
        message: error.message,
        trace: error.stack
      });
    } else if (error.info) {
      result.info = error.info;
    }
    return result;
  }
  function fromJS(obj) {
    return new ServerError(obj.msg, obj.info, obj.code);
  }
  var Code, ServerError;
  var init_errors = __esm({
    "cfds/base/errors.ts"() {
      init_log();
      Code = /* @__PURE__ */ ((Code2) => {
        Code2[Code2["BadRequest"] = 400] = "BadRequest";
        Code2[Code2["AccessDenied"] = 403] = "AccessDenied";
        Code2[Code2["NotFound"] = 404] = "NotFound";
        Code2[Code2["Timeout"] = 408] = "Timeout";
        Code2[Code2["Conflict"] = 409] = "Conflict";
        Code2[Code2["InternalServerError"] = 500] = "InternalServerError";
        Code2[Code2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
        return Code2;
      })(Code || {});
      ServerError = class extends Error {
        constructor(msg, info, code, internalInfo) {
          if (typeof msg !== "string") {
            code = msg;
            msg = messageForCode(code);
          }
          super(msg);
          this.code = code || 500 /* InternalServerError */;
          this.info = info;
          this.internalInfo = internalInfo;
        }
        toJS() {
          return toJS(this);
        }
        get type() {
          if (this._type === void 0) {
            this._type = typeFromCode(this.code);
          }
          return this._type;
        }
        static fromJS(obj) {
          return fromJS(obj);
        }
      };
    }
  });

  // cfds/base/edit.ts
  var Edit;
  var init_edit = __esm({
    "cfds/base/edit.ts"() {
      init_object();
      init_scheme();
      init_json();
      init_encoding();
      Edit = class {
        constructor(config) {
          if (isDecoderConfig(config)) {
            const decoder = config.decoder;
            this.changes = decodedDataChanges(decoder.get("c"));
            this.srcChecksum = decoder.get("sc");
            this.dstChecksum = decoder.get("dc");
            this.scheme = decoder.has("s") ? new Scheme({ decoder: decoder.get("s") }) : void 0;
          } else {
            this.changes = config.changes;
            this.srcChecksum = config.srcChecksum;
            this.dstChecksum = config.dstChecksum;
            this.scheme = config.scheme;
          }
        }
        get affectedKeys() {
          return Object.keys(this.changes);
        }
        toJS() {
          const encoder = new JSONEncoder();
          this.serialize(encoder);
          return encoder.getOutput();
        }
        serialize(encoder) {
          encoder.set("sc", this.srcChecksum);
          encoder.set("dc", this.dstChecksum);
          encoder.set("c", this.changes);
          encoder.set("s", this.scheme);
        }
        isEqual(other) {
          return this.srcChecksum === other.srcChecksum && this.dstChecksum === other.dstChecksum;
        }
        static fromJS(obj) {
          const decoder = new JSONDecoder(obj);
          return new this({ decoder });
        }
        static editsContainField(edits, fieldName) {
          for (const e of edits) {
            if (e.changes.hasOwnProperty(fieldName)) {
              return true;
            }
          }
          return false;
        }
      };
    }
  });

  // defs.ts
  function versionNumberCreate(major, minor, patch4) {
    return major * 1e4 + minor * 100 + patch4;
  }
  var VersionNumber;
  var init_defs2 = __esm({
    "defs.ts"() {
      VersionNumber = ((VersionNumber2) => {
        VersionNumber2[VersionNumber2["Unknown"] = 0] = "Unknown";
        VersionNumber2[VersionNumber2["V3_0_0"] = versionNumberCreate(3, 0, 0)] = "V3_0_0";
        VersionNumber2[VersionNumber2["Current"] = VersionNumber2.V3_0_0] = "Current";
        return VersionNumber2;
      })(VersionNumber || {});
    }
  });

  // repo/commit.ts
  function commitContentsIsRecord(c) {
    return c.record instanceof Record;
  }
  function commitContentsSerialize(c, encoder) {
    if (commitContentsIsRecord(c)) {
      encoder.set("r", c.record);
    } else {
      encoder.set("b", c.base);
      encoder.set("e", c.edit.toJS());
    }
  }
  function commitContentsDeserialize(decoder) {
    if (decoder.has("r")) {
      return {
        record: new Record({ decoder: decoder.getDecoder("r") })
      };
    } else {
      return {
        base: decoder.get("b"),
        edit: new Edit({ decoder: decoder.getDecoder("e") })
      };
    }
  }
  function compareCommitsByValue(c1, c2) {
    return c1.id === c2.id && c1.buildVersion === c2.buildVersion && c1.key === c2.key && c1.session === c2.session && coreValueEquals(c1.timestamp, c2.timestamp) && coreValueEquals(c1.parents, c2.parents) && coreValueEquals(c1.contents, c2.contents);
  }
  var Commit;
  var init_commit = __esm({
    "repo/commit.ts"() {
      init_record();
      init_edit();
      init_utils2();
      init_common();
      init_equals();
      init_error();
      init_defs2();
      Commit = class {
        constructor(config) {
          this._buildVersion = VersionNumber.Current;
          if (isDecoderConfig(config)) {
            this.deserialize(config.decoder);
          } else {
            let { parents, contents } = config;
            if (typeof parents === "string") {
              parents = [parents];
            } else if (!parents) {
              parents = [];
            } else {
              parents = Array.from(parents);
            }
            if (contents instanceof Record) {
              contents = {
                record: contents
              };
            }
            this._id = config.id || uniqueId();
            this._session = config.session;
            this._key = config.key || void 0;
            this._parents = parents;
            this._timestamp = config.timestamp || /* @__PURE__ */ new Date();
            this._contents = contents;
            this._buildVersion = config.buildVersion || VersionNumber.Current;
          }
        }
        get id() {
          return this._id;
        }
        get key() {
          return this._key || null;
        }
        get session() {
          return this._session;
        }
        get parents() {
          return this._parents || [];
        }
        get timestamp() {
          return this._timestamp;
        }
        get contents() {
          return this._contents;
        }
        get contentsChecksum() {
          const contents = this.contents;
          return commitContentsIsRecord(contents) ? contents.record.checksum : contents.edit.dstChecksum;
        }
        get buildVersion() {
          return this._buildVersion;
        }
        serialize(encoder) {
          encoder.set("ver", this.buildVersion);
          encoder.set("id", this.id);
          if (this.key) {
            encoder.set("k", this.key);
          }
          encoder.set("s", this.session);
          encoder.set("ts", this.timestamp);
          const parents = this.parents;
          if (parents.length > 0) {
            encoder.set("p", parents);
          }
          const contentsEncoder = encoder.newEncoder();
          commitContentsSerialize(this.contents, contentsEncoder);
          encoder.set("c", contentsEncoder.getOutput());
        }
        deserialize(decoder) {
          this._buildVersion = decoder.get("ver");
          this._id = decoder.get("id", uniqueId());
          this._key = decoder.get("k", null);
          this._session = decoder.get("s", "unknown-" + uniqueId());
          this._timestamp = decoder.get("ts", /* @__PURE__ */ new Date());
          this._parents = decoder.get("p");
          this._contents = commitContentsDeserialize(decoder.getDecoder("c"));
        }
        isEqual(other) {
          if (this.id !== other.id) {
            return false;
          }
          assert(compareCommitsByValue(this, other));
          return true;
        }
      };
    }
  });

  // base/collections/orderedmap.ts
  var MutationError, OrderedMapState, OrderedMap, Link, OrderedMapIter;
  var init_orderedmap = __esm({
    "base/collections/orderedmap.ts"() {
      init_error();
      MutationError = class extends Error {
        constructor() {
          super("OrderedMap mutated during iteration");
        }
      };
      OrderedMapState = class {
        constructor(dictInst) {
          this._map = dictInst || /* @__PURE__ */ new Map();
          this._head = new Link();
          this._tail = new Link();
          this._head.next = this._tail;
          this._tail.prev = this._head;
          this._mutationsCount = 0;
        }
      };
      OrderedMap = class {
        constructor(dictInst) {
          if (dictInst !== void 0) {
            dictInst.clear();
          }
          this._state = new OrderedMapState(dictInst);
        }
        get size() {
          return this._state._map.size;
        }
        get startKey() {
          return this._state._head.next?.key;
        }
        get endKey() {
          return this._state._tail.prev?.key;
        }
        /**
         * Add a key with no value (undefined value), if the key doesn't already
         * exist. If it does exist, this method does nothing. New keys are added
         * at the end.
         */
        add(key) {
          this._addImpl(key);
        }
        /**
         * Set the value for a given key, adding it if needed.
         * New keys are added at the end.
         */
        set(key, value) {
          this._addImpl(key).value = value;
        }
        _addImpl(key) {
          let link = this._state._map.get(key);
          if (link !== void 0) {
            return link;
          }
          link = new Link();
          link.key = key;
          this._state._tail.insertBefore(link);
          this._state._map.set(key, link);
          ++this._state._mutationsCount;
          assert(this._state._head.length === this._state._map.size + 2);
          return link;
        }
        /**
         * Move a key to the end of the list. Does nothing if the key doesn't exist.
         */
        moveToEnd(key) {
          const link = this._state._map.get(key);
          if (!link) {
            return;
          }
          this._state._tail.insertBefore(link);
          ++this._state._mutationsCount;
          assert(this._state._head.length === this._state._map.size + 2);
        }
        /**
         * Move a key to the start of the list. Does nothing if the key doesn't exist.
         */
        moveToStart(key) {
          const link = this._state._map.get(key);
          if (!link) {
            return;
          }
          this._state._head.insertAfter(link);
          ++this._state._mutationsCount;
          assert(this._state._head.length === this._state._map.size + 2);
        }
        next(key) {
          const link = this._state._map.get(key);
          if (link === void 0) {
            return void 0;
          }
          if (link.next !== this._state._tail) {
            return link.next.key;
          }
          return void 0;
        }
        prev(key) {
          const link = this._state._map.get(key);
          if (link === void 0) {
            return void 0;
          }
          if (link.prev !== this._state._head) {
            return link.prev.key;
          }
          return void 0;
        }
        /**
         * Returns whether the given key exists in the collection. Note that a key
         * may exist with an undefined value. Use this method rather than get() to
         * distinguish the two cases.
         */
        has(key) {
          return this._state._map.has(key);
        }
        /**
         * Removes the given key and its associated value from the collection.
         * Does nothing if the key doesn't exist.
         */
        delete(key) {
          const link = this._state._map.get(key);
          if (!link) {
            return false;
          }
          link.detach();
          this._state._map.delete(key);
          ++this._state._mutationsCount;
          assert(this._state._head.length === this._state._map.size + 2);
          return true;
        }
        /**
         * Returns the value for the given key or undefined if the key doesn't exist.
         */
        get(key) {
          const link = this._state._map.get(key);
          return link?.value;
        }
        clear() {
          this._state._map.clear();
          this._state._head.next = this._state._tail;
          this._state._tail.prev = this._state._head;
        }
        /**
         * Returns an iterator over the keys in the collection. Keys are returned
         * by their internal order.
         * Any attempt to mutate the collection during iteration will cause the
         * iterator to throw a MutationError.
         */
        keysIter() {
          return this.keys();
        }
        keys() {
          return new OrderedMapIter(this._state, true, false);
        }
        values() {
          return new OrderedMapIter(this._state, false, true);
        }
        /**
         * Returns an iterator over the keys and values in the collection.
         * Entries are returned by their internal order.
         * Any attempt to mutate the collection during iteration will cause the
         * iterator to throw a MutationError.
         */
        entries() {
          return new OrderedMapIter(this._state, true, true);
        }
        [Symbol.iterator]() {
          return new OrderedMapIter(this._state, true, true);
        }
      };
      Link = class {
        detach() {
          this._validateLinks();
          if (this.next) {
            this.next.prev = this.prev;
          }
          if (this.prev) {
            this.prev.next = this.next;
          }
          this.next = void 0;
          this.prev = void 0;
        }
        _validateLinks() {
          if (this.next) {
            assert(this.next.prev === this);
          }
          if (this.prev) {
            assert(this.prev.next === this);
          }
        }
        insertAfter(next) {
          assert(next !== this);
          next.detach();
          next.prev = this;
          next.next = this.next;
          if (this.next !== void 0) {
            this.next.prev = next;
          }
          this.next = next;
          this._validateLinks();
          next._validateLinks();
          next.prev._validateLinks();
        }
        insertBefore(prev) {
          assert(prev !== this);
          prev.detach();
          prev.next = this;
          prev.prev = this.prev;
          if (this.prev !== void 0) {
            this.prev.next = prev;
          }
          this.prev = prev;
          this._validateLinks();
          prev._validateLinks();
          prev.next._validateLinks();
        }
        get length() {
          let count = 1;
          for (let node = this; node.next; node = node.next) {
            ++count;
          }
          return count;
        }
      };
      OrderedMapIter = class {
        constructor(state, includeKeys, includeValues) {
          this._state = state;
          this._mutationsCount = state._mutationsCount;
          this._nextLink = state._head;
          this._includeKeys = includeKeys;
          this._includeValues = includeValues;
        }
        next() {
          if (this._state._mutationsCount !== this._mutationsCount) {
            throw new MutationError();
          }
          const probablyLink = this._nextLink.next;
          assert(probablyLink !== void 0);
          const link = probablyLink;
          this._nextLink = link;
          if (link === this._state._tail) {
            return { done: true };
          }
          let v;
          const linkValue = this._state._map.get(link.key)?.value;
          if (this._includeKeys) {
            v = this._includeValues ? [link.key, linkValue] : link.key;
          } else {
            v = linkValue;
          }
          return {
            done: false,
            value: v
          };
        }
        [Symbol.iterator]() {
          return this;
        }
      };
    }
  });

  // base/collections/lru-cache.ts
  var LRUCache;
  var init_lru_cache = __esm({
    "base/collections/lru-cache.ts"() {
      init_orderedmap();
      LRUCache = class {
        constructor(limit, evictionHandler) {
          this._map = new OrderedMap();
          this._evictionHandler = evictionHandler;
          this._limit = Math.max(0, limit || 0);
        }
        get size() {
          return this._map.size;
        }
        get limit() {
          return this._limit;
        }
        set limit(limit) {
          this._limit = Math.max(0, limit);
          this.evictValuesIfNeeded();
        }
        get(key) {
          this._map.moveToEnd(key);
          return this._map.get(key);
        }
        has(key) {
          this._map.moveToEnd(key);
          return this._map.has(key);
        }
        entries() {
          return this._map.entries();
        }
        keys() {
          return this._map.keys();
        }
        values() {
          return this._map.values();
        }
        [Symbol.iterator]() {
          return this._map[Symbol.iterator]();
        }
        set(key, value) {
          const map2 = this._map;
          const valueExists = map2.has(key);
          map2.set(key, value);
          if (valueExists) {
            map2.moveToEnd(key);
          } else {
            this.evictValuesIfNeeded();
          }
        }
        delete(key) {
          return this._map.delete(key);
        }
        clear() {
          this._map.clear();
        }
        evictValuesIfNeeded() {
          const map2 = this._map;
          const limit = this._limit;
          const evictionHandler = this._evictionHandler;
          while (limit > 0 && map2.size > limit) {
            const key = map2.startKey;
            if (evictionHandler) {
              evictionHandler(key, map2.get(key));
            }
            map2.delete(map2.startKey);
          }
        }
      };
    }
  });

  // repo/repo.ts
  function commitsWithUniqueRecords(commits) {
    const hashes = /* @__PURE__ */ new Set();
    const result = [];
    for (const c of commits) {
      const h = commitContentsIsRecord(c.contents) ? c.contents.record.checksum : c.contents.edit.dstChecksum;
      if (!hashes.has(h)) {
        result.push(c);
        hashes.add(h);
      }
    }
    return result;
  }
  function compareCommitsDesc(c1, c2) {
    if (coreValueEquals(c1.timestamp, c2.timestamp)) {
      return coreValueCompare(c1.id, c2.id);
    }
    return coreValueCompare(c2.timestamp, c1.timestamp);
  }
  var import_eventemitter3_4_03, EVENT_NEW_COMMIT, Repository, MemRepoStorage;
  var init_repo = __esm({
    "repo/repo.ts"() {
      import_eventemitter3_4_03 = __toESM(__require("https://esm.sh/eventemitter3@4.0.7"));
      init_core_types();
      init_set();
      init_errors();
      init_commit();
      init_object();
      init_record();
      init_error();
      init_json();
      init_edit();
      init_log();
      init_scheme_types();
      init_lru_cache();
      EVENT_NEW_COMMIT = "NewCommit";
      Repository = class extends import_eventemitter3_4_03.default {
        constructor(storage) {
          super();
          this.storage = storage;
        }
        get numberOfCommits() {
          return this.storage.numberOfCommits();
        }
        getCommit(id) {
          const c = this.storage.getCommit(id);
          if (!c) {
            throw serviceUnavailable();
          }
          return c;
        }
        commits() {
          return this.storage.allCommits();
        }
        commitsForKey(key) {
          return this.storage.commitsForKey(key);
        }
        leavesForKey(key, pendingCommit) {
          const childrenPerCommit = /* @__PURE__ */ new Map();
          for (const c of this.commitsForKey(key)) {
            this._setChildrenPerCommit(c, childrenPerCommit);
          }
          if (pendingCommit) {
            assert(pendingCommit.key === key);
            this._setChildrenPerCommit(pendingCommit, childrenPerCommit);
          }
          const result = [];
          for (const c of this.commitsForKey(key)) {
            if (!childrenPerCommit.has(c.id)) {
              result.push(c);
            }
          }
          return result;
        }
        _setChildrenPerCommit(c, childrenPerCommit) {
          for (const p of c.parents) {
            let children = childrenPerCommit.get(p);
            if (!children) {
              children = /* @__PURE__ */ new Set();
              childrenPerCommit.set(p, children);
            }
            children.add(c);
          }
        }
        keys() {
          return this.storage.allKeys();
        }
        /**
         * Given an iterable of commits, this method returns their Lowest Common
         * Ancestor or undefined if no such ancestor exists (meaning the commits
         * belong to disconnected histories).
         *
         * @param commits An iterable of commits.
         * @returns The LCA commit or undefined if no common ancestor exists.
         * @throws ServiceUnavailable if the commit graph is incomplete.
         */
        findMergeBase(commits) {
          let result;
          for (const c of commits) {
            if (!result) {
              result = c;
              continue;
            }
            result = this._findMergeBase(result, c);
            if (!result) {
              break;
            }
          }
          return result;
        }
        /**
         * Given two commits, this method finds the base from which to perform a 3 way
         * merge for c1 and c2. The algorithm is based on a simple Lowest Common
         * Ancestor between the two, but rather than pick the actual LCA from the
         * graph, we choose the first time ancestors agree on a common value.
         *
         * @param c1 First commit.
         * @param c2 Second commit.
         * @param c1Ancestors Internal c1 path for recursion.
         * @param c2Ancestors Internal c2 path for recursion.
         *
         * @returns The base for a 3-way merge between c1 and c2, or undefined if no
         *          such base can be found.
         *
         * @throws ServiceUnavailable if the commit graph is incomplete and cannot be
         *         traversed.
         */
        _findMergeBase(c1, c2, c1Ancestors, c2Ancestors) {
          if (!c1.parents.length || !c2.parents.length || c1.key !== c2.key) {
            return void 0;
          }
          if (c1.contentsChecksum === c2.contentsChecksum) {
            return c1;
          }
          if (!c1Ancestors) {
            c1Ancestors = /* @__PURE__ */ new Set();
          }
          if (!c2Ancestors) {
            c2Ancestors = /* @__PURE__ */ new Set();
          }
          for (const parentId of c1.parents) {
            const parent = this.getCommit(parentId);
            const checksum = parent.contentsChecksum;
            if (c2Ancestors.has(checksum)) {
              return parent;
            }
            c1Ancestors.add(checksum);
          }
          for (const parentId of c2.parents) {
            const parent = this.getCommit(parentId);
            const checksum = parent.contentsChecksum;
            if (c1Ancestors.has(checksum)) {
              return parent;
            }
            c2Ancestors.add(checksum);
          }
          for (const p of c1.parents) {
            const r = this._findMergeBase(
              this.getCommit(p),
              c2,
              c1Ancestors,
              c2Ancestors
            );
            if (r) {
              return r;
            }
          }
          for (const p of c2.parents) {
            const r = this._findMergeBase(
              c1,
              this.getCommit(p),
              c1Ancestors,
              c2Ancestors
            );
            if (r) {
              return r;
            }
          }
          return void 0;
        }
        recordForCommit(c) {
          if (typeof c === "string") {
            c = this.getCommit(c);
          }
          if (c.contents.record) {
            return c.contents.record;
          }
          if (c.contents.base) {
            const contents = c.contents;
            const result = this.recordForCommit(contents.base).clone();
            assert(result.checksum === contents.edit.srcChecksum);
            result.patch(contents.edit.changes);
            assert(result.checksum === contents.edit.dstChecksum);
            return result;
          }
          notReached();
        }
        headForKey(key, session, pendingCommit) {
          assert(!pendingCommit || pendingCommit.key === key);
          const leaves = this.leavesForKey(key, pendingCommit);
          if (leaves.length < 1) {
            return void 0;
          }
          const commitsToMerge = commitsWithUniqueRecords(leaves);
          if (commitsToMerge.length === 1) {
            return commitsToMerge[0];
          }
          try {
            const lca = this.findMergeBase(commitsToMerge);
            const base = lca ? this.recordForCommit(lca) : Record.nullRecord();
            let changes = {};
            for (const c of commitsToMerge) {
              changes = concatChanges(
                changes,
                base.diff(this.recordForCommit(c), c.session === session)
              );
            }
            const mergeRecord = base.clone();
            mergeRecord.patch(changes);
            const mergeCommit = new Commit({
              session,
              key,
              contents: mergeRecord,
              parents: leaves.map((c) => c.id)
            });
            this.persistCommits([mergeCommit]);
            return mergeCommit;
          } catch (e) {
            if (e instanceof ServerError && e.code === 503 /* ServiceUnavailable */) {
              leaves.sort(compareCommitsDesc);
              for (const c of leaves) {
                if (c.session === session) {
                  return c;
                }
              }
              return leaves[0];
            }
            throw e;
          }
        }
        valueForKey(key, session, pendingCommit) {
          const head = this.headForKey(key, session, pendingCommit);
          return head ? this.recordForCommit(head) : Record.nullRecord();
        }
        setValueForKey(key, session, value) {
          const head = this.headForKey(key, session);
          if (head && this.recordForCommit(head).isEqual(value)) {
            return false;
          }
          if (!head && value.isNull) {
            return false;
          }
          const lastRecordCommit = this.lastRecordCommitForKey(key);
          const fullCommit = new Commit({
            session,
            key,
            contents: value,
            parents: head?.id
          });
          let deltaCommit;
          if (lastRecordCommit) {
            const baseRecord = this.recordForCommit(lastRecordCommit);
            const edit = new Edit({
              changes: baseRecord.diff(value, false),
              srcChecksum: baseRecord.checksum,
              dstChecksum: value.checksum
            });
            const commitEncoder = new JSONCyclicalEncoder();
            commitEncoder.set("c", [fullCommit]);
            const deltaLength = JSON.stringify(edit.toJS()).length;
            const fullLength = JSON.stringify(commitEncoder.getOutput()).length;
            if (deltaLength <= fullLength * 0.85) {
              deltaCommit = new Commit({
                id: fullCommit.id,
                session,
                key,
                contents: { base: lastRecordCommit.id, edit },
                parents: fullCommit.parents
              });
              log({
                severity: "INFO",
                name: "DeltaFormatSavings",
                value: Math.round(100 * (fullLength - deltaLength) / fullLength),
                unit: "Percent"
              });
            }
          }
          this.persistCommits([deltaCommit || fullCommit]);
          return true;
        }
        lastRecordCommitForKey(key) {
          let result;
          for (const c of this.commitsForKey(key)) {
            if (!commitContentsIsRecord(c.contents)) {
              continue;
            }
            if (!result || c.timestamp.getTime() > result.timestamp.getTime()) {
              result = c;
            }
          }
          return result;
        }
        hasKey(key) {
          return this.headForKey(key, "") !== void 0;
        }
        persistCommits(commits) {
          const result = Array.from(this.storage.persistCommits(commits, this));
          for (const c of result) {
            this.emit(EVENT_NEW_COMMIT, c);
          }
          return result;
        }
        repositoryIdForCommit(c) {
          const record = this.recordForCommit(c);
          const repoFieldName = record.scheme.repositoryFieldName;
          if (repoFieldName === kRecordIdField) {
            const commit = typeof c === "string" ? this.getCommit(c) : c;
            assert(commit !== void 0 && commit.key !== void 0);
            return commit.key;
          }
          const result = record.get(repoFieldName);
          assert(result?.length > 0);
          return result;
        }
      };
      MemRepoStorage = class {
        constructor(commits, maxCommits = 0) {
          this._commitsByRecordKey = /* @__PURE__ */ new Map();
          this._commitsById = new LRUCache(maxCommits, (_id2, commit) => {
            this._commitsByRecordKey.get(commit.key)?.delete(commit.id);
          });
          if (commits) {
            for (const c of commits) {
              let keyMap = this._commitsByRecordKey.get(c.key);
              if (!keyMap) {
                keyMap = /* @__PURE__ */ new Set();
                this._commitsByRecordKey.set(c.key, keyMap);
              }
              keyMap.add(c.id);
              this._commitsById.set(c.id, c);
            }
          }
        }
        get maxCommits() {
          return this._commitsById.limit;
        }
        set maxCommits(limit) {
          this._commitsById.limit = limit;
        }
        numberOfCommits() {
          return this._commitsById.size;
        }
        getCommit(id) {
          return this._commitsById.get(id);
        }
        allCommits() {
          return this._commitsById.values();
        }
        commitsForKey(key) {
          const keyMap = this._commitsByRecordKey.get(key);
          if (!keyMap) {
            return [];
          }
          return mapToArray(keyMap, (id) => this.getCommit(id));
        }
        *allKeys() {
          for (const k of this._commitsByRecordKey.keys()) {
            if (typeof k === "string") {
              yield k;
            }
          }
        }
        *persistCommits(commits) {
          for (const c of commits) {
            const localCommit = this._commitsById.get(c.id);
            if (localCommit !== void 0) {
              assert(coreValueEquals(c, localCommit));
              continue;
            }
            this._commitsById.set(c.id, c);
            let set = this._commitsByRecordKey.get(c.key);
            if (!set) {
              set = /* @__PURE__ */ new Set();
              this._commitsByRecordKey.set(c.key, set);
            }
            set.add(c.id);
            yield c;
          }
        }
        close() {
        }
      };
    }
  });

  // repo/idbbackup.ts
  function repoIdFromKey(key) {
    const sepIdx = key.indexOf("/");
    assert(sepIdx > 0);
    return key.substring(0, sepIdx);
  }
  var import_idb_7_1, K_DB_VERSION, IDBRepositoryBackup;
  var init_idbbackup = __esm({
    "repo/idbbackup.ts"() {
      import_idb_7_1 = __require("https://esm.sh/idb@7.1.1");
      init_json();
      init_date();
      init_log();
      init_commit();
      init_string();
      init_error();
      K_DB_VERSION = 1;
      IDBRepositoryBackup = class {
        constructor(dbName) {
          this.dbName = dbName;
          this.getDB();
        }
        getDB() {
          if (this._dbPromise === void 0) {
            this._dbPromise = (0, import_idb_7_1.openDB)(this.dbName, K_DB_VERSION, {
              upgrade(db) {
                db.createObjectStore("commits");
              }
            });
          }
          return this._dbPromise;
        }
        async close() {
          if (void 0 === this._dbPromise) {
            return false;
          }
          const db = await this._dbPromise;
          db.close();
          this._dbPromise = void 0;
          return true;
        }
        async delete() {
          await this.close();
          await (0, import_idb_7_1.deleteDB)(this.dbName);
        }
        async persistCommits(repoId, commits) {
          const db = await this.getDB();
          const txn = db.transaction("commits", "readwrite", {
            durability: "relaxed"
          });
          const store = txn.objectStore("commits");
          const promises = [];
          for (const c of commits) {
            promises.push(
              (async () => {
                try {
                  await store.put(
                    {
                      json: JSONCyclicalEncoder.serialize(c),
                      ts: serializeDate(c.timestamp)
                    },
                    `${repoId}/${c.id}`
                  );
                } catch (e) {
                  log({
                    severity: "ERROR",
                    error: "BackupWriteFailed",
                    message: e.message,
                    trace: e.stack,
                    repo: repoId,
                    commit: c.id
                  });
                  throw e;
                }
              })()
            );
          }
          for (const p of promises) {
            await p;
          }
          await txn.done;
        }
        async loadCommits(repoId) {
          const db = await this.getDB();
          const txn = db.transaction("commits", "readonly");
          const result = {};
          let cursor;
          if (repoId) {
            const prefix = repoId + "/";
            cursor = await txn.store.openCursor(
              IDBKeyRange.bound(prefix, increment(prefix), false, true)
            );
          } else {
            cursor = await txn.store.openCursor();
          }
          while (cursor) {
            const repoId2 = repoIdFromKey(cursor.key);
            let arr = result[repoId2];
            if (!arr) {
              arr = [];
              result[repoId2] = arr;
            }
            arr.push(
              new Commit({
                decoder: new JSONCyclicalDecoder(cursor.value.json)
              })
            );
            await cursor.continue();
          }
          return result;
        }
      };
    }
  });

  // base/bloom.ts
  var import_base64, BitField, BloomFilter;
  var init_bloom = __esm({
    "base/bloom.ts"() {
      import_base64 = __require("https://deno.land/std@0.159.0/encoding/base64.ts");
      init_error();
      init_hash();
      init_encoding();
      BitField = class {
        constructor(size) {
          const byteLength = Math.ceil(size / 8);
          this.buffer = new Uint8Array(byteLength);
        }
        get bitSize() {
          return this.byteSize * 8;
        }
        get byteSize() {
          return this.buffer.byteLength;
        }
        get(idx) {
          const byteOffset = idx >> 3;
          const bitMask = 1 << idx % 8;
          return (this.buffer[byteOffset] & bitMask) !== 0;
        }
        set(idx, value) {
          const byteOffset = idx >> 3;
          const bitMask = 1 << idx % 8;
          const buf = this.buffer;
          if (value) {
            buf[byteOffset] = buf[byteOffset] | bitMask;
          } else {
            buf[byteOffset] = buf[byteOffset] & ~bitMask;
          }
        }
        clear() {
          this.buffer.fill(0);
        }
      };
      BloomFilter = class {
        constructor(options) {
          if (isDecoderConfig(options)) {
            this._filter = new BitField(1);
            this._hashes = [];
            this.deserialize(options.decoder);
          } else {
            const { size, fpr, maxHashes } = options;
            let { m, k } = options;
            if (m === void 0) {
              assert(fpr !== void 0);
              m = Math.ceil(
                size * Math.log(fpr) / Math.log(1 / Math.pow(2, Math.log(2)))
              );
            }
            if (k === void 0) {
              k = m / size * Math.log(2);
            }
            if (maxHashes !== void 0) {
              k = Math.max(k, maxHashes);
            }
            this._filter = new BitField(m);
            this._hashes = [];
            for (let i = 0; i < k; ++i) {
              this._hashes.push(new MurmurHash3());
            }
          }
        }
        /**
         * Returns the number of bytes the filter occupies.
         */
        get byteSize() {
          return this._filter.byteSize;
        }
        fillRate() {
          const filter = this._filter;
          let count = 0;
          for (let i = 0; i < filter.bitSize; ++i) {
            if (filter.get(i)) {
              ++count;
            }
          }
          return count / filter.bitSize;
        }
        /**
         * Adds a value to the filter
         */
        add(value) {
          const buf = this._filter;
          const size = buf.bitSize;
          for (const h of this._hashes) {
            h.hash(value);
            const v = h.result();
            buf.set(v % size, true);
            h.reset();
          }
        }
        /**
         * Returns whether the key exists or not in the filter.
         */
        has(value) {
          const buf = this._filter;
          const size = buf.bitSize;
          for (const h of this._hashes) {
            h.hash(value);
            const v = h.result();
            h.reset();
            if (!buf.get(v % size)) {
              return false;
            }
          }
          return true;
        }
        clear() {
          this._filter.clear();
          for (const hash of this._hashes) {
            hash.resetSeed();
          }
          return this;
        }
        serialize(encoder, _options) {
          encoder.set("d", (0, import_base64.encode)(this._filter.buffer));
          encoder.set(
            "s",
            this._hashes.map((h) => h.seed)
          );
        }
        deserialize(decoder, _options) {
          this._filter.buffer = (0, import_base64.decode)(decoder.get("d"));
          this._hashes = decoder.get("s").map((seed) => new MurmurHash3(seed));
        }
      };
    }
  });

  // net/message.ts
  var K_DEFAULT_TTL_MS, SyncMessage;
  var init_message = __esm({
    "net/message.ts"() {
      init_bloom();
      init_common();
      init_json();
      init_utils2();
      init_defs2();
      init_commit();
      K_DEFAULT_TTL_MS = 30 * 24 * 60 * 60 * 1e3;
      SyncMessage = class {
        constructor(config) {
          if (isDecoderConfig(config)) {
            this.deserialize(config.decoder);
          } else {
            this._filter = config.filter;
            this._size = config.size;
            this._values = config.values || [];
            if (config.accessDenied) {
              this._accessDenied = Array.from(config.accessDenied);
            }
            this._buildVersion = config.buildVersion || VersionNumber.Current;
          }
        }
        get buildVersion() {
          return this._buildVersion;
        }
        get filter() {
          return this._filter;
        }
        get size() {
          return this._size;
        }
        get values() {
          return this._values;
        }
        set values(v) {
          this._values = v;
        }
        get accessDenied() {
          return this._accessDenied || [];
        }
        get valueFlag() {
          const values = this.values;
          if (values.length > 0 && values[0] instanceof Commit) {
            return 1 /* Commit */;
          }
          return 0 /* Object */;
        }
        serialize(encoder, _options) {
          encoder.set("ver", this.buildVersion);
          encoder.set("f", this.filter);
          encoder.set("s", this.size);
          switch (this.valueFlag) {
            case 1 /* Commit */:
              encoder.set(
                "c",
                this.values.map((c) => JSONCyclicalEncoder.serialize(c))
              );
              break;
            case 0 /* Object */:
              encoder.set("v", this.values);
              break;
          }
          if (this.accessDenied) {
            encoder.set("ad", this.accessDenied);
          }
        }
        deserialize(decoder, _options) {
          this._buildVersion = decoder.get("ver");
          this._filter.deserialize(decoder.getDecoder("f"));
          this._size = decoder.get("s");
          this._accessDenied = decoder.get("ad", []);
          if (decoder.has("c")) {
            this._values = decoder.get("c", []).map((obj) => {
              const decoder2 = new JSONCyclicalDecoder(obj);
              return new Commit({ decoder: decoder2 });
            });
          } else {
            this._values = decoder.get("v");
          }
        }
        static build(peerFilter, values, localSize, peerSize, expectedSyncCycles, includeMissing = true) {
          const numberOfEntries = Math.max(1, localSize, peerSize);
          const fpr = Math.min(
            0.5,
            Math.pow(numberOfEntries, 1 / expectedSyncCycles)
          );
          const localFilter = new BloomFilter({
            size: numberOfEntries,
            fpr
          });
          const missingPeerValues = [];
          if (peerFilter && includeMissing) {
            for (const [id, v] of values) {
              localFilter.add(id);
              if (!peerFilter.has(id)) {
                missingPeerValues.push(v);
              }
            }
          }
          return new this({
            filter: localFilter,
            size: localSize,
            values: missingPeerValues
          });
        }
      };
    }
  });

  // net/base-client.ts
  function syncConfigGetCycles(config, actualSyncFreqMs = 0) {
    return Math.floor(
      config.syncDurationMs / Math.max(actualSyncFreqMs, config.minSyncFreqMs)
    );
  }
  var import_eventemitter3_4_04, kSyncConfigClient, EVENT_ONLINE_STATUS_CHANGED, EVENT_PROTOCOL_VERSION_CHANGED, BaseClient;
  var init_base_client = __esm({
    "net/base-client.ts"() {
      import_eventemitter3_4_04 = __toESM(__require("https://esm.sh/eventemitter3@4.0.7"));
      init_timer();
      init_message();
      init_time();
      init_log();
      init_json();
      init_math();
      init_defs2();
      kSyncConfigClient = {
        minSyncFreqMs: 300,
        maxSyncFreqMs: 3e3,
        syncDurationMs: 2e3
      };
      EVENT_ONLINE_STATUS_CHANGED = "online_changed";
      EVENT_PROTOCOL_VERSION_CHANGED = "protocol_version_changed";
      BaseClient = class extends import_eventemitter3_4_04.default {
        constructor(serverUrl, syncConfig) {
          super();
          this._connectionOnline = false;
          this._serverVersionNumber = 0 /* Unknown */;
          this._closed = false;
          this._serverUrl = serverUrl;
          this._syncConfig = syncConfig;
          this._timer = new EaseInOutSineTimer(
            syncConfig.minSyncFreqMs,
            syncConfig.maxSyncFreqMs,
            syncConfig.maxSyncFreqMs * 3,
            async () => {
              try {
                await this.sendSyncMessage();
              } catch (e) {
                log({
                  severity: "INFO",
                  error: "UnknownSyncError",
                  message: e.message,
                  trace: e.stack
                });
              }
            },
            true,
            "Sync timer"
          );
          this._syncFreqAvg = new MovingAverage(
            syncConfigGetCycles(this.syncConfig) * 2
          );
          this._previousServerSize = 0;
          this._ready = false;
          this._scheduled = false;
        }
        get serverUrl() {
          return this.serverUrl;
        }
        get isOnline() {
          return this._connectionOnline;
        }
        get previousServerFilter() {
          return this._previousServerFilter;
        }
        get previousServerSize() {
          return this._previousServerSize;
        }
        get syncConfig() {
          return this._syncConfig;
        }
        get syncCycles() {
          return syncConfigGetCycles(this.syncConfig, this._syncFreqAvg.currentValue);
        }
        get serverVersion() {
          return this._serverVersionNumber;
        }
        set serverVersion(v) {
          if (this._serverVersionNumber !== v) {
            this._serverVersionNumber = v;
            this.emit(EVENT_PROTOCOL_VERSION_CHANGED);
          }
        }
        get ready() {
          return this._ready && !this.closed;
        }
        set ready(f) {
          if (f !== this._ready) {
            this._ready = f;
            if (this._scheduled) {
              if (f) {
                this._timer.schedule();
              } else {
                this.stopSyncing();
              }
            }
          }
        }
        get closed() {
          return this._closed;
        }
        _setIsOnline(value) {
          if (value !== this._connectionOnline) {
            this._connectionOnline = value;
            this.emit(EVENT_ONLINE_STATUS_CHANGED);
          }
        }
        startSyncing() {
          if (!this._scheduled) {
            this._scheduled = true;
            if (this.ready) {
              this._timer.schedule();
            }
          }
          return this;
        }
        stopSyncing() {
          this._timer.unschedule();
          this._timer.reset();
          this._scheduled = false;
          return this;
        }
        async sendSyncMessage() {
          if (this.closed) {
            return;
          }
          const syncConfig = this._syncConfig;
          const reqMsg = this.buildSyncMessage();
          const msg = JSONCyclicalEncoder.serialize(reqMsg);
          let respText;
          try {
            const start = performance.now();
            respText = await retry(async () => {
              const resp = await fetch(this._serverUrl, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(msg)
              });
              return await resp.text();
            }, syncConfig.minSyncFreqMs);
            if (this.closed) {
              return;
            }
            const syncDurationMs = performance.now() - start;
            this._syncFreqAvg.addValue(syncDurationMs);
            log({
              severity: "INFO",
              name: "PeerResponseTime",
              value: syncDurationMs,
              unit: "Milliseconds",
              url: this._serverUrl
            });
          } catch (e) {
            log({
              severity: "INFO",
              error: "FetchError",
              message: e.message,
              trace: e.stack,
              url: this._serverUrl
            });
          }
          if (!respText) {
            this._setIsOnline(false);
            return;
          }
          let syncResp;
          try {
            const json = JSON.parse(respText);
            syncResp = new SyncMessage({ decoder: new JSONCyclicalDecoder(json) });
          } catch (e) {
            log({
              severity: "INFO",
              error: "SerializeError",
              value: respText,
              message: e.message,
              trace: e.stack
            });
            this._setIsOnline(false);
            return;
          }
          this._previousServerFilter = syncResp.filter;
          this._previousServerSize = syncResp.size;
          let persistedCount = 0;
          if (
            // We only write to newer versions and ignore new values
            syncResp.buildVersion <= VersionNumber.Current && syncResp.values.length
          ) {
            const start = performance.now();
            persistedCount = await this.persistPeerValues(syncResp.values);
            log({
              severity: "INFO",
              name: "CommitsPersistTime",
              value: performance.now() - start,
              unit: "Milliseconds"
            });
            log({
              severity: "INFO",
              name: "CommitsPersistCount",
              value: persistedCount,
              unit: "Count"
            });
          }
          if (this.closed) {
            return;
          }
          if (persistedCount > 0 || this.needsReplication()) {
            this.touch();
          }
          this._setIsOnline(true);
        }
        /**
         * Returns a promise that completes when both peers have reached consensus.
         * This method is probabilistic and fakes the appearance of a steady state
         * between this client and the server. It's intended to be used in back-office
         * and diagnostics tools, and not in app-to-server or server-to-server
         * communication (which rely on indefinite polling loop).
         */
        async sync() {
          const syncConfig = this._syncConfig;
          const cycleCount = syncConfigGetCycles(syncConfig) + 1;
          let i = 0;
          do {
            await this.sendSyncMessage();
            ++i;
          } while (!this.closed && (i < cycleCount || this.needsReplication()));
        }
        needsReplication() {
          const serverFilter = this._previousServerFilter;
          if (!serverFilter) {
            return true;
          }
          for (const id of this.localIds()) {
            if (!serverFilter.has(id)) {
              return true;
            }
          }
          return false;
        }
        touch() {
          this._timer.reset();
          this._timer.schedule();
        }
        close() {
          this.stopSyncing();
          this._closed = true;
          this._setIsOnline(false);
        }
      };
    }
  });

  // net/repo-client.ts
  var RepoClient;
  var init_repo_client = __esm({
    "net/repo-client.ts"() {
      init_message();
      init_base_client();
      init_common();
      RepoClient = class extends BaseClient {
        constructor(repo, serverUrl, syncConfig) {
          super(serverUrl, syncConfig);
          this._repo = repo;
          this.ready = true;
        }
        get repo() {
          return this._repo;
        }
        buildSyncMessage() {
          const repo = this.repo;
          return SyncMessage.build(
            this.previousServerFilter,
            mapIterable(repo.commits(), (c) => [c.id, c]),
            repo.numberOfCommits,
            this.previousServerSize,
            this.syncCycles
          );
        }
        *localIds() {
          for (const c of this.repo.commits()) {
            yield c.id;
          }
        }
        persistPeerValues(values) {
          return Promise.resolve(this.repo.persistCommits(values).length);
        }
      };
    }
  });

  // cfds/client/graph/note-search.ts
  function extractTextFromNote(note) {
    if (note.isDeleted) {
      return "";
    }
    let result = treeToPlaintext(note.title.root);
    if (result.length > 0) {
      result += "\n\n";
    }
    result += treeToPlaintext(note.body.root);
    return result.trim();
  }
  function regex(str) {
    return new RegExp(str, "g");
  }
  function replace(str, regex2, replacement) {
    if (typeof replacement === "undefined") {
      regex2 = regex2;
      for (let i = 0; i < regex2.length; i += 2) {
        str = str.replace(regex2[i], regex2[i + 1]);
      }
      return str;
    } else {
      return str.replace(regex2, replacement);
    }
  }
  var import_bulksearch_0_1, NoteSearchEngine, customLang, regex_whitespace, regex_split, regex_a, regex_e, regex_i, regex_o, regex_u, regex_y, regex_n, regex_c, regex_s, regex_and, regex_pairs;
  var init_note_search = __esm({
    "cfds/client/graph/note-search.ts"() {
      import_bulksearch_0_1 = __toESM(__require("https://esm.sh/bulksearch@0.1.3"));
      init_coroutine();
      init_mutations();
      init_note();
      init_tree();
      init_vertex_source();
      init_log();
      NoteSearchEngine = class {
        constructor(graph) {
          this._graph = graph;
          this._bulkSearchHandle = new import_bulksearch_0_1.default({
            type: "string",
            encode: "extra",
            boolean: "or",
            size: 2500,
            multi: true,
            strict: true,
            ordered: false,
            paging: false,
            async: false,
            cache: true
            // filter: 'custom',
            // stemmer: 'custom',
          });
          this._graphListener = (key, pack) => {
            this._vertexDidChange(key, pack);
          };
          this._loading = true;
          graph.on(EVENT_VERTEX_CHANGED, this._graphListener);
        }
        close() {
          this._graph.off(EVENT_VERTEX_CHANGED, this._graphListener);
        }
        get loading() {
          return this._loading;
        }
        search(text, filter) {
          const graph = this._graph;
          const result = [];
          for (const key of this._bulkSearchHandle.search(text)) {
            const vert = graph.getVertex(key);
            if (filter === void 0 || filter(vert)) {
              result.push(vert.manager);
            }
          }
          return result;
        }
        _vertexDidChange(key, pack) {
          const vert = this._graph.getVertex(key);
          if (!(vert instanceof Note)) {
            return;
          }
          let skipChange = true;
          for (const [field] of mutationPackIter(pack)) {
            if (field === "isDeleted" || field === "body" || field === "title") {
              skipChange = false;
              break;
            }
          }
          if (skipChange) {
            return;
          }
          this._bulkSearchHandle.add(vert.key, extractTextFromNote(vert));
        }
        async loadAllNotes() {
          const start = performance.now();
          await CoroutineScheduler.sharedScheduler().map(
            this._graph.vertexManagers(),
            (mgr) => {
              if (!mgr.isDeleted) {
                this._vertexDidChange(mgr.key, mgr.getCurrentStateMutations(true));
              }
            },
            1 /* Background */
          );
          this._loading = false;
          log({
            severity: "INFO",
            name: "FullTextIndexingTime",
            value: performance.now() - start,
            unit: "Milliseconds",
            itemCount: this._bulkSearchHandle.info().length
          });
        }
      };
      customLang = {
        filter: [
          "\u05D0\u05EA",
          "\u05DC\u05D0",
          "\u05E9\u05DC",
          "\u05D0\u05E0\u05D9",
          "\u05E2\u05DC",
          "\u05D6\u05D4",
          "\u05E2\u05DD",
          "\u05DB\u05DC",
          "\u05D4\u05D5\u05D0",
          "\u05D0\u05DD",
          "\u05D0\u05D5",
          "\u05D2\u05DD",
          "\u05D9\u05D5\u05EA\u05E8",
          "\u05D9\u05E9",
          "\u05DC\u05D9",
          "\u05DE\u05D4",
          "\u05D0\u05D1\u05DC",
          "\u05E4\u05D5\u05E8\u05D5\u05DD",
          "\u05D0\u05D6",
          "\u05D8\u05D5\u05D1",
          "\u05E8\u05E7",
          "\u05DB\u05D9",
          "\u05E9\u05DC\u05D9",
          "\u05D4\u05D9\u05D4",
          "\u05D1\u05E4\u05D5\u05E8\u05D5\u05DD",
          "\u05D0\u05D9\u05DF",
          "\u05E2\u05D5\u05D3",
          "\u05D4\u05D9\u05D0",
          "\u05D0\u05D7\u05D3",
          "\u05D1",
          "\u05DC",
          "\u05E2\u05D3",
          "\u05DC\u05DA",
          "\u05DB\u05DE\u05D5",
          "\u05DC\u05D4\u05D9\u05D5\u05EA",
          "\u05D0\u05EA\u05D4",
          "\u05DB\u05DE\u05D4",
          "\u05D0\u05E0\u05D7\u05E0\u05D5",
          "\u05D4\u05DD",
          "\u05DB\u05D1\u05E8",
          "\u05D0\u05E0\u05E9\u05D9\u05DD",
          "\u05D0\u05E4\u05E9\u05E8",
          "\u05EA\u05D5\u05D3\u05D4",
          "\u05E9\u05DC\u05D0",
          "\u05D0\u05D5\u05EA\u05D5",
          "\u05D4",
          "\u05DE\u05D0\u05D5\u05D3",
          "\u05D4\u05E8\u05D1\u05D4",
          "\u05D5\u05DC\u05D0",
          "\u05DE\u05DE\u05E9",
          "\u05DC\u05D5",
          "\u05D0",
          "\u05DE\u05D9",
          "\u05D7\u05D9\u05D9\u05DD",
          "\u05D1\u05D9\u05EA",
          "\u05E9\u05D0\u05E0\u05D9",
          "\u05D9\u05DB\u05D5\u05DC",
          "\u05E9\u05D4\u05D5\u05D0",
          "\u05DB\u05DA",
          "\u05D4\u05D6\u05D4",
          "\u05D0\u05D9\u05DA",
          "\u05D4\u05D9\u05D5\u05DD",
          "\u05E7\u05E6\u05EA",
          "\u05E2\u05DB\u05E9\u05D9\u05D5",
          "\u05E9\u05DD",
          "\u05D1\u05DB\u05DC",
          "\u05D9\u05D4\u05D9\u05D4",
          "\u05EA\u05DE\u05D9\u05D3",
          "\u05D9",
          "\u05E9\u05DC\u05DA",
          "\u05D4\u05DB\u05D9",
          "\u05E9",
          "\u05D1\u05D5",
          "\u05DC\u05E2\u05E9\u05D5\u05EA",
          "\u05E6\u05E8\u05D9\u05DA",
          "\u05DB\u05DF",
          "\u05E4\u05E2\u05DD",
          "\u05DC\u05DB\u05DD",
          "\u05D5\u05D0\u05E0\u05D9",
          "\u05DE\u05E9\u05D4\u05D5",
          "\u05D0\u05DC",
          "\u05E9\u05DC\u05D5",
          "\u05E9\u05D9\u05E9",
          "\u05D5",
          "\u05D5\u05D2\u05DD",
          "\u05D0\u05EA\u05DB\u05DD",
          "\u05D0\u05D7\u05E8\u05D9",
          "\u05D1\u05E0\u05D5\u05E9\u05D0",
          "\u05DB\u05D3\u05D9",
          "\u05E4\u05E9\u05D5\u05D8",
          "\u05DC\u05E4\u05E0\u05D9",
          "\u05E9\u05D6\u05D4",
          "\u05D0\u05D5\u05EA\u05D9",
          "\u05D0\u05E0\u05D5",
          "\u05DC\u05DE\u05D4",
          "\u05D3\u05D1\u05E8",
          "\u05DB",
          "\u05DB\u05D0\u05DF",
          "\u05D0\u05D5\u05DC\u05D9",
          "\u05D8\u05D5\u05D1\u05D9\u05DD",
          "\u05E8\u05D5\u05E6\u05D4",
          "\u05E9\u05E0\u05D4",
          "\u05D1\u05E2\u05DC\u05D9",
          "\u05D4\u05D7\u05D9\u05D9\u05DD",
          "\u05DC\u05DE\u05E2\u05DF",
          "\u05D0\u05EA\u05DD",
          "\u05DE",
          "\u05D1\u05D9\u05DF",
          "\u05D9\u05D5\u05DD",
          "\u05D6\u05D0\u05EA",
          "\u05D0\u05D9\u05D6\u05D4",
          "\u05D1\u05D9\u05D5\u05EA\u05E8",
          "\u05DC\u05D4",
          "\u05D0\u05D7\u05EA",
          "\u05D4\u05DB\u05DC",
          "\u05D4\u05E4\u05D5\u05E8\u05D5\u05DE\u05D9\u05DD",
          "\u05DC\u05DB\u05DC",
          "\u05D0\u05DC\u05D0",
          "\u05E4\u05D4",
          "\u05D9\u05D5\u05D3\u05E2",
          "\u05E9\u05DC\u05D5\u05DD",
          "\u05D3\u05E7\u05D5\u05EA",
          "\u05DC\u05E0\u05D5",
          "\u05D4\u05E9\u05E0\u05D4",
          "\u05D3\u05E8\u05DA",
          "\u05D0\u05D3\u05DD",
          "\u05E0\u05E8\u05D0\u05D4",
          "\u05D6\u05D5",
          "\u05D4\u05D9\u05D7\u05D9\u05D3\u05D4",
          "\u05E8\u05D5\u05E6\u05D9\u05DD",
          "\u05D1\u05DB\u05DC\u05DC",
          "\u05D8\u05D5\u05D1\u05D4",
          "\u05E9\u05DC\u05E0\u05D5",
          "\u05D4\u05D0\u05DD",
          "\u05D4\u05D9\u05D9\u05EA\u05D9",
          "\u05D4\u05DC\u05D1",
          "\u05D4\u05D9\u05D5",
          "\u05D7",
          "\u05E9\u05D3\u05E8\u05D5\u05EA",
          "\u05D1\u05DC\u05D9",
          "\u05DC\u05D4\u05DD",
          "\u05E9\u05D0\u05EA\u05D4",
          "\u05D0\u05D5\u05EA\u05D4",
          "\u05DE\u05E7\u05D5\u05DD",
          "\u05D5\u05D0\u05EA\u05DD",
          "\u05D7\u05DC\u05E7",
          "\u05D1\u05DF",
          "\u05D1\u05D5\u05D0\u05D5",
          "\u05D0\u05D7\u05E8",
          "\u05D4\u05D0\u05D7\u05EA",
          "\u05D0\u05D5\u05EA\u05DA",
          "\u05DB\u05DE\u05D5\u05D1\u05DF",
          "\u05D1\u05D2\u05DC\u05DC",
          "\u05D1\u05D0\u05DE\u05EA",
          "\u05DE\u05D9\u05E9\u05D4\u05D5",
          "\u05D9\u05DC\u05D3\u05D9\u05DD",
          "\u05D0\u05D5\u05EA\u05DD",
          "\u05D4\u05E4\u05D5\u05E8\u05D5\u05DD",
          "\u05D8\u05D9\u05E4\u05D5\u05D7",
          "\u05D5\u05D6\u05D4",
          "\u05E8",
          "\u05E9\u05D4\u05DD",
          "\u05D0\u05DA",
          "\u05DE\u05D6\u05DE\u05D9\u05DF",
          "\u05D9\u05E9\u05E8\u05D0\u05DC",
          "\u05DB\u05D5\u05E1",
          "\u05D6\u05DE\u05DF",
          "\u05D5\u05E2\u05D5\u05D3",
          "\u05D4\u05D9\u05DC\u05D3\u05D9\u05DD",
          "\u05E2\u05D3\u05D9\u05D9\u05DF",
          "\u05DB\u05D6\u05D4",
          "\u05E2\u05D5\u05E9\u05D4",
          "\u05E9\u05D5\u05DD",
          "\u05DC\u05E7\u05D7\u05EA",
          "\u05D4\u05E2\u05D5\u05DC\u05DD",
          "\u05EA\u05E4\u05D5\u05D6",
          "\u05DC\u05E8\u05D0\u05D5\u05EA",
          "\u05DC\u05E4\u05D5\u05E8\u05D5\u05DD",
          "\u05D5\u05DB\u05DC",
          "\u05DC\u05E7\u05D1\u05DC",
          "\u05E0\u05DB\u05D5\u05DF",
          "\u05D9\u05D5\u05E6\u05D0",
          "\u05DC\u05E2\u05D5\u05DC\u05DD",
          "\u05D2\u05D3\u05D5\u05DC",
          "\u05D0\u05E4\u05D9\u05DC\u05D5",
          "\u05E0\u05D9\u05EA\u05DF",
          "\u05E9\u05E0\u05D9",
          "\u05D0\u05D5\u05DB\u05DC",
          "\u05E7\u05E9\u05D4",
          "\u05DE\u05E9\u05D7\u05E7",
          "\u05D1\u05D9\u05D5\u05DD",
          "\u05DB\u05DB\u05D4",
          "\u05D0\u05DE\u05D0",
          "\u05D1\u05EA",
          "\u05D4\u05E9\u05D1\u05D5\u05E2",
          "\u05E0\u05D5\u05E1\u05E4\u05D9\u05DD",
          "\u05DC\u05D2\u05D1\u05D9",
          "\u05D1\u05D1\u05D9\u05EA",
          "\u05D0\u05D7\u05E8\u05EA",
          "\u05DC\u05E4\u05D9	\u05DC\u05DC\u05D0",
          "\u05E9\u05E0\u05D9\u05DD",
          "\u05D4\u05D6\u05DE\u05DF",
          "\u05E9\u05DE\u05DF",
          "\u05DE\u05E2\u05D8",
          "\u05DC\u05E4\u05D7\u05D5\u05EA",
          "\u05D0\u05E3",
          "\u05E9\u05D5\u05D1",
          "\u05E9\u05DC\u05D4\u05DD",
          "\u05D1\u05DE\u05E7\u05D5\u05DD",
          "\u05DB\u05D5\u05DC\u05DD",
          "\u05E0\u05D5\u05E2\u05D9\u05EA",
          "\u05D4\u05D1\u05D0",
          "\u05DE\u05E2\u05DC",
          "\u05DC\u05D1",
          "\u05D4\u05DE\u05D5\u05DF",
          "\u05DC\u05D3\u05D1\u05E8",
          "\u05E2",
          "\u05D0\u05D5\u05D4\u05D1",
          "\u05DE\u05D5\u05E1\u05D9\u05E4\u05D9\u05DD",
          "\u05D7\u05E6\u05D9",
          "\u05D1\u05E2\u05D9\u05E7\u05E8",
          "\u05DB\u05E4\u05D5\u05EA",
          "\u05DC\u05E4\u05E2\u05DE\u05D9\u05DD",
          "\u05E9\u05D4\u05D9\u05D0",
          "\u05D4\u05E0\u05D4\u05DC\u05EA",
          "\u05D5\u05E2\u05DC",
          "\u05E7",
          "\u05D0\u05D5\u05D4\u05D1\u05D9\u05DD",
          "\u05EA",
          "\u05D9\u05D5\u05D3\u05E2\u05EA",
          "\u05D3",
          "\u05D2\u05E8\u05D5\u05E2",
          "\u05E9\u05D0\u05E0\u05D7\u05E0\u05D5",
          "\u05DE\u05D9\u05DD",
          "\u05DC\u05D9\u05DC\u05D3\u05D9\u05DD",
          "\u05D1\u05D0\u05E8\u05E5",
          "\u05DE\u05D5\u05D3\u05D9\u05E2",
          "\u05D0\u05E9\u05DE\u05D7",
          "\u05E9\u05DC\u05DB\u05DD",
          "\u05E4\u05D7\u05D5\u05EA",
          "\u05DC\u05DB\u05D5\u05DC\u05DD",
          "\u05D3\u05D9",
          "\u05D0\u05D4\u05D1\u05D4",
          "\u05D9\u05DB\u05D5\u05DC\u05D4",
          "\u05D3\u05D1\u05E8\u05D9\u05DD",
          "\u05D4\u05E7\u05D4\u05D9\u05DC\u05D4",
          "\u05DC\u05E2\u05D6\u05D5\u05E8",
          "\u05E4\u05E8\u05D8\u05D9\u05DD",
          "\u05D1\u05D3\u05D9\u05D5\u05E7",
          "\u05DE\u05DC\u05D7",
          "\u05E7\u05DC",
          "\u05D4\u05E8\u05D0\u05E9\u05D9",
          "\u05E9\u05DC\u05D4",
          "\u05DC\u05D4\u05D5\u05E1\u05D9\u05E3",
          "\u05D4\u05E9\u05E0\u05D9",
          "\u05DC\u05D3\u05E2\u05EA\u05D9",
          "\u05D1\u05E8",
          "\u05DC\u05DE\u05E8\u05D5\u05EA",
          "\u05E9\u05D2\u05DD",
          "\u05DE\u05D5\u05D6\u05DE\u05E0\u05D9\u05DD",
          "\u05DC\u05D0\u05D7\u05E8",
          "\u05D1\u05DE\u05D4",
          "\u05D7\u05D5\u05E9\u05D1",
          "\u05DE\u05D0\u05D3",
          "\u05D9\u05E4\u05D4",
          "\u05DC\u05D4\u05D2\u05E9\u05D9\u05DD",
          "\u05E7\u05D8\u05DF",
          "\u05DE\u05D7\u05E4\u05E9\u05D9\u05DD",
          "\u05E9\u05DE\u05D7",
          "\u05DE\u05D3\u05D1\u05E8\u05D9\u05DD",
          "\u05D5\u05D0\u05DD",
          "\u05D1\u05DE\u05D9\u05D5\u05D7\u05D3",
          "\u05E2\u05D1\u05D5\u05D3\u05D4",
          "\u05DE\u05D3\u05D9",
          "\u05D5\u05D0\u05D6",
          "\u05D7\u05E9\u05D5\u05D1",
          "\u05E9\u05D0\u05DD",
          "\u05D0\u05D5\u05D4\u05D1\u05EA",
          "\u05E4\u05E2\u05DE\u05D9\u05DD",
          "\u05DE\u05E0\u05D4\u05DC\u05EA",
          "\u05D0\u05D5\u05DE\u05E8",
          "\u05DE\u05D5\u05DC",
          "\u05E7\u05E9\u05E8",
          "\u05DE\u05E0\u05D4\u05DC",
          "\u05E9\u05D9\u05D4\u05D9\u05D4",
          "\u05E9\u05D0\u05D9\u05DF",
          "\u05E9\u05D0\u05E0\u05D5",
          "\u05D4\u05D0\u05D4\u05D1\u05D4",
          "\u05E1",
          "\u05D4\u05E6\u05D8\u05E8\u05E4\u05D5",
          "\u05DB\u05E4\u05D9\u05EA",
          "\u05D1\u05E9\u05D1\u05D9\u05DC",
          "\u05D4\u05D7\u05D2\u05D9\u05DD",
          "\u05D0\u05D5\u05E4\u05DF",
          "\u05DC\u05EA\u05EA",
          "\u05DB\u05E3",
          "\u05D1\u05EA\u05D5\u05DA",
          "\u05E1\u05D5\u05DB\u05E8",
          "\u05D2\u05D9\u05DC",
          "\u05D1\u05D4\u05E6\u05DC\u05D7\u05D4",
          "\u05D5\u05D4\u05D5\u05D0",
          "\u05DE\u05E7\u05D5\u05D5\u05D4",
          "\u05E1\u05EA\u05DD",
          "\u05D5\u05D9\u05E9",
          "\u05E0\u05D2\u05D3",
          "\u05DB\u05DE\u05E2\u05D8",
          "\u05E9\u05D0\u05EA",
          "\u05E2\u05D5\u05DC\u05D4",
          "\u05D0\u05D9",
          "\u05DE\u05E1\u05E4\u05E8",
          "\u05E8\u05D0\u05E9\u05D5\u05DF",
          "\u05DC\u05D3\u05E8\u05DA",
          "\u05E0\u05D4\u05D9\u05D4",
          "\u05DC\u05E2\u05E6\u05D1",
          "\u05E2\u05D5\u05E9\u05D9\u05DD",
          "\u05D5\u05DC\u05E0\u05D4\u05DC",
          "\u05D4\u05D9\u05EA\u05D4",
          "\u05E2\u05DC\u05D9\u05D5",
          "\u05DE\u05D6\u05D4",
          "\u05D4\u05D9\u05D9\u05EA\u05D4",
          "\u05D1\u05D0",
          "\u05D1\u05E4\u05E8\u05E1",
          "\u05D7\u05DC\u05D5\u05EA",
          "\u05E8\u05D0\u05E9",
          "\u05DE\u05D6\u05DE\u05D9\u05E0\u05D9\u05DD",
          "\u05D8\u05D9\u05E4\u05D9\u05DD",
          "\u05DE\u05DB\u05D1\u05D9",
          "\u05E8\u05D1\u05D4",
          "\u05D4\u05D5\u05E8\u05D9\u05DD",
          "\u2021",
          "\u05DE\u05E7\u05E8\u05D4",
          "\u05E7\u05E8\u05DF",
          "\u05D4\u05DE\u05D5\u05E6\u05DC\u05D7",
          "\u05DC\u05D4\u05D2\u05D9\u05E2",
          "\u05D2\u05D3\u05D5\u05DC\u05D4",
          "\u05DB\u05E0\u05E8\u05D0\u05D4",
          "\u05D4\u05D7\u05DE\u05E9\u05D9\u05E8",
          "\u05D4\u05E8\u05D0\u05E9\u05D5\u05DF",
          "\u05E4\u05DC\u05E4\u05DC",
          "\u05D4\u05DE\u05E9\u05D7\u05E7",
          "\u05D5\u05DB\u05D0\u05DF",
          "\u05DC\u05D3\u05E2\u05EA",
          "\u05D5\u05D0\u05EA",
          "\u05D2\u05E8\u05D5\u05E2\u05D9\u05DD",
          "\u05E1\u05E4\u05E8",
          "\u05D0\u05D2\u05D1",
          "\u05D0\u05D7\u05E8\u05D9\u05DD",
          "\u05DC\u05D4\u05D2\u05D9\u05D3",
          "\u05D1\u05EA\u05E4\u05D5\u05D6",
          "\u05D5\u05D4\u05E2\u05D5\u05DC\u05DD",
          "\u05D0\u05D5\u05E4\u05E0\u05D4",
          "\u05D3\u05D5\u05D5\u05E7\u05D0",
          "\u05DE\u05E1\u05E4\u05D9\u05E7",
          "\u05E9\u05E2\u05D5\u05EA",
          "\u05EA\u05DE\u05D5\u05E0\u05D5\u05EA",
          "\u05DB\u05E9\u05D0\u05E0\u05D7\u05E0\u05D5",
          "\u05E9\u05D5\u05E7\u05D5\u05DC\u05D3",
          "\u05D5\u05DC\u05DB\u05DF",
          "\u05D2",
          "\u05DC\u05E7\u05E8\u05D5\u05D0",
          "\u05DC\u05E0\u05D9\u05D4\u05D5\u05DC",
          "\u05E9\u05D1\u05D5\u05E2",
          "\u05D5\u05D9\u05D5\u05E4\u05D9",
          "\u05D7\u05DC\u05D5\u05DD",
          "\u05D1\u05D4",
          "\u05E9\u05D4\u05D9\u05D4",
          "\u05E9\u05D0\u05DC\u05D4",
          "\u05DE\u05E7\u05D5\u05DE\u05D4",
          "\u05D4\u05D6\u05D5",
          "\u05D1\u05E4\u05D5\u05E8\u05D5\u05DE\u05D9\u05DD",
          "\u05D4\u05D7\u05D3\u05E9",
          "\u05DE\u05EA\u05D0\u05DE\u05E6\u05D9\u05DD",
          "\u05E9\u05D7\u05E7\u05DF",
          "\u05E9\u05DE\u05D6\u05D9\u05E0\u05D9\u05DD",
          "\u05E0\u05E9\u05DE\u05EA",
          "\u05D1\u05E2\u05E8\u05DA",
          "\u05DE\u05DB\u05DC",
          "\u05D5\u05DE\u05D4",
          "\u05E8\u05D2\u05DC",
          "\u05DB\u05E1\u05E3",
          "\u05E8\u05D5\u05D0\u05D4",
          "\u05E7\u05D8\u05E0\u05D4",
          "\u05D1\u05E6\u05DC",
          "\u05D1\u05E2\u05D5\u05DC\u05DD",
          "\u05D0\u05D9\u05E0\u05D8\u05E8\u05E0\u05D8",
          "\u05D7\u05D5\u05E5",
          "\u05D1\u05E8\u05D5\u05E8",
          "\u05D4\u05D5\u05DC\u05DA",
          "\u05D7\u05D5\u05E9\u05D1\u05EA",
          "\u05DC\u05D6\u05D4",
          "\u05DB\u05DC\u05D5\u05DD",
          "\u05D4\u05DF",
          "\u05DB\u05D0\u05DC\u05D4",
          "\u05D1\u05D8\u05D5\u05D7",
          "\u05D4\u05D3\u05D1\u05E8",
          "\u05EA\u05D4\u05D9\u05D4",
          "\u05DE\u05D2\u05D9\u05E2",
          "\u05E1\u05D5\u05E3	\u05D4\u05D0\u05DE\u05EA",
          "\u05DE\u05DE\u05E0\u05D5",
          "\u05DE\u05D9\u05DB\u05DC",
          "\u05D4\u05D7\u05D3\u05E9\u05D4",
          "\u05DC\u05EA\u05E8\u05D5\u05DD",
          "\u05D4\u05D0\u05E0\u05E9\u05D9\u05DD",
          "\u05D5\u05E2\u05D3",
          "\u05D1\u05D3\u05E8\u05DA",
          "\u05D0\u05E6\u05DC\u05D9",
          "\u05D4\u05D4\u05D5\u05E8\u05D9\u05DD",
          "\u05D1\u05E0\u05D9",
          "\u05DE\u05EA\u05D5\u05DA",
          "\u05DB\u05D0\u05E9\u05E8",
          "\u05DC\u05D1\u05D3",
          "\u05E8\u05D0\u05D9\u05EA\u05D9",
          "\u05DE\u05E6\u05D1",
          "\u05DE\u05DC\u05D0",
          "\u05DC\u05D1\u05D7\u05D5\u05E8",
          "\u05E0\u05E9\u05DE\u05D7",
          "\u05D4\u05D7\u05D2",
          "\u05E8\u05E2",
          "\u05E2\u05D5\u05E3",
          "\u05DE\u05DF",
          "\u05DC\u05D4\u05D1\u05D9\u05D0",
          "\u05DE\u05E6\u05D0\u05EA\u05D9",
          "\u05DB\u05EA\u05D5\u05D1\u05D5\u05EA",
          "\u05DE\u05E2\u05E0\u05D9\u05D9\u05DF",
          "\u05E6\u05E8\u05D9\u05DB\u05D4",
          "\u05DC\u05D4\u05DB\u05E0\u05E1",
          "\u05DC\u05D7\u05DC\u05D5\u05D8\u05D9\u05DF",
          "\u05E9\u05E2\u05D4",
          "\u05DE\u05EA\u05DB\u05D5\u05DF",
          "\u05E7\u05D5\u05D3\u05DD",
          "\u05EA\u05E9\u05D5\u05D1\u05D5\u05EA",
          "\u05DE\u05D3\u05D5\u05D1\u05E8",
          "\u05E0\u05D9\u05D4\u05D5\u05DC",
          "\u05DE\u05D6\u05DC",
          "\u05DB\u05D3\u05D0\u05D9",
          "\u05D9\u05D4\u05D9\u05D5",
          "\u05D4\u05D4\u05D5\u05D3\u05E2\u05D5\u05EA",
          "\u05D1\u05D5\u05E7\u05E8",
          "\u05E0\u05D9\u05DC\u05D5\u05D5\u05EA",
          "\u05D0\u05D9\u05E4\u05D4",
          "\u05D1\u05E2\u05D9\u05D4",
          "\u05E7\u05DE\u05D7",
          "\u05DC\u05DC\u05DB\u05EA",
          "\u05E4\u05D5\u05E8\u05D5\u05DE\u05D9\u05DD",
          "\u05D0\u05DE\u05E8",
          "\u05E0\u05D5\u05E9\u05D0",
          "\u05D4\u05D4\u05DB\u05E0\u05D4",
          "\u05D1\u05D1\u05E7\u05E9\u05D4",
          "\u05E9\u05DB\u05DC",
          "\u05D4\u05D6\u05D0\u05EA",
          "\u05DC\u05DE\u05E9\u05D7\u05E7",
          "\u05E4\u05E0\u05D9\u05E0\u05D4",
          "\u05EA\u05D7\u05E8\u05D5\u05EA",
          "\u05D7\u05D1\u05E8",
          "\u05DC\u05E7\u05E0\u05D5\u05EA",
          "\u05DE\u05D4\u05DD",
          "\u05E8\u05D2\u05E2",
          "\u05D2\u05E8\u05DD",
          "\u05D0\u05DC\u05D5",
          "\u05E2\u05E6\u05DE\u05D5",
          "\u05DE\u05E8\u05D0\u05E9",
          "\u05D4\u05DB\u05DC\u05D1",
          "\u05DB\u05D5\u05DC\u05E0\u05D5",
          "\u05E2\u05D3\u05D9\u05E3",
          "\u05D0\u05D9\u05EA\u05D5",
          "\u05DC\u05DE\u05E9\u05DC",
          "\u05DC\u05D1\u05E9\u05DC",
          "\u05DC\u05DE\u05D9",
          "\u05E8\u05E2\u05D9\u05D5\u05E0\u05D5\u05EA",
          "\u05D4\u05D1\u05DC\u05D5\u05D2",
          "\u05E8\u05D5\u05D1",
          "\u05D0\u05D1\u05D9\u05D1",
          "\u05DB\u05E8\u05D2\u05E2",
          "\u05D1\u05E1\u05D5\u05E3",
          "\u05D0\u05DC\u05D4",
          "\u05DC\u05D7\u05D2",
          "\u05E2\u05E8\u05D5\u05E5",
          "\u05E9\u05D5\u05D5\u05D4",
          "\u05D1\u05D0\u05D5\u05E4\u05DF",
          "\u05DE\u05D0\u05DE\u05D9\u05DF",
          "\u05DC\u05D1\u05DF",
          "\u05D1\u05D6\u05D4",
          "\u05D4\u05DB\u05D1\u05D5\u05D3",
          "\u05DC\u05E8\u05D0\u05E9",
          "\u05DD",
          "\u05D9\u05DE\u05D9",
          "\u05E9\u05D7\u05D5\u05E8",
          "\u05D1\u05E6\u05D5\u05E8\u05D4",
          "\u05D1\u05E2\u05DE\u05D5\u05D3",
          "\u05D5\u05E2\u05DD",
          "\u05D5\u05D7\u05E6\u05D9",
          "\u05D4\u05D0\u05DC\u05D4",
          "\u05EA\u05DE\u05D5\u05E0\u05D4",
          "\u05D1\u05E9\u05DC\u05D1",
          "\u05DE\u05E9\u05D7\u05E7\u05D9\u05DD",
          "\u05E0\u05D5",
          "a",
          "about",
          "above",
          "after",
          "again",
          "against",
          "all",
          "also",
          "am",
          "an",
          "and",
          "any",
          "are",
          "aren't",
          "as",
          "at",
          //"back",
          "be",
          "because",
          "been",
          "before",
          "being",
          "below",
          //"between",
          "both",
          "but",
          "by",
          "can",
          "cannot",
          "can't",
          "come",
          "could",
          "couldn't",
          //"day",
          "did",
          "didn't",
          "do",
          "does",
          "doesn't",
          "doing",
          "dont",
          "down",
          "during",
          "each",
          "even",
          "few",
          "first",
          "for",
          "from",
          "further",
          "get",
          //"give",
          "go",
          //"good",
          "had",
          "hadn't",
          "has",
          "hasn't",
          "have",
          "haven't",
          "having",
          "he",
          "hed",
          //"hell",
          "her",
          "here",
          "here's",
          "hers",
          "herself",
          "hes",
          "him",
          "himself",
          "his",
          "how",
          "how's",
          "i",
          "id",
          "if",
          "ill",
          "im",
          "in",
          "into",
          "is",
          "isn't",
          "it",
          "it's",
          "itself",
          "i've",
          "just",
          "know",
          "let's",
          "like",
          //"look",
          "make",
          "me",
          "more",
          "most",
          "mustn't",
          "my",
          "myself",
          "no",
          "nor",
          "not",
          "now",
          "of",
          "off",
          "on",
          "once",
          //"one",
          "only",
          "or",
          "other",
          "ought",
          "our",
          "our's",
          "ourselves",
          "out",
          "over",
          "own",
          //"people",
          "same",
          "say",
          "see",
          "shan't",
          "she",
          "she'd",
          "shell",
          "shes",
          "should",
          "shouldn't",
          "so",
          "some",
          "such",
          //"take",
          "than",
          "that",
          "that's",
          "the",
          "their",
          "theirs",
          "them",
          "themselves",
          "then",
          "there",
          "there's",
          "these",
          "they",
          "they'd",
          "they'll",
          "they're",
          "they've",
          //"think",
          "this",
          "those",
          "through",
          "time",
          "to",
          "too",
          //"two",
          //"under",
          "until",
          "up",
          "us",
          //"use",
          "very",
          "want",
          "was",
          "wasn't",
          "way",
          "we",
          "wed",
          "well",
          "were",
          "weren't",
          "we've",
          "what",
          "what's",
          "when",
          "when's",
          "where",
          "where's",
          "which",
          "while",
          "who",
          "whom",
          "who's",
          "why",
          "why's",
          "will",
          "with",
          "won't",
          //"work",
          "would",
          "wouldn't",
          //"year",
          "you",
          "you'd",
          "you'll",
          "your",
          "you're",
          "your's",
          "yourself",
          "yourselves",
          "you've"
        ],
        stemmer: {
          ational: "ate",
          iveness: "ive",
          fulness: "ful",
          ousness: "ous",
          ization: "ize",
          tional: "tion",
          biliti: "ble",
          icate: "ic",
          ative: "",
          alize: "al",
          iciti: "ic",
          entli: "ent",
          ousli: "ous",
          alism: "al",
          ation: "ate",
          aliti: "al",
          iviti: "ive",
          ement: "",
          enci: "ence",
          anci: "ance",
          izer: "ize",
          alli: "al",
          ator: "ate",
          logi: "log",
          ical: "ic",
          ance: "",
          ence: "",
          ness: "",
          able: "",
          ible: "",
          ment: "",
          eli: "e",
          bli: "ble",
          ful: "",
          ant: "",
          ent: "",
          ism: "",
          ate: "",
          iti: "",
          ous: "",
          ive: "",
          ize: "",
          al: "",
          ou: "",
          er: "",
          ic: ""
        }
      };
      import_bulksearch_0_1.default.registerLanguage("custom", customLang);
      regex_whitespace = regex("\\s\\s+");
      regex_split = regex("[-/]");
      regex_a = regex("[\xE0\xE1\xE2\xE3\xE4\xE5]");
      regex_e = regex("[\xE8\xE9\xEA\xEB]");
      regex_i = regex("[\xEC\xED\xEE\xEF]");
      regex_o = regex("[\xF2\xF3\xF4\xF5\xF6\u0151]");
      regex_u = regex("[\xF9\xFA\xFB\xFC\u0171]");
      regex_y = regex("[\xFD\u0177\xFF]");
      regex_n = regex("\xF1");
      regex_c = regex("\xE7");
      regex_s = regex("\xDF");
      regex_and = regex(" & ");
      regex_pairs = [
        regex_a,
        "a",
        regex_e,
        "e",
        regex_i,
        "i",
        regex_o,
        "o",
        regex_u,
        "u",
        regex_y,
        "y",
        regex_n,
        "n",
        regex_c,
        "c",
        regex_s,
        "s",
        regex_and,
        " and ",
        regex_split,
        " ",
        regex_whitespace,
        " "
      ];
      import_bulksearch_0_1.default.registerEncoder("simple", function(str) {
        str = replace(str.toLowerCase(), regex_pairs);
        return str !== " " ? str : "";
      });
    }
  });

  // cfds/client/graph/graph-manager.ts
  var K_HOT_COMMITS_WINDOW_MS, EVENT_VERTEX_DID_CHANGE, GraphManager;
  var init_graph_manager = __esm({
    "cfds/client/graph/graph-manager.ts"() {
      init_record();
      init_scheme();
      init_error();
      init_common();
      init_manager();
      init_mutations();
      init_vertex();
      init_vertex_manager();
      init_scheme_types();
      init_timer();
      init_set();
      init_shared_queries();
      init_vertex_source();
      init_adj_list();
      init_repo();
      init_idbbackup();
      init_repo_client();
      init_base_client();
      init_string();
      init_note_search();
      K_HOT_COMMITS_WINDOW_MS = 30 * 24 * 60 * 60 * 1e3;
      EVENT_VERTEX_DID_CHANGE = "vert-did-change";
      GraphManager = class extends VertexSource {
        constructor(rootKey, ptrFilterFunc, baseServerUrl) {
          super();
          this._repoById = /* @__PURE__ */ new Map();
          this._rootKey = rootKey;
          this._adjList = new SimpleAdjacencyList();
          this._vertManagers = /* @__PURE__ */ new Map();
          this._pendingMutations = /* @__PURE__ */ new Map();
          this._session = rootKey + "/" + uniqueId();
          this._ptrFilterFunc = ptrFilterFunc;
          this._processPendingMutationsTimer = new MicroTaskTimer(
            () => this._processPendingMutations()
          );
          this._undoManager = new UndoManager(this);
          this._createVertIfNeeded(this._rootKey);
          this.sharedQueriesManager = new SharedQueriesManager(this);
          this._repoById = /* @__PURE__ */ new Map();
          this._backup = new IDBRepositoryBackup(rootKey);
          this._repoClients = /* @__PURE__ */ new Map();
          this._baseServerUrl = baseServerUrl;
          this._notesSearch = new NoteSearchEngine(this);
          this.repository("/sys/dir");
        }
        close() {
          this.emit(EVENT_VERTEX_SOURCE_CLOSED);
          this._processPendingMutationsTimer.unschedule();
          this._notesSearch.close();
          this._backup.close();
        }
        get adjacencyList() {
          return this._adjList;
        }
        get undoManager() {
          return this._undoManager;
        }
        get rootKey() {
          return this._rootKey;
        }
        get ptrFilterFunc() {
          return this._ptrFilterFunc;
        }
        get isLoading() {
          return false;
        }
        get session() {
          return this._session;
        }
        get noteSearchEngine() {
          return this._notesSearch;
        }
        loadLocalContents() {
          if (!this._loadContentsPromise) {
            this._loadContentsPromise = (async () => {
              for (const [repoId, commits] of Object.entries(
                await this._backup.loadCommits()
              )) {
                this.repository(repoId).persistCommits(commits);
              }
            })();
          }
          return this._loadContentsPromise;
        }
        repository(id) {
          let repo = this._repoById.get(id);
          if (!repo) {
            repo = new Repository(new MemRepoStorage());
            repo.on(EVENT_NEW_COMMIT, (c) => {
              if (!c.key) {
                return;
              }
              const record = repo.recordForCommit(c);
              const ns = record.scheme.namespace;
              if (ns === NS_NOTES && c.timestamp.getTime() < Date.now() - K_HOT_COMMITS_WINDOW_MS) {
                return;
              }
              this.getVertexManager(c.key).scheduleCommitIfNeeded();
              this._repoClients.get(id)?.touch();
            });
            this._repoById.set(id, repo);
            if (this._baseServerUrl) {
              const client = new RepoClient(
                repo,
                // serveAddr/repoId/sync
                appendPathComponent(this._baseServerUrl, id, "sync"),
                kSyncConfigClient
              );
              this._repoClients.set(id, client);
              client.startSyncing();
            }
          }
          return repo;
        }
        keys() {
          return this._vertManagers.keys();
        }
        vertexManagers() {
          return this._vertManagers.values();
        }
        hasVertex(key) {
          if (this._vertManagers.has(key)) {
            return true;
          }
          for (const repo of this._repoById.values()) {
            if (repo.hasKey(key)) {
              return true;
            }
          }
          return false;
        }
        getRootVertex() {
          return this.getVertex(this.rootKey);
        }
        getRootVertexManager() {
          return this.getVertexManager(this.rootKey);
        }
        getVertex(key) {
          return this.getVertexManager(KeyFromVertexId(key)).getVertexProxy();
        }
        createVertex(namespace, initialData, key, local = false) {
          return this._createVertIfNeeded(
            key || uniqueId(),
            namespace,
            initialData,
            local
          ).getVertexProxy();
        }
        getVertexManager(key, discoveredBy) {
          return this._createVertIfNeeded(
            KeyFromVertexId(key),
            discoveredBy || this.rootKey
          );
        }
        _createVertIfNeeded(key, ns, initialData, local = false) {
          let mgr = this._vertManagers.get(key);
          if (mgr === void 0) {
            const scheme = ns !== void 0 ? SchemeManager.instance.getScheme(ns) : void 0;
            const record = scheme !== void 0 ? new Record({
              scheme,
              data: initialData
            }) : void 0;
            mgr = new VertexManager(this, key, record, local);
            this._vertManagers.set(key, mgr);
            mgr.on(
              EVENT_DID_CHANGE,
              (pack, refsChange) => this._vertexDidChange(key, pack, refsChange)
            );
            mgr.on(EVENT_CRITICAL_ERROR, () => this.emit(EVENT_CRITICAL_ERROR));
            this._setupVertexManager(mgr);
          }
          return mgr;
        }
        _setupVertexManager(mgr) {
          const key = mgr.key;
          mgr.on(
            EVENT_DID_CHANGE,
            (pack, refsChange) => this._vertexDidChange(key, pack, refsChange)
          );
          mgr.on(EVENT_CRITICAL_ERROR, () => this.emit(EVENT_CRITICAL_ERROR));
        }
        _vertexDidChange(key, pack, refsChange) {
          const pendingMutations = this._pendingMutations;
          pack = mutationPackAppend(pendingMutations.get(key), pack);
          pendingMutations.set(key, pack);
          this._processPendingMutationsTimer.schedule();
          this.emit(EVENT_VERTEX_DID_CHANGE, key, pack, refsChange);
        }
        _processPendingMutations() {
          if (this._pendingMutations.size > 0) {
            const mutations = new Array(
              this._pendingMutations.size
            );
            let i = 0;
            for (const [key, mut] of this._pendingMutations) {
              mutations[i++] = [this.getVertexManager(key), mut];
            }
            const pendingMutations = Array.from(this._pendingMutations.entries());
            this._pendingMutations.clear();
            this._undoManager.update(mutations);
            for (const [key, pack] of pendingMutations) {
              this.emit(EVENT_VERTEX_CHANGED, key, pack);
            }
          }
        }
        /**
         * Given a source vertex in the graph, this method performs a BFS run starting
         * at the source, and exports all encountered vertices.
         *
         * @param     srcKey The key of the source vertex.
         *
         * @param   distance The maximum distance from the source to search. You must
         *                   ensure a deep enough sub-graph is exported or the
         *                   imported sub-graph will not be usable. This value will
         *                   differ based on the provided source and the desired
         *                   effect during import.
         *
         * @param  excludeNs An optional list of scheme namespaces to skip. Vertices
         *                   matching this list will not be exported regardless of
         *                   their distance from the source.
         *
         * @param editRecord An optional callback where you can apply any cleanups
         *                   to individual records just before they're being encoded.
         *
         * @returns A JSON encoded sub-graph.
         */
        exportSubGraph(srcKey, distance, excludeNs = [], editRecord = () => {
        }, skipMissingRefs = true) {
          const rootKey = this.rootKey;
          const result = {};
          const keysQueue = [[srcKey, 0]];
          const excludedNsSet = new Set(excludeNs);
          const deletedKeys = /* @__PURE__ */ new Set();
          const rewriteKeys = /* @__PURE__ */ new Map();
          rewriteKeys.set(rootKey, "/");
          while (keysQueue.length > 0) {
            const [key, depth] = keysQueue.shift();
            const vert = this.getVertex(key);
            if (depth > distance) {
              break;
            }
            if (key === rootKey) {
              continue;
            }
            if (excludedNsSet.has(vert.namespace)) {
              deletedKeys.add(key);
              continue;
            }
            if (typeof result[key] !== "undefined") {
              continue;
            }
            if (skipMissingRefs) {
              for (const k of vert.outRefs) {
                if (!this.hasVertex(k)) {
                  deletedKeys.add(k);
                }
              }
            }
            const record = vert.record.clone();
            record.rewriteRefs(rewriteKeys, deletedKeys);
            editRecord(record);
            result[key] = record.toJS(false);
            if (depth < distance) {
              const mgr = this.getVertexManager(key);
              for (const [edgeMgr] of unionIter2(mgr.outEdges(), mgr.inEdges())) {
                keysQueue.push([edgeMgr.key, depth + 1]);
              }
            }
          }
          return result;
        }
        /**
         * Given an encoded graph, this method imports it as a local sub graph.
         * This method will create new keys for the imported vertices for a few
         * reasons:
         *
         * - To avoid conflicts with the original, persistent, vertices (to which the
         *   user most likely has no access to).
         *
         * - To allow the same sub-graph to be imported more than once without
         *   overwriting itself.
         *
         * @param encodedGraph An encoded JSON sub-graph.
         * @returns The created vertex managers.
         */
        importSubGraph(encodedGraph, local) {
          const vertManagers = this._vertManagers;
          const decodedGraph = this.decodeGraph(encodedGraph);
          const createdManagers = [];
          for (const [key, record] of decodedGraph) {
            assert(key !== this.rootKey && !vertManagers.has(key));
            const mgr = new VertexManager(this, key, record, local);
            vertManagers.set(key, mgr);
            createdManagers.push(mgr);
          }
          for (const mgr of createdManagers) {
            this._setupVertexManager(mgr);
          }
          return createdManagers;
        }
        decodeGraph(encodedGraph) {
          const result = /* @__PURE__ */ new Map();
          const keysMapping = /* @__PURE__ */ new Map();
          for (const [origKey, encodedRecord] of Object.entries(encodedGraph)) {
            const newKey = uniqueId();
            const record = Record.fromJS(encodedRecord);
            result.set(newKey, record);
            keysMapping.set(origKey, newKey);
          }
          keysMapping.set("/", this.rootKey);
          for (const record of result.values()) {
            record.rewriteRefs(keysMapping);
          }
          return result;
        }
      };
    }
  });

  // net/log-client.ts
  var LogClient;
  var init_log_client = __esm({
    "net/log-client.ts"() {
      init_base_client();
      init_message();
      LogClient = class extends BaseClient {
        constructor(storage, serverUrl, syncConfig) {
          super(serverUrl, syncConfig);
          this.storage = storage;
          this.entries = /* @__PURE__ */ new Map();
          this.loadAllEntries().then(() => {
            this.ready = true;
          });
        }
        buildSyncMessage() {
          return SyncMessage.build(
            this.previousServerFilter,
            this.entries.entries(),
            this.entries.size,
            this.previousServerSize,
            this.syncCycles
          );
        }
        async persistPeerValues(values) {
          const entries = this.entries;
          let persistedCount = 0;
          for (const e of values) {
            if (!entries.has(e.logId)) {
              ++persistedCount;
            }
            entries.set(e.logId, e);
          }
          const writeCount = await this.storage.persistEntries(values);
          return typeof writeCount === "number" ? writeCount : persistedCount;
        }
        async loadAllEntries() {
          const entries = this.entries;
          for await (const e of this.storage.entries()) {
            entries.set(e.logId, e);
          }
        }
        localIds() {
          return this.entries.keys();
        }
        appendEntry(e) {
          this.storage.persistEntries([e]);
          this.entries.set(e.logId, e);
        }
      };
    }
  });

  // web-app/src/core/cfds/react/logger.tsx
  function LoggerProvider({ sessionInfo, children }) {
    const [ctx2, setCtx] = (0, import_react_18_212.useState)({ logger: GlobalLogger });
    (0, import_react_18_212.useEffect)(() => {
      if (!sessionInfo) {
        setCtx({ logger: GlobalLogger });
        return;
      }
      const storage = new LogClientIDBStorage(sessionInfo.userId);
      const client = new LogClient(
        storage,
        "http://localhost",
        kSyncConfigClient
      );
      const streams = [client, new ConsoleLogStream("DEBUG")];
      setGlobalLoggerStreams(streams);
      const unloadHandler = () => {
        resetGlobalLoggerStreams();
        client.close();
        storage.close();
      };
      addEventListener("unload", unloadHandler);
      return () => {
        removeEventListener("unload", unloadHandler);
        GlobalLogger.log({
          severity: "INFO",
          event: "SessionEnd"
        });
        resetGlobalLoggerStreams();
        client.sync().finally(() => {
          client.close();
          storage.close();
        });
      };
    }, [sessionInfo]);
    return /* @__PURE__ */ import_react_18_212.default.createElement(loggerContext.Provider, { value: ctx2 }, children);
  }
  function useLogger() {
    return (0, import_react_18_212.useContext)(loggerContext).logger;
  }
  var import_react_18_212, import_with_async_ittr, loggerContext, K_DB_VERSION2, LogClientIDBStorage;
  var init_logger = __esm({
    "web-app/src/core/cfds/react/logger.tsx"() {
      import_react_18_212 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_with_async_ittr = __require("https://esm.sh/idb@7.1.1/with-async-ittr");
      init_log();
      init_log_client();
      init_base_client();
      init_stream();
      loggerContext = import_react_18_212.default.createContext({
        logger: GlobalLogger
      });
      K_DB_VERSION2 = 1;
      LogClientIDBStorage = class {
        constructor(dbName) {
          this.dbName = dbName;
          this.getDB();
        }
        getDB() {
          if (this._dbPromise === void 0) {
            this._dbPromise = (0, import_with_async_ittr.openDB)(this.dbName, K_DB_VERSION2, {
              upgrade(db) {
                db.createObjectStore("logEntries", { keyPath: "logId" });
              }
            });
          }
          return this._dbPromise;
        }
        async close() {
          if (void 0 === this._dbPromise) {
            return false;
          }
          const db = await this._dbPromise;
          db.close();
          this._dbPromise = void 0;
          return true;
        }
        async delete() {
          await this.close();
          await (0, import_with_async_ittr.deleteDB)(this.dbName);
        }
        async persistEntries(entries) {
          const db = await this.getDB();
          const txn = db.transaction("logEntries", "readwrite", {
            durability: "relaxed"
          });
          const store = txn.objectStore("logEntries");
          const promises = [];
          for (const e of entries) {
            promises.push(
              (async () => {
                try {
                  await store.put(e, e.logId);
                } catch (e2) {
                  log({
                    severity: "ERROR",
                    error: "LoggerWriteFailed",
                    message: e2.message,
                    trace: e2.stack,
                    repo: this.dbName,
                    commit: e2.logId
                  });
                  throw e2;
                }
              })()
            );
          }
          for (const p of promises) {
            await p;
          }
          await txn.done;
        }
        async *entries() {
          const db = await this.getDB();
          const txn = db.transaction("logEntries", "readonly", {
            durability: "relaxed"
          });
          for await (const e of txn.store) {
            yield e.value;
          }
        }
      };
    }
  });

  // web-app/src/core/cfds/react/vertex.ts
  function isRevokedProxy(vertex) {
    try {
      const _ = vertex.key;
      return false;
    } catch (err) {
      if (err instanceof TypeError) {
        return true;
      }
      throw err;
    }
  }
  function register(manager, onChange, keys, opts = EMPTY_OPTS) {
    if (manager === void 0 || manager === null) {
      return;
    }
    let vertex = manager.getVertexProxy();
    const callback = (pack) => {
      let didChange = false;
      if (isRevokedProxy(vertex)) {
        vertex = manager.getVertexProxy();
        didChange = true;
      }
      for (const [field] of mutationPackIter(pack)) {
        if (field === "error" && opts.errorCallback) {
          opts.errorCallback();
        }
        if (!keys || !keys.length || keys.includes(field)) {
          didChange = true;
          break;
        }
      }
      if (didChange) {
        onChange();
      }
    };
    manager.on(EVENT_DID_CHANGE, callback);
    return () => {
      manager.removeListener(EVENT_DID_CHANGE, callback);
    };
  }
  function useVertexByKey(key) {
    const graph = useGraphManager();
    const vertexMng = (0, import_react_18_213.useMemo)(
      () => graph && graph.hasVertex(key) && graph.getVertexManager(key) || void 0,
      [graph, key]
    );
    return useVertex(vertexMng);
  }
  function useVertexManager(id) {
    const graph = useGraphManager();
    if (typeof id === "undefined" || id === null) {
      return id;
    }
    const key = id instanceof VertexManager || id instanceof Vertex ? id.key : id;
    return graph.getVertexManager(key);
  }
  function useVerticesManagers(iter) {
    const graph = useGraphManager();
    if (typeof iter === "undefined" || iter === null) {
      return iter;
    }
    return Array.from(
      mapIterable(iter, (id) => {
        const key = id instanceof VertexManager || id instanceof Vertex ? id.key : id;
        return typeof key === "string" ? graph.getVertexManager(key) : key;
      })
    );
  }
  function usePartialVertex(vertId, keys, opts = EMPTY_OPTS) {
    const [_, setReload] = (0, import_react_18_213.useState)(0);
    if (!vertId) {
      return void 0;
    }
    const vertexMng = useVertexManager(vertId);
    const keysStr = keys.join("-");
    (0, import_react_18_213.useEffect)(() => {
      return register(
        vertexMng,
        () => setReload((x) => x + 1),
        keys,
        opts
      );
    }, [vertexMng, opts, keysStr]);
    return vertexMng ? vertexMng.getVertexProxy() : {};
  }
  function useVertex(vertexId, opts = EMPTY_OPTS) {
    const vertexMng = useVertexManager(vertexId);
    const [_, setReload] = (0, import_react_18_213.useState)(0);
    (0, import_react_18_213.useEffect)(() => {
      return register(vertexMng, () => setReload((x) => x + 1), [], opts);
    }, [vertexMng, opts]);
    return vertexMng?.getVertexProxy();
  }
  function filterFunc(fn) {
    return !!fn;
  }
  function useVertices(vertexManagers, opts = EMPTY_OPTS) {
    return usePartialVertices(vertexManagers, [], opts);
  }
  function usePartialVertices(vertexIds, keys, opts = EMPTY_OPTS) {
    const vertexManagers = useVerticesManagers(vertexIds);
    const [reload, setReload] = (0, import_react_18_213.useState)(0);
    const keysStr = keys.join("-");
    (0, import_react_18_213.useEffect)(() => {
      if (!vertexManagers.length) {
        return;
      }
      const unSubs = vertexManagers.map((m) => {
        return register(
          m,
          () => setReload((x) => x + 1),
          keys,
          opts
        );
      }).filter(filterFunc);
      return () => unSubs.forEach((fn) => fn());
    }, [vertexManagers, opts, keysStr]);
    const result = (0, import_react_18_213.useMemo)(
      () => vertexManagers.map((x) => x instanceof VertexManager ? x.vertex : x),
      [vertexManagers, reload]
    );
    return result;
  }
  function useCurrentUser() {
    const graph = useGraphManager();
    return useVertexByKey(graph.rootKey);
  }
  var import_react_18_213, EMPTY_OPTS;
  var init_vertex2 = __esm({
    "web-app/src/core/cfds/react/vertex.ts"() {
      import_react_18_213 = __require("https://esm.sh/react@18.2.0");
      init_graph();
      init_vertex_manager();
      init_mutations();
      init_vertex();
      init_common();
      EMPTY_OPTS = {};
    }
  });

  // styles/components/logo.tsx
  function LogoIcon({ className }) {
    const styles = useStyles5();
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        role: "img",
        className: cn(styles.logo, className),
        width: "26",
        height: "28",
        viewBox: "0 0 26 28",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, "Ovvio Icon"),
      /* @__PURE__ */ React.createElement("g", { className: cn(styles.icon) }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M14.297 6.97553C17.1308 7.01353 19.8112 7.48984 22.3349 8.40444L25.6283 1.74024C25.9096 1.16933 26.0215 0.574959 25.9967 0C23.8925 0.540996 21.877 1.36583 19.9503 2.47855C17.8037 3.71985 15.9257 5.22477 14.297 6.97553Z",
          fill: "#67B4F0"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M8.69006 14.5074C8.91702 14.6392 9.13199 14.7832 9.35256 14.9231C9.82087 13.6793 10.3963 12.4704 11.0803 11.3003C12.0066 9.71447 13.0846 8.27909 14.2962 6.97553C14.1723 6.97391 14.0492 6.97068 13.9254 6.97068H13.7248C9.3158 6.97068 5.24089 8.05267 1.50082 10.215C0.985364 10.5134 0.486688 10.8296 0 11.1579L0.186204 11.5356C3.21582 11.9787 6.05124 12.9677 8.69006 14.5074Z",
          fill: "#67B4F0"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M11.0812 11.2994C10.3979 12.4696 9.8217 13.6785 9.35339 14.9223C11.9962 16.5744 14.2283 18.6413 16.0496 21.1231L22.3333 8.40444C19.8096 7.48984 17.1292 7.01353 14.2954 6.97553C13.0855 8.27828 12.0074 9.71366 11.0812 11.2994Z",
          fill: "#2B81DF"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M9.35337 14.9223C9.132 14.784 8.91783 14.64 8.69087 14.5066C6.05204 12.9661 3.21503 11.9779 0.187012 11.5348L7.35627 26.0446C7.54168 26.4198 7.78062 26.7352 8.04994 27.0021C7.9013 25.8821 7.82298 24.7386 7.82298 23.5677C7.82538 20.5109 8.33444 17.6297 9.35337 14.9223Z",
          fill: "#2B81DF"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M9.35338 14.9223C8.33445 17.6305 7.82458 20.5109 7.82458 23.5685C7.82458 24.7386 7.9013 25.8829 8.05155 27.0029C9.66025 28.5968 12.5141 28.2814 13.6185 26.0454L16.0511 21.1239C14.2282 18.6405 11.9962 16.5744 9.35338 14.9223Z",
          fill: "#105CD1"
        }
      ))
    );
  }
  function LogoText({ className }) {
    const styles = useStyles5();
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        role: "img",
        className: cn(styles.logo, className),
        width: "120",
        height: "28",
        viewBox: "0 0 120 28",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, "Ovvio Logo"),
      /* @__PURE__ */ React.createElement("g", { className: cn(styles.ovvioText) }, /* @__PURE__ */ React.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M38.2802 28C43.5175 28 47.5596 24.1234 47.5596 18.6958C47.5596 13.2681 43.5175 9.42605 38.2802 9.42605C33.0773 9.42605 29 13.2681 29 18.6958C29 24.1234 33.0781 28 38.2802 28ZM38.2802 14.3607C40.3188 14.3607 42.2168 15.7355 42.2168 18.6958C42.2168 21.6561 40.3188 23.0661 38.2802 23.0661C36.2767 23.0661 34.3436 21.6208 34.3436 18.6958C34.3436 15.7355 36.2767 14.3607 38.2802 14.3607Z",
          fill: "#262626"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M79.1872 27.4717V27.4717C77.5835 27.4717 76.1381 26.5002 75.5289 25.0124L69.365 9.95511H75.1643L79.2064 20.8457L82.9327 9.95511H88.557L82.8824 24.9162C82.2995 26.4545 80.8285 27.4717 79.1872 27.4717Z",
          fill: "#262626"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M58.2245 27.4717V27.4717C56.6207 27.4717 55.1753 26.5002 54.5661 25.0124L48.4022 9.95511H54.2015L58.2436 20.8457L61.97 9.95511H67.5942L61.9196 24.9162C61.3368 26.4545 59.8666 27.4717 58.2245 27.4717Z",
          fill: "#262626"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M92.2081 27.4717V9.95511H97.551V27.4717H92.2081Z",
          fill: "#262626"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M110.721 28C115.958 28 120 24.1234 120 18.6958C120 13.2681 115.958 9.42605 110.721 9.42605C105.518 9.42605 101.44 13.2681 101.44 18.6958C101.44 24.1234 105.519 28 110.721 28ZM110.721 14.3607C112.759 14.3607 114.657 15.7355 114.657 18.6958C114.657 21.6561 112.759 23.0661 110.721 23.0661C108.717 23.0661 106.784 21.6208 106.784 18.6958C106.784 15.7355 108.717 14.3607 110.721 14.3607Z",
          fill: "#262626"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "94.88",
          cy: "3.37395",
          rx: "3.36495",
          ry: "3.37395",
          fill: "#262626"
        }
      ))
    );
  }
  var useStyles5;
  var init_logo = __esm({
    "styles/components/logo.tsx"() {
      init_styleguide();
      init_css_objects();
      init_responsive();
      init_layout();
      useStyles5 = makeStyles(
        (theme) => ({
          logoRoot: {
            alignItems: "center",
            basedOn: [layout.row]
          },
          logo: {
            height: styleguide.gridbase * 4,
            [MediaQueries.TabletAndMobile]: {
              height: styleguide.gridbase * 2.5
            },
            overflowY: "hidden"
          },
          icon: {},
          ovvioText: {
            transform: "translate(-26px, 0)",
            opacity: 1,
            ...styleguide.transition.standard,
            transitionProperty: "transform, opacity"
          },
          textHidden: {
            opacity: 0,
            transform: "translate(-14px, 100%)"
          }
        }),
        "logo_d20958"
      );
    }
  });

  // web-app/src/app/loading-view.tsx
  function LoadingView() {
    const styles = useStyles6();
    return /* @__PURE__ */ import_react_18_214.default.createElement("div", { className: cn(styles.logo) }, /* @__PURE__ */ import_react_18_214.default.createElement("div", { className: cn(styles.animated) }, /* @__PURE__ */ import_react_18_214.default.createElement(LogoIcon, null)));
  }
  var import_react_18_214, breath, useStyles6;
  var init_loading_view = __esm({
    "web-app/src/app/loading-view.tsx"() {
      import_react_18_214 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_logo();
      init_css_objects();
      breath = keyframes({
        from: {
          transform: "scale(1.5)",
          opacity: 0.8
        },
        to: {
          transform: "scale(1.8)",
          opacity: 1
        }
      });
      useStyles6 = makeStyles((theme, resolveClass) => ({
        logo: {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          ...styleguide.transition.standard,
          transitionDuration: "1000ms",
          transitionProperty: "all"
        },
        animated: {
          animation: `1s ${breath} infinite both`,
          animationDirection: "alternate"
        }
      }));
    }
  });

  // styles/components/layer.tsx
  function Layer({ children, priority = 0 }) {
    const zIndex2 = (0, import_react_18_215.useContext)(context) + priority;
    const newZIndex = zIndex2 * 10;
    return /* @__PURE__ */ import_react_18_215.default.createElement(context.Provider, { value: newZIndex }, children({ zIndex: zIndex2 }));
  }
  var import_react_18_215, context;
  var init_layer = __esm({
    "styles/components/layer.tsx"() {
      import_react_18_215 = __toESM(__require("https://esm.sh/react@18.2.0"));
      context = import_react_18_215.default.createContext(1);
    }
  });

  // styles/components/texts.tsx
  var import_react_18_216, useStyles7, H12, H22, H32, H42, Text2, Bold2;
  var init_texts = __esm({
    "styles/components/texts.tsx"() {
      import_react_18_216 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      useStyles7 = makeStyles(
        (theme) => ({
          h1: {
            margin: 0,
            padding: 0,
            fontSize: 40,
            fontWeight: "600",
            fontStyle: "normal",
            fontStretch: "normal",
            lineHeight: "normal",
            letterSpacing: "normal",
            color: theme.background.text
          },
          h2: {
            margin: 0,
            padding: 0,
            fontSize: 30,
            fontWeight: "bold",
            fontStyle: "normal",
            fontStretch: "normal",
            lineHeight: "normal",
            letterSpacing: "normal",
            color: theme.background.text
          },
          h3: {
            margin: 0,
            padding: 0,
            fontSize: 20,
            fontWeight: "bold",
            fontStyle: "normal",
            fontStretch: "normal",
            lineHeight: "normal",
            letterSpacing: "normal",
            color: theme.background.text
          },
          h4: {
            margin: 0,
            padding: 0,
            fontSize: 16,
            fontWeight: "bold",
            fontStyle: "normal",
            fontStretch: "normal",
            lineHeight: "normal",
            letterSpacing: "normal",
            color: theme.background.text
          },
          text: {
            fontSize: 14
          },
          bold: {
            fontSize: 16,
            lineHeight: 1.5
          }
        }),
        "texts_8b5438"
      );
      H12 = import_react_18_216.default.forwardRef(
        ({ className, children, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("h1", { ref, className: cn(className, styles.h1), ...rest }, children);
        }
      );
      H22 = import_react_18_216.default.forwardRef(
        ({ className, children, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("h2", { className: cn(className, styles.h2), ...rest, ref }, children);
        }
      );
      H32 = import_react_18_216.default.forwardRef(
        ({ className, children, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("h3", { className: cn(className, styles.h3), ...rest, ref }, children);
        }
      );
      H42 = import_react_18_216.default.forwardRef(
        ({ className, children, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("h4", { className: cn(className, styles.h4), ...rest, ref }, children);
        }
      );
      Text2 = import_react_18_216.default.forwardRef(
        ({ className, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("span", { className: cn(className, styles.text), ...rest, ref });
        }
      );
      Bold2 = import_react_18_216.default.forwardRef(
        ({ className, children, ...rest }, ref) => {
          const styles = useStyles7();
          return /* @__PURE__ */ import_react_18_216.default.createElement("span", { className: cn(className, styles.bold), ...rest, ref }, children);
        }
      );
    }
  });

  // web-app/src/core/cfds/react/query.ts
  function useQuery2(query, closeOnCleanup = true) {
    const [counter, setCounter] = (0, import_react_18_217.useState)(0);
    assert(query instanceof Query);
    (0, import_react_18_217.useEffect)(() => {
      const startTime = Date.now();
      const cleanup = query.onResultsChanged(() => {
        if (!query.isLoading || Date.now() - startTime > 500) {
          setCounter(counter + 1);
        }
      });
      return () => {
        cleanup();
        if (closeOnCleanup && !query.isLocked) {
          query.close();
        }
      };
    }, [query]);
    return query;
  }
  function useExistingQuery(query, opts) {
    const logger = useLogger();
    const [result, setResult] = (0, import_react_18_217.useState)(null);
    const mapResult = opts?.mapResult;
    (0, import_react_18_217.useEffect)(() => {
      const listener = () => {
        logger.log({
          severity: "INFO",
          name: "QueryFired",
          value: 1,
          unit: "Count",
          queryName: opts?.name || query.name || "Unknown"
        });
        const results = mapResult ? mapResult(query.results) : query.results;
        setResult({
          loading: query.isLoading,
          results,
          query
        });
      };
      query.on(EVENT_QUERY_RESULTS_CHANGED, listener);
      if (!query.isLoading) {
        const results = mapResult ? mapResult(query.results) : query.results;
        setResult({
          loading: query.isLoading,
          results,
          query
        });
      }
      return () => {
        query.removeListener(EVENT_QUERY_RESULTS_CHANGED, listener);
      };
    }, [query]);
    return result;
  }
  function useSharedQuery(name) {
    const graph = useGraphManager();
    const q = graph.sharedQueriesManager[name];
    return useQuery2(q);
  }
  var import_react_18_217;
  var init_query2 = __esm({
    "web-app/src/core/cfds/react/query.ts"() {
      import_react_18_217 = __require("https://esm.sh/react@18.2.0");
      init_scheme_types();
      init_query();
      init_graph();
      init_logger();
      init_error();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/toolbar/changes-indicator/index.tsx
  function ChangesIndicator() {
    const styles = useStyles8();
    const hasPendingChangesQuery = useSharedQuery("hasPendingChanges");
    const hasPendingChanges = hasPendingChangesQuery.count > 0;
    return /* @__PURE__ */ import_react_18_218.default.createElement("div", { className: cn(styles.indicator) }, /* @__PURE__ */ import_react_18_218.default.createElement(Text2, null, hasPendingChanges ? "Syncing..." : "Updated Just Now"));
  }
  var import_react_18_218, useStyles8;
  var init_changes_indicator = __esm({
    "web-app/src/app/workspace-content/workspace-view/toolbar/changes-indicator/index.tsx"() {
      import_react_18_218 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_texts();
      init_css_objects();
      init_query2();
      useStyles8 = makeStyles((theme) => ({
        indicator: {
          color: theme.background.placeholderText,
          whiteSpace: "nowrap",
          marginLeft: styleguide.gridbase * 3,
          marginRight: styleguide.gridbase * 3
        }
      }));
    }
  });

  // styles/components/icons/IconBase.tsx
  var import_react_18_219, useStyles9, IconBase, IconBase_default;
  var init_IconBase = __esm({
    "styles/components/icons/IconBase.tsx"() {
      import_react_18_219 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      useStyles9 = makeStyles(
        {
          icon: {
            basedOn: [layout.column, layout.centerCenter],
            pointerEvents: "none"
          },
          small: {
            width: styleguide.gridbase * 2,
            height: styleguide.gridbase * 2
          },
          big: {
            width: styleguide.gridbase * 3,
            height: styleguide.gridbase * 3
          },
          bigger: {
            width: styleguide.gridbase * 4,
            height: styleguide.gridbase * 4
          }
        },
        "IconBase_f63d61"
      );
      IconBase = import_react_18_219.default.forwardRef(function({ children, size, className = "", style = {} }, ref) {
        const styles = useStyles9();
        return /* @__PURE__ */ import_react_18_219.default.createElement(
          "div",
          {
            className: cn(className, styles.icon, styles[size] || styles.small),
            style,
            ref
          },
          children
        );
      });
      IconBase_default = IconBase;
    }
  });

  // styles/components/icons/IconAdd.tsx
  var import_react_18_220;
  var init_IconAdd = __esm({
    "styles/components/icons/IconAdd.tsx"() {
      import_react_18_220 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
    }
  });

  // styles/components/icons/IconCreateNew.tsx
  var import_react_18_221, IconCreateNew_default;
  var init_IconCreateNew = __esm({
    "styles/components/icons/IconCreateNew.tsx"() {
      import_react_18_221 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconCreateNew_default = import_react_18_221.default.forwardRef(
        function IconCreateNew({ fill = "#11082B", opacity = 0.6, className = "" }, ref) {
          return /* @__PURE__ */ import_react_18_221.default.createElement(IconBase_default, { size: "big", className, ref }, /* @__PURE__ */ import_react_18_221.default.createElement(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              xmlnsXlink: "http://www.w3.org/1999/xlink",
              width: "18",
              height: "18",
              viewBox: "0 0 18 18"
            },
            /* @__PURE__ */ import_react_18_221.default.createElement("defs", null, /* @__PURE__ */ import_react_18_221.default.createElement(
              "path",
              {
                id: "create-new",
                d: "M18.462 3A2.544 2.544 0 0 1 21 5.538v12.924A2.544 2.544 0 0 1 18.462 21H5.538A2.538 2.538 0 0 1 3 18.462V5.538C3 4.138 4.134 3 5.538 3h12.924zm-.098 1.5H5.636c-.629 0-1.136.51-1.136 1.136v12.728c0 .627.507 1.136 1.136 1.136h12.728c.623 0 1.136-.513 1.136-1.136V5.636c0-.623-.513-1.136-1.136-1.136zM17 13h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"
              }
            )),
            /* @__PURE__ */ import_react_18_221.default.createElement(
              "use",
              {
                fill,
                fillOpacity: opacity,
                fillRule: "nonzero",
                transform: "translate(-3 -3)",
                xlinkHref: "#create-new"
              }
            )
          ));
        }
      );
    }
  });

  // styles/components/icons/IconFilter.tsx
  var init_IconFilter = __esm({
    "styles/components/icons/IconFilter.tsx"() {
      init_theme();
      init_IconBase();
    }
  });

  // styles/components/icons/IconMenu.tsx
  var import_react_18_222, useMenuStyles;
  var init_IconMenu = __esm({
    "styles/components/icons/IconMenu.tsx"() {
      import_react_18_222 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      init_css_objects();
      init_styleguide();
      init_theme();
      useMenuStyles = makeStyles(
        {
          path: {
            ...styleguide.transition.standard,
            transitionProperty: "d"
          }
        },
        "IconMenu_e6eeaa"
      );
    }
  });

  // styles/components/icons/IconNotifications.tsx
  var import_react_18_223;
  var init_IconNotifications = __esm({
    "styles/components/icons/IconNotifications.tsx"() {
      import_react_18_223 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_IconBase();
    }
  });

  // styles/components/icons/IconSearch.tsx
  var import_react_18_224;
  var init_IconSearch = __esm({
    "styles/components/icons/IconSearch.tsx"() {
      import_react_18_224 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_IconBase();
    }
  });

  // styles/components/icons/IconSettings.tsx
  var import_react_18_225;
  var init_IconSettings = __esm({
    "styles/components/icons/IconSettings.tsx"() {
      import_react_18_225 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_IconBase();
    }
  });

  // styles/components/icons/IconTag.tsx
  var init_IconTag = __esm({
    "styles/components/icons/IconTag.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconAlignCenter.tsx
  var init_IconAlignCenter = __esm({
    "styles/components/icons/IconAlignCenter.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconAlignLeft.tsx
  var import_react_18_226;
  var init_IconAlignLeft = __esm({
    "styles/components/icons/IconAlignLeft.tsx"() {
      import_react_18_226 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
    }
  });

  // styles/components/icons/IconAlignRight.tsx
  var init_IconAlignRight = __esm({
    "styles/components/icons/IconAlignRight.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconBold.tsx
  var IconBold, IconBold_default;
  var init_IconBold = __esm({
    "styles/components/icons/IconBold.tsx"() {
      init_IconBase();
      IconBold = ({ fill = "#FFF", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            d: "M8 17V7h3.604c.55 0 1.059.038 1.527.115.469.077.878.212 1.229.406.35.195.625.45.824.767.2.317.299.716.299 1.197a2.558 2.558 0 0 1-.372 1.304 2.405 2.405 0 0 1-.428.52 1.57 1.57 0 0 1-.574.338v.062c.27.06.517.156.744.283.226.128.425.29.598.483.172.195.307.422.404.683.097.26.145.56.145.897 0 .511-.105.951-.315 1.32-.21.367-.501.672-.873.912s-.805.419-1.3.537a6.92 6.92 0 0 1-1.6.176H8zm2.376-5.997h1.115c.582 0 1.005-.107 1.269-.322.264-.215.396-.501.396-.859 0-.388-.135-.665-.404-.828-.27-.164-.685-.246-1.245-.246h-1.131v2.255zm0 4.249h1.341c1.304 0 1.956-.45 1.956-1.35 0-.44-.162-.754-.485-.943-.323-.19-.814-.284-1.47-.284h-1.342v2.577z"
          }
        ))
      ));
      IconBold_default = IconBold;
    }
  });

  // styles/components/icons/IconBulletList.tsx
  var IconBulletList, IconBulletList_default;
  var init_IconBulletList = __esm({
    "styles/components/icons/IconBulletList.tsx"() {
      init_IconBase();
      IconBulletList = ({ fill = "#FFF", className }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            d: "M8.4 15.889H18V17H8.4v-1.111zm0-2.222H18v1.11H8.4v-1.11zm0-2.223H18v1.112H8.4v-1.112zm0-2.222H18v1.111H8.4v-1.11zM8.4 7H18v1.111H8.4V7zM6 15.889h1.2V17H6v-1.111zm0-2.222h1.2v1.11H6v-1.11zm0-2.223h1.2v1.112H6v-1.112zm0-2.222h1.2v1.111H6v-1.11zM6 7h1.2v1.111H6V7z"
          }
        ))
      ));
      IconBulletList_default = IconBulletList;
    }
  });

  // styles/components/icons/IconItalic.tsx
  var IconItalic, IconItalic_default;
  var init_IconItalic = __esm({
    "styles/components/icons/IconItalic.tsx"() {
      init_IconBase();
      IconItalic = ({ fill = "#FFF", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement("path", { fill, d: "M9 17l3.358-10H14l-3.358 10z" }))
      ));
      IconItalic_default = IconItalic;
    }
  });

  // styles/components/icons/IconLink.tsx
  var import_react_18_227, IconLink, IconLink_default;
  var init_IconLink = __esm({
    "styles/components/icons/IconLink.tsx"() {
      import_react_18_227 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconLink = ({
        fill = "#CAC9D2",
        className,
        width = "11",
        height = "6"
      }) => /* @__PURE__ */ import_react_18_227.default.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ import_react_18_227.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width,
          height,
          viewBox: "0 0 11 6"
        },
        /* @__PURE__ */ import_react_18_227.default.createElement("g", { fill: "none", fillRule: "nonzero" }, /* @__PURE__ */ import_react_18_227.default.createElement("path", { d: "M14-5H-2v16h16z" }), /* @__PURE__ */ import_react_18_227.default.createElement(
          "path",
          {
            fill,
            d: "M5 4.286h1.714a.428.428 0 1 0 0-.857H5a1.287 1.287 0 0 1-1.286-1.286c0-.709.577-1.286 1.286-1.286h3.857c.709 0 1.286.577 1.286 1.286 0 .408-.199.797-.533 1.04a.43.43 0 0 0 .505.693A2.15 2.15 0 0 0 11 2.143 2.145 2.145 0 0 0 8.857 0H5a2.145 2.145 0 0 0-2.143 2.143c0 1.181.961 2.143 2.143 2.143zM2.857 6h3.857a2.145 2.145 0 0 0 2.143-2.143 2.145 2.145 0 0 0-2.143-2.143H5a.428.428 0 1 0 0 .857h1.714c.71 0 1.286.577 1.286 1.286 0 .709-.577 1.286-1.286 1.286H2.857a1.287 1.287 0 0 1-1.286-1.286c0-.408.2-.797.533-1.04a.429.429 0 0 0-.504-.693 2.15 2.15 0 0 0-.886 1.733C.714 5.04 1.676 6 2.857 6z"
          }
        ))
      ));
      IconLink_default = IconLink;
    }
  });

  // styles/components/icons/IconNumberList.tsx
  var IconNumberList, IconNumberList_default;
  var init_IconNumberList = __esm({
    "styles/components/icons/IconNumberList.tsx"() {
      init_IconBase();
      IconNumberList = ({ fill = "#FFF", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            d: "M8.544 15.713h9.6v1.017h-9.6v-1.017zm0-2.034h9.6v1.017h-9.6V13.68zm0-2.034h9.6v1.017h-9.6v-1.017zm0-2.033h9.6v1.016h-9.6V9.612zm0-2.034h9.6v1.017h-9.6V7.578zm-3.37 1.601v-.408h.5v-1.26h-.431V7.2c.125-.023.232-.05.319-.082s.171-.071.253-.117h.392v1.771h.431v.408H5.174zm-.12 3.89v-.288c.148-.13.282-.252.404-.366.122-.113.228-.22.316-.319.088-.1.157-.192.206-.278a.493.493 0 0 0 .075-.245c0-.108-.03-.19-.087-.246a.33.33 0 0 0-.24-.084.388.388 0 0 0-.224.067 1.22 1.22 0 0 0-.185.156l-.29-.27c.114-.115.23-.202.348-.26a.95.95 0 0 1 .424-.087c.113 0 .217.016.31.05.093.032.173.08.24.14.068.06.12.133.157.218a.717.717 0 0 1-.008.565c-.04.094-.096.19-.165.284-.068.095-.147.19-.235.285-.088.095-.18.188-.274.28a5.2 5.2 0 0 1 .194-.019c.071-.006.135-.008.19-.008h.464v.425h-1.62zM5.801 17c-.189 0-.348-.028-.478-.084A.91.91 0 0 1 5 16.69l.246-.32c.07.065.147.118.23.159a.61.61 0 0 0 .274.062.487.487 0 0 0 .272-.067.215.215 0 0 0 .101-.19.305.305 0 0 0-.027-.131.223.223 0 0 0-.096-.098.61.61 0 0 0-.188-.062 1.735 1.735 0 0 0-.308-.022v-.357c.104 0 .19-.007.259-.02a.502.502 0 0 0 .167-.06.24.24 0 0 0 .09-.093.256.256 0 0 0 .027-.119.223.223 0 0 0-.072-.177c-.048-.042-.119-.063-.21-.063a.478.478 0 0 0-.223.051 1.205 1.205 0 0 0-.209.141l-.268-.309c.107-.087.218-.155.335-.204a.997.997 0 0 1 .39-.074c.118 0 .227.013.324.04a.73.73 0 0 1 .25.116.536.536 0 0 1 .22.441.435.435 0 0 1-.1.29.718.718 0 0 1-.284.194v.014a.71.71 0 0 1 .327.187.473.473 0 0 1 .13.345c0 .1-.024.19-.07.27a.62.62 0 0 1-.185.199.882.882 0 0 1-.271.123A1.237 1.237 0 0 1 5.8 17z"
          }
        ))
      ));
      IconNumberList_default = IconNumberList;
    }
  });

  // styles/components/icons/IconStrikethrough.tsx
  var import_react_18_228, IconStrikethrough, IconStrikethrough_default;
  var init_IconStrikethrough = __esm({
    "styles/components/icons/IconStrikethrough.tsx"() {
      import_react_18_228 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconStrikethrough = ({ fill = "#FFF", className = "" }) => /* @__PURE__ */ import_react_18_228.default.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ import_react_18_228.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ import_react_18_228.default.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ import_react_18_228.default.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ import_react_18_228.default.createElement(
          "path",
          {
            fill,
            d: "M12.092 13.034H8v-.67h2.552l-.19-.084a4.535 4.535 0 0 1-.697-.368 3.057 3.057 0 0 1-.624-.531 2.46 2.46 0 0 1-.447-.723 2.48 2.48 0 0 1-.169-.944c0-.384.081-.74.242-1.07a2.71 2.71 0 0 1 .668-.862 3.08 3.08 0 0 1 1.019-.576A3.929 3.929 0 0 1 11.652 7c.557 0 1.095.11 1.613.332.519.221.963.519 1.335.892l-.865 1.092a4.27 4.27 0 0 0-.968-.605 2.72 2.72 0 0 0-1.115-.221c-.46 0-.826.1-1.1.302a.978.978 0 0 0-.41.833c0 .187.04.347.124.48.083.132.196.25.337.354.142.103.306.196.492.28.185.084.376.165.572.243l1.305.546c.284.118.543.256.777.413.187.125.354.266.5.422H16v.67h-1.306a2.748 2.748 0 0 1 .214 1.105c0 .394-.078.763-.235 1.107a2.655 2.655 0 0 1-.682.907c-.298.26-.66.467-1.085.62a4.265 4.265 0 0 1-1.445.228 4.897 4.897 0 0 1-1.87-.369A4.877 4.877 0 0 1 8 15.584l.997-1.165c.343.324.734.587 1.174.789.44.202.88.302 1.32.302.547 0 .963-.113 1.246-.339.284-.226.426-.526.426-.9 0-.196-.037-.363-.11-.501a1.134 1.134 0 0 0-.308-.361 2.65 2.65 0 0 0-.47-.288c-.059-.03-.12-.058-.183-.087z"
          }
        ))
      ));
      IconStrikethrough_default = IconStrikethrough;
    }
  });

  // styles/components/icons/IconTask.tsx
  var IconTask, IconTask_default;
  var init_IconTask = __esm({
    "styles/components/icons/IconTask.tsx"() {
      init_IconBase();
      IconTask = ({ fill = "#CFCED5", className = "" }) => {
        return /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          },
          /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
            "path",
            {
              fill,
              d: "M6 6h12v12H6V6zm10.883 1.153h-9.73v9.73h9.73v-9.73zm-6.162 6.054L15.8 8.09v2.739l-5.08 5.08a162.95 162.95 0 0 1-2.523-2.486v-2.702l2.523 2.486z"
            }
          ))
        ));
      };
      IconTask_default = IconTask;
    }
  });

  // styles/components/icons/IconUnderline.tsx
  var IconUnderline, IconUnderline_default;
  var init_IconUnderline = __esm({
    "styles/components/icons/IconUnderline.tsx"() {
      init_IconBase();
      IconUnderline = ({ fill = "#FFF", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            d: "M11.828 16.452c-1.242 0-2.19-.356-2.845-1.067C8.328 14.673 8 13.539 8 11.982V7h2.17v5.196c0 .91.142 1.547.426 1.907.284.361.694.541 1.232.541s.953-.18 1.247-.54c.293-.361.44-.997.44-1.908V7h2.082v4.982c0 1.557-.32 2.69-.96 3.403-.64.711-1.577 1.067-2.809 1.067zm-3.828.9h8V18H8v-.647z"
          }
        ))
      ));
      IconUnderline_default = IconUnderline;
    }
  });

  // styles/components/icons/IconDropDown.tsx
  var init_IconDropDown = __esm({
    "styles/components/icons/IconDropDown.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconGoogle.tsx
  var init_IconGoogle = __esm({
    "styles/components/icons/IconGoogle.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconNote.tsx
  var init_IconNote = __esm({
    "styles/components/icons/IconNote.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconDropDownArrow.tsx
  var IconDropDownArrow, IconDropDownArrow_default;
  var init_IconDropDownArrow = __esm({
    "styles/components/icons/IconDropDownArrow.tsx"() {
      init_IconBase();
      IconDropDownArrow = ({ fill = "#11082B", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "small", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            d: "M12 16l-6-5.668L7.41 9 12 13.327 16.59 9 18 10.332z"
          }
        ))
      ));
      IconDropDownArrow_default = IconDropDownArrow;
    }
  });

  // styles/components/icons/IconTasksTick.tsx
  var import_react_18_229;
  var init_IconTasksTick = __esm({
    "styles/components/icons/IconTasksTick.tsx"() {
      import_react_18_229 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
    }
  });

  // styles/components/icons/IconOverflow.tsx
  var import_react_18_230, IconOverflow, IconOverflow_default;
  var init_IconOverflow = __esm({
    "styles/components/icons/IconOverflow.tsx"() {
      import_react_18_230 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconOverflow = ({ fill = "#C7C7C7", className }) => /* @__PURE__ */ import_react_18_230.default.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ import_react_18_230.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ import_react_18_230.default.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ import_react_18_230.default.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ import_react_18_230.default.createElement(
          "path",
          {
            fill,
            d: "M14 18.222c0 .982-.895 1.778-2 1.778s-2-.796-2-1.778.895-1.778 2-1.778 2 .796 2 1.778zM14 12c0 .982-.895 1.778-2 1.778s-2-.796-2-1.778.895-1.778 2-1.778 2 .796 2 1.778zm0-6.222c0 .982-.895 1.778-2 1.778s-2-.796-2-1.778S10.895 4 12 4s2 .796 2 1.778z"
          }
        ))
      ));
      IconOverflow_default = IconOverflow;
    }
  });

  // styles/components/icons/IconClose.tsx
  var import_react_18_231, IconClose, IconClose_default;
  var init_IconClose = __esm({
    "styles/components/icons/IconClose.tsx"() {
      import_react_18_231 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconClose = ({
        fill = "#D7E3F1",
        className,
        size = "big"
      }) => /* @__PURE__ */ import_react_18_231.default.createElement(IconBase_default, { size, className }, /* @__PURE__ */ import_react_18_231.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ import_react_18_231.default.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ import_react_18_231.default.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ import_react_18_231.default.createElement(
          "path",
          {
            fill,
            d: "M12 10.769l4.514-4.514a.87.87 0 1 1 1.23 1.231L13.232 12l4.514 4.514a.87.87 0 0 1-1.231 1.231L12 13.231l-4.514 4.514a.87.87 0 0 1-1.23-1.231L10.768 12 6.255 7.486a.87.87 0 1 1 1.231-1.23L12 10.768z"
          }
        ))
      ));
      IconClose_default = IconClose;
    }
  });

  // styles/components/icons/IconDelete.tsx
  var init_IconDelete = __esm({
    "styles/components/icons/IconDelete.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconEdit.tsx
  var init_IconEdit = __esm({
    "styles/components/icons/IconEdit.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconViewNote.tsx
  var init_IconViewNote = __esm({
    "styles/components/icons/IconViewNote.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconKeyboard.tsx
  var IconKeyboard, IconKeyboard_default;
  var init_IconKeyboard = __esm({
    "styles/components/icons/IconKeyboard.tsx"() {
      init_IconBase();
      IconKeyboard = ({
        fill = "#9CB2CD",
        className = "",
        pathClassName = ""
      }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "32",
          height: "32",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement(
          "path",
          {
            className: pathClassName,
            fill,
            fillRule: "evenodd",
            d: "M15.614 10.586v-.96c0-.17.133-.307.297-.307h.93c.163 0 .296.137.296.306v.961a.302.302 0 0 1-.297.306h-.929a.302.302 0 0 1-.297-.306zm1.292 1.576v.96c0 .17.133.307.297.307h.938a.302.302 0 0 0 .297-.306v-.961a.302.302 0 0 0-.297-.306h-.938a.302.302 0 0 0-.297.306zm-2.586 0v.96c0 .17.133.307.297.307h.932a.302.302 0 0 0 .297-.306v-.961a.302.302 0 0 0-.297-.306h-.932a.302.302 0 0 0-.297.306zm4.174-1.27h.932a.302.302 0 0 0 .297-.306v-.96a.302.302 0 0 0-.297-.307h-.932a.302.302 0 0 0-.297.306v.961c0 .17.133.306.297.306zm-.056 3.485h-.918a.302.302 0 0 0-.297.306v.958c0 .169.133.306.297.306h.918a.302.302 0 0 0 .296-.306v-.958a.302.302 0 0 0-.297-.306zm-5.113-3.485h.933a.302.302 0 0 0 .296-.306v-.96a.302.302 0 0 0-.296-.307h-.933a.302.302 0 0 0-.297.306v.961c0 .17.133.306.297.306zm2.672 3.485H9.038a.302.302 0 0 0-.296.306v.958c0 .169.132.306.296.306H16a.302.302 0 0 0 .297-.306v-.958a.302.302 0 0 0-.297-.306h-.003zm-8.52 0h-.915a.302.302 0 0 0-.296.306v.958c0 .169.133.306.296.306h.93a.302.302 0 0 0 .297-.306v-.958a.31.31 0 0 0-.092-.22.292.292 0 0 0-.217-.086h-.003zm-.915-2.215v.96c0 .17.133.307.297.307h.933a.302.302 0 0 0 .296-.306v-.961a.302.302 0 0 0-.296-.306h-.933a.302.302 0 0 0-.296.306zm-.994-1.27H6.5a.302.302 0 0 0 .297-.306v-.96a.302.302 0 0 0-.297-.307h-.926a.302.302 0 0 0-.297.306v.961c0 .17.133.306.297.306h-.006zm6.163 1.27v.96c0 .17.133.307.297.307h.932a.302.302 0 0 0 .297-.306v-.961a.302.302 0 0 0-.297-.306h-.926a.302.302 0 0 0-.297.306h-.006zM22 7.612v9.776a.603.603 0 0 1-.594.612H3.594A.603.603 0 0 1 3 17.388V7.612C3 7.274 3.266 7 3.594 7h17.812c.328 0 .594.274.594.612zm-1.188.612H4.188v8.552h16.625V8.224zM8.16 10.892h.929a.302.302 0 0 0 .297-.306v-.96a.302.302 0 0 0-.297-.307h-.93a.302.302 0 0 0-.296.306v.961c0 .17.133.306.297.306zm2.582 0h.933a.302.302 0 0 0 .297-.306v-.96a.302.302 0 0 0-.297-.307h-.933a.302.302 0 0 0-.296.306v.961c0 .17.133.306.296.306zm-1.588 1.27v.96c0 .17.133.307.297.307h.932a.302.302 0 0 0 .297-.306v-.961a.302.302 0 0 0-.297-.306h-.932a.302.302 0 0 0-.297.306z"
          }
        )
      ));
      IconKeyboard_default = IconKeyboard;
    }
  });

  // styles/components/icons/IconBack.tsx
  var import_react_18_232, IconBack, IconBack_default;
  var init_IconBack = __esm({
    "styles/components/icons/IconBack.tsx"() {
      import_react_18_232 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconBack = ({ fill = "#D7E3F1", className }) => /* @__PURE__ */ import_react_18_232.default.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ import_react_18_232.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ import_react_18_232.default.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ import_react_18_232.default.createElement("path", { fill: "transparent", d: "M0 0h24v24H0z" }), /* @__PURE__ */ import_react_18_232.default.createElement(
          "path",
          {
            fill,
            d: "M9 12l4.858-5L15 8.175 11.291 12 15 15.825 13.858 17z"
          }
        ))
      ));
      IconBack_default = IconBack;
    }
  });

  // styles/components/icons/IconContactUs.tsx
  var import_react_18_233;
  var init_IconContactUs = __esm({
    "styles/components/icons/IconContactUs.tsx"() {
      import_react_18_233 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
    }
  });

  // styles/components/icons/IconCalendar.tsx
  var IconCalendar, IconCalendar_default;
  var init_IconCalendar = __esm({
    "styles/components/icons/IconCalendar.tsx"() {
      init_IconBase();
      IconCalendar = ({ fill = "#9CB2CD", className = "" }) => /* @__PURE__ */ React.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        },
        /* @__PURE__ */ React.createElement(
          "path",
          {
            fill,
            fillRule: "evenodd",
            d: "M5 8.209v9.938C5 19.167 5.854 20 6.902 20h10.196C18.146 20 19 19.167 19 18.147V8.209c0-1.008-.827-1.824-1.854-1.847v1.82c0 .856-.712 1.55-1.59 1.55-.878 0-1.59-.694-1.59-1.55V6.36h-3.929v1.824c0 .855-.712 1.549-1.59 1.549-.878 0-1.59-.694-1.59-1.55V6.366C5.828 6.385 5 7.201 5 8.21zm12.729 4.057v5.88a.62.62 0 0 1-.63.612H6.901a.623.623 0 0 1-.63-.611v-5.881h11.457zM8.447 4c.353 0 .638.278.638.621V8.18a.629.629 0 0 1-.638.621.629.629 0 0 1-.637-.62V4.62c0-.343.285-.621.637-.621zm7.106 0c.352 0 .637.278.637.621V8.18a.629.629 0 0 1-.637.621.629.629 0 0 1-.638-.62V4.62c0-.343.285-.621.638-.621z"
          }
        )
      ));
      IconCalendar_default = IconCalendar;
    }
  });

  // styles/components/icons/IconSorting.tsx
  var import_react_18_234;
  var init_IconSorting = __esm({
    "styles/components/icons/IconSorting.tsx"() {
      import_react_18_234 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_IconBase();
    }
  });

  // styles/components/icons/IconImage.tsx
  var init_IconImage = __esm({
    "styles/components/icons/IconImage.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconAssignee.tsx
  var init_IconAssignee = __esm({
    "styles/components/icons/IconAssignee.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconDueDate.tsx
  var init_IconDueDate = __esm({
    "styles/components/icons/IconDueDate.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconAttachment.tsx
  var import_react_18_235;
  var init_IconAttachment = __esm({
    "styles/components/icons/IconAttachment.tsx"() {
      import_react_18_235 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
    }
  });

  // styles/components/icons/IconCamera.tsx
  var init_IconCamera = __esm({
    "styles/components/icons/IconCamera.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconExportMail.tsx
  var init_IconExportMail = __esm({
    "styles/components/icons/IconExportMail.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconExportPdf.tsx
  var init_IconExportPdf = __esm({
    "styles/components/icons/IconExportPdf.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconDuplicate.tsx
  var init_IconDuplicate = __esm({
    "styles/components/icons/IconDuplicate.tsx"() {
      init_IconBase();
    }
  });

  // styles/components/icons/IconExpander.tsx
  var import_react_18_236, IconExpander, IconExpander_default;
  var init_IconExpander = __esm({
    "styles/components/icons/IconExpander.tsx"() {
      import_react_18_236 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_IconBase();
      IconExpander = ({ fill = "#121212", className }) => /* @__PURE__ */ import_react_18_236.default.createElement(IconBase_default, { size: "big", className }, /* @__PURE__ */ import_react_18_236.default.createElement(
        "svg",
        {
          width: "24",
          height: "24",
          viewBox: "0 0 24 24",
          fill: "none",
          xmlns: "http://www.w3.org/2000/svg"
        },
        /* @__PURE__ */ import_react_18_236.default.createElement(
          "path",
          {
            d: "M16.59 8.59L12 13.17L7.41 8.59L6 10L12 16L18 10L16.59 8.59Z",
            fill,
            fillOpacity: "0.6"
          }
        )
      ));
      IconExpander_default = IconExpander;
    }
  });

  // styles/components/icons/index.ts
  var init_icons = __esm({
    "styles/components/icons/index.ts"() {
      init_IconAdd();
      init_IconCreateNew();
      init_IconFilter();
      init_IconMenu();
      init_IconNotifications();
      init_IconSearch();
      init_IconSettings();
      init_IconTag();
      init_IconAlignCenter();
      init_IconAlignLeft();
      init_IconAlignRight();
      init_IconBold();
      init_IconBulletList();
      init_IconItalic();
      init_IconLink();
      init_IconNumberList();
      init_IconStrikethrough();
      init_IconTask();
      init_IconUnderline();
      init_IconDropDown();
      init_IconGoogle();
      init_IconNote();
      init_IconDropDownArrow();
      init_IconTasksTick();
      init_IconOverflow();
      init_IconClose();
      init_IconDelete();
      init_IconEdit();
      init_IconViewNote();
      init_IconKeyboard();
      init_IconBack();
      init_IconContactUs();
      init_IconCalendar();
      init_IconSorting();
      init_IconImage();
      init_IconAssignee();
      init_IconDueDate();
      init_IconAttachment();
      init_IconCamera();
      init_IconExportMail();
      init_IconExportPdf();
      init_IconDuplicate();
      init_IconExpander();
    }
  });

  // styles/utils/scrolling/index.tsx
  function useScrollingRerendering() {
    const parent = (0, import_react_18_237.useContext)(scrollingContext);
    const el = parent;
    const [offset2, setOffset] = (0, import_react_18_237.useState)(
      () => el ? { x: el.scrollLeft, y: el.scrollTop } : { x: 0, y: 0 }
    );
    (0, import_react_18_237.useEffect)(() => {
      if (el) {
        const handler = () => {
          setOffset(el ? { x: el.scrollLeft, y: el.scrollTop } : { x: 0, y: 0 });
        };
        el.addEventListener("scroll", handler);
        return () => {
          el.removeEventListener("scroll", handler);
        };
      }
    }, [el]);
    return offset2;
  }
  function Scroller({
    children
  }) {
    const [el, setEl] = (0, import_react_18_237.useState)();
    return /* @__PURE__ */ import_react_18_237.default.createElement(scrollingContext.Provider, { value: el }, children(setEl));
  }
  var import_react_18_237, scrollingContext;
  var init_scrolling = __esm({
    "styles/utils/scrolling/index.tsx"() {
      import_react_18_237 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_ssr();
      scrollingContext = import_react_18_237.default.createContext(
        isServerSide ? null : document.body
      );
    }
  });

  // styles/components/popper.tsx
  function isOverflowing(style, popper) {
    if (!popper) {
      return [];
    }
    const boundingRect = popper.getBoundingClientRect();
    const { x = 0, y = 0 } = style.transform || {};
    let offsetX = typeof style.left === "number" ? style.left + boundingRect.width * x : window.innerWidth - style.right - (boundingRect.width + boundingRect.width * x);
    let offsetY = typeof style.top === "number" ? style.top + boundingRect.height * y : window.innerHeight - style.bottom - (boundingRect.height + boundingRect.height * y);
    const points = [
      {
        x: offsetX,
        y: offsetY
      },
      {
        x: offsetX + boundingRect.width,
        y: offsetY
      },
      {
        x: offsetX,
        y: offsetY + boundingRect.height
      },
      {
        x: offsetX + boundingRect.width,
        y: offsetY + boundingRect.height
      }
    ];
    const overflow = /* @__PURE__ */ new Set();
    for (let point of points) {
      if (point.x < 0) {
        overflow.add("left");
      }
      if (point.x > window.innerWidth) {
        overflow.add("right");
      }
      if (point.y < 0) {
        overflow.add("top");
      }
      if (point.y > window.innerHeight) {
        overflow.add("bottom");
      }
    }
    return Array.from(overflow);
  }
  function calcFn(fn) {
    return (anchor) => {
      const el = anchor;
      const rect = el.getBoundingClientRect();
      const points = {
        top: rect.top,
        left: rect.left,
        right: window.innerWidth - (rect.left + rect.width),
        bottom: window.innerHeight - (rect.top + rect.height)
      };
      return fn(el, rect, points);
    };
  }
  var import_react_18_238, import_prop_types_15_8, popIn, zIndex, useStyles10, Popper, positionCalculator, PopperElement, popper_default;
  var init_popper = __esm({
    "styles/components/popper.tsx"() {
      import_react_18_238 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_prop_types_15_8 = __toESM(__require("https://esm.sh/prop-types@15.8.1"));
      init_styleguide();
      init_transition();
      init_css_objects();
      init_scrolling();
      init_layer();
      init_ssr();
      popIn = keyframes(
        {
          from: {
            opacity: 0,
            transform: `translateY(${styleguide.gridbase * 1.5}px)`
          },
          to: {
            opacity: 1,
            transform: "translateY(0)"
          }
        },
        "popper_a30987"
      );
      zIndex = 100;
      useStyles10 = makeStyles(
        (theme) => ({
          popper: {
            position: "absolute",
            zIndex
          },
          animator: {
            ...styleguide.transition.standard,
            transitionDuration: `${styleguide.transition.duration.short}ms`,
            transitionProperty: "all"
          },
          exiting: {
            opacity: 0,
            transform: `translateY(${styleguide.gridbase * 1.5}px)`
          },
          removed: {},
          entering: {
            animation: `${popIn} ${styleguide.transition.duration.short}ms ${styleguide.transition.timing.standard} both`
          }
          // visible: {
          //   opacity: 1,
          //   transform: 'translateY(0px)',
          // },
        }),
        "popper_1a09eb"
      );
      Popper = ({
        open,
        animationDuration = styleguide.transition.duration.short,
        className = "",
        anchor,
        ...rest
      }) => {
        const [visibility] = useTransitionedOpen(open && !!anchor, animationDuration);
        if (!anchor || visibility === "REMOVED" /* REMOVED */) {
          return null;
        }
        return createUniversalPortal(
          /* @__PURE__ */ import_react_18_238.default.createElement(
            PopperElement,
            {
              className: cn(className),
              anchor,
              visibility,
              ...rest
            }
          )
        );
      };
      positionCalculator = {
        top: {
          start: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "top left",
                top: points.top,
                left: points.left
              };
            }),
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "bottom left",
                bottom: window.innerHeight - rect.top,
                left: rect.left
              };
            })
          },
          center: {
            in: calcFn((el, rect) => {
              return {
                transformOrigin: "top center",
                top: rect.top,
                left: rect.left,
                transform: { x: -0.25 }
              };
            }),
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "bottom center",
                bottom: window.innerHeight - rect.top,
                left: rect.left + rect.width / 2,
                transform: { x: -0.5 }
              };
            })
          },
          end: {
            in: calcFn((el, rect) => {
              return {
                transformOrigin: "top right",
                top: rect.top,
                right: window.innerWidth - (rect.left + rect.width)
              };
            }),
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "bottom right",
                bottom: window.innerHeight - rect.top,
                right: window.innerWidth - (rect.left + rect.width)
              };
            })
          }
        },
        left: {
          start: {
            in: (...args) => {
              return positionCalculator.top.start.in(...args);
            },
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "top right",
                top: rect.top,
                right: window.innerWidth - rect.left
              };
            })
          },
          center: {
            in: calcFn((el, rect) => {
              return {
                transformOrigin: "left center",
                top: rect.top + rect.height / 2,
                left: rect.left,
                transform: { y: -0.5 }
              };
            }),
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "right center",
                top: rect.top + rect.height / 2,
                right: window.innerWidth - rect.left,
                transform: { y: -0.5 }
              };
            })
          },
          end: {
            in: calcFn((el, rect) => {
              return {
                transformOrigin: "bottom left",
                bottom: window.innerHeight - (rect.top + rect.height),
                left: rect.left
              };
            }),
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "right top",
                bottom: window.innerHeight - (rect.top + rect.height),
                right: window.innerWidth - rect.left
              };
            })
          }
        },
        right: {
          start: {
            in: (...args) => {
              return positionCalculator.top.end.in(...args);
            },
            out: calcFn((el, rect) => {
              return {
                transformOrigin: "left top",
                top: rect.top,
                left: rect.left + rect.width
              };
            })
          },
          center: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                right: points.right,
                top: rect.top + rect.height / 2,
                transform: { y: -0.5 }
              };
            }),
            out: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: rect.left + rect.width,
                top: rect.top + rect.height / 2,
                transform: { y: -0.5 }
              };
            })
          },
          end: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                right: points.right,
                bottom: points.bottom
              };
            }),
            out: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: rect.left + rect.width,
                bottom: points.bottom
              };
            })
          }
        },
        bottom: {
          start: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: points.left,
                bottom: points.bottom
              };
            }),
            out: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: points.left,
                top: points.top + rect.height
              };
            })
          },
          center: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: points.left,
                bottom: points.bottom,
                transform: { x: -0.25 }
              };
            }),
            out: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                left: rect.left + rect.width / 2,
                transform: { x: -0.5 },
                top: points.top + rect.height
              };
            })
          },
          end: {
            in: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                right: points.right,
                bottom: points.bottom
              };
            }),
            out: calcFn((el, rect, points) => {
              return {
                transformOrigin: "left top",
                right: points.right,
                top: points.top + rect.height
              };
            })
          }
        }
      };
      Popper.propTypes = {
        position: import_prop_types_15_8.default.oneOf(["top", "left", "right", "bottom"]).isRequired,
        align: import_prop_types_15_8.default.oneOf(["start", "center", "end"]),
        direction: import_prop_types_15_8.default.oneOf(["in", "out"]),
        anchor: import_prop_types_15_8.default.any
      };
      PopperElement = ({
        anchor,
        className,
        position,
        align = "center",
        children,
        direction = "out",
        visibility,
        ...rest
      }) => {
        const styles = useStyles10();
        const [recalc, setRecalc] = (0, import_react_18_238.useState)(0);
        const el = (0, import_react_18_238.useRef)();
        const [style, setStyle] = (0, import_react_18_238.useState)({});
        const offset2 = useScrollingRerendering();
        (0, import_react_18_238.useLayoutEffect)(() => {
          let p = position;
          let a = align;
          let newStyle = positionCalculator[p][a][direction](anchor);
          const overflow = isOverflowing(newStyle, el.current);
          if (overflow.length) {
            if (p === "right") {
              if (overflow.includes("left") || overflow.includes("right")) {
                p = "left";
              }
              if (overflow.includes("bottom")) {
                a = "end";
              } else if (overflow.includes("top")) {
                a = "start";
              }
            } else if (p === "left") {
              if (overflow.includes("left") || overflow.includes("right")) {
                p = "right";
              }
              if (overflow.includes("bottom")) {
                a = "end";
              } else if (overflow.includes("top")) {
                a = "start";
              }
            } else if (p === "top") {
              if (overflow.includes("top") || overflow.includes("bottom")) {
                p = "bottom";
              }
              if (overflow.includes("right")) {
                a = "end";
              } else if (overflow.includes("left")) {
                a = "start";
              }
            } else if (p === "bottom") {
              if (overflow.includes("top") || overflow.includes("bottom")) {
                p = "top";
              }
              if (overflow.includes("right")) {
                a = "end";
              } else if (overflow.includes("left")) {
                a = "start";
              }
            }
            newStyle = positionCalculator[p][a][direction](anchor);
          }
          for (let [key, val] of Object.entries(newStyle)) {
            if (typeof val === "number") {
              newStyle[key] = val + "px";
            }
          }
          if (newStyle.transform) {
            const { x = 0, y = 0 } = newStyle.transform;
            newStyle.transform = `translate(${x * 100}%, ${y * 100}%)`;
          }
          setStyle(newStyle);
        }, [align, position, direction, anchor, recalc, offset2]);
        (0, import_react_18_238.useEffect)(() => {
          const handler = () => {
            setRecalc((x) => x + 1);
          };
          window.addEventListener("resize", handler);
          window.addEventListener("scroll", handler);
          return () => {
            window.removeEventListener("resize", handler);
            window.removeEventListener("scroll", handler);
          };
        }, []);
        return /* @__PURE__ */ import_react_18_238.default.createElement(Layer, null, ({ zIndex: zIndex2 }) => /* @__PURE__ */ import_react_18_238.default.createElement(
          "div",
          {
            className: cn(className, styles.popper),
            style: { ...style, zIndex: zIndex2 },
            ...rest
          },
          /* @__PURE__ */ import_react_18_238.default.createElement(
            "div",
            {
              className: cn(styles.animator, styles[visibility.toLowerCase()]),
              ref: el
            },
            children
          )
        ));
      };
      popper_default = Popper;
    }
  });

  // styles/components/menu.tsx
  function useMenuClose() {
    const ctx2 = (0, import_react_18_239.useContext)(MenuContext);
    return ctx2.close;
  }
  function isElement(x) {
    return !!x;
  }
  function Menu({
    children,
    renderButton,
    popupClassName,
    backdropClassName,
    className,
    align = "center",
    position = "top",
    direction = "in",
    onClick = () => {
    },
    sizeByButton = false,
    style = {}
  }) {
    const styles = useStyles11();
    const [open, setOpen] = (0, import_react_18_239.useState)(false);
    const anchor = (0, import_react_18_239.useRef)(null);
    const backdrop = (0, import_react_18_239.useRef)(null);
    const [minWidthStyle, setMinWidthStyle] = (0, import_react_18_239.useState)({});
    const menuCtx = (0, import_react_18_239.useContext)(MenuContext);
    const close = (0, import_react_18_239.useCallback)(
      (e) => {
        setOpen(false);
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        menuCtx.close();
      },
      [menuCtx]
    );
    const newContext = (0, import_react_18_239.useMemo)(
      () => ({
        close() {
          close();
        },
        hasParent: true
      }),
      [close]
    );
    const openMenu = (e) => {
      e.stopPropagation();
      e.preventDefault();
      setOpen((x) => !x);
      onClick();
    };
    (0, import_react_18_239.useLayoutEffect)(() => {
      if (isElement(anchor.current) && sizeByButton) {
        const width = anchor.current.getBoundingClientRect().width;
        setMinWidthStyle({ width: `${width}px` });
      } else {
        setMinWidthStyle({});
      }
    }, [children, sizeByButton]);
    const content = /* @__PURE__ */ import_react_18_239.default.createElement(
      popper_default,
      {
        className: void 0,
        anchor: anchor.current,
        open,
        position,
        align,
        direction
      },
      /* @__PURE__ */ import_react_18_239.default.createElement(
        "div",
        {
          className: cn(styles.dropDown, popupClassName),
          style: minWidthStyle
        },
        children
      )
    );
    return /* @__PURE__ */ import_react_18_239.default.createElement(
      Button,
      {
        className: cn(styles.menuButton, className),
        ref: anchor,
        onClick: openMenu,
        contentEditable: false,
        style
      },
      renderButton({ close, isOpen: open }),
      open && /* @__PURE__ */ import_react_18_239.default.createElement(MenuContext.Provider, { value: newContext }, menuCtx.hasParent ? content : /* @__PURE__ */ import_react_18_239.default.createElement(
        Backdrop,
        {
          visible: open,
          ref: backdrop,
          className: cn(backdropClassName),
          onClick: close
        },
        content
      ))
    );
  }
  var import_react_18_239, import_react_dom_18_23, useStyles11, MenuContext, SecondaryMenuItem, MenuItem, MenuItemStyle, MenuAction, Backdrop;
  var init_menu = __esm({
    "styles/components/menu.tsx"() {
      import_react_18_239 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_dom_18_23 = __toESM(__require("https://esm.sh/react-dom@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_buttons();
      init_popper();
      init_typography();
      init_layer();
      init_icons();
      useStyles11 = makeStyles((theme) => ({
        item: {
          height: styleguide.gridbase * 6,
          flexShrink: 0,
          boxSizing: "border-box",
          minWidth: styleguide.gridbase * 20,
          padding: styleguide.gridbase,
          color: theme.background.text,
          backgroundColor: "transparent",
          transition: "background-color 0.15s linear",
          cursor: "pointer",
          ":hover": {
            backgroundColor: theme.background[100]
          },
          alignItems: "center",
          basedOn: [layout.row]
        },
        actionIcon: {
          marginRight: styleguide.gridbase
        },
        actionText: {
          flexGrow: 1
        },
        menuButton: {
          userSelect: "none"
        },
        dropDown: {
          alignItems: "stretch",
          padding: [styleguide.gridbase, 0],
          backgroundColor: theme.background[0],
          boxShadow: theme.shadows.z2,
          basedOn: [layout.column],
          transformOrigin: "top",
          whitespace: "nowrap"
          // animation: `${zoom} ${
          //   styleguide.transition.duration.short
          // }ms ${styleguide.transition.timing.standard} backwards`,
        },
        iconMenu: {
          ...layout.row.rules,
          boxSizing: "border-box",
          padding: [styleguide.gridbase * 2, styleguide.gridbase * 1.5],
          alignItems: "center"
        },
        iconItem: {
          padding: 0,
          height: styleguide.gridbase * 3,
          width: styleguide.gridbase * 3,
          minWidth: styleguide.gridbase * 3,
          margin: [0, styleguide.gridbase * 0.5],
          basedOn: [layout.row, layout.centerCenter]
        },
        backdrop: {
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          display: "none",
          userSelect: "none",
          "&backdropVisible": {
            display: "block"
          }
        },
        tooltip: {
          marginBottom: styleguide.gridbase * 3
        },
        backdropVisible: {},
        secondaryIcon: {
          transform: "rotate(270deg)",
          transformOrigin: "center center"
        }
      }));
      MenuContext = import_react_18_239.default.createContext({
        close() {
        },
        hasParent: false
      });
      SecondaryMenuItem = ({
        children,
        text,
        className
      }) => {
        const styles = useStyles11();
        const renderButton = (0, import_react_18_239.useCallback)(() => {
          return /* @__PURE__ */ import_react_18_239.default.createElement("div", { className: cn(className, styles.item) }, /* @__PURE__ */ import_react_18_239.default.createElement(Text, null, text), /* @__PURE__ */ import_react_18_239.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_239.default.createElement(IconExpander_default, { className: cn(styles.secondaryIcon) }));
        }, [text, className, styles]);
        return /* @__PURE__ */ import_react_18_239.default.createElement(
          Menu,
          {
            renderButton,
            position: "right",
            direction: "out",
            align: "start"
          },
          children
        );
      };
      MenuItem = import_react_18_239.default.forwardRef(function MenuItem2({ selected, children, className, onClick = () => true, ...props }, ref) {
        const styles = useStyles11();
        const ctx2 = (0, import_react_18_239.useContext)(MenuContext);
        const invoke = (e) => {
          e.stopPropagation();
          Promise.resolve(onClick()).then((r) => {
            if (typeof r === "undefined" || r) {
              ctx2.close();
            }
          });
        };
        return /* @__PURE__ */ import_react_18_239.default.createElement(
          "div",
          {
            className: cn(className, styles.item),
            ...props,
            onClick: invoke,
            ref
          },
          children
        );
      });
      MenuItemStyle = useStyles11.item;
      MenuAction = import_react_18_239.default.forwardRef(function MenuAction2({ IconComponent, text, iconWidth, iconHeight, ...props }, ref) {
        const styles = useStyles11();
        return /* @__PURE__ */ import_react_18_239.default.createElement(MenuItem, { ...props, ref }, /* @__PURE__ */ import_react_18_239.default.createElement(
          IconComponent,
          {
            className: cn(styles.actionIcon),
            width: iconWidth,
            height: iconHeight
          }
        ), /* @__PURE__ */ import_react_18_239.default.createElement(Text, { className: cn(styles.actionText) }, text));
      });
      Backdrop = import_react_18_239.default.forwardRef(({ visible, children, className, ...rest }, ref) => {
        const styles = useStyles11();
        return import_react_dom_18_23.default.createPortal(
          /* @__PURE__ */ import_react_18_239.default.createElement(Layer, null, ({ zIndex: zIndex2 }) => /* @__PURE__ */ import_react_18_239.default.createElement(
            "div",
            {
              ref,
              className: cn(
                className,
                styles.backdrop,
                visible && styles.backdropVisible
              ),
              style: { zIndex: zIndex2 },
              ...rest
            },
            children
          )),
          document.getElementById("root")
        );
      });
    }
  });

  // web-app/src/utils.ts
  function isWindowsOS() {
    return window.navigator.userAgent.toLowerCase().includes("windows");
  }
  function isMacOS() {
    return window.navigator.userAgent.toLowerCase().includes("mac");
  }
  var init_utils4 = __esm({
    "web-app/src/utils.ts"() {
    }
  });

  // web-app/src/app/workspace-content/workspace-view/toolbar/header.tsx
  function ToolbarMenu({ className }) {
    const styles = useStyles12();
    const logger = useLogger();
    return /* @__PURE__ */ import_react_18_240.default.createElement(
      Menu,
      {
        onClick: () => {
          logger.log({
            severity: "INFO",
            event: "Click",
            source: "toolbar:menu"
          });
        },
        className,
        popupClassName: cn(styles.menu),
        renderButton: () => /* @__PURE__ */ import_react_18_240.default.createElement(IconOverflow_default, null)
      },
      /* @__PURE__ */ import_react_18_240.default.createElement(MenuItem, { onClick: () => {
      } }, "Sign out of Ovvio")
    );
  }
  var import_react_18_240, import_react_router_6_7, useStyles12, isWindows;
  var init_header = __esm({
    "web-app/src/app/workspace-content/workspace-view/toolbar/header.tsx"() {
      import_react_18_240 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_7 = __require("https://esm.sh/react-router@6.7.0");
      init_styles();
      init_buttons();
      init_icons();
      init_menu();
      init_typography();
      init_css_objects();
      init_query2();
      init_vertex2();
      init_utils4();
      init_logger();
      useStyles12 = makeStyles((theme) => ({
        headerRoot: {
          basedOn: [layout.column]
        },
        headerContent: {
          height: styleguide.gridbase * 9,
          alignItems: "center",
          basedOn: [layout.row]
        },
        headerText: {
          marginLeft: styleguide.gridbase * 2.5,
          fontSize: 18,
          lineHeight: `${styleguide.gridbase * 3}px`,
          letterSpacing: "1px",
          basedOn: [useStyles2.bold]
        },
        menu: {
          maxHeight: MenuItemStyle.rules.height * 8,
          overflowY: "auto"
        }
      }));
      isWindows = isWindowsOS();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/toolbar/index.tsx
  function Toolbar({ children }) {
    const styles = useStyles13();
    return /* @__PURE__ */ import_react_18_241.default.createElement(Layer, null, ({ zIndex: zIndex2 }) => /* @__PURE__ */ import_react_18_241.default.createElement("div", { className: cn(styles.toolbar), style: { zIndex: zIndex2 } }, /* @__PURE__ */ import_react_18_241.default.createElement(
      "div",
      {
        className: cn(styles.externalContainer),
        id: TOOLBAR_LEFT_ID
      }
    ), /* @__PURE__ */ import_react_18_241.default.createElement(
      "div",
      {
        className: cn(styles.searchContainer, styles.externalContainer),
        id: TOOLBAR_CENTER_ID
      }
    ), children, /* @__PURE__ */ import_react_18_241.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_241.default.createElement(ChangesIndicator, null), /* @__PURE__ */ import_react_18_241.default.createElement(
      "div",
      {
        className: cn(styles.externalContainer),
        id: TOOLBAR_RIGHT_ID
      }
    ), /* @__PURE__ */ import_react_18_241.default.createElement(ToolbarMenu, { className: cn(styles.menu) })));
  }
  var import_react_18_241, import_react_dom_18_24, TOOLBAR_HEIGHT, useStyles13, TOOLBAR_RIGHT_ID, TOOLBAR_LEFT_ID, TOOLBAR_CENTER_ID, ToolbarRightItem, ToolbarCenterItem, SIDE_TO_ID, ExternalToolbarItem;
  var init_toolbar = __esm({
    "web-app/src/app/workspace-content/workspace-view/toolbar/index.tsx"() {
      import_react_18_241 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_dom_18_24 = __toESM(__require("https://esm.sh/react-dom@18.2.0"));
      init_styles();
      init_layer();
      init_css_objects();
      init_responsive();
      init_ssr();
      init_changes_indicator();
      init_header();
      TOOLBAR_HEIGHT = styleguide.gridbase * 9;
      useStyles13 = makeStyles((theme) => ({
        toolbar: {
          height: TOOLBAR_HEIGHT,
          backgroundColor: theme.background[0],
          position: "relative",
          alignItems: "center",
          justifyContent: "flex-end",
          padding: [0, styleguide.gridbase * 2],
          paddingLeft: 0,
          flexShrink: 0,
          borderBottom: `1px solid #d7e3f1`,
          boxShadow: theme.shadows.z1,
          basedOn: [layout.row]
        },
        logo: {
          width: styleguide.gridbase * 32,
          flexShrink: 0
        },
        searchContainer: {
          [MediaQueries.Computer]: {
            width: styleguide.gridbase * 38
          },
          [MediaQueries.TabletAndMobile]: {
            flex: "1 1 auto"
          }
        },
        item: {
          marginRight: styleguide.gridbase * 2,
          ":last-child": {
            marginRight: 0
          }
        },
        externalContainer: {
          alignItems: "center",
          basedOn: [layout.row]
        },
        shareBtn: {
          margin: [0, styleguide.gridbase]
        },
        iconBtn: {
          marginRight: styleguide.gridbase
        },
        menu: {
          marginRight: styleguide.gridbase
        }
      }));
      TOOLBAR_RIGHT_ID = "toolbar_00827f";
      TOOLBAR_LEFT_ID = "toolbar_fe702c";
      TOOLBAR_CENTER_ID = "toolbar_a86e6b";
      ToolbarRightItem = ({
        children,
        className
      }) => {
        return /* @__PURE__ */ import_react_18_241.default.createElement(
          ExternalToolbarItem,
          {
            children,
            className,
            side: "right"
          }
        );
      };
      ToolbarCenterItem = ({
        children,
        className
      }) => {
        return /* @__PURE__ */ import_react_18_241.default.createElement(
          ExternalToolbarItem,
          {
            children,
            className,
            side: "center"
          }
        );
      };
      SIDE_TO_ID = {
        left: TOOLBAR_LEFT_ID,
        right: TOOLBAR_RIGHT_ID,
        center: TOOLBAR_CENTER_ID
      };
      ExternalToolbarItem = ({
        children,
        side,
        className
      }) => {
        const styles = useStyles13();
        if (isServerSide) {
          return null;
        }
        const id = SIDE_TO_ID[side];
        const el = document.getElementById(id);
        if (!el) {
          return null;
        }
        return import_react_dom_18_24.default.createPortal(
          /* @__PURE__ */ import_react_18_241.default.createElement("div", { className: cn(className, styles.item) }, children),
          el
        );
      };
    }
  });

  // styles/components/new-icons/types.ts
  var init_types2 = __esm({
    "styles/components/new-icons/types.ts"() {
    }
  });

  // styles/components/new-icons/icon-check.tsx
  function IconCheck({
    size = 16 /* Small */,
    className,
    color = "mono" /* Mono */
  }) {
    const colorMap = COLOR_MAP[color];
    return /* @__PURE__ */ import_react_18_242.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_242.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M6.3335 11.3333L11.6668 4",
          stroke: colorMap.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_242.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M4 8L6.33333 11.3333",
          stroke: colorMap.var2,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_242, COLOR_MAP;
  var init_icon_check = __esm({
    "styles/components/new-icons/icon-check.tsx"() {
      import_react_18_242 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
      COLOR_MAP = {
        ["primary" /* Primary */]: {
          var1: brandLightTheme.primary.p9,
          var2: brandLightTheme.primary.p10
        },
        ["mono" /* Mono */]: {
          var1: brandLightTheme.mono.m5,
          var2: brandLightTheme.mono.m4
        }
      };
    }
  });

  // styles/components/inputs/CheckBox.tsx
  function Checkmark({ isChecked }) {
    const styles = useStyles14();
    return /* @__PURE__ */ import_react_18_243.default.createElement("div", { className: cn(styles.checkmark) }, /* @__PURE__ */ import_react_18_243.default.createElement(IconCheck, { className: cn(styles.iconCheck) }));
  }
  function CheckBox({
    checked,
    onChange,
    name,
    disabled = false,
    className = "",
    ...rest
  }) {
    const styles = useStyles14();
    const ref = (0, import_react_18_243.useRef)();
    const onClick = (e) => {
      e.stopPropagation();
      e.preventDefault();
      if (disabled) {
        return;
      }
      ref.current?.click();
    };
    const labelProps = {};
    if (typeof rest.contentEditable !== "undefined") {
      labelProps.contentEditable = rest.contentEditable;
    }
    return /* @__PURE__ */ import_react_18_243.default.createElement(
      "label",
      {
        className: cn(className, styles.container, checked && styles.checked),
        onClick,
        ...labelProps
      },
      /* @__PURE__ */ import_react_18_243.default.createElement(Checkmark, { isChecked: checked }),
      /* @__PURE__ */ import_react_18_243.default.createElement(
        "input",
        {
          className: cn(styles.input),
          type: "checkbox",
          name,
          checked,
          onChange,
          disabled,
          ...rest,
          ref,
          onClick: (e) => e.stopPropagation()
        }
      )
    );
  }
  var import_react_18_243, BORDER_WIDTH, useStyles14, CheckBox_default;
  var init_CheckBox = __esm({
    "styles/components/inputs/CheckBox.tsx"() {
      init_layout();
      import_react_18_243 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_theme();
      init_icon_check();
      BORDER_WIDTH = 2;
      useStyles14 = makeStyles(
        () => ({
          container: {
            position: "relative",
            display: "inline-block",
            width: styleguide.gridbase * 2,
            height: styleguide.gridbase * 2,
            border: `${BORDER_WIDTH}px solid ${brandLightTheme.mono.m4}`,
            borderRadius: 2,
            backgroundColor: "transparent",
            boxSizing: "border-box",
            cursor: "pointer",
            flexShrink: 0
          },
          input: {
            appearance: "none",
            display: "block",
            opacity: 0
          },
          checkmark: {
            position: "absolute",
            overflow: "hidden",
            top: -BORDER_WIDTH,
            left: -BORDER_WIDTH,
            bottom: -BORDER_WIDTH,
            width: 0,
            ...styleguide.transition.short,
            transitionProperty: "width",
            basedOn: [layout.column, layout.centerCenter]
          },
          iconCheck: {
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0
          },
          checked: {
            checkmark: {
              width: "100%"
            }
            // borderColor: theme.colors.primaryButton,
          }
        }),
        "CheckBox_f22211"
      );
      CheckBox_default = CheckBox;
    }
  });

  // styles/components/inputs/TextField.tsx
  var import_react_18_244, useStyles15, TextField_default;
  var init_TextField = __esm({
    "styles/components/inputs/TextField.tsx"() {
      import_react_18_244 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_typography();
      init_css_objects();
      init_styleguide();
      init_theme();
      useStyles15 = makeStyles(
        () => ({
          textField: {
            height: styleguide.gridbase * 5,
            boxSizing: "border-box",
            borderRadius: 4,
            fontSize: 14,
            lineHeight: 16,
            border: ` solid 1px rgba(156, 178, 205, 0.6)`,
            outline: "none",
            fontFamily: FontFamily,
            padding: [styleguide.gridbase, styleguide.gridbase * 2],
            backgroundColor: brandLightTheme.colors.background,
            color: brandLightTheme.colors.text,
            "::placeholder": {
              color: brandLightTheme.colors.placeholderText,
              opacity: 1
            }
          }
        }),
        "TextField_9e7133"
      );
      TextField_default = import_react_18_244.default.forwardRef(function TextField(props, ref) {
        const styles = useStyles15();
        const { className, ...rest } = props;
        return /* @__PURE__ */ import_react_18_244.default.createElement("input", { ref, className: cn(styles.textField, className), ...rest });
      });
    }
  });

  // styles/utils/dateutils.ts
  function getLocaleWeekDays() {
    return DAYS;
  }
  function getMonthName(index) {
    return MONTHS[index];
  }
  function formatTimeDiff2(date) {
    const now = /* @__PURE__ */ new Date();
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    if (year === now.getFullYear()) {
      if (month === now.getMonth()) {
        const daysDiff = now.getDate() - day;
        if (daysDiff === 0) {
          return "Today";
        }
        if (daysDiff === 1) {
          return "Yesterday";
        }
      }
    }
    return date.toLocaleDateString(void 0, {
      dateStyle: "medium"
    });
  }
  var MONTHS, DAYS;
  var init_dateutils = __esm({
    "styles/utils/dateutils.ts"() {
      MONTHS = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ];
      DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    }
  });

  // styles/components/inputs/date-picker.tsx
  function getDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
  }
  function isDateEqual(a, b) {
    if (!a || !b) {
      return false;
    }
    return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
  }
  function MonthView({ month, year, selectedDate, onChange }) {
    const styles = useStyles16();
    const daysCount = getDaysInMonth(year, month);
    const days = new Array(daysCount);
    for (let i = 0; i < daysCount; i++) {
      days[i] = new Date(year, month, i + 1);
    }
    const fd = days[0];
    for (let i = 1; fd.getDay() - i >= 0; i++) {
      days.unshift(new Date(year, month, fd.getDate() - i));
    }
    const ld = days[days.length - 1];
    for (let i = ld.getDay() + 1; i < 7; i++) {
      days.push(new Date(year, month, ld.getDate() + i));
    }
    const weeks = [];
    while (days.length) {
      weeks.push(days.splice(0, 7));
    }
    return /* @__PURE__ */ import_react_18_245.default.createElement("div", null, /* @__PURE__ */ import_react_18_245.default.createElement("div", { className: cn(styles.week) }, getLocaleWeekDays().map((d) => /* @__PURE__ */ import_react_18_245.default.createElement("span", { key: d, className: cn(styles.dayHeader) }, d))), weeks.map((days2, i) => /* @__PURE__ */ import_react_18_245.default.createElement("div", { key: `${year}|${month}|${i}`, className: cn(styles.week) }, days2.map((d) => /* @__PURE__ */ import_react_18_245.default.createElement(
      Button,
      {
        key: d.toDateString(),
        className: cn(
          styles.dayTile,
          d.getMonth() !== month && styles.otherMonth,
          isDateEqual(d, selectedDate) && styles.selected
        ),
        onClick: () => onChange(d)
      },
      d.getDate()
    )))));
  }
  function DatePicker({
    value,
    onChange,
    className
  }) {
    const styles = useStyles16();
    const startDate = (0, import_react_18_245.useRef)(value || /* @__PURE__ */ new Date());
    const [month, setMonth] = (0, import_react_18_245.useState)(() => startDate.current.getMonth());
    const [year, setYear] = (0, import_react_18_245.useState)(() => startDate.current.getFullYear());
    const back = () => {
      if (month === 0) {
        setMonth(11);
        setYear((x) => x - 1);
      } else {
        setMonth((x) => x - 1);
      }
    };
    const next = () => {
      if (month === 11) {
        setMonth(0);
        setYear((x) => x + 1);
      } else {
        setMonth((x) => x + 1);
      }
    };
    return /* @__PURE__ */ import_react_18_245.default.createElement("div", { className: cn(styles.root, className) }, /* @__PURE__ */ import_react_18_245.default.createElement("div", { className: cn(styles.month) }, /* @__PURE__ */ import_react_18_245.default.createElement(Button, { className: cn(styles.arrowButton), onClick: back }, "<"), /* @__PURE__ */ import_react_18_245.default.createElement(H32, { className: cn(styles.monthText) }, getMonthName(month), " ", year), /* @__PURE__ */ import_react_18_245.default.createElement(Button, { className: cn(styles.arrowButton), onClick: next }, ">")), /* @__PURE__ */ import_react_18_245.default.createElement(
      MonthView,
      {
        month,
        year,
        selectedDate: value,
        onChange
      }
    ));
  }
  var import_react_18_245, useStyles16;
  var init_date_picker = __esm({
    "styles/components/inputs/date-picker.tsx"() {
      import_react_18_245 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_buttons();
      init_texts();
      init_dateutils();
      useStyles16 = makeStyles(
        (theme) => ({
          root: {
            alignItems: "stretch",
            basedOn: [layout.column]
          },
          arrowButton: {
            width: styleguide.gridbase * 4.5,
            height: styleguide.gridbase * 4.5,
            borderRadius: styleguide.gridbase * 1.5,
            border: `1px solid ${theme.background[500]}`
          },
          week: {
            justifyContent: "space-between",
            basedOn: [layout.row]
          },
          selected: {},
          dayTile: {
            display: "inline-block",
            width: styleguide.gridbase * 5,
            height: styleguide.gridbase * 5,
            borderRadius: styleguide.gridbase * 2.5,
            backgroundColor: theme.background[0],
            transition: `background-color linear ${styleguide.transition.duration.short}ms`,
            color: "#9cb2cd",
            ":hover": {
              backgroundColor: "rgba(249, 101, 0, 0.15)"
            },
            "&selected": {
              color: "white",
              backgroundColor: theme.primary[500]
            }
          },
          month: {
            marginBottom: styleguide.gridbase * 2,
            basedOn: [layout.row]
          },
          monthText: {
            textAlign: "center",
            basedOn: [layout.flexSpacer]
          },
          dayHeader: {
            display: "inline-block",
            color: "#9cb2cd",
            height: styleguide.gridbase * 3,
            width: styleguide.gridbase * 5
          },
          otherMonth: {
            color: "#d8e3f1"
          }
        }),
        "date-picker_089a9b"
      );
    }
  });

  // styles/components/inputs/partial-checkbox/states.tsx
  var init_states = __esm({
    "styles/components/inputs/partial-checkbox/states.tsx"() {
    }
  });

  // styles/components/inputs/partial-checkbox/checkbox-icon.tsx
  var import_react_18_246, useStyles17;
  var init_checkbox_icon = __esm({
    "styles/components/inputs/partial-checkbox/checkbox-icon.tsx"() {
      import_react_18_246 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_css_objects();
      init_states();
      useStyles17 = makeStyles(
        (theme) => ({
          checkbox: {
            width: styleguide.gridbase * 1.5,
            height: styleguide.gridbase * 0.75,
            borderWidth: 2,
            borderBottomStyle: "solid",
            borderLeftStyle: "solid",
            boxSizing: "border-box",
            ...styleguide.transition.standard,
            transitionProperty: "height, transform",
            transformOrigin: "35% 50%",
            transform: "rotate(-45deg)"
          },
          partial: {
            height: styleguide.gridbase * 0.25,
            transform: "rotate(0deg)"
          }
        }),
        "checkbox-icon_22259d"
      );
    }
  });

  // styles/components/inputs/partial-checkbox/index.tsx
  var import_react_18_247, useStyles18;
  var init_partial_checkbox = __esm({
    "styles/components/inputs/partial-checkbox/index.tsx"() {
      import_react_18_247 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_layer();
      init_states();
      init_checkbox_icon();
      useStyles18 = makeStyles(
        (theme) => ({
          container: {
            position: "relative",
            display: "inline-block",
            width: styleguide.gridbase * 3,
            height: styleguide.gridbase * 3,
            padding: 3,
            backgroundColor: "transparent",
            boxSizing: "border-box",
            cursor: "pointer",
            basedOn: [layout.column, layout.centerCenter]
          },
          borderContainer: {
            width: styleguide.gridbase * 2.25,
            height: styleguide.gridbase * 2.25,
            borderWidth: 2,
            borderStyle: "solid",
            borderRadius: 3,
            boxSizing: "border-box",
            position: "relative",
            overflow: "hidden",
            basedOn: [layout.column, layout.centerCenter]
          },
          background: {
            position: "absolute",
            top: "50%",
            left: "50%",
            height: "150%",
            width: "150%",
            borderRadius: "50%",
            transform: "translate(-50%, -50%) scale(0)",
            ...styleguide.transition.standard,
            transitionProperty: "transform"
          },
          toggled: {
            transform: "translate(-50%, -50%) scale(1)"
          },
          input: {
            appearance: "none",
            display: "block",
            opacity: 0
          }
        }),
        "partial-checkbox_dbb76a"
      );
    }
  });

  // styles/components/inputs/index.ts
  var init_inputs = __esm({
    "styles/components/inputs/index.ts"() {
      init_CheckBox();
      init_TextField();
      init_date_picker();
      init_partial_checkbox();
    }
  });

  // web-app/src/app/new-workspace/create-workspace-illustration.tsx
  function Illustration({ className }) {
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "573",
        height: "289",
        viewBox: "0 0 573 289",
        className
      },
      /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#F8F7FF",
          d: "M7.87 288.99s-4.079-29.24 27.595-61.51c31.673-32.271 80.19-6.06 71.073-42.034-9.118-35.973-57.204-70.264-42.52-97.58 17.613-32.752 61.668-21.69 80-1.203 84.942 94.984 41.703 4.762 101.45-30.106 39.112-22.844 73.281-5.915 103.323 43.14 33.065 54.008 62.579 21.93 65.89-3.848 7.343-56.894 78.224-35.3 62.147 18.516-4.319 14.476-47.366 68.869-4.799 90.751 79.855 41.071 77.94 83.874 77.94 83.874H7.87z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#F8F7FF",
          d: "M318.461 15.053c4.271-7.262 30.186-20.247 42.327-12.84 16.893 10.291 20.924 44.293 6.095 55.306-9.214 6.83-60.563-21.738-48.422-42.466z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M298.833 99.937c-1.68-1.876-3.359-3.655-3.695-6.589-.816-7.214 2.352-7.887 1.248-15.1-1.104-7.215-6.43-6.301-7.582-13.515a8.843 8.843 0 0 1-.048-2.5c.431-1.01.815-2.069 1.103-3.175l.144-.577c.432-1.924.528-3.944.288-6.012-1.2-10.292-10.462-17.65-20.683-16.447-10.27 1.202-17.613 10.484-16.413 20.728.24 2.068.816 3.991 1.632 5.77.096.193.144.337.24.53.527 1.01 1.103 1.972 1.775 2.837.24.722.432 1.54.48 2.453.528 7.262-4.847 7.599-4.319 14.86.528 7.263 3.791 7.167 4.607 14.429.336 2.933-.864 5.097-2.112 7.262-1.2 2.212-2.399 4.424-2.063 7.55 1.008 8.945 9.118 15.39 18.044 14.332l16.7-1.924c8.927-1.01 15.357-9.138 14.302-18.083-.288-3.078-1.968-5.001-3.648-6.829z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "262.841",
          cy: "117.925",
          fill: "#FFD4CC",
          rx: "11.182",
          ry: "11.206",
          transform: "rotate(-5.443 262.841 117.925)"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "219.559",
          cy: "56.562",
          fill: "#FF95A9",
          rx: "2.4",
          ry: "2.404",
          transform: "rotate(-22.68 219.56 56.562)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M254.443 81.373c-.432 3.415 2.015 6.54 5.423 6.974 3.407.432 6.526-2.02 6.958-5.435.432-3.414-2.015-6.54-5.423-6.973-3.407-.433-6.526 2.02-6.958 5.434zM223.921 52.085c.144-.337.192-.722.24-1.107.096-1.875-1.344-3.414-3.215-3.51-1.872-.097-3.408 1.346-3.504 3.222l-.287 5.771 4.607 1.01 2.16-5.386z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M232.8 81.95c-2.304 1.01-3.36 3.655-2.352 5.964 1.008 2.308 3.647 3.366 5.95 2.356 2.304-1.01 3.36-3.655 2.352-5.963-1.008-2.309-3.647-3.367-5.95-2.357z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M259.29 75.939l-25.675 5.723 1.392 8.945 26.202-2.308z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M238.462 83.778l-16.844-28.423-4.272 2.164 13.102 30.395z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M254.395 81.662l-2.64 34.915 22.172 2.741 13.629-35.348c.912-2.356-.624-4.905-3.12-5.194l-23.035-2.837a6.258 6.258 0 0 0-7.006 5.723z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M268.216 88.924l-9.31 9.33a6.296 6.296 0 0 1-6.959 1.298c-3.167-1.443-4.559-5.098-3.12-8.272.337-.721.769-1.346 1.297-1.827l9.31-9.378 8.782 8.849z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "260.66",
          cy: "82.034",
          fill: "#FFD4CC",
          rx: "6.246",
          ry: "6.244",
          transform: "rotate(-50.095 260.66 82.034)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#A796F2",
          d: "M251.707 117.924h22.316l1.2.913c4.03 3.175 6.43 8.032 6.43 13.13v16.448h-32.825v-18.228a27.4 27.4 0 0 1 2.88-12.263z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M288.468 88.731c-2.064 2.742-6 3.319-8.735 1.25-2.735-2.067-3.31-6.01-1.247-8.752 2.063-2.741 5.998-3.319 8.734-1.25a6.28 6.28 0 0 1 1.248 8.752zM223.873 59.202l-4.75 2.405 11.325 26.307 8.014-4.136z"
        }
      ), /* @__PURE__ */ React.createElement("g", { fill: "#FF95A9" }, /* @__PURE__ */ React.createElement("path", { d: "M266.78 63.09l10.345 2.113-2.599 12.77-10.344-2.114z" }), /* @__PURE__ */ React.createElement("path", { d: "M274.503 77.959c-.576 2.885-3.36 4.713-6.24 4.136-2.879-.578-4.702-3.367-4.126-6.253.576-2.885 3.359-4.713 6.238-4.136 2.88.626 4.751 3.415 4.128 6.253z" })), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M278.198 62.328l-2.352-.48.96-4.714 2.352.481c1.295.289 2.16 1.54 1.871 2.838a2.435 2.435 0 0 1-2.831 1.875z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M262.841 44.919l17.66 3.607-4.655 22.844-10.99-2.26c-4.415-.914-7.102-5.339-5.95-9.667l3.935-14.524z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M278.678 57.52l.48.095 2.783-13.61-14.013-2.838c-3.695-.769-7.295 1.636-8.062 5.339l-.048.288.48.097a18.733 18.733 0 0 1 10.317 6.011 15.347 15.347 0 0 0 8.063 4.617z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M261.21 87.144l1.343-11.061 16.796 2.068z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#DDD6FF",
          d: "M169.453 155.292h147.425V288.99H169.453z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M169.453 144.519h147.425v10.725H169.453z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "175.835",
          cy: "149.905",
          fill: "#FFF",
          rx: "1.968",
          ry: "1.972"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M184.09 149.905a1.948 1.948 0 0 1-1.968 1.972 1.948 1.948 0 0 1-1.968-1.972c0-1.106.864-1.971 1.968-1.971s1.967.913 1.967 1.971z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "188.457",
          cy: "149.905",
          fill: "#FFF",
          rx: "1.968",
          ry: "1.972"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M203.525 178.569h162.446V288.99H203.525z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M189.608 288.99l13.15-114.51.767-6.684V288.99z"
        }
      ), /* @__PURE__ */ React.createElement(
        "g",
        {
          fill: "#FF95A9",
          transform: "translate(433.83 84.643)"
        },
        /* @__PURE__ */ React.createElement(
          "ellipse",
          {
            cx: "5.551",
            cy: "5.813",
            rx: "3.845",
            ry: "3.842",
            transform: "rotate(-54.886 5.551 5.813)"
          }
        ),
        /* @__PURE__ */ React.createElement("path", { d: "M4.415 9.619a2.873 2.873 0 0 0-3.935.961 2.887 2.887 0 0 0 .96 3.944 2.873 2.873 0 0 0 3.935-.962 2.887 2.887 0 0 0-.96-3.943z" }),
        /* @__PURE__ */ React.createElement("path", { d: "M1.872 4.857L.144 11.35l5.23 2.212L8.83 7.791z" })
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "427.116",
          cy: "133.535",
          fill: "#7760DB",
          rx: "6.531",
          ry: "6.536",
          transform: "rotate(-35.845 427.116 133.535)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M395.341 138.46l31.434 1.586 1.92-12.888-30.522-7.647z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M434.021 95.705l5.567 1.49-5.999 37.369-12.621-3.319 11.421-30.971.96-2.694z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M434.021 95.705l5.567 1.49-.864 5.387-6.335-2.308.96-2.694z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M434.021 95.705l5.567 1.49-.384 2.502-5.855-2.165z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "395.863",
          cy: "128.817",
          fill: "#7760DB",
          rx: "9.607",
          ry: "9.61",
          transform: "rotate(-42.074 395.863 128.817)"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "367.255",
          cy: "131.143",
          fill: "#7760DB",
          rx: "9.598",
          ry: "9.618",
          transform: "rotate(-2.882 367.255 131.143)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M407.915 177.944l14.06 38.282-10.221 4.328-15.885-37.513z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "380.909",
          cy: "183.902",
          fill: "#7760DB",
          rx: "6.527",
          ry: "6.589",
          transform: "rotate(-5.918 380.91 183.902)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M407.915 177.944c1.391 3.318-.144 7.214-3.456 8.608-3.311 1.395-7.198-.144-8.59-3.462-1.392-3.319.144-7.214 3.455-8.61 3.312-1.442 7.199.097 8.59 3.464z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M402.204 125.234l5.423 47.66-34.553 5.675-10.03-46.939c-.816-3.751 1.68-7.454 5.47-8.08l25.915-4.232c3.792-.625 7.343 2.068 7.775 5.916z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M407.627 172.894l.72 6.54.047.337c.384 3.463-2.015 6.637-5.47 7.214l-20.972 3.415c-3.455.577-6.719-1.684-7.486-5.098l-.048-.337-1.392-6.444 34.6-5.627z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M387.375 182.85l6.574 40.253-10.941 1.78-8.542-39.918zM403.835 283.988c.096 2.26-1.631 4.136-3.839 4.233a4.034 4.034 0 0 1-4.223-3.848c-.096-2.26 1.632-4.136 3.84-4.232 2.255-.144 4.126 1.587 4.222 3.847zM393.278 274.899a4.089 4.089 0 0 1-5.375 1.972 4.105 4.105 0 0 1-1.968-5.387 4.089 4.089 0 0 1 5.375-1.972 4.105 4.105 0 0 1 1.968 5.387z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M376.29 122.3l14.108 32.8 2.064-25.201-1.632-9.955z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M390.83 119.944l1.632 9.955-.864 10.532-1.2 14.669-5.855-13.515-8.254-19.285z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M421.928 220.746a5.557 5.557 0 0 1-7.39 2.693c-2.784-1.298-3.984-4.616-2.688-7.406a5.557 5.557 0 0 1 7.39-2.693c2.784 1.298 3.983 4.617 2.688 7.406zM393.95 223.103a5.585 5.585 0 0 1-4.56 6.396 5.576 5.576 0 0 1-6.382-4.569 5.585 5.585 0 0 1 4.559-6.396c3.023-.529 5.903 1.539 6.382 4.569z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M395.821 284.854l-12.813-59.972 10.941-1.78 9.886 60.405z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "390.368",
          cy: "175.744",
          fill: "#7760DB",
          rx: "17.521",
          ry: "17.551",
          transform: "rotate(-18.922 390.368 175.744)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M391.598 140.431l-1.2 14.669-5.855-13.515.144-18.323.96-.144zM407.963 288.99h-12.19v-4.81h8.11l4.655 2.55c.384.192.624.625.624 1.058a1.22 1.22 0 0 1-1.2 1.202z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M374.177 109.467l11.84-1.942 2.1 12.863-11.84 1.941z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M391.31 96.282l-1.68.433-2.831-11.446 1.68-.433c3.167-.77 6.334 1.154 7.15 4.328.768 3.126-1.152 6.348-4.319 7.118zM380.032 110.566l-4.223 1.058a4.368 4.368 0 0 1-5.279-3.175l-1.151-4.665 8.446-2.116 2.207 8.898z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M390.062 96.282l-4.607 1.154-3.647-14.764 4.127-1.01c2.784-.674 5.663 1.01 6.335 3.847l1.248 5.05c.623 2.5-.912 5.098-3.456 5.723z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M392.318 112.104l-15.021 3.752-4.175-16.977c-1.296-5.146 1.871-10.388 7.006-11.639 4.991-1.25 10.03 1.684 11.518 6.59l3.84 12.792a4.415 4.415 0 0 1-3.168 5.482z"
        }
      ), /* @__PURE__ */ React.createElement("path", { d: "M393.997 101.716l-2.399-7.983 2.4 7.983z" }), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M374.226 86.952l1.247-.337 3.936 15.967-9.742 2.405-1.872-7.503c-1.104-4.617 1.728-9.378 6.43-10.532z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M374.754 105.468l2.543-.626-.624-2.548c-.336-1.395-1.776-2.26-3.167-1.924-1.392.336-2.256 1.78-1.92 3.174.336 1.443 1.776 2.26 3.168 1.924z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M392.318 90.896l-9.646 2.404c-3.935.962-7.918-1.443-8.878-5.386-.48-1.876.672-3.751 2.543-4.232 1.872-.481 3.743.673 4.223 2.549.048.192.24.336.432.288l9.646-2.405 1.68 6.782z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M387.903 88.347l-4.8 1.202c-1.87.48-3.742-.673-4.222-2.549-.48-1.876.672-3.751 2.543-4.232l4.8-1.202c1.87-.481 3.742.673 4.222 2.548.48 1.876-.672 3.8-2.543 4.233zM396.493 109.988c.576 1.924-.576 3.944-2.496 4.425l-6.718 1.683c-3.743.914-7.535-1.346-8.446-5.098l-1.968-7.935 2.544-.625c.383 1.539 1.967 2.5 3.503 2.116l11.133-2.741 2.448 8.175z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M393.278 104.362c.384 1.394-.48 2.837-1.92 3.222-1.392.384-2.831-.481-3.215-1.924l5.135-1.298z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "342.033",
          cy: "161.263",
          fill: "#7760DB",
          rx: "6.532",
          ry: "6.536",
          transform: "rotate(-35.837 342.033 161.263)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M374.082 137.882l-27.403 27.99-9.982-8.416 22.748-31.886z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "381.524",
          cy: "167.302",
          fill: "#FF95A9",
          rx: "3.84",
          ry: "3.847",
          transform: "rotate(-16.141 381.524 167.302)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M377.729 166.305c.768-1.395.24-3.174-1.152-3.943-1.392-.77-3.167-.24-3.935 1.154-.768 1.394-.24 3.174 1.152 3.943 1.391.77 3.167.24 3.935-1.154z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M382.384 163.564l-6.575-1.443-2.015 5.338 5.902 3.27z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M374.034 161.688l-.672 6.108h-31.338l1.44-12.937 27.738 6.204z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M374.034 161.688l-.672 6.108h-2.928l.768-6.733z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M375.81 162.121l-.625 5.675h-1.823l.672-6.108z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#A796F2",
          d: "M203.525 167.796h162.446v10.725H203.525z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "209.908",
          cy: "173.182",
          fill: "#FFF",
          rx: "1.968",
          ry: "1.972"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "216.243",
          cy: "173.182",
          fill: "#FFF",
          rx: "1.968",
          ry: "1.972"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "222.529",
          cy: "173.182",
          fill: "#FFF",
          rx: "1.968",
          ry: "1.972"
        }
      ), /* @__PURE__ */ React.createElement("g", { fill: "#DDD6FF" }, /* @__PURE__ */ React.createElement("path", { d: "M222.721 189.197h1v89.116h-1zM247.34 189.197h1v89.116h-1zM271.96 189.197h1v89.116h-1zM296.578 189.197h1v89.116h-1zM321.196 189.197h1v89.116h-1zM345.863 189.197h1v89.116h-1z" }), /* @__PURE__ */ React.createElement("path", { d: "M215.81 196.267h137.876v1H215.81zM215.81 220.939h137.876v1H215.81zM215.81 245.61h137.876v1H215.81zM215.81 270.33h137.876v1H215.81z" })), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M223.873 271.484l-1.344-1.394 24.62-24.624 25.29-25.393 24.619 24.672 48.614-48.67 1.343 1.346-49.957 50.065-24.62-24.672-23.946 23.999z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "223.201",
          cy: "270.811",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "247.82",
          cy: "246.139",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "272.439",
          cy: "221.42",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "297.058",
          cy: "246.139",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "321.725",
          cy: "221.42",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "346.343",
          cy: "196.748",
          fill: "#FF809F",
          rx: "3.359",
          ry: "3.367"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M296.386 145.096c.864-1.01.816-2.5-.192-3.414-1.008-.866-2.496-.818-3.407.192-.864 1.01-.816 2.5.192 3.415 1.007.913 2.543.817 3.407-.193z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M300.849 143.557c.336.144.672.337.912.577 1.392 1.25 1.487 3.367.288 4.762-1.248 1.394-3.36 1.49-4.751.288l-4.32-3.847 2.544-3.992 5.327 2.212z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "288.491",
          cy: "110.923",
          fill: "#FFD4CC",
          rx: "4.518",
          ry: "4.514",
          transform: "rotate(-59.584 288.491 110.923)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M289.667 84.163l3.264 26.21-8.878 1.683-6.623-25.537z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M292.93 110.373l4.176 32.8-4.703.913-8.35-32.03z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "283.457",
          cy: "84.939",
          fill: "#FFD4CC",
          rx: "6.25",
          ry: "6.241",
          transform: "rotate(-64.355 283.457 84.94)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M296.53 138.748l-5.279 1.01-7.198-27.702 8.878-1.683z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M267.448 61.847a2.57 2.57 0 0 1-3.12 2.02 2.575 2.575 0 0 1-2.015-3.126l5.135 1.106z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "54.329",
          cy: "284.883",
          fill: "#7760DB",
          rx: "4.031",
          ry: "4.039",
          transform: "rotate(-13.286 54.33 284.883)"
        }
      ), /* @__PURE__ */ React.createElement(
        "g",
        {
          fill: "#FF95A9",
          transform: "translate(88.781 187.562)"
        },
        /* @__PURE__ */ React.createElement("path", { d: "M2.256.625A3.81 3.81 0 0 0 .48 5.771a3.794 3.794 0 0 0 5.135 1.78A3.81 3.81 0 0 0 7.39 2.405C6.48.529 4.175-.29 2.256.625z" }),
        /* @__PURE__ */ React.createElement(
          "ellipse",
          {
            cx: "5.952",
            cy: "10.58",
            rx: "2.88",
            ry: "2.885",
            transform: "rotate(-23.509 5.952 10.58)"
          }
        ),
        /* @__PURE__ */ React.createElement("path", { d: "M7.726 3.51l1.056 6.638L3.36 11.83.48 5.77z" })
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "114.416",
          cy: "230.696",
          fill: "#7760DB",
          rx: "6.539",
          ry: "6.528",
          transform: "rotate(-70.646 114.416 230.696)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M145.506 238.685l-31.386-1.443-.672-13.033 31.098-4.665z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M97.036 196.411l-4.895 2.982 16.364 34.146 11.134-6.781-19.724-26.451-1.68-2.309z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M97.036 196.411l-4.895 2.982 2.4 4.954 5.374-4.04-1.68-2.309z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M97.036 196.411l-4.895 2.982 1.103 2.308 4.991-3.703z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "145.989",
          cy: "229.05",
          fill: "#7760DB",
          rx: "9.608",
          ry: "9.61",
          transform: "rotate(-42.398 145.989 229.05)"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "215.667",
          cy: "286.104",
          fill: "#FF95A9",
          rx: "2.879",
          ry: "2.886"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "225.025",
          cy: "287.066",
          fill: "#FF95A9",
          rx: "1.92",
          ry: "1.924"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "171.643",
          cy: "232.866",
          fill: "#7760DB",
          rx: "9.605",
          ry: "9.611",
          transform: "rotate(-36.571 171.643 232.866)"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M139.555 225.556l-6.239 63.434h26.203c4.559 0 8.542-3.222 9.406-7.743l9.886-49.872c.767-3.751-1.824-7.407-5.615-7.984l-25.963-3.847c-3.791-.577-7.294 2.164-7.678 6.012z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M165.421 222.237l-13.58 33.04-2.496-25.2 1.487-10.004z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M150.832 220.073l-1.487 10.003 1.056 10.485 1.44 14.716 5.614-13.658 7.966-19.382z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M150.4 240.56l1.44 14.717 5.615-13.658-.432-18.324-.96-.144zM163.118 211.176l4.367.144c2.4.337 4.607-1.298 4.943-3.703l.72-4.713-8.638-1.299-1.392 9.57z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M165.489 222.23l-11.868-1.762 2.23-15.08 11.868 1.762z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M153.088 214.687l13.197 1.971 4.223-28.711-19.388-2.886-3.311 22.508a6.315 6.315 0 0 0 5.279 7.118z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M166.909 185.735l-1.296-.193-2.543 17.218 9.934 1.49 1.248-8.56c.72-4.81-2.592-9.282-7.343-9.955z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M158.079 189.63l4.75.722c1.92.288 3.792-.914 4.128-2.838.336-1.924-1.008-3.751-2.927-4.04l-4.751-.721c-1.92-.289-3.792.914-4.127 2.837-.336 1.876 1.007 3.752 2.927 4.04z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M159.567 189.823l4.75.72c1.92.29 3.792-.913 4.128-2.837.336-1.923-1.008-3.75-2.928-4.04l-4.75-.72c-1.92-.29-3.792.913-4.128 2.837-.336 1.923 1.008 3.751 2.928 4.04z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M152.752 188.813l4.751.721c1.92.289 3.791-.914 4.127-2.837.336-1.924-1.008-3.752-2.927-4.04l-4.751-.722c-1.92-.288-3.791.914-4.127 2.838-.384 1.924.96 3.751 2.927 4.04zM164.126 204.587c.72.096 1.391-.385 1.487-1.106l.048-.337-2.591-.384-.048.336c-.096.722.384 1.347 1.104 1.491z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M149.249 193.718l5.615.818c2.255.336 4.51-1.106 4.895-3.367.383-2.308-1.2-4.472-3.456-4.81l-5.615-.817c-2.255-.336-4.51 1.106-4.895 3.367-.431 2.26 1.152 4.472 3.456 4.81z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M151.6 194.055l4.751.721c1.92.289 3.791-.914 4.127-2.837.336-1.924-1.007-3.752-2.927-4.04l-4.751-.722c-1.92-.288-3.791.914-4.127 2.838-.336 1.924 1.008 3.751 2.927 4.04zM147.473 192.131l2.592.385-1.44 9.763c-1.44-.193-2.4-1.54-2.208-2.982l1.056-7.166z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M164.504 195.961l-11.726-1.741.978-6.613 11.725 1.742z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M168.013 205.164l-2.592-.385.384-2.597c.192-1.442 1.536-2.404 2.976-2.212 1.44.193 2.4 1.54 2.207 2.982-.24 1.443-1.583 2.405-2.975 2.212z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M156.111 207.665a2.58 2.58 0 0 1-2.975 2.212 2.584 2.584 0 0 1-2.208-2.981l5.183.769z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M218.066 284.47l-4.415 3.654-2.591-2.549 4.607-4.616z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M215.667 280.959l-4.607 4.616-2.208-2.164v-.048l4.607-4.617.432-.433z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M213.891 278.313l-.432.433-4.607 4.617v.048l-9.358-9.33-2.207-2.164-32.394-32.222 14.733-12.216 26.107 38.715 1.68 2.549z"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "141.57",
          cy: "282.401",
          fill: "#7760DB",
          rx: "6.527",
          ry: "6.541"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "103.898",
          cy: "242.34",
          fill: "#7760DB",
          rx: "5.567",
          ry: "5.579"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "76.219",
          cy: "284.163",
          fill: "#7760DB",
          rx: "4.031",
          ry: "4.039",
          transform: "rotate(-13.286 76.219 284.163)"
        }
      ), /* @__PURE__ */ React.createElement(
        "ellipse",
        {
          cx: "141.57",
          cy: "282.401",
          fill: "#7760DB",
          rx: "6.527",
          ry: "6.541"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M146.225 277.833l-38.344-39.389-8.062 7.6 36.856 40.782z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M99.195 239.406l-26.442 42.61 6.766 4.521 28.938-40.975z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M68.098 288.99h12.19v-4.81h-8.111l-4.655 2.55c-.384.192-.624.625-.624 1.058-.048.673.528 1.202 1.2 1.202z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M141.186 275.86l-87.101 5.002.24 8.128h87.245z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#A796F2",
          d: "M206.117 116.625l1.631-7.07a4.454 4.454 0 0 1 3.36-3.366c3.263-.77 6.143 2.164 5.423 5.435a4.454 4.454 0 0 1-3.36 3.366l-7.054 1.635zM196.71 119.944l-1.247-5.387a3.436 3.436 0 0 0-2.543-2.549c-2.448-.577-4.703 1.635-4.128 4.136a3.436 3.436 0 0 0 2.544 2.55l5.375 1.25zM202.038 110.71l3.79-6.108c.913-1.443.913-3.27 0-4.761-1.727-2.838-5.854-2.838-7.582 0-.911 1.443-.911 3.27 0 4.761l3.792 6.108z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M202.518 131.726h-.96v-11.205l9.646-9.715.72.673-9.406 9.426z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M202.518 136.295h-.96v-10.82l-8.638-8.657.671-.674 8.927 8.946z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M201.558 104.218h1v27.076h-1z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF809F",
          d: "M204.677 144.52h-5.327c-4.079 0-7.39-3.32-7.39-7.407v-8.609h20.108v8.609a7.371 7.371 0 0 1-7.39 7.406z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M191.96 131.775h20.108v1H191.96z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M365.491 224.305h1v64.685h-1zM365.491 215.167h1v5.386h-1zM365.491 167.796h1v36.07h-1z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M351.718 178.088h5.087v1h-5.087zM203.525 178.088h139.411v1H203.525zM256.602 154.811h60.275v1h-60.275zM243.981 154.811h8.974v1h-8.974zM169.453 154.811h44.823v1h-44.823zM236.446 154.811h2.16v1h-2.16z"
        }
      ), /* @__PURE__ */ React.createElement("path", { fill: "#C4B8FF", d: "M0 288.99h572.904v1H0z" }), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M390.878 280.959l-3.071 5.915a4.1 4.1 0 0 1-5.423 1.827c-1.488-.72-2.4-2.212-2.4-3.75 0-.578.144-1.203.384-1.732l2.736-5.916 7.774 3.656z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M421.88 220.746l-26.539 51.556-4.463 8.657-7.678-3.607 4.223-9.138 24.427-52.18z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M215.667 288.99h9.358l.384-3.8-9.166-1.923z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M488.73 217.476l-39.496 43.813 39.496-43.813zM493.913 211.705l-2.304 2.597 2.304-2.597z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M491.23 213.98l2.318-2.568.712.645-2.318 2.568z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M251.755 87.048l3.983-3.992-3.983 3.992z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M251.436 86.718l3.97-3.98.678.68-3.97 3.98z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFD4CC",
          d: "M256.938 100.13c-.768.336-1.631.48-2.495.48-.96 0-1.872-.192-2.784-.577-2.687-1.202-4.223-4.04-3.935-6.829l9.214 6.925z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M254.49 101.091a7.19 7.19 0 0 1-2.975-.625 7.289 7.289 0 0 1-4.223-7.31l.96.096a6.243 6.243 0 0 0 3.647 6.348c1.536.722 3.312.722 4.847.097l.336.913c-.816.289-1.68.481-2.591.481z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M388.157 265.556l13.007-27.778.868.409-13.006 27.777zM384.227 273.915l1.549-3.31.869.41-1.55 3.308zM402.892 200.798l.884-.376 7.549 17.792-.884.377zM399.819 193.599l.883-.376 1.99 4.691-.883.376zM351.347 157.13l.21-.938 5.947 1.335-.21.938zM358.651 158.802l.21-.938 15.266 3.425-.21.939zM405.504 139.453l.05-.96 15.432.79-.05.961zM49.526 276.774v12.216h4.799v-8.128l-2.544-4.665c-.192-.384-.624-.625-1.056-.625-.671 0-1.2.53-1.2 1.202zM181.758 257.146l.676-.683 14.487 14.387-.676.684zM198.056 273.34l.675-.682 10.431 10.359-.675.683zM122.237 238.073l.044-.96 16.06.73-.043.962zM130.55 276.03l5.219-.354.064.96-5.218.353zM105.853 277.72l19.583-1.325.065.96-19.583 1.325zM82.091 278.787l5.99-.345.054.96-5.989.345zM89.96 278.345l2.3-.133.055.96-2.3.133z"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          fill: "#C4B8FF",
          fillRule: "nonzero",
          d: "M234.095 25.297h-.96c0-4.52-3.647-8.176-8.158-8.176v-.962c4.51 0 8.158-3.655 8.158-8.176h.96c0 4.521 3.647 8.176 8.158 8.176v.962c-4.51 0-8.158 3.655-8.158 8.176zm-6.19-8.657a9.139 9.139 0 0 1 5.71 5.723 9.139 9.139 0 0 1 5.71-5.723 9.139 9.139 0 0 1-5.71-5.723c-.912 2.693-3.071 4.81-5.71 5.723z"
        }
      ))
    );
  }
  var init_create_workspace_illustration = __esm({
    "web-app/src/app/new-workspace/create-workspace-illustration.tsx"() {
    }
  });

  // web-app/src/core/localization/index.tsx
  function format(str, dict) {
    return Object.entries(dict).reduce((current, [key, value]) => {
      const varName = `{${key}}`;
      const formattedValue = value;
      let index = current.indexOf(varName);
      while (index !== -1) {
        current = `${current.substring(
          0,
          index
        )}${formattedValue}${current.substring(index + varName.length)}`;
        index = current.indexOf(varName);
      }
      return current;
    }, str);
  }
  function useCurrentLanguage() {
    return (0, import_react_18_248.useContext)(ctx);
  }
  function createUseStrings(strings) {
    return function useStrings20() {
      const lang = useCurrentLanguage();
      return strings[lang] || strings.en;
    };
  }
  var import_react_18_248, ctx;
  var init_localization = __esm({
    "web-app/src/core/localization/index.tsx"() {
      import_react_18_248 = __toESM(__require("https://esm.sh/react@18.2.0"));
      ctx = import_react_18_248.default.createContext("en");
    }
  });

  // web-app/src/shared/workspace-icon/index.tsx
  function useWorkspaceColor(workspaceId) {
    const graph = useGraphManager();
    const workspaceKey = KeyFromVertexId(workspaceId);
    const colorMap = usePartialUserSettings(["workspaceColors"]).workspaceColors;
    const workspacesQuery = useSharedQuery("workspaces");
    const existingColor = colorMap.get(workspaceKey);
    if (existingColor && existingColor >= 0 && existingColor < COLOR_MAP2.length) {
      return COLOR_MAP2[existingColor];
    }
    for (const key of workspacesQuery.keys()) {
      if (!graph.getVertex(key).isDemoData) {
        colorMap.delete(key);
      }
    }
    const colorCounts = [];
    for (let i = 0; i < COLOR_MAP2.length; ++i) {
      colorCounts.push(0);
    }
    for (const color of colorMap.values()) {
      if (color >= 0 && color < COLOR_MAP2.length) {
        ++colorCounts[color];
      }
    }
    const nextColor = colorCounts.indexOf(Math.min(...colorCounts));
    (0, import_assert.assert)(nextColor >= 0 && nextColor < COLOR_MAP2.length);
    colorMap.set(workspaceKey, nextColor);
    return COLOR_MAP2[nextColor];
  }
  function WorkspaceIcon({
    className,
    workspaceManager,
    size = styleguide.gridbase * 4
  }) {
    const styles = useStyles19();
    const ws = usePartialVertex(workspaceManager, ["name", "icon"]);
    const icon = ws.icon;
    const color = useWorkspaceColor(workspaceManager);
    return /* @__PURE__ */ import_react_18_249.default.createElement(
      "div",
      {
        className: cn(styles.ws, className),
        style: {
          width: size,
          height: size,
          lineHeight: size + "px",
          fontSize: size * 0.625 + "px",
          backgroundColor: icon ? "#4f8df9" : color.active
        }
      },
      icon ? /* @__PURE__ */ import_react_18_249.default.createElement("img", { src: icon, className: cn(styles.wsIcon), alt: ws.name }) : (ws.name || "")[0]
    );
  }
  var import_react_18_249, import_assert, useStyles19, COLOR_MAP2;
  var init_workspace_icon = __esm({
    "web-app/src/shared/workspace-icon/index.tsx"() {
      import_react_18_249 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_css_objects();
      init_theme();
      init_graph();
      init_vertex2();
      init_query2();
      init_vertex();
      import_assert = __require("https://deno.land/std@0.160.0/_util/assert.ts");
      useStyles19 = makeStyles((theme) => ({
        ws: {
          overflow: "hidden",
          flexShrink: 0,
          boxSizing: "content-box",
          backgroundColor: "#9cb2cd",
          color: theme.background[0],
          fontFamily: "Roboto",
          fontWeight: "900",
          borderRadius: "50%",
          textDecoration: "none",
          border: `1px solid ${theme.background[0]}`,
          cursor: "pointer",
          textTransform: "uppercase",
          pointerEvents: "none",
          basedOn: [layout.column, layout.centerCenter]
        },
        wsIcon: {
          width: "100%",
          height: "100%"
        }
      }));
      COLOR_MAP2 = [
        {
          background: brandLightTheme.mono.m1,
          inactive: brandLightTheme.mono.m3,
          active: brandLightTheme.mono.m5
        },
        {
          background: brandLightTheme.supporting.G1,
          inactive: brandLightTheme.supporting.G2,
          active: brandLightTheme.supporting.G4
        },
        {
          background: brandLightTheme.supporting.T1,
          inactive: brandLightTheme.supporting.T2,
          active: brandLightTheme.supporting.T4
        },
        {
          background: brandLightTheme.primary.p3,
          inactive: brandLightTheme.primary.p4,
          active: brandLightTheme.primary.p9
        },
        {
          background: brandLightTheme.supporting.V1,
          inactive: brandLightTheme.supporting.V2,
          active: brandLightTheme.supporting.V4
        },
        {
          background: brandLightTheme.supporting.L1,
          inactive: brandLightTheme.supporting.L2,
          active: brandLightTheme.supporting.L4
        },
        {
          background: brandLightTheme.supporting.B1,
          inactive: brandLightTheme.supporting.B2,
          active: brandLightTheme.supporting.B4
        },
        {
          background: brandLightTheme.supporting.O1,
          inactive: brandLightTheme.supporting.O2,
          active: brandLightTheme.supporting.O4
        },
        {
          background: brandLightTheme.supporting.C1,
          inactive: brandLightTheme.supporting.C2,
          active: brandLightTheme.supporting.C4
        },
        {
          background: brandLightTheme.secondary.s3,
          inactive: brandLightTheme.secondary.s4,
          active: brandLightTheme.secondary.s7
        },
        {
          background: brandLightTheme.supporting.R1,
          inactive: brandLightTheme.supporting.R2,
          active: brandLightTheme.supporting.R4
        }
      ];
    }
  });

  // styles/components/inputs/drop-down.tsx
  function DropDownItem({
    children,
    value,
    className,
    ...props
  }) {
    const { onChange } = (0, import_react_18_250.useContext)(DropDownContext);
    return /* @__PURE__ */ import_react_18_250.default.createElement(MenuItem, { className, onClick: () => onChange(value), ...props }, children);
  }
  function DropDown({
    value,
    onChange,
    children,
    renderSelected,
    onOpen = noop,
    ...props
  }) {
    const ctx2 = (0, import_react_18_250.useMemo)(
      () => ({
        onChange,
        currentValue: value
      }),
      [value, onChange]
    );
    return /* @__PURE__ */ import_react_18_250.default.createElement(DropDownContext.Provider, { value: ctx2 }, /* @__PURE__ */ import_react_18_250.default.createElement(Menu, { onClick: onOpen, renderButton: renderSelected, ...props }, children));
  }
  var import_react_18_250, DropDownContext, noop;
  var init_drop_down = __esm({
    "styles/components/inputs/drop-down.tsx"() {
      import_react_18_250 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_menu();
      DropDownContext = import_react_18_250.default.createContext({
        onChange(value) {
        },
        currentValue: null
      });
      noop = () => {
      };
    }
  });

  // web-app/src/app/new-workspace/new-workspace.strings.json
  var new_workspace_strings_default;
  var init_new_workspace_strings = __esm({
    "web-app/src/app/new-workspace/new-workspace.strings.json"() {
      new_workspace_strings_default = {
        en: {
          tutorialWelcomeTitle: "Welcome to Ovvio",
          tutorialWelcomeText: "Workspaces are an important part of Ovvio, they represent a shared space for you and your team to collaborate in",
          tutorialNameWorkspaceTitle: "Name your workspace",
          tutorialNameWorkspaceText: "Give your workspace a name, this can be a project, a team name or whatever you feel like!",
          tutorialCreateWorkspaceTitle: "Create your workspace",
          tutorialCreateWorkspaceText: "Click on the create button to create your workspace and get to work!",
          fromNew: "Create fresh",
          duplicate: "Duplicate & Create",
          chooseDuplicateFrom: "Choose a workspace to duplicate",
          chooseWorkspace: "Choose Workspace"
        }
      };
    }
  });

  // web-app/src/app/new-workspace/workspaces-dropdown.tsx
  function WorkspaceItem({
    workspace,
    className
  }) {
    const styles = useStyles20();
    const { name } = usePartialVertex(workspace, ["name"]);
    return /* @__PURE__ */ import_react_18_251.default.createElement("div", { className: cn(styles.workspaceItem, className) }, /* @__PURE__ */ import_react_18_251.default.createElement(
      WorkspaceIcon,
      {
        workspaceManager: workspace,
        className: cn(styles.workspaceIcon),
        size: styleguide.gridbase * 3
      }
    ), /* @__PURE__ */ import_react_18_251.default.createElement(Text2, null, name));
  }
  function WorkspacesDropdown({
    allWorkspaces,
    setWorkspace,
    workspace,
    className,
    placeholder
  }) {
    const styles = useStyles20();
    const { chooseWorkspace } = useStrings();
    const noSelection = placeholder || chooseWorkspace;
    const renderSelected = ({ isOpen }) => {
      if (!workspace) {
        return /* @__PURE__ */ import_react_18_251.default.createElement("div", { className: cn(styles.selectedWorkspace) }, /* @__PURE__ */ import_react_18_251.default.createElement("div", { className: cn(styles.workspaceItem, layout.flexSpacer) }, /* @__PURE__ */ import_react_18_251.default.createElement(Text2, null, noSelection)), /* @__PURE__ */ import_react_18_251.default.createElement(IconDropDownArrow_default, { className: cn(!isOpen && styles.iconClosed) }));
      }
      return /* @__PURE__ */ import_react_18_251.default.createElement("div", { className: cn(styles.selectedWorkspace) }, /* @__PURE__ */ import_react_18_251.default.createElement(
        WorkspaceItem,
        {
          workspace,
          className: cn(layout.flexSpacer)
        }
      ), /* @__PURE__ */ import_react_18_251.default.createElement(IconDropDownArrow_default, { className: cn(!isOpen && styles.iconClosed) }));
    };
    return /* @__PURE__ */ import_react_18_251.default.createElement(
      DropDown,
      {
        value: workspace,
        className: cn(styles.workspaces, className),
        popupClassName: cn(styles.workspacesList),
        position: "top",
        align: "end",
        direction: "in",
        sizeByButton: true,
        onChange: (ws) => setWorkspace(ws),
        renderSelected
      },
      allWorkspaces.map((ws) => /* @__PURE__ */ import_react_18_251.default.createElement(DropDownItem, { key: ws.key, value: ws, className: cn(styles.listItem) }, /* @__PURE__ */ import_react_18_251.default.createElement(WorkspaceItem, { workspace: ws })))
    );
  }
  var import_react_18_251, useStyles20, useStrings;
  var init_workspaces_dropdown = __esm({
    "web-app/src/app/new-workspace/workspaces-dropdown.tsx"() {
      import_react_18_251 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_vertex2();
      init_localization();
      init_workspace_icon();
      init_styles();
      init_icons();
      init_drop_down();
      init_texts();
      init_css_objects();
      init_new_workspace_strings();
      useStyles20 = makeStyles((theme) => ({
        workspaces: {
          minWidth: styleguide.gridbase * 24,
          border: `1px solid ${theme.background.placeholderText}`,
          borderRadius: 3
        },
        workspacesList: {
          maxHeight: styleguide.gridbase * 30,
          overflowY: "auto"
        },
        iconClosed: {
          transform: "rotate(180deg)"
        },
        listItem: {
          borderBottom: `1px solid ${theme.background[300]}`,
          ":first-child": {
            borderTop: `1px solid ${theme.background[300]}`
          }
        },
        workspaceItem: {
          alignItems: "center",
          basedOn: [layout.row]
        },
        workspaceIcon: {
          marginRight: styleguide.gridbase * 0.5
        },
        selectedWorkspace: {
          height: styleguide.gridbase * 4,
          padding: styleguide.gridbase * 0.5,
          width: "100%",
          basedOn: [layout.row, layout.centerCenter]
        }
      }));
      useStrings = createUseStrings(new_workspace_strings_default);
    }
  });

  // web-app/src/app/new-workspace/duplicate-workspace.tsx
  function DuplicateToggle({
    shouldDuplicate,
    setShouldDuplicate
  }) {
    const styles = useStyles21();
    const strings = useStrings2();
    const onClick = () => setShouldDuplicate((x) => !x);
    return /* @__PURE__ */ import_react_18_252.default.createElement("div", { className: cn(styles.toggle), onClick }, /* @__PURE__ */ import_react_18_252.default.createElement(
      "div",
      {
        className: cn(
          styles.indicator,
          shouldDuplicate && styles.indicatorSelected
        )
      }
    ), /* @__PURE__ */ import_react_18_252.default.createElement("div", { className: cn(styles.option, !shouldDuplicate && styles.selected) }, strings.fromNew), /* @__PURE__ */ import_react_18_252.default.createElement("div", { className: cn(styles.option, shouldDuplicate && styles.selected) }, strings.duplicate));
  }
  function DuplicateWorkspaceView({
    allWorkspaces,
    setWorkspace,
    workspace,
    className
  }) {
    const styles = useStyles21();
    const strings = useStrings2();
    const [shouldDuplicate, setShouldDuplicate] = (0, import_react_18_252.useState)(!!workspace);
    (0, import_react_18_252.useEffect)(() => {
      if (!shouldDuplicate) {
        setWorkspace(void 0);
      }
    }, [shouldDuplicate, setWorkspace]);
    return /* @__PURE__ */ import_react_18_252.default.createElement("div", { className: cn(styles.root, className) }, /* @__PURE__ */ import_react_18_252.default.createElement(
      DuplicateToggle,
      {
        shouldDuplicate,
        setShouldDuplicate
      }
    ), shouldDuplicate && /* @__PURE__ */ import_react_18_252.default.createElement(
      WorkspacesDropdown,
      {
        className: cn(styles.selector),
        allWorkspaces,
        workspace,
        setWorkspace,
        placeholder: strings.chooseDuplicateFrom
      }
    ));
  }
  var import_react_18_252, useStyles21, useStrings2;
  var init_duplicate_workspace = __esm({
    "web-app/src/app/new-workspace/duplicate-workspace.tsx"() {
      import_react_18_252 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_typography();
      init_css_objects();
      init_theme();
      init_localization();
      init_workspaces_dropdown();
      init_new_workspace_strings();
      useStyles21 = makeStyles(
        () => ({
          root: {
            alignItems: "stretch",
            basedOn: [layout.column]
          },
          toggle: {
            position: "relative",
            cursor: "pointer",
            height: styleguide.gridbase * 5,
            backgroundColor: brandLightTheme.colors.secondaryButton,
            borderRadius: styleguide.gridbase * 2.5,
            basedOn: [layout.row]
          },
          option: {
            position: "relative",
            zIndex: 2,
            flexGrow: 1,
            flexShrink: 0,
            flexBasis: "50%",
            color: brandLightTheme.secondary.s6,
            basedOn: [layout.column, layout.centerCenter, useStyles2.text]
          },
          selected: {
            color: brandLightTheme.colors.primaryButton
          },
          indicator: {
            backgroundColor: brandLightTheme.colors.background,
            position: "absolute",
            top: 0,
            left: 0,
            height: "100%",
            width: "50%",
            transform: "translateX(0)",
            borderRadius: styleguide.gridbase * 2.5,
            ...styleguide.transition.standard,
            transitionProperty: "transform",
            boxShadow: brandLightTheme.shadows.z1
          },
          indicatorSelected: {
            transform: "translateX(100%)"
          },
          selector: {
            marginTop: styleguide.gridbase * 3
          }
        }),
        "duplicate-workspace_5420c8"
      );
      useStrings2 = createUseStrings(new_workspace_strings_default);
    }
  });

  // web-app/src/app/new-workspace/workspace-form.tsx
  function duplicateWorkspace(name, graph, src) {
    const subGraph = graph.exportSubGraph(src.key, 1, [NS_USERS], (r) => {
      if (r.scheme.namespace === NS_WORKSPACE) {
        r.set("name", name);
      }
      if (r.scheme.hasField("createdBy")) {
        r.set("createdBy", graph.rootKey);
      }
    });
    const data = graph.importSubGraph(subGraph, false);
    return data[0];
  }
  function createNewWorkspace(name, graphManager, opts = {}) {
    const { copyFrom } = opts;
    if (copyFrom) {
      return duplicateWorkspace(name, graphManager, copyFrom);
    }
    return graphManager.createVertex(NS_WORKSPACE, {
      name,
      users: /* @__PURE__ */ new Set([graphManager.rootKey])
    }).manager;
  }
  function WorkspaceForm({
    source,
    onWorkspaceCreated
  }) {
    const styles = useStyles22();
    const [name, setName] = (0, import_react_18_253.useState)("");
    const logger = useLogger();
    const graph = useGraphManager();
    const nameRef = (0, import_react_18_253.useRef)();
    const createRef = (0, import_react_18_253.useRef)(null);
    const workspacesQuery = useSharedQuery("workspaces");
    const [duplicateWs, setDuplicateWs] = (0, import_react_18_253.useState)();
    const [flowId] = (0, import_react_18_253.useState)(uniqueId());
    (0, import_react_18_253.useEffect)(() => {
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "create",
        type: "workspace",
        source,
        id: flowId
      });
    }, [logger, flowId]);
    const createWorkspace = () => {
      const wsResult = createNewWorkspace(name, graph, {
        copyFrom: duplicateWs
      });
      logger.log({
        severity: "INFO",
        event: "End",
        flow: "create",
        type: "workspace",
        source,
        id: flowId
      });
      onWorkspaceCreated(wsResult);
    };
    return /* @__PURE__ */ import_react_18_253.default.createElement(import_react_18_253.default.Fragment, null, /* @__PURE__ */ import_react_18_253.default.createElement(H22, null, "Create a new workspace"), /* @__PURE__ */ import_react_18_253.default.createElement(import_react_18_253.default.Fragment, null, /* @__PURE__ */ import_react_18_253.default.createElement("p", null, /* @__PURE__ */ import_react_18_253.default.createElement(Text2, null, "Organize your units, departments and projects with Workspaces. Write meeting minutes or notes, and assign tasks to a specific group of people.")), workspacesQuery.count > 0 && /* @__PURE__ */ import_react_18_253.default.createElement(
      DuplicateWorkspaceView,
      {
        className: cn(styles.input),
        allWorkspaces: workspacesQuery.results,
        setWorkspace: setDuplicateWs,
        workspace: duplicateWs
      }
    ), /* @__PURE__ */ import_react_18_253.default.createElement(
      TextField_default,
      {
        placeholder: "Name your workspace",
        value: name,
        onChange: (e) => setName(e.currentTarget.value),
        className: cn(styles.input),
        ref: nameRef
      }
    ), /* @__PURE__ */ import_react_18_253.default.createElement(
      RaisedButton,
      {
        disabled: name.trim().length === 0,
        className: cn(styles.input),
        onClick: createWorkspace,
        ref: createRef
      },
      /* @__PURE__ */ import_react_18_253.default.createElement("span", null, "Create new workspace")
    )), /* @__PURE__ */ import_react_18_253.default.createElement(Illustration, { className: cn(styles.illustration) }));
  }
  var import_react_18_253, useStyles22;
  var init_workspace_form = __esm({
    "web-app/src/app/new-workspace/workspace-form.tsx"() {
      import_react_18_253 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_scheme_types();
      init_styleguide();
      init_buttons();
      init_inputs();
      init_texts();
      init_css_objects();
      init_graph();
      init_query2();
      init_create_workspace_illustration();
      init_duplicate_workspace();
      init_logger();
      init_common();
      useStyles22 = makeStyles((theme) => ({
        input: {
          marginTop: styleguide.gridbase * 3,
          width: "100%",
          maxWidth: styleguide.gridbase * 40
        },
        illustration: {
          marginTop: styleguide.gridbase * 7
        },
        error: {
          marginTop: styleguide.gridbase,
          color: "red"
        }
      }));
    }
  });

  // web-app/src/app/new-workspace/index.tsx
  var import_react_18_254, import_react_router_6_72, import_index_d, useStyles23, CreateWorkspaceView;
  var init_new_workspace = __esm({
    "web-app/src/app/new-workspace/index.tsx"() {
      import_react_18_254 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_72 = __require("https://esm.sh/react-router@6.7.0");
      init_css_objects();
      init_styles();
      init_toolbar();
      init_workspace_form();
      import_index_d = __require("https://esm.sh/v96/@types/react@18.0.21/index.d.ts");
      useStyles23 = makeStyles((theme) => ({
        root: {
          alignItems: "stretch",
          flexShrink: 1,
          basedOn: [layout.column, layout.flex]
        },
        content: {
          backgroundColor: theme.background[100],
          alignItems: "center",
          basedOn: [layout.column, layout.flex]
        },
        card: {
          marginTop: styleguide.gridbase * 3,
          alignItems: "center",
          textAlign: "center",
          backgroundColor: theme.background[0],
          padding: styleguide.gridbase * 4,
          paddingBottom: 0,
          width: "100%",
          maxWidth: styleguide.gridbase * 90,
          boxSizing: "border-box",
          boxShadow: theme.shadows.z2,
          basedOn: [layout.column]
        },
        input: {
          marginTop: styleguide.gridbase * 3,
          width: "100%",
          maxWidth: styleguide.gridbase * 40
        },
        illustration: {
          marginTop: styleguide.gridbase * 7
        },
        error: {
          marginTop: styleguide.gridbase,
          color: "red"
        }
      }));
      CreateWorkspaceView = ({
        source,
        onWorkspaceCreated
      }) => {
        const styles = useStyles23();
        const [ws, setWs] = (0, import_react_18_254.useState)();
        const navigate = (0, import_react_router_6_72.useNavigate)();
        const onCreated = (0, import_index_d.useCallback)(
          (result) => {
            setWs(result);
            if (onWorkspaceCreated) {
              onWorkspaceCreated(result.key);
            }
          },
          [setWs]
        );
        const closeView = (0, import_index_d.useCallback)(() => {
          navigate("/login");
        }, [navigate]);
        return /* @__PURE__ */ import_react_18_254.default.createElement("div", { className: cn(styles.root) }, /* @__PURE__ */ import_react_18_254.default.createElement(Toolbar, null), /* @__PURE__ */ import_react_18_254.default.createElement("div", { className: cn(styles.content) }, /* @__PURE__ */ import_react_18_254.default.createElement("div", { className: cn(styles.card) }, /* @__PURE__ */ import_react_18_254.default.createElement(WorkspaceForm, { source, onWorkspaceCreated: onCreated }))));
      };
    }
  });

  // styles/components/dialog/index.tsx
  function DialogHeader({ children }) {
    const styles = useStyles24();
    return /* @__PURE__ */ import_react_18_255.default.createElement(H22, { className: cn(styles.header) }, children);
  }
  function Dialog({
    open,
    children,
    onClickOutside,
    className,
    onClose,
    onOpen,
    renderIndicator = () => null
  }) {
    const styles = useStyles24();
    const timeout = (0, import_react_18_255.useRef)();
    const [visible, setVisible] = (0, import_react_18_255.useState)(open);
    const [css, setCss] = (0, import_react_18_255.useState)(null);
    const onOpenRef = (0, import_react_18_255.useRef)(onOpen);
    (0, import_react_18_255.useEffect)(() => {
      onOpenRef.current = onOpen;
    }, [onOpen]);
    const mounted = (0, import_react_18_255.useRef)(true);
    (0, import_react_18_255.useEffect)(() => {
      mounted.current = true;
      return () => {
        mounted.current = false;
      };
    }, []);
    (0, import_react_18_255.useEffect)(() => {
      if (timeout.current) {
        clearTimeout(timeout.current);
        timeout.current = void 0;
      }
      if (!open) {
        timeout.current = window.setTimeout(() => {
          if (!mounted.current) {
            return;
          }
          setVisible(false);
        }, 200);
        setCss(styles.hide);
      } else {
        setCss("");
        setVisible(true);
        onOpenRef.current?.();
      }
    }, [open, styles]);
    if (!visible) {
      return null;
    }
    const root = document.getElementById("root");
    const ignoreClick = (e) => {
      e.stopPropagation();
      e.preventDefault();
    };
    const backgroundClick = (e) => {
      ignoreClick(e);
      onClickOutside && onClickOutside();
    };
    return import_react_dom_18_25.default.createPortal(
      /* @__PURE__ */ import_react_18_255.default.createElement(Layer, { priority: 3 }, ({ zIndex: zIndex2 }) => /* @__PURE__ */ import_react_18_255.default.createElement(
        "div",
        {
          className: cn(styles.backdrop, css && styles.backdropHide),
          style: { zIndex: zIndex2 },
          onClick: backgroundClick
        },
        /* @__PURE__ */ import_react_18_255.default.createElement(
          "div",
          {
            className: cn(styles.dialog, css, className),
            onClick: ignoreClick
          },
          onClose && /* @__PURE__ */ import_react_18_255.default.createElement(IconButton, { className: cn(styles.closeBtn), onClick: onClose }, /* @__PURE__ */ import_react_18_255.default.createElement(IconClose_default, null)),
          children
        ),
        renderIndicator()
      )),
      root
    );
  }
  var import_react_18_255, import_react_dom_18_25, show, hideAnim, backdropShow, backdropHide, useStyles24, DialogContent, DialogActions;
  var init_dialog = __esm({
    "styles/components/dialog/index.tsx"() {
      import_react_18_255 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_dom_18_25 = __toESM(__require("https://esm.sh/react-dom@18.2.0"));
      init_css_objects();
      init_texts();
      init_styleguide();
      init_layout();
      init_icons();
      init_buttons();
      init_layer();
      show = keyframes(
        {
          from: {
            opacity: 0,
            transform: "translateY(-50%)"
          },
          to: {
            opacity: 1,
            transform: "translateY(0)"
          }
        },
        "index_90a70e"
      );
      hideAnim = keyframes(
        {
          from: {
            opacity: 1,
            transform: "translateY(0)"
          },
          to: {
            opacity: 0,
            transform: "translateY(-50%)"
          }
        },
        "dialog_a096ea"
      );
      backdropShow = keyframes(
        {
          from: {
            opacity: 0
          },
          to: {
            opacity: 1
          }
        },
        "dialog_dca075"
      );
      backdropHide = keyframes(
        {
          from: {
            opacity: 1
          },
          to: {
            opacity: 0
          }
        },
        "dialog_0aa5dd"
      );
      useStyles24 = makeStyles(
        (theme) => ({
          backdrop: {
            backgroundColor: "rgba(8, 25, 43, 0.2)",
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            basedOn: [layout.column, layout.centerCenter],
            animation: `${backdropShow} 0.15s linear backwards`
          },
          backdropHide: {
            animation: `${backdropHide} 0.15s linear both`
          },
          dialog: {
            backgroundColor: theme.background[0],
            position: "relative",
            borderRadius: 4,
            boxSizing: "border-box",
            width: `calc(100vw - ${styleguide.gridbase * 2}px)`,
            maxWidth: styleguide.gridbase * 70,
            padding: styleguide.gridbase * 4,
            animation: `${show} 0.15s ${styleguide.transition.timing.standard}`,
            boxShadow: theme.shadows.z2
          },
          closeBtn: {
            position: "absolute",
            top: styleguide.gridbase * 1.5,
            right: styleguide.gridbase * 1.5,
            width: styleguide.gridbase * 3,
            height: styleguide.gridbase * 3
          },
          hide: {
            animation: `${hideAnim} 0.15s ${styleguide.transition.timing.standard} both`
          },
          content: {
            width: "100%"
          },
          actions: {
            marginTop: styleguide.gridbase * 2,
            alignItems: "center",
            justifyContent: "flex-end",
            basedOn: [layout.row],
            "& > button": {
              marginLeft: styleguide.gridbase * 2
            }
          },
          header: {
            textAlign: "center"
          },
          button: {
            padding: [0, styleguide.gridbase * 4],
            height: styleguide.gridbase * 5,
            fontSize: styleguide.gridbase * 2,
            fontWeight: 600,
            borderRadius: styleguide.gridbase * 2.5,
            backgroundColor: theme.primary[500],
            color: theme.background[0],
            transition: `background-color linear ${styleguide.transition.duration.short}ms`,
            ":disabled": {
              backgroundColor: "#d7e3f1"
            }
          }
        }),
        "dialog_90852c"
      );
      DialogContent = ({ children, className }) => {
        const styles = useStyles24();
        return /* @__PURE__ */ import_react_18_255.default.createElement("div", { className: cn(styles.content, className) }, children);
      };
      DialogActions = ({ children, className }) => {
        const styles = useStyles24();
        return /* @__PURE__ */ import_react_18_255.default.createElement("div", { className: cn(styles.actions, className) }, children);
      };
    }
  });

  // web-app/src/shared/components/due-date-editor/index.tsx
  function useDueDate() {
    const dd = (0, import_react_18_256.useContext)(dueDateContext);
    assert(dd !== void 0);
    return dd;
  }
  function dueDateReducer(state, action) {
    switch (action.type) {
      case "close": {
        return {
          open: false
        };
      }
      case "edit": {
        return {
          card: action.card,
          open: true
        };
      }
      default:
        throw new Error(`Unknown action type ${action.type}`);
    }
  }
  function DueDateEditor({ children }) {
    const styles = useStyles25();
    const logger = useLogger();
    const [state, dispatch] = (0, import_react_18_256.useReducer)(dueDateReducer, {
      open: false
    });
    const value = (0, import_react_18_256.useMemo)(
      () => ({
        edit: (card) => {
          dispatch({ type: "edit", card });
        }
      }),
      []
    );
    const onDateSelected = (0, import_react_18_256.useCallback)(
      (card, date) => {
        const manager = card.manager;
        const proxy = manager.getVertexProxy();
        proxy.dueDate = date;
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          type: "due",
          vertex: card.key
        });
        dispatch({ type: "close" });
      },
      [logger, dispatch]
    );
    const onClose = (0, import_react_18_256.useCallback)(
      (card) => {
        logger.log({
          severity: "INFO",
          event: "Cancel",
          flow: "datePicker",
          vertex: card.key
        });
        dispatch({ type: "close" });
      },
      [logger, dispatch]
    );
    return /* @__PURE__ */ import_react_18_256.default.createElement(dueDateContext.Provider, { value }, children, /* @__PURE__ */ import_react_18_256.default.createElement(
      Dialog,
      {
        open: state.open,
        onClickOutside: () => onClose(state.card),
        onClose: () => onClose(state.card)
      },
      state.card && /* @__PURE__ */ import_react_18_256.default.createElement(DialogContent, null, /* @__PURE__ */ import_react_18_256.default.createElement(DialogHeader, null, "Calendar"), /* @__PURE__ */ import_react_18_256.default.createElement(
        DatePicker,
        {
          className: cn(styles.datePicker),
          value: state.card.dueDate,
          onChange: (date) => {
            onDateSelected(state.card, date);
          }
        }
      ))
    ));
  }
  var import_react_18_256, useStyles25, dueDateContext;
  var init_due_date_editor = __esm({
    "web-app/src/shared/components/due-date-editor/index.tsx"() {
      import_react_18_256 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_dialog();
      init_css_objects();
      init_inputs();
      init_styleguide();
      init_logger();
      init_error();
      useStyles25 = makeStyles((theme) => ({
        datePicker: {
          margin: "auto",
          marginTop: styleguide.gridbase * 3,
          maxWidth: styleguide.gridbase * 47,
          width: "100%"
        }
      }));
      dueDateContext = import_react_18_256.default.createContext(void 0);
    }
  });

  // web-app/src/shared/components/floating-back-button.tsx
  function FloatingBackButton() {
    const styles = useStyles26();
    const navigate = (0, import_react_router_6_73.useNavigate)();
    const location = (0, import_react_router_6_73.useLocation)();
    const logger = useLogger();
    const onClick = () => {
      navigate("/");
      logger.log({
        severity: "INFO",
        event: "Click",
        source: "button:back",
        routeInfo: location.pathname + location.search + location.hash
      });
    };
    if (!history.length) {
      return null;
    }
    const text = "Back";
    return /* @__PURE__ */ import_react_18_257.default.createElement(Layer, null, (style) => /* @__PURE__ */ import_react_18_257.default.createElement(Button, { className: cn(styles.button), onClick, style }, /* @__PURE__ */ import_react_18_257.default.createElement(IconBack_default, null), /* @__PURE__ */ import_react_18_257.default.createElement(Text2, { className: cn(styles.text) }, text)));
  }
  var import_react_18_257, import_react_router_6_73, useStyles26;
  var init_floating_back_button = __esm({
    "web-app/src/shared/components/floating-back-button.tsx"() {
      import_react_18_257 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_73 = __require("https://esm.sh/react-router@6.7.0");
      init_css_objects();
      init_styles();
      init_buttons();
      init_texts();
      init_icons();
      init_layer();
      init_responsive();
      init_logger();
      useStyles26 = makeStyles((theme) => ({
        button: {
          position: "absolute",
          top: styleguide.gridbase * 3,
          left: styleguide.gridbase * 3,
          [MediaQueries.Tablet]: {
            top: styleguide.gridbase * 2,
            left: styleguide.gridbase * 2
          },
          [MediaQueries.Mobile]: {
            top: styleguide.gridbase,
            left: styleguide.gridbase
          },
          height: styleguide.gridbase * 5,
          padding: styleguide.gridbase,
          boxSizing: "border-box",
          minWidth: styleguide.gridbase * 12,
          backgroundColor: theme.background[0],
          borderRadius: 3,
          boxShadow: "0 3px 5px 0 rgba(42, 62, 82, 0.12)"
        },
        text: {
          height: `${styleguide.gridbase * 3}px`,
          lineHeight: `${styleguide.gridbase * 3}px`,
          textAlign: "left",
          basedOn: [layout.flex]
        }
      }));
    }
  });

  // web-app/src/core/react-utils/scrolling.tsx
  function useScrollParent() {
    return (0, import_react_18_258.useContext)(scrollingContext2);
  }
  function Scroller2({
    children
  }) {
    const [el, setEl] = (0, import_react_18_258.useState)();
    return /* @__PURE__ */ import_react_18_258.default.createElement(scrollingContext2.Provider, { value: el }, children(setEl));
  }
  var import_react_18_258, scrollingContext2;
  var init_scrolling2 = __esm({
    "web-app/src/core/react-utils/scrolling.tsx"() {
      import_react_18_258 = __toESM(__require("https://esm.sh/react@18.2.0"));
      scrollingContext2 = import_react_18_258.default.createContext(
        document.body
      );
    }
  });

  // web-app/src/core/slate/utils/hotkeys.ts
  function getPlatformHotkey(shortcut) {
    const hotkey = shortcut[CURRENT_PLATFORM] || shortcut.default;
    if (CURRENT_PLATFORM !== 0 /* Mac */) {
      return {
        ...hotkey,
        metaKeys: hotkey.metaKeys.map(
          (x) => x === "meta" /* Meta */ ? "ctrl" /* Ctrl */ : x
        )
      };
    }
    return hotkey;
  }
  function isKeyPressed(event, key) {
    const keyCode = KEY_MAP[key];
    const keyCodePressed = keyCode && event.nativeEvent.code === keyCode;
    return keyCodePressed || event.key === key;
  }
  function isHotkeyActive(event, hotkey) {
    return isKeyPressed(event, hotkey.key) && hotkey.metaKeys.every((k) => event[META_KEY_MAP[k]]);
  }
  var CURRENT_PLATFORM, META_KEY_MAP, codeA, codeZ, KEY_MAP;
  var init_hotkeys = __esm({
    "web-app/src/core/slate/utils/hotkeys.ts"() {
      init_utils4();
      CURRENT_PLATFORM = isMacOS() ? 0 /* Mac */ : 1 /* Windows */;
      META_KEY_MAP = {
        ["alt" /* Alt */]: "altKey",
        ["ctrl" /* Ctrl */]: "ctrlKey",
        ["shift" /* Shift */]: "shiftKey",
        ["meta" /* Meta */]: "metaKey"
      };
      codeA = "a".charCodeAt(0);
      codeZ = "z".charCodeAt(0);
      KEY_MAP = {};
      for (let key = codeA; key <= codeZ; key++) {
        const char = String.fromCharCode(key);
        KEY_MAP[char] = `Key${char.toUpperCase()}`;
      }
    }
  });

  // web-app/src/core/slate/mentions/mention-node.tsx
  function SuggestionItem({
    isSelected,
    children,
    onItemSelected,
    item
  }) {
    const styles = useStyles27();
    const ref = (0, import_react_18_259.useRef)();
    const scrollParent = useScrollParent();
    (0, import_react_18_259.useLayoutEffect)(() => {
      if (isSelected && ref.current && scrollParent) {
      }
    }, [scrollParent, isSelected]);
    const onClick = (e) => {
      e.stopPropagation();
      e.preventDefault();
      onItemSelected(item);
    };
    return /* @__PURE__ */ import_react_18_259.default.createElement(
      "div",
      {
        className: cn(styles.suggestionItem, isSelected && styles.selected),
        onClick
      },
      children
    );
  }
  function InnerSuggestionComponent({
    ItemSuggestionComponent,
    items,
    keyForItem,
    registerKeyDown,
    onItemSelected
  }) {
    const [selectedIndex, setSelectedIndex] = (0, import_react_18_259.useState)(0);
    const length = items.length;
    const selectedItem = (0, import_react_18_259.useRef)(items[selectedIndex]);
    (0, import_react_18_259.useEffect)(() => {
      selectedItem.current = items[selectedIndex];
    }, [items, selectedIndex]);
    (0, import_react_18_259.useEffect)(() => {
      return registerKeyDown((e) => {
        switch (e.key) {
          case "ArrowUp":
          case "Up": {
            setSelectedIndex((x) => (x - 1) % length);
            e.preventDefault();
            break;
          }
          case "ArrowDown":
          case "Down": {
            setSelectedIndex((x) => (x + 1) % length);
            e.preventDefault();
            break;
          }
          case "Enter":
          case "ArrowRight":
          case "Right": {
            e.preventDefault();
            onItemSelected(selectedItem.current);
            break;
          }
          default: {
            return;
          }
        }
      });
    }, [registerKeyDown, length, onItemSelected]);
    (0, import_react_18_259.useEffect)(() => setSelectedIndex(0), [length]);
    return /* @__PURE__ */ import_react_18_259.default.createElement(import_react_18_259.default.Fragment, null, items.map((item, index) => /* @__PURE__ */ import_react_18_259.default.createElement(
      ItemSuggestionComponent,
      {
        key: keyForItem(item),
        item,
        isSelected: index === selectedIndex,
        onItemSelected: () => onItemSelected(item)
      }
    )));
  }
  function MentionElementNode({
    attributes,
    trigger,
    element,
    children,
    registerKeyDown,
    MentionComponent
  }) {
    const styles = useStyles27();
    const anchor = (0, import_react_18_259.useRef)(null);
    const editor = (0, import_slate_react_0_87.useSlateStatic)();
    const selected = (0, import_slate_react_0_87.useSelected)();
    const [open, setOpen] = (0, import_react_18_259.useState)(false);
    const content = import_slate_0_87.Node.string(element).trim();
    const filter = content.startsWith(trigger) ? content.substr(trigger.length).trim() : content;
    const contentRef = (0, import_react_18_259.useRef)(content);
    (0, import_react_18_259.useLayoutEffect)(() => {
      setOpen(selected && !!anchor.current);
    }, [selected]);
    const closeMention = (0, import_react_18_259.useCallback)(() => {
      const path = CfdsEditor.findPath(editor, element);
      if (path === void 0 || path.length === 0) {
        return;
      }
      import_slate_0_87.Transforms.removeNodes(editor, { at: path });
      editor.activeMention = "";
      editor.discardMention = () => {
      };
    }, [editor, element]);
    const closeMentionRef = (0, import_react_18_259.useRef)(closeMention);
    (0, import_react_18_259.useEffect)(() => {
      contentRef.current = content;
      closeMentionRef.current = closeMention;
    }, [content, closeMention]);
    (0, import_react_18_259.useEffect)(() => {
      return registerKeyDown((e) => {
        if (isKeyPressed(e, "Backspace") && contentRef.current === trigger) {
          e.preventDefault();
          closeMentionRef.current();
        }
      });
    }, [registerKeyDown, trigger]);
    const SuggestionComponent = (0, import_react_18_259.useCallback)(
      (props) => {
        return /* @__PURE__ */ import_react_18_259.default.createElement(
          InnerSuggestionComponent,
          {
            ...props,
            registerKeyDown
          }
        );
      },
      [registerKeyDown]
    );
    return /* @__PURE__ */ import_react_18_259.default.createElement("div", { ...attributes, className: cn(styles.anchor) }, /* @__PURE__ */ import_react_18_259.default.createElement("span", { ref: anchor }, children, /* @__PURE__ */ import_react_18_259.default.createElement(
      popper_default,
      {
        anchor: anchor.current,
        position: "bottom",
        align: "start",
        contentEditable: false,
        open,
        className: cn(styles.popperShadow)
      },
      /* @__PURE__ */ import_react_18_259.default.createElement(Scroller2, null, (ref) => /* @__PURE__ */ import_react_18_259.default.createElement("div", { ref, className: cn(styles.scroller) }, /* @__PURE__ */ import_react_18_259.default.createElement(
        MentionComponent,
        {
          filter,
          SuggestionComponent,
          closeMention
        }
      )))
    )));
  }
  var import_react_18_259, import_slate_0_87, import_slate_react_0_87, useStyles27, SuggestionItemIcon;
  var init_mention_node = __esm({
    "web-app/src/core/slate/mentions/mention-node.tsx"() {
      import_react_18_259 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_87 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_87 = __require("https://esm.sh/slate-react@0.87.1");
      init_scrolling2();
      init_styles();
      init_popper();
      init_css_objects();
      init_with_cfds();
      init_hotkeys();
      useStyles27 = makeStyles((theme) => ({
        scroller: {
          maxHeight: styleguide.gridbase * 40,
          overflowY: "auto"
        },
        suggestionItem: {
          // height: styleguide.gridbase * 7,
          minWidth: styleguide.gridbase * 25,
          padding: styleguide.gridbase * 2,
          boxSizing: "border-box",
          fontSize: 14,
          alignItems: "center",
          backgroundColor: theme.background[0],
          transform: `backgroundColor linear ${styleguide.transition.duration.short}ms`,
          ":hover": {
            backgroundColor: "#f7f9ff"
          },
          userSelect: "none",
          basedOn: [layout.row]
        },
        suggestionIcon: {
          marginRight: styleguide.gridbase,
          basedOn: [layout.column, layout.centerCenter]
        },
        selected: {
          backgroundColor: theme.background[500]
        },
        anchor: {
          display: "inline-block"
        },
        popperShadow: {
          boxShadow: theme.shadows.z2
        }
      }));
      SuggestionItemIcon = ({
        children
      }) => {
        const styles = useStyles27();
        return /* @__PURE__ */ import_react_18_259.default.createElement("div", { className: cn(styles.suggestionIcon) }, children);
      };
    }
  });

  // web-app/src/core/slate/utils/element-utils.ts
  var import_slate_0_872, ElementUtils;
  var init_element_utils = __esm({
    "web-app/src/core/slate/utils/element-utils.ts"() {
      import_slate_0_872 = __require("https://esm.sh/slate@0.87.0");
      init_error();
      ElementUtils = {
        getSingleElement(editor, match = import_slate_0_872.Element.isElement) {
          const nodes = Array.from(
            import_slate_0_872.Editor.nodes(editor, {
              match,
              mode: "highest"
            })
          );
          if (nodes.length === 1) {
            return nodes[0];
          }
          return null;
        },
        isSingleElement(editor, match = () => true) {
          return !!ElementUtils.getSingleElement(
            editor,
            (n, p) => import_slate_0_872.Element.isElement(n) && match(n, p)
          );
        },
        isEmpty(node) {
          return !import_slate_0_872.Node.string(node);
        },
        getClosestElement(editor, at) {
          return ElementUtils.getClosestNode(editor, at, import_slate_0_872.Element.isElement);
        },
        getClosestNode(editor, at, match) {
          let [node, path] = import_slate_0_872.Editor.node(editor, at);
          while (path.length) {
            if (match(node)) {
              return [node, path];
            }
            [node, path] = import_slate_0_872.Editor.node(editor, import_slate_0_872.Path.parent(path));
          }
          notReached();
        },
        isEmptyElement(value) {
          if (!import_slate_0_872.Element.isElement(value)) {
            return false;
          }
          if (value.children.length === 0) {
            return true;
          }
          if (value.children.length > 1) {
            return false;
          }
          const onlyChild = value.children[0];
          return import_slate_0_872.Text.isText(onlyChild) && !onlyChild.text;
        },
        findNode(root, match) {
          for (const [node, path] of import_slate_0_872.Node.elements(root)) {
            if (match(node, path)) {
              return [node, path];
            }
          }
          return [null, null];
        },
        getNodeToggleStatus(editor, at, condition) {
          let fragment;
          try {
            fragment = import_slate_0_872.Editor.fragment(editor, at);
          } catch {
            return 0 /* Off */;
          }
          let all = true;
          let some = false;
          for (const node of fragment) {
            const conditionVal = condition(node);
            all = all && conditionVal;
            some = some || conditionVal;
          }
          if (all) {
            return 2 /* On */;
          }
          if (some) {
            return 1 /* Partial */;
          }
          return 0 /* Off */;
        },
        toggleNode(editor, at, setNodeAs, condition, setNodesOptions) {
          const nodeStatus = ElementUtils.getNodeToggleStatus(editor, at, condition);
          if (nodeStatus === 2 /* On */) {
            import_slate_0_872.Transforms.setNodes(
              editor,
              { tagName: "p" },
              {
                ...setNodesOptions,
                at
              }
            );
          } else {
            import_slate_0_872.Transforms.setNodes(editor, setNodeAs, {
              ...setNodesOptions,
              at
            });
          }
        }
      };
    }
  });

  // web-app/src/core/slate/utils/selection-utils.ts
  var import_slate_0_873, import_slate_react_0_872, SelectionUtils;
  var init_selection_utils = __esm({
    "web-app/src/core/slate/utils/selection-utils.ts"() {
      import_slate_0_873 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_872 = __require("https://esm.sh/slate-react@0.87.1");
      init_with_cfds();
      init_element_utils();
      SelectionUtils = {
        extractSingleElement(editor, at) {
          at = at || editor.selection;
          if (!at) {
            return [null, null];
          }
          const [a, b] = import_slate_0_873.Range.edges(at);
          const [[nodeA, pathA], [, pathB]] = [
            ElementUtils.getClosestElement(editor, a.path),
            ElementUtils.getClosestElement(editor, b.path)
          ];
          if (!import_slate_0_873.Path.equals(pathA, pathB)) {
            return [null, null];
          }
          return [nodeA, pathA];
        },
        getEditorEnd(editor) {
          let node = editor;
          const path = [];
          while (node.children) {
            const index = node.children.length - 1;
            path.push(index);
            node = node.children[index];
          }
          const offset2 = import_slate_0_873.Node.string(node).length;
          const point = { path, offset: offset2 };
          return point;
        },
        focusAtEnd(editor) {
          const end = SelectionUtils.getEditorEnd(editor);
          import_slate_react_0_872.ReactEditor.deselect(editor);
          import_slate_react_0_872.ReactEditor.blur(editor);
          const sel = {
            focus: end,
            anchor: end
          };
          import_slate_react_0_872.ReactEditor.focus(editor);
          CfdsEditor.setExternalSelection(editor, sel);
          editor.onChange();
        }
      };
    }
  });

  // cfds/client/suggestions.ts
  function letterBoost(expected, input) {
    const origChars = new Set(expected);
    let correctCount = 0;
    let wrongCount = 0;
    for (const c of input) {
      if (origChars.has(c)) {
        ++correctCount;
      } else {
        ++wrongCount;
      }
    }
    return 1 + (correctCount - wrongCount) / origChars.size;
  }
  function wordDist(expected, input, clamp = false) {
    expected = expected.toLowerCase();
    input = input.toLowerCase();
    const diff4 = kDMP.diff_main(input, expected, false);
    const levenshteinDist = kDMP.diff_levenshtein(diff4);
    const weightedLevenDist = Math.max(0, 1 - levenshteinDist / expected.length) * letterBoost(expected, input);
    const preDist = Math.min(
      1,
      // Boost by 10x prefix match so exact prefix always wins
      3 * commonPrefixLen(expected, input) / expected.length
    );
    const sufDist = commonSuffixLen(expected, input) / expected.length;
    let dist = Math.max(weightedLevenDist, preDist, sufDist);
    if (clamp) {
      dist = Math.min(1, Math.max(0, dist));
    }
    return dist;
  }
  function splitWords(str) {
    return str.split(/\s+/u);
  }
  function phraseDist(expected, input) {
    const expectedWords = splitWords(expected);
    const inputWords = splitWords(input);
    let matchCount = 0;
    let matchSum = 0;
    for (const iw of inputWords) {
      for (const ew of expectedWords) {
        const dist = wordDist(ew, iw);
        matchSum += dist;
        ++matchCount;
      }
    }
    return matchCount === 0 ? 0 : matchSum / matchCount;
  }
  function suggestResults(userInput, values, getValue = (v) => v) {
    if (userInput.length <= 0) {
      return Array.from(values);
    }
    const entries = [];
    for (const v of values) {
      const dist = phraseDist(getValue(v), userInput);
      if (
        /*dist > 0 ||*/
        userInput.length === 0
      ) {
        entries.push([dist, v]);
      }
    }
    return entries.sort((e1, e2) => e2[0] - e1[0]).map((e) => e[1]);
  }
  var init_suggestions = __esm({
    "cfds/client/suggestions.ts"() {
      init_string();
      init_defs();
    }
  });

  // web-app/src/core/slate/mentions/index.tsx
  function isMention(node) {
    return import_slate_0_874.Element.isElement(node) && node.tagName === "mention";
  }
  function filterSortMentions(items, query, getSortValue) {
    return suggestResults(query, items, getSortValue);
  }
  function withMentions(editor) {
    const { isInline, apply } = editor;
    editor.isInline = (element) => isMention(element) || isInline(element);
    const mentionEditor = editor;
    mentionEditor.apply = (operation) => {
      apply(operation);
      if (operation.type === "set_selection" && mentionEditor.activeMention) {
        const [node] = editor.selection ? SelectionUtils.extractSingleElement(
          mentionEditor,
          mentionEditor.selection
        ) : [null];
        if (!node || !isMention(node)) {
          mentionEditor.discardMention();
        }
      }
    };
    mentionEditor.activeMention = "";
    mentionEditor.discardMention = () => {
    };
    return mentionEditor;
  }
  function createMentionsPlugin({
    trigger,
    editor,
    canOpen,
    MentionComponent
  }) {
    const pluginId = uniqueId();
    const handlers2 = [];
    const registerKeyDown = (fn) => {
      handlers2.push(fn);
      return () => handlers2.splice(handlers2.indexOf(fn), 1);
    };
    return {
      onKeyDown(e) {
        if (editor.activeMention === pluginId) {
          handlers2.forEach((fn) => fn(e));
        }
        if (!editor.activeMention && isKeyPressed(e, trigger) && canOpen()) {
          e.preventDefault();
          const path = [...editor.selection.focus.path];
          const index = path.pop();
          import_slate_0_874.Editor.insertNode(editor, {
            tagName: "mention",
            pluginId,
            isLocal: true,
            children: [{ text: `${trigger} ` }]
          });
          const point = {
            path: [...path, index + 1, 0],
            offset: trigger.length
          };
          import_slate_0_874.Transforms.setSelection(editor, {
            focus: point,
            anchor: point
          });
          editor.activeMention = pluginId;
          editor.discardMention = () => {
            const [mention, path2] = ElementUtils.findNode(
              editor,
              (node) => {
                if (isMention(node)) {
                  return node.pluginId === pluginId;
                }
                return false;
              }
            );
            if (!mention) {
              console.warn("Discard mention called but no mention found");
            } else {
              import_slate_0_874.Transforms.unwrapNodes(editor, { at: path2 });
            }
            editor.activeMention = "";
            editor.discardMention = () => {
            };
          };
        }
      },
      renderElement(props) {
        if (!isMention(props.element) || props.element.pluginId !== pluginId) {
          return;
        }
        return /* @__PURE__ */ import_react_18_260.default.createElement(
          MentionElementNode,
          {
            MentionComponent,
            registerKeyDown,
            ...props,
            element: props.element,
            trigger
          }
        );
      }
    };
  }
  var import_react_18_260, import_slate_0_874;
  var init_mentions = __esm({
    "web-app/src/core/slate/mentions/index.tsx"() {
      import_react_18_260 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_874 = __require("https://esm.sh/slate@0.87.0");
      init_mention_node();
      init_common();
      init_hotkeys();
      init_selection_utils();
      init_element_utils();
      init_suggestions();
    }
  });

  // web-app/src/core/slate/mentions/tags.tsx
  function TagSuggestion({
    item,
    ...rest
  }) {
    const styles = useStyles28();
    const { name } = usePartialVertex(item, ["name"]);
    return /* @__PURE__ */ import_react_18_261.default.createElement(SuggestionItem, { item, ...rest }, /* @__PURE__ */ import_react_18_261.default.createElement(SuggestionItemIcon, null, /* @__PURE__ */ import_react_18_261.default.createElement("div", { className: cn(styles.tagIndicator) })), name);
  }
  function TagItemComponent({
    item,
    ...rest
  }) {
    return /* @__PURE__ */ import_react_18_261.default.createElement(TagSuggestion, { item, ...rest });
  }
  function TagsSuggestionComponent({
    filter,
    SuggestionComponent,
    closeMention
  }) {
    const card = useCurrentCard();
    const partial = usePartialVertex(card, ["tags"]);
    const sharedQueries = useSharedQueriesManager();
    const childTagsQuery = useQuery2(
      new Query(sharedQueries.childTags, (tag) => {
        const cardTagChild = partial.tags.get(tag.parentTag);
        return !cardTagChild || tag !== cardTagChild;
      })
    );
    const filteredTags = filterSortMentions(
      childTagsQuery.results,
      filter,
      (t) => t.getVertexProxy().name
    );
    const onItemSelected = (mgr) => {
      closeMention();
      const { tags } = partial;
      const tag = mgr.getVertexProxy();
      tags.set(tag.parentTag, tag);
      partial.tags = tags;
    };
    return /* @__PURE__ */ import_react_18_261.default.createElement(
      SuggestionComponent,
      {
        items: filteredTags,
        keyForItem: (mgr) => mgr.key,
        onItemSelected,
        ItemSuggestionComponent: TagItemComponent
      }
    );
  }
  function createTagsPlugin(options) {
    return createMentionsPlugin({
      ...options,
      trigger: "#",
      MentionComponent: TagsSuggestionComponent
    });
  }
  var import_react_18_261, useStyles28;
  var init_tags = __esm({
    "web-app/src/core/slate/mentions/tags.tsx"() {
      import_react_18_261 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_css_objects();
      init_query2();
      init_vertex2();
      init_mentions();
      init_card();
      init_mention_node();
      init_query();
      init_graph();
      useStyles28 = makeStyles((theme) => ({
        tagIndicator: {
          width: styleguide.gridbase,
          height: styleguide.gridbase,
          borderRadius: "50%",
          marginRight: styleguide.gridbase
        }
      }));
    }
  });

  // web-app/src/core/slate/plugins/index.ts
  function createTypeguard(key) {
    return (handler) => handler && key in handler;
  }
  function mergePlugins(plugins) {
    const keyboardHandlers = plugins.filter(isKeyDownHandler);
    const renderers = plugins.filter(isRenderElementHandler);
    const leafRenderers = plugins.filter(isRenderLeafHandler);
    const decorators = plugins.filter(isDecorateHandler);
    return {
      onKeyDown(event) {
        for (const handler of keyboardHandlers) {
          handler.onKeyDown(event);
          if (event.defaultPrevented) {
            return;
          }
        }
      },
      renderElement(props) {
        for (const renderer of renderers) {
          const el = renderer.renderElement(props);
          if (el) {
            return el;
          }
        }
      },
      renderLeaf(props) {
        for (const renderer of leafRenderers) {
          const el = renderer.renderLeaf(props);
          if (el) {
            return el;
          }
        }
        return null;
      },
      decorate(entry) {
        return decorators.reduce((ranges, decorator) => {
          return ranges.concat(decorator.decorate(entry));
        }, []);
      }
    };
  }
  function createPluginStack(plugins) {
    const merged = mergePlugins(plugins);
    const { renderElement, renderLeaf: renderLeaf2 } = merged;
    return {
      ...merged,
      renderElement(props) {
        const el = renderElement(props);
        if (!el) {
          throw new Error("No default renderer defined");
        }
        return el;
      },
      renderLeaf(props) {
        const el = renderLeaf2(props);
        if (!el) {
          throw new Error("No default leaf renderer defined");
        }
        return el;
      }
    };
  }
  var isKeyDownHandler, isRenderElementHandler, isRenderLeafHandler, isDecorateHandler;
  var init_plugins = __esm({
    "web-app/src/core/slate/plugins/index.ts"() {
      init_equals();
      isKeyDownHandler = createTypeguard("onKeyDown");
      isRenderElementHandler = createTypeguard("renderElement");
      isRenderLeafHandler = createTypeguard("renderLeaf");
      isDecorateHandler = createTypeguard("decorate");
    }
  });

  // web-app/src/core/slate/utils/auto-replace.ts
  function createAutoReplaceHandler({
    trigger,
    prefix,
    editor,
    onTriggered,
    canTrigger = () => true
  }) {
    const hotkey = getPlatformHotkey(trigger);
    return {
      onKeyDown(event) {
        if (!isHotkeyActive(event, hotkey) || !editor.selection || !import_slate_0_875.Range.isCollapsed(editor.selection)) {
          return;
        }
        const parent = ElementUtils.getClosestElement(editor, editor.selection);
        if (!parent) {
          return;
        }
        const [node, path] = parent;
        const text = import_slate_0_875.Node.string(node);
        if (text.startsWith(prefix) && canTrigger([node, path])) {
          event.preventDefault();
          const [[, textPath]] = Array.from(import_slate_0_875.Node.texts(node));
          const fullPath = [...path, ...textPath];
          import_slate_0_875.Transforms.delete(editor, {
            at: {
              anchor: { path: fullPath, offset: 0 },
              focus: { path: fullPath, offset: prefix.length }
            }
          });
          const alteredNode = import_slate_0_875.Node.get(editor, path);
          onTriggered([alteredNode, path]);
        }
      }
    };
  }
  var import_slate_0_875;
  var init_auto_replace = __esm({
    "web-app/src/core/slate/utils/auto-replace.ts"() {
      import_slate_0_875 = __require("https://esm.sh/slate@0.87.0");
      init_element_utils();
      init_hotkeys();
    }
  });

  // styles/colors.ts
  function getColorForString(str, seed, colors) {
    const index = murmurhash2_32_gc(str, seed) % colors.length;
    return colors[index];
  }
  function getColorForUserId(uid) {
    return getColorForString(uid, MURMUR_SEED_USER, COLORS_USERS);
  }
  var COLORS_USERS, MURMUR_SEED_USER;
  var init_colors = __esm({
    "styles/colors.ts"() {
      init_hash();
      COLORS_USERS = ["#1995d1", "#00c7d6", "#da9f43", "#dd2e9a", "#fe4a62"];
      MURMUR_SEED_USER = 7998030375102784;
    }
  });

  // web-app/src/core/react-utils/animate.ts
  function useAnimateWidth(ref, animateProp) {
    const size = useAnimateSize(ref.current, animateProp, "width");
    return (0, import_react_18_262.useMemo)(() => {
      if (size === null) {
        return {};
      }
      return { width: size };
    }, [size]);
  }
  function useAnimateHeight(ref, animateProp) {
    const size = useAnimateSize(ref.current || null, animateProp, "height");
    return (0, import_react_18_262.useMemo)(() => {
      if (size === null) {
        return {};
      }
      return { height: size };
    }, [size]);
  }
  function useAnimateSize(el, animateProp, animateSizeKey) {
    const lastValue = (0, import_react_18_262.useRef)(animateProp);
    const [size, setSize] = (0, import_react_18_262.useState)(null);
    (0, import_react_18_262.useEffect)(() => {
      if (!el || animateProp === lastValue.current) {
        return;
      }
      lastValue.current = animateProp;
      const rect = el.getBoundingClientRect();
      const currSize = rect[animateSizeKey];
      setSize(null);
      let abort = false;
      window.requestAnimationFrame(() => {
        if (abort) {
          return;
        }
        const desiredSize = el.getBoundingClientRect()[animateSizeKey];
        setSize(currSize);
        window.requestAnimationFrame(() => {
          if (abort) {
            return;
          }
          setSize(desiredSize);
        });
      });
      return () => {
        abort = true;
      };
    }, [el, animateProp, animateSizeKey]);
    return size;
  }
  var import_react_18_262;
  var init_animate = __esm({
    "web-app/src/core/react-utils/animate.ts"() {
      import_react_18_262 = __require("https://esm.sh/react@18.2.0");
    }
  });

  // styles/components/tooltip/index.tsx
  var import_react_18_263, useStyles29, Tooltip, tooltip_default;
  var init_tooltip = __esm({
    "styles/components/tooltip/index.tsx"() {
      import_react_18_263 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_popper();
      useStyles29 = makeStyles(
        (theme) => ({
          container: {
            position: "relative"
          },
          tooltip: {
            fontSize: 10,
            color: theme.background[0],
            position: "relative",
            zIndex: 100,
            lineHeight: 1.6,
            padding: [0, styleguide.gridbase],
            whiteSpace: "nowrap",
            backgroundColor: theme.background[700],
            margin: styleguide.gridbase,
            borderRadius: 3,
            height: styleguide.gridbase * 3,
            boxSizing: "border-box",
            basedOn: [layout.column, layout.centerCenter]
          },
          open: {}
        }),
        "tooltip_d751da"
      );
      Tooltip = ({
        text,
        children,
        locked,
        className,
        position = "top",
        align = "center",
        disabled = false
      }) => {
        const styles = useStyles29();
        const buttonRef = (0, import_react_18_263.useRef)();
        const [isOpen, setIsOpen] = (0, import_react_18_263.useState)(!!locked);
        const button = import_react_18_263.default.Children.only(children);
        const childProps = {
          ref: buttonRef,
          ...button.props
        };
        const { onMouseOver, onMouseLeave } = childProps;
        const onTooltipMouseOver = (0, import_react_18_263.useCallback)(
          (e) => {
            setIsOpen(!disabled && (locked || true));
            if (onMouseOver) {
              onMouseOver(e);
            }
          },
          [locked, onMouseOver, disabled]
        );
        const onTooltipMouseLeave = (0, import_react_18_263.useCallback)(
          (e) => {
            setIsOpen(!disabled && (locked || false));
            if (onMouseLeave) {
              onMouseLeave(e);
            }
          },
          [locked, onMouseLeave, disabled]
        );
        childProps.onMouseOver = onTooltipMouseOver;
        childProps.onMouseLeave = onTooltipMouseLeave;
        const cloned = import_react_18_263.default.cloneElement(button, childProps);
        return /* @__PURE__ */ import_react_18_263.default.createElement(import_react_18_263.default.Fragment, null, cloned, /* @__PURE__ */ import_react_18_263.default.createElement(
          popper_default,
          {
            open: isOpen && !!text,
            anchor: buttonRef.current,
            position,
            align
          },
          /* @__PURE__ */ import_react_18_263.default.createElement("div", { className: cn(styles.tooltip, className) }, text)
        ));
      };
      tooltip_default = Tooltip;
    }
  });

  // web-app/src/shared/avatar/index.tsx
  function getInitials(name) {
    return name.split(" ").map((x) => x[0]).filter((x) => x).join("");
  }
  function AvatarView({
    user,
    size = "small",
    className,
    style = {}
  }) {
    const styles = useStyles30();
    const { name, avatarUrl } = usePartialVertex(user, ["name", "avatarUrl"]);
    return /* @__PURE__ */ import_react_18_264.default.createElement(tooltip_default, { text: name }, /* @__PURE__ */ import_react_18_264.default.createElement(
      "div",
      {
        className: cn(
          className,
          styles.container,
          styles[size],
          avatarUrl ? styles.withImage : styles.noAvatar
        ),
        style: {
          ...style
        }
      },
      avatarUrl ? /* @__PURE__ */ import_react_18_264.default.createElement("img", { width: "100%", height: "100%", src: avatarUrl, alt: name }) : /* @__PURE__ */ import_react_18_264.default.createElement("span", { className: cn(styles.userInitials) }, getInitials(name))
    ));
  }
  var import_react_18_264, useStyles30, avatar_default;
  var init_avatar = __esm({
    "web-app/src/shared/avatar/index.tsx"() {
      import_react_18_264 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_tooltip();
      init_typography();
      init_css_objects();
      init_theme();
      init_vertex2();
      useStyles30 = makeStyles(() => ({
        container: {
          overflow: "hidden",
          borderRadius: styleguide.gridbase * 2,
          minWidth: styleguide.gridbase * 4,
          height: styleguide.gridbase * 4,
          boxSizing: "border-box",
          basedOn: [layout.column, layout.centerCenter]
        },
        noAvatar: {
          border: "1px solid",
          borderColor: brandLightTheme.mono.m2,
          backgroundColor: brandLightTheme.colors.background
        },
        small: {
          boxSizing: "border-box",
          padding: [0, 2],
          borderRadius: styleguide.gridbase,
          minWidth: styleguide.gridbase * 2,
          height: styleguide.gridbase * 2
        },
        withImage: {
          "&small": {
            padding: 0,
            width: styleguide.gridbase * 2
          },
          "&big": {
            width: styleguide.gridbase * 4
          }
        },
        userInitials: {
          textTransform: "uppercase",
          basedOn: [useStyles2.textSmall]
        },
        big: {
          userInitials: {
            fontSize: 15
          }
        }
      }));
      avatar_default = AvatarView;
    }
  });

  // web-app/src/core/react-utils/index.ts
  function resolveUrl(doc) {
    const vertex = doc instanceof VertexManager ? doc.getVertexProxy() : doc;
    if (vertex instanceof Note) {
      return `/${vertex.workspaceKey}/notes/${vertex.key}`;
    }
    return notImplemented();
  }
  function createDocumentRouter(navigate) {
    return {
      goTo(doc) {
        const link = resolveUrl(doc);
        navigate(link);
      },
      urlFor(doc) {
        return resolveUrl(doc);
      }
    };
  }
  function useDocumentRouter() {
    const navigate = (0, import_react_router_dom_6_7.useNavigate)();
    return createDocumentRouter(navigate);
  }
  function useFocusOnMount(ref) {
    (0, import_react_18_265.useLayoutEffect)(() => {
      if (ref.current) {
        ref.current.focus();
      }
    }, [ref]);
  }
  var import_react_18_265, import_react_router_dom_6_7;
  var init_react_utils = __esm({
    "web-app/src/core/react-utils/index.ts"() {
      import_react_18_265 = __require("https://esm.sh/react@18.2.0");
      import_react_router_dom_6_7 = __require("https://esm.sh/react-router-dom@6.7.0");
      init_error();
      init_note();
      init_vertex_manager();
    }
  });

  // web-app/src/shared/card/mention.tsx
  function MentionItem({
    isSelected = false,
    children,
    onClick
  }) {
    const styles = useStyles31();
    const ref = (0, import_react_18_266.useRef)(null);
    const scrollParent = useScrollParent();
    (0, import_react_18_266.useLayoutEffect)(() => {
      if (isSelected && scrollParent) {
        const parent = scrollParent;
        const el = ref.current;
        const scrollOffset = el.offsetTop - parent.offsetTop;
        const height = el.clientHeight;
        if (scrollOffset < parent.scrollTop) {
          el.scrollIntoView();
        } else if (scrollOffset + height > parent.scrollTop + parent.clientHeight) {
          parent.scrollTop = scrollOffset + height - parent.clientHeight;
        }
      }
    }, [scrollParent, isSelected]);
    return /* @__PURE__ */ import_react_18_266.default.createElement(
      "div",
      {
        onClick,
        className: cn(styles.mention, isSelected && styles.selected),
        ref
      },
      children
    );
  }
  function MentionPopup({
    trigger,
    onSelected,
    getItems,
    renderItem: renderItem2
  }) {
    const close = useMenuClose();
    const styles = useStyles31();
    const ref = (0, import_react_18_266.useRef)(null);
    useFocusOnMount(ref);
    const [filter, setFilter] = (0, import_react_18_266.useState)(trigger);
    const onChange = ({ target }) => {
      let { value } = target;
      if (!value.startsWith(trigger)) {
        value = `${trigger}${value}`;
      }
      setFilter(value);
    };
    const [selectedIndex, setSelectedIndex] = (0, import_react_18_266.useState)(0);
    const select = (item) => {
      onSelected(item, filter);
      close();
    };
    const items = getItems(filter.substring(trigger.length));
    const onKeyDown = (e) => {
      switch (e.key) {
        case "ArrowUp":
          e.preventDefault();
          e.stopPropagation();
          setSelectedIndex((x) => x - 1 < 0 ? items.length - 1 : x - 1);
          break;
        case "ArrowDown":
          e.preventDefault();
          e.stopPropagation();
          setSelectedIndex((x) => (x + 1) % items.length);
          break;
        case "Backspace":
          if (!filter) {
            e.preventDefault();
            e.stopPropagation();
            close();
          }
          break;
        case "Escape":
          e.preventDefault();
          e.stopPropagation();
          close();
          break;
        case "Enter":
          e.preventDefault();
          e.stopPropagation();
          select(items[selectedIndex]);
          break;
        default:
          return;
      }
    };
    return /* @__PURE__ */ import_react_18_266.default.createElement("div", { className: cn(styles.popupContent) }, /* @__PURE__ */ import_react_18_266.default.createElement(
      TextField_default,
      {
        className: cn(styles.input),
        type: "text",
        value: filter,
        onChange,
        onKeyDown,
        ref
      }
    ), /* @__PURE__ */ import_react_18_266.default.createElement(Scroller2, null, (ref2) => /* @__PURE__ */ import_react_18_266.default.createElement("div", { className: cn(styles.list), ref: ref2 }, items.map(
      (item, i) => renderItem2(item, {
        isSelected: i === selectedIndex,
        onClick: () => select(item)
      })
    ))));
  }
  var import_react_18_266, useStyles31;
  var init_mention = __esm({
    "web-app/src/shared/card/mention.tsx"() {
      import_react_18_266 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styles();
      init_inputs();
      init_menu();
      init_react_utils();
      init_scrolling2();
      useStyles31 = makeStyles((theme) => ({
        popup: {
          backgroundColor: theme.background[0],
          width: styleguide.gridbase * 32,
          marginBottom: styleguide.gridbase * 2
        },
        popupContent: {
          backgroundColor: theme.background[0],
          width: "100%",
          boxSizing: "border-box",
          basedOn: [layout.column]
        },
        list: {
          width: "100%",
          maxHeight: styleguide.gridbase * 6 * 5,
          overflowY: "auto",
          basedOn: [layout.column]
        },
        input: {
          border: "none",
          width: "100%",
          borderBottom: "1px solid rgba(156, 178, 205, 0.6)",
          borderRadius: 0
        },
        mention: {
          flexShrink: 0,
          width: "100%",
          height: styleguide.gridbase * 6,
          padding: [0, styleguide.gridbase],
          boxSizing: "border-box",
          backgroundColor: theme.background[0],
          alignItems: "center",
          cursor: "pointer",
          basedOn: [layout.row]
        },
        selected: {
          backgroundColor: "#f0f3fa"
        }
      }));
    }
  });

  // web-app/src/shared/utils/assignees.ts
  function assignNote(logger, source, card, user, insteadOf) {
    const assignees = card.assignees;
    assignees.add(user);
    if (insteadOf && insteadOf !== user) {
      assignees.delete(insteadOf);
    }
    logger.log({
      severity: "INFO",
      event: "MetadataChanged",
      vertex: card.key,
      uiSource: source,
      metadataType: "assignee",
      removed: insteadOf?.key,
      added: user.key
    });
  }
  var init_assignees = __esm({
    "web-app/src/shared/utils/assignees.ts"() {
    }
  });

  // web-app/src/shared/selection-button/index.tsx
  function calculateDist(sortValue, filter) {
    switch (sortValue) {
      case "TOP" /* TOP */: {
        return 100;
      }
      case "BOTTOM" /* BOTTOM */: {
        return 0;
      }
      default: {
        return wordDist(sortValue.toLowerCase(), filter.toLowerCase());
      }
    }
  }
  function SelectionPopup({
    onSelected,
    trigger,
    getItems,
    renderItem: renderItem2
  }) {
    const getItemsImpl = (filter) => getItems(filter).map(
      (item) => ({
        value: item.value,
        key: item.value.key || item.value.id || item.sortValue,
        dist: calculateDist(item.sortValue, filter),
        isFixed: item.sortValue === "BOTTOM" /* BOTTOM */ || item.sortValue === "TOP" /* TOP */
      })
    ).filter((x) => !filter || x.dist > filter.length * 0.1 || x.isFixed).sort((a, b) => b.dist - a.dist);
    const onSelectedImpl = (item) => {
      const { value } = item;
      onSelected(value);
    };
    const renderItemImpl = (item, opts) => renderItem2({ ...opts, item: item.value, key: item.key });
    return /* @__PURE__ */ import_react_18_267.default.createElement(
      MentionPopup,
      {
        getItems: getItemsImpl,
        trigger: trigger || "",
        onSelected: onSelectedImpl,
        renderItem: renderItemImpl
      }
    );
  }
  function SelectionButton({
    className,
    children,
    onSelected,
    renderItem: renderItem2,
    getItems,
    trigger = "",
    style = {}
  }) {
    const styles = useStyles32();
    return /* @__PURE__ */ import_react_18_267.default.createElement(
      Menu,
      {
        renderButton: children,
        position: "top",
        align: "center",
        direction: "in",
        className,
        style,
        popupClassName: cn(styles.popup)
      },
      /* @__PURE__ */ import_react_18_267.default.createElement(
        SelectionPopup,
        {
          onSelected,
          trigger,
          renderItem: renderItem2,
          getItems
        }
      )
    );
  }
  var import_react_18_267, useStyles32;
  var init_selection_button = __esm({
    "web-app/src/shared/selection-button/index.tsx"() {
      import_react_18_267 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_suggestions();
      init_styleguide();
      init_menu();
      init_css_objects();
      init_mention();
      useStyles32 = makeStyles((theme) => ({
        popup: {
          backgroundColor: theme.background[0],
          width: styleguide.gridbase * 32,
          marginBottom: styleguide.gridbase * 2
        }
      }));
    }
  });

  // styles/components/new-icons/icon-plus.tsx
  function IconPlus({ className, size = 16 /* Small */ }) {
    return /* @__PURE__ */ import_react_18_268.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_268.default.createElement(
        "path",
        {
          d: "M0 8C0 3.58172 3.58172 0 8 0V0C12.4183 0 16 3.58172 16 8V8C16 12.4183 12.4183 16 8 16V16C3.58172 16 0 12.4183 0 8V8Z",
          fill: "#E5E5E5"
        }
      ),
      /* @__PURE__ */ import_react_18_268.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 10L8 6",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_268.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M6 8L10 8",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_268;
  var init_icon_plus = __esm({
    "styles/components/new-icons/icon-plus.tsx"() {
      import_react_18_268 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // web-app/src/shared/card/assignees-view.tsx
  function AddAssigneeIcon({
    className = "",
    fill = "#D7E3F1",
    stroke = "#C5D4E6"
  }) {
    const styles = useStyles33();
    const theme = useTheme();
    return /* @__PURE__ */ import_react_18_269.default.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        width: "32",
        height: "32",
        viewBox: "0 0 32 32",
        className: cn(styles.addIcon, className)
      },
      /* @__PURE__ */ import_react_18_269.default.createElement("defs", null, /* @__PURE__ */ import_react_18_269.default.createElement("circle", { id: "cY734WTs886Gxkc8xMVJ", cx: "16", cy: "16", r: "16" }), /* @__PURE__ */ import_react_18_269.default.createElement(
        "mask",
        {
          id: "dAQteIXSYDMRZpa0FZiB",
          width: "32",
          height: "32",
          x: "0",
          y: "0",
          fill: "#fff",
          maskContentUnits: "userSpaceOnUse",
          maskUnits: "objectBoundingBox"
        },
        /* @__PURE__ */ import_react_18_269.default.createElement("use", { xlinkHref: "#cY734WTs886Gxkc8xMVJ" })
      )),
      /* @__PURE__ */ import_react_18_269.default.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ import_react_18_269.default.createElement(
        "use",
        {
          fill: theme.background[0],
          stroke: "#C5D4E6",
          strokeDasharray: "2 2",
          strokeWidth: "4",
          mask: "url(#dAQteIXSYDMRZpa0FZiB)",
          xlinkHref: "#cY734WTs886Gxkc8xMVJ"
        }
      ), /* @__PURE__ */ import_react_18_269.default.createElement(
        "path",
        {
          fill: "#D7E3F1",
          d: "M22.016 16.683L16.683 16.683 16.683 22.016 14.933 22.016 14.933 16.683 9.6 16.683 9.6 14.933 14.933 14.933 14.933 9.6 16.683 9.6 16.683 14.933 22.016 14.933z"
        }
      ))
    );
  }
  function UserSpan({ userManager }) {
    const styles = useStyles33();
    const user = usePartialVertex(userManager, ["name"]);
    return /* @__PURE__ */ import_react_18_269.default.createElement("span", { className: cn(styles.userName) }, user.name);
  }
  function DefaultAvatar({
    user,
    size
  }) {
    const styles = useStyles33();
    return /* @__PURE__ */ import_react_18_269.default.createElement(avatar_default, { user, size, className: cn(styles.assignee) });
  }
  function Assignee({
    user,
    cardManager,
    users,
    source,
    assignees,
    className,
    renderSelected = DEFAULT_RENDER,
    onInviteUserSelected,
    size = "big",
    style = {}
  }) {
    const styles = useStyles33();
    const logger = useLogger();
    const getItems = (0, import_react_18_269.useCallback)(() => {
      return users.filter(
        (u) => u.key !== user.key && assignees.find((a) => a.key === u.key) === void 0
      ).map(
        (u) => ({
          value: u,
          sortValue: u.getVertexProxy().name
        })
      ).concat([
        {
          value: REMOVE_ASSIGNEE,
          sortValue: "TOP" /* TOP */
        },
        {
          value: INVITE_USER,
          sortValue: "BOTTOM" /* BOTTOM */
        }
      ]);
    }, [users, assignees, user]);
    const onSelected = (value) => {
      if (value === INVITE_USER) {
        onInviteUserSelected();
        return;
      }
      const card = cardManager.getVertexProxy();
      const current = user.getVertexProxy();
      if (value === REMOVE_ASSIGNEE) {
        card.assignees.delete(current);
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          uiSource: source,
          user: current.key,
          vertex: card.key,
          metadataType: "assignee"
        });
        return;
      }
      if (value.key === user.key) {
        return;
      }
      assignNote(logger, source, card, value.getVertexProxy(), current);
    };
    return /* @__PURE__ */ import_react_18_269.default.createElement(
      SelectionButton,
      {
        getItems,
        className: cn(styles.selectionButton, className),
        renderItem,
        onSelected,
        style
      },
      ({ isOpen }) => renderSelected({ isOpen, user, size })
    );
  }
  function AssignButton({
    cardManager,
    className,
    users,
    assignees,
    source,
    onInviteUserSelected,
    style = {}
  }) {
    const styles = useStyles33();
    const logger = useLogger();
    const getItems = (0, import_react_18_269.useCallback)(() => {
      return users.filter((u) => assignees.find((a) => a.key === u.key) === void 0).map(
        (u) => ({
          value: u,
          sortValue: u.getVertexProxy().name
        })
      ).concat([
        {
          value: INVITE_USER,
          sortValue: "BOTTOM" /* BOTTOM */
        }
      ]);
    }, [users, assignees]);
    const onSelected = (selected) => {
      if (selected === REMOVE_ASSIGNEE) {
        return;
      }
      if (selected === INVITE_USER) {
        onInviteUserSelected();
        return;
      }
      const card = cardManager.getVertexProxy();
      const user = selected.getVertexProxy();
      assignNote(logger, source, card, user);
    };
    return /* @__PURE__ */ import_react_18_269.default.createElement(
      SelectionButton,
      {
        getItems,
        renderItem,
        onSelected,
        className: cn(styles.selectionButton, styles.addButton, className),
        style
      },
      () => /* @__PURE__ */ import_react_18_269.default.createElement(IconPlus, null)
    );
  }
  function calcStyle(isExpanded, reverse, index) {
    return isExpanded ? { transform: "translateX(0)" } : {
      transform: `translateX(${styleguide.gridbase * 1.25 * index * (reverse ? -1 : 1)}px)`
    };
  }
  function AssigneesView({
    cardManager,
    className,
    assignClassName,
    cardType,
    reverse = false,
    source,
    renderAssignee,
    isExpanded = true
  }) {
    const styles = useStyles33();
    const logger = useLogger();
    const [isInviteOpen, setIsInviteOpen] = (0, import_react_18_269.useState)(false);
    const partialCard = usePartialVertex(cardManager, ["workspace", "assignees"]);
    const workspaceManager = partialCard.workspace.manager;
    const workspaces = (0, import_react_18_269.useMemo)(() => [workspaceManager], [workspaceManager]);
    const users = Array.from(cardManager.getVertexProxy().workspace.users).map(
      (u) => u.manager
    );
    const assignees = Array.from(partialCard.assignees).map(
      (u) => u.manager
    );
    const onInviteUserSelected = () => {
      setIsInviteOpen(true);
    };
    const onUsersInvited = (users2) => {
      for (const user of users2) {
        assignNote(
          logger,
          source,
          cardManager.getVertexProxy(),
          user.getVertexProxy()
        );
      }
    };
    const size = "small";
    const assignStyle = calcStyle(isExpanded, reverse, assignees.length);
    return /* @__PURE__ */ import_react_18_269.default.createElement(
      "div",
      {
        className: cn(
          styles.list,
          className,
          styles[cardType],
          reverse ? styles.reverse : styles.standard
        )
      },
      assignees.map((user, index) => {
        const style = calcStyle(isExpanded, reverse, index);
        return /* @__PURE__ */ import_react_18_269.default.createElement(
          Assignee,
          {
            source,
            key: user.key,
            cardManager,
            users,
            assignees,
            user,
            onInviteUserSelected,
            size,
            style,
            renderSelected: renderAssignee
          }
        );
      }),
      /* @__PURE__ */ import_react_18_269.default.createElement(
        AssignButton,
        {
          source,
          cardManager,
          users,
          assignees,
          className: cn(
            styles.addButton,
            !isExpanded && styles.hide,
            assignClassName
          ),
          onInviteUserSelected,
          style: assignStyle
        }
      )
    );
  }
  var import_react_18_269, useStyles33, REMOVE_ASSIGNEE, INVITE_USER, RenderedItem, renderItem, DEFAULT_RENDER;
  var init_assignees_view = __esm({
    "web-app/src/shared/card/assignees-view.tsx"() {
      import_react_18_269 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styles();
      init_avatar();
      init_theme();
      init_mention();
      init_assignees();
      init_selection_button();
      init_icons();
      init_vertex2();
      init_icon_plus();
      init_theme();
      init_logger();
      useStyles33 = makeStyles(() => ({
        list: {
          basedOn: [layout.row],
          height: styleguide.gridbase * 3,
          alignItems: "center"
        },
        standard: {
          flexDirection: "row-reverse",
          assignee: {
            marginLeft: styleguide.gridbase * 0.5
          }
        },
        reverse: {
          flexDirection: "row",
          assignee: {
            marginRight: styleguide.gridbase * 0.5
          }
        },
        selectionButton: {
          ...styleguide.transition.short,
          transitionProperty: "transform"
        },
        assignee: {},
        regular: {
          //marginTop: styleguide.gridbase * 2,
          //marginBottom: styleguide.gridbase,
          addButton: {
            width: styleguide.gridbase * 3,
            height: styleguide.gridbase * 3
          }
        },
        small: {
          addButton: {
            width: styleguide.gridbase * 2.5,
            height: styleguide.gridbase * 2.5
          }
        },
        addButton: {
          backgroundColor: brandLightTheme.mono.m2,
          flexShrink: 0,
          borderRadius: "50%",
          border: ``
        },
        popup: {
          backgroundColor: brandLightTheme.colors.background,
          width: styleguide.gridbase * 32,
          marginBottom: styleguide.gridbase * 2
        },
        popupContent: {
          backgroundColor: brandLightTheme.colors.background,
          width: "100%",
          boxSizing: "border-box",
          basedOn: [layout.column]
        },
        input: {
          border: "none",
          width: "100%",
          borderBottom: "1px solid rgba(156, 178, 205, 0.6)",
          borderRadius: 0
        },
        userName: {
          flexGrow: 1,
          whiteSpace: "nowrap",
          marginLeft: styleguide.gridbase,
          color: brandLightTheme.colors.text
        },
        inviteIcon: {
          marginRight: styleguide.gridbase * 2
        },
        addIcon: {
          opacity: 1
        },
        hide: {
          opacity: 0
        }
      }));
      REMOVE_ASSIGNEE = "REMOVE_ASSIGNEE";
      INVITE_USER = "INVITE_USER";
      RenderedItem = ({
        item,
        ...props
      }) => {
        const styles = useStyles33();
        if (item === REMOVE_ASSIGNEE) {
          return /* @__PURE__ */ import_react_18_269.default.createElement(MentionItem, { ...props, key: REMOVE_ASSIGNEE }, /* @__PURE__ */ import_react_18_269.default.createElement(IconClose_default, null), /* @__PURE__ */ import_react_18_269.default.createElement("span", { className: cn(styles.userName) }, "Remove Assignee"));
        }
        if (item === INVITE_USER) {
          return /* @__PURE__ */ import_react_18_269.default.createElement(MentionItem, { ...props, key: INVITE_USER }, /* @__PURE__ */ import_react_18_269.default.createElement(AddAssigneeIcon, { className: cn(styles.inviteIcon) }), /* @__PURE__ */ import_react_18_269.default.createElement("span", null, "Invite to workspace"));
        }
        return /* @__PURE__ */ import_react_18_269.default.createElement(MentionItem, { ...props, key: item.key }, /* @__PURE__ */ import_react_18_269.default.createElement(avatar_default, { user: item, size: "big" }), /* @__PURE__ */ import_react_18_269.default.createElement(UserSpan, { userManager: item }));
      };
      renderItem = ({
        item,
        ...props
      }) => {
        return /* @__PURE__ */ import_react_18_269.default.createElement(RenderedItem, { item, ...props });
      };
      DEFAULT_RENDER = ({ isOpen, user, size }) => {
        return /* @__PURE__ */ import_react_18_269.default.createElement(DefaultAvatar, { user, isOpen, size });
      };
    }
  });

  // web-app/src/shared/card/placeholder.ts
  function getRandomCardPlaceholder() {
    const rand = Math.round(Math.random() * (PLACEHOLDERS.length - 1));
    return PLACEHOLDERS[rand];
  }
  function useCardPlaceholderText() {
    const [placeholder] = (0, import_react_18_270.useState)(getRandomCardPlaceholder);
    return placeholder;
  }
  var import_react_18_270, PLACEHOLDERS;
  var init_placeholder = __esm({
    "web-app/src/shared/card/placeholder.ts"() {
      import_react_18_270 = __require("https://esm.sh/react@18.2.0");
      PLACEHOLDERS = [
        "Buy beer for the office \u{1F37A} @Someone #party",
        "Order lunch before rush hour @Someone #food #high-priority",
        "Get a coffee, you need it! @Someone #important",
        "Get doughnuts for the team @Someone",
        "Find the secret nap room @Someone",
        "Cover your co-workers desk with sticky notes @Someone #teamwork"
      ];
    }
  });

  // web-app/src/shared/pill/index.tsx
  var import_react_18_271, showAnim, useStyles34, PillContext, PillAction, PillContent, Pill;
  var init_pill = __esm({
    "web-app/src/shared/pill/index.tsx"() {
      import_react_18_271 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_animate();
      init_styleguide();
      init_css_objects();
      showAnim = keyframes({
        "0%": {
          opacity: 0
        },
        "99%": {
          opacity: 0
        },
        "100%": {
          opacity: 1
        }
      });
      useStyles34 = makeStyles((theme) => ({
        pill: {
          direction: "ltr",
          height: styleguide.gridbase * 3,
          minWidth: styleguide.gridbase * 6,
          padding: [0, styleguide.gridbase],
          flexShrink: 0,
          fontSize: 12,
          borderRadius: styleguide.gridbase * 2.5,
          ...styleguide.transition.short,
          transitionProperty: "all",
          whiteSpace: "nowrap",
          boxSizing: "border-box",
          display: "flex",
          alignItems: "center",
          flexDirection: "row",
          userSelect: "none"
        },
        ["full" /* Full */]: {
          backgroundColor: "var(--pill-color)",
          color: theme.background.text
        },
        ["border" /* Border */]: {
          border: "1px solid var(--pill-color)",
          color: "var(--pill-color)"
        },
        ["none" /* None */]: {
          color: "var(--pill-color)",
          border: "1px solid transparent",
          pillContent: {
            margin: 0
          }
        },
        pillContent: {
          marginLeft: styleguide.gridbase * 0.75,
          marginRight: styleguide.gridbase / 2,
          animation: `${showAnim} ${styleguide.transition.duration.short}ms linear backwards`,
          userSelect: "none"
        },
        pillAction: {
          position: "relative",
          top: 1,
          animation: `${showAnim} ${styleguide.transition.duration.short}ms backwards linear`,
          cursor: "pointer",
          display: "none"
        },
        visible: {
          display: "flex"
        }
      }));
      PillContext = import_react_18_271.default.createContext(false);
      PillAction = ({
        children,
        className
      }) => {
        const styles = useStyles34();
        const visible = (0, import_react_18_271.useContext)(PillContext);
        return /* @__PURE__ */ import_react_18_271.default.createElement(
          "div",
          {
            className: cn(styles.pillAction, className, visible && styles.visible)
          },
          children
        );
      };
      PillContent = ({
        children,
        className
      }) => {
        const styles = useStyles34();
        return /* @__PURE__ */ import_react_18_271.default.createElement("div", { className: cn(styles.pillContent, className) }, children);
      };
      Pill = ({
        children,
        className,
        extended,
        color,
        pillStyle = "full" /* Full */
      }) => {
        const styles = useStyles34();
        const [isHover, setIsHover] = (0, import_react_18_271.useState)(false);
        const ref = (0, import_react_18_271.useRef)(null);
        const showAction = typeof extended === "undefined" ? isHover : extended;
        const { width } = useAnimateWidth(ref, showAction);
        const style = (0, import_react_18_271.useMemo)(
          () => ({
            width,
            "--pill-color": color
          }),
          [width, color]
        );
        const onMouseEnter = (0, import_react_18_271.useCallback)(() => {
          setIsHover(true);
        }, []);
        const onMouseLeave = (0, import_react_18_271.useCallback)(() => {
          setIsHover(false);
        }, []);
        return /* @__PURE__ */ import_react_18_271.default.createElement(PillContext.Provider, { value: showAction }, /* @__PURE__ */ import_react_18_271.default.createElement(
          "div",
          {
            ref,
            className: cn(styles.pill, className, styles[pillStyle]),
            style,
            onMouseEnter,
            onMouseLeave
          },
          children
        ));
      };
    }
  });

  // web-app/src/shared/tags/tag-button.tsx
  function AddTagActionPopup({
    close,
    onTagged,
    noteId
  }) {
    const styles = useStyles35();
    const theme = useTheme();
    const graph = useGraphManager();
    const partialNote = usePartialVertex(noteId, ["tags"]);
    const existingTags = new Set(
      unionIter(partialNote.tags.keys(), partialNote.tags.values())
    );
    const childTagsQuery = useSharedQuery("childTags");
    const getItems = (filter) => {
      if (!childTagsQuery.count) {
        return [];
      }
      const filteredRes = suggestResults(
        filter,
        childTagsQuery.results,
        (tag) => tag.getVertexProxy().fullName
      );
      if (filteredRes.length === 0) {
        filteredRes.push(TAG_NOT_FOUND);
      }
      return filteredRes;
    };
    const onSelected = (item, filter) => {
      if (item === TAG_NOT_FOUND) {
        if (filter) {
          if (filter.startsWith("#")) {
            filter = filter.slice(1);
          }
        }
      } else {
        onTagged(item.getVertexProxy());
      }
    };
    const renderItem2 = (item, props) => {
      if (item === TAG_NOT_FOUND) {
        return /* @__PURE__ */ import_react_18_272.default.createElement(MentionItem, { ...props, key: item }, /* @__PURE__ */ import_react_18_272.default.createElement("span", { className: cn(styles.tagColor) }, /* @__PURE__ */ import_react_18_272.default.createElement(IconCreateNew_default, { fill: theme.primary[500] })), /* @__PURE__ */ import_react_18_272.default.createElement("span", { className: cn(styles.tagName) }, "Create tag"));
      }
      return /* @__PURE__ */ import_react_18_272.default.createElement(MentionItem, { ...props, key: item.key }, /* @__PURE__ */ import_react_18_272.default.createElement("div", { className: cn(styles.circleContainer) }, /* @__PURE__ */ import_react_18_272.default.createElement(
        "div",
        {
          className: cn(styles.circle)
        }
      )), /* @__PURE__ */ import_react_18_272.default.createElement("span", { className: cn(styles.tagName) }, item.getVertexProxy().fullName));
    };
    return /* @__PURE__ */ import_react_18_272.default.createElement(
      MentionPopup,
      {
        getItems,
        trigger: "#",
        onSelected,
        renderItem: renderItem2
      }
    );
  }
  function TagButton({
    noteId,
    className,
    onTagged,
    isSmall = true
  }) {
    const styles = useStyles35();
    return /* @__PURE__ */ import_react_18_272.default.createElement(
      Menu,
      {
        renderButton: () => /* @__PURE__ */ import_react_18_272.default.createElement(IconPlus, { size: isSmall ? 16 /* Small */ : 24 /* Medium */ }),
        position: "top",
        align: "center",
        direction: "in",
        className,
        popupClassName: cn(styles.popup)
      },
      /* @__PURE__ */ import_react_18_272.default.createElement(AddTagActionPopup, { noteId, onTagged })
    );
  }
  var import_react_18_272, useStyles35, TAG_NOT_FOUND;
  var init_tag_button = __esm({
    "web-app/src/shared/tags/tag-button.tsx"() {
      import_react_18_272 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_suggestions();
      init_styles();
      init_icons();
      init_menu();
      init_icon_plus();
      init_types2();
      init_css_objects();
      init_theme();
      init_query2();
      init_mention();
      init_graph();
      init_vertex2();
      init_common();
      useStyles35 = makeStyles((theme) => ({
        list: {
          basedOn: [layout.row],
          height: styleguide.gridbase * 3,
          alignItems: "center"
        },
        standard: {
          flexDirection: "row-reverse",
          assignee: {
            marginLeft: styleguide.gridbase
          }
        },
        reverse: {
          flexDirection: "row",
          assignee: {
            marginRight: styleguide.gridbase
          }
        },
        assignee: {},
        regular: {
          marginTop: styleguide.gridbase * 2,
          marginBottom: styleguide.gridbase,
          addButton: {
            width: styleguide.gridbase * 3,
            height: styleguide.gridbase * 3
          }
        },
        small: {
          marginTop: styleguide.gridbase * 3,
          addButton: {
            width: styleguide.gridbase * 2.5,
            height: styleguide.gridbase * 2.5
          }
        },
        addButton: {
          borderRadius: "50%",
          border: ``
        },
        popup: {
          backgroundColor: theme.background[0],
          width: styleguide.gridbase * 32,
          marginBottom: styleguide.gridbase * 2
        },
        popupContent: {
          backgroundColor: theme.background[0],
          width: "100%",
          boxSizing: "border-box",
          basedOn: [layout.column]
        },
        input: {
          border: "none",
          width: "100%",
          borderBottom: "1px solid rgba(156, 178, 205, 0.6)",
          borderRadius: 0
        },
        circleContainer: {
          height: styleguide.gridbase * 4,
          width: styleguide.gridbase * 4,
          basedOn: [layout.column, layout.centerCenter]
        },
        circle: {
          height: styleguide.gridbase,
          width: styleguide.gridbase,
          borderRadius: "50%"
        },
        tagName: {
          flexGrow: 1,
          whiteSpace: "nowrap",
          marginLeft: styleguide.gridbase,
          color: theme.background.text
        },
        tagColor: {
          height: styleguide.gridbase * 3,
          width: styleguide.gridbase * 3,
          circle: {
            height: styleguide.gridbase,
            width: styleguide.gridbase,
            borderRadius: "50%"
          },
          basedOn: [layout.column, layout.centerCenter]
        }
      }));
      TAG_NOT_FOUND = "tag-not-found";
    }
  });

  // web-app/src/shared/tags/tag-view.tsx
  function TagPillView({
    tagMng,
    className,
    showMenu = false
  }) {
    const styles = useStyles36();
    const partialTag = usePartialVertex(tagMng, ["parentTag", "name"]);
    const ref = (0, import_react_18_273.useRef)();
    let style = useAnimateWidth(ref, showMenu);
    const tagName = partialTag.name;
    const menuOnHover = showMenu === "hover";
    if (menuOnHover) {
      style = NOOP_STYLE;
    }
    return /* @__PURE__ */ import_react_18_273.default.createElement(
      "div",
      {
        ref,
        className: cn(
          styles.tag,
          !menuOnHover && showMenu && styles.hover,
          menuOnHover && styles.onHover,
          className
        ),
        style: {
          ...style
        }
      },
      /* @__PURE__ */ import_react_18_273.default.createElement("div", { className: cn(styles.tagName) }, tagName),
      /* @__PURE__ */ import_react_18_273.default.createElement("div", { className: cn(layout.flexSpacer) }),
      /* @__PURE__ */ import_react_18_273.default.createElement(
        "div",
        {
          className: cn(
            styles.tagDelete,
            !menuOnHover && !showMenu && styles.hide
          )
        },
        /* @__PURE__ */ import_react_18_273.default.createElement(IconDropDownArrow_default, { className: "" })
      )
    );
  }
  function TagView({
    tag,
    className,
    onSelected,
    buttonClassName,
    onDelete = () => {
    },
    showMenu = false,
    renderSelected
  }) {
    const styles = useStyles36();
    const partialTag = usePartialVertex(tag, ["parentTag"]);
    const siblingsQuery = partialTag.parentTag?.childTagsQuery;
    const siblings = siblingsQuery?.results || [];
    const onChange = (t) => {
      if (t === DELETE_TAG) {
        onDelete(tag.getVertexProxy());
      } else {
        onSelected(t);
      }
    };
    const renderButton = (0, import_react_18_273.useCallback)(() => {
      if (renderSelected) {
        return renderSelected(tag);
      }
      return /* @__PURE__ */ import_react_18_273.default.createElement(TagPillView, { tagMng: tag, className, showMenu });
    }, [renderSelected, tag, className, showMenu]);
    return /* @__PURE__ */ import_react_18_273.default.createElement(
      DropDown,
      {
        value: tag,
        onChange,
        className: buttonClassName,
        renderSelected: renderButton
      },
      siblings.map((t) => /* @__PURE__ */ import_react_18_273.default.createElement(DropDownItem, { value: t, key: t.key }, /* @__PURE__ */ import_react_18_273.default.createElement("div", { className: cn(styles.circleContainer) }, /* @__PURE__ */ import_react_18_273.default.createElement(
        "div",
        {
          className: cn(styles.circle)
        }
      )), /* @__PURE__ */ import_react_18_273.default.createElement("span", { className: cn(styles.tagDropDownName) }, t.getVertexProxy().name))),
      /* @__PURE__ */ import_react_18_273.default.createElement(DropDownItem, { value: DELETE_TAG }, /* @__PURE__ */ import_react_18_273.default.createElement("div", { className: cn(styles.circleContainer) }, /* @__PURE__ */ import_react_18_273.default.createElement(IconClose_default, { className: "" })), /* @__PURE__ */ import_react_18_273.default.createElement("span", { className: cn(styles.tagDropDownName) }, "Remove Tag"))
    );
  }
  var import_react_18_273, showAnim2, useStyles36, NOOP_STYLE, DELETE_TAG;
  var init_tag_view = __esm({
    "web-app/src/shared/tags/tag-view.tsx"() {
      import_react_18_273 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_icons();
      init_drop_down();
      init_typography();
      init_css_objects();
      init_theme();
      init_vertex2();
      init_animate();
      showAnim2 = keyframes({
        "0%": {
          opacity: 0
        },
        "99%": {
          opacity: 0
        },
        "100%": {
          opacity: 1
        }
      });
      useStyles36 = makeStyles(() => ({
        tag: {
          direction: "ltr",
          backgroundColor: brandLightTheme.mono.m1,
          height: styleguide.gridbase * 2,
          minWidth: styleguide.gridbase * 5,
          padding: [0, styleguide.gridbase],
          flexShrink: 0,
          fontSize: 12,
          borderRadius: styleguide.gridbase,
          ...styleguide.transition.short,
          transitionProperty: "all",
          whiteSpace: "nowrap",
          boxSizing: "border-box",
          display: "flex",
          alignItems: "center",
          flexDirection: "row"
        },
        tagName: {
          marginLeft: styleguide.gridbase * 0.75,
          marginRight: styleguide.gridbase / 2,
          color: brandLightTheme.colors.text,
          animation: `${showAnim2} ${styleguide.transition.duration.short}ms linear backwards`,
          userSelect: "none",
          basedOn: [useStyles2.textSmall]
        },
        tagDropDownName: {
          marginLeft: styleguide.gridbase * 0.75,
          marginRight: styleguide.gridbase / 2,
          color: brandLightTheme.colors.text,
          animation: `${showAnim2} ${styleguide.transition.duration.short}ms linear backwards`,
          userSelect: "none",
          basedOn: [useStyles2.text]
        },
        tagDelete: {
          position: "relative",
          top: 1,
          animation: `${showAnim2} ${styleguide.transition.duration.short}ms backwards linear`,
          cursor: "pointer"
        },
        onHover: {
          tagDelete: {
            ...styleguide.transition.short,
            transitionProperty: "width",
            overflow: "hidden",
            width: 0
          },
          ":hover": {
            tagDelete: {
              width: styleguide.gridbase * 2
            }
          }
        },
        hide: {
          display: "none"
        },
        circleContainer: {
          height: styleguide.gridbase * 4,
          width: styleguide.gridbase * 4,
          basedOn: [layout.column, layout.centerCenter]
        },
        circle: {
          height: styleguide.gridbase,
          width: styleguide.gridbase,
          borderRadius: "50%"
        },
        tagDropName: {
          flexGrow: 1,
          whiteSpace: "nowrap",
          marginLeft: styleguide.gridbase,
          color: brandLightTheme.colors.text
        }
      }));
      NOOP_STYLE = {};
      DELETE_TAG = "DELETE_TAG";
    }
  });

  // web-app/src/core/slate/elements/card.element/assignees-icon.tsx
  function AssigneesIcon(props) {
    const { fill = "#706B80", className } = props;
    return /* @__PURE__ */ import_react_18_274.default.createElement(
      "svg",
      {
        className,
        width: "18",
        height: "18",
        viewBox: "0 0 18 18",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_274.default.createElement(
        "path",
        {
          d: "M11.25 9C12.9075 9 14.25 7.6575 14.25 6C14.25 4.3425 12.9075 3 11.25 3C9.5925 3 8.25 4.3425 8.25 6C8.25 7.6575 9.5925 9 11.25 9ZM11.25 4.5C12.075 4.5 12.75 5.175 12.75 6C12.75 6.825 12.075 7.5 11.25 7.5C10.425 7.5 9.75 6.825 9.75 6C9.75 5.175 10.425 4.5 11.25 4.5ZM11.25 10.5C9.2475 10.5 5.25 11.505 5.25 13.5V15H17.25V13.5C17.25 11.505 13.2525 10.5 11.25 10.5ZM6.75 13.5C6.915 12.96 9.2325 12 11.25 12C13.275 12 15.6 12.9675 15.75 13.5H6.75ZM4.5 11.25V9H6.75V7.5H4.5V5.25H3V7.5H0.75V9H3V11.25H4.5Z",
          fill
        }
      )
    );
  }
  var import_react_18_274;
  var init_assignees_icon = __esm({
    "web-app/src/core/slate/elements/card.element/assignees-icon.tsx"() {
      import_react_18_274 = __toESM(__require("https://esm.sh/react@18.2.0"));
    }
  });

  // web-app/src/core/slate/elements/card.element/tag-icon.tsx
  function TagIcon(props) {
    const { fill = "#706B80", className } = props;
    return /* @__PURE__ */ import_react_18_275.default.createElement(
      "svg",
      {
        className,
        width: "18",
        height: "18",
        viewBox: "0 0 18 18",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_275.default.createElement(
        "path",
        {
          d: "M16.0575 8.685L9.3075 1.935C9.0375 1.665 8.6625 1.5 8.25 1.5H3C2.175 1.5 1.5 2.175 1.5 3V8.25C1.5 8.6625 1.665 9.0375 1.9425 9.315L8.6925 16.065C8.9625 16.335 9.3375 16.5 9.75 16.5C10.1625 16.5 10.5375 16.335 10.8075 16.0575L16.0575 10.8075C16.335 10.5375 16.5 10.1625 16.5 9.75C16.5 9.3375 16.3275 8.955 16.0575 8.685ZM9.75 15.0075L3 8.25V3H8.25V2.9925L15 9.7425L9.75 15.0075Z",
          fill
        }
      ),
      /* @__PURE__ */ import_react_18_275.default.createElement(
        "path",
        {
          d: "M4.875 6C5.49632 6 6 5.49632 6 4.875C6 4.25368 5.49632 3.75 4.875 3.75C4.25368 3.75 3.75 4.25368 3.75 4.875C3.75 5.49632 4.25368 6 4.875 6Z",
          fill
        }
      )
    );
  }
  var import_react_18_275;
  var init_tag_icon = __esm({
    "web-app/src/core/slate/elements/card.element/tag-icon.tsx"() {
      import_react_18_275 = __toESM(__require("https://esm.sh/react@18.2.0"));
    }
  });

  // cfds/client/sorting.ts
  function sortStampCompare(a, b) {
    const aSort = a.sortStamp;
    const bSort = b.sortStamp;
    if (aSort > bSort) {
      return -1;
    } else if (aSort < bSort) {
      return 1;
    }
    return 0;
  }
  var init_sorting = __esm({
    "cfds/client/sorting.ts"() {
    }
  });

  // cfds/client/duplicate.ts
  function duplicateCard(graph, rootKey, opts = {}) {
    opts = {
      ...DEFAULT_DUPLICATE_OPTS,
      ...opts
    };
    if (!checkRecords(graph, rootKey))
      return;
    const outRecords = {};
    const newRootKey = deepDuplicateImpl(graph, rootKey, outRecords, void 0);
    fixSorting(outRecords);
    tryAppendText(outRecords[newRootKey], opts.suffix);
    for (const [key, data] of Object.entries(outRecords)) {
      graph.createVertex(NS_NOTES, data, key);
    }
    return graph.getVertex(newRootKey);
  }
  function checkRecords(graph, rootKey) {
    const root = graph.getVertex(rootKey);
    if (root.isNull) {
      return false;
    }
    for (const refKey of root.getBodyRefs()) {
      if (!checkRecords(graph, refKey)) {
        return false;
      }
    }
    return true;
  }
  function deepDuplicateImpl(graph, rootKey, outRecords, parentNoteNewKey) {
    const root = graph.getVertex(rootKey);
    const newKey = uniqueId();
    const newData = {
      ...root.cloneData(),
      creationDate: /* @__PURE__ */ new Date(),
      sortStamp: root.sortStamp
    };
    const newBody = newData.body;
    if (newBody && isRichText(newBody)) {
      for (const [node] of dfs(newBody.root)) {
        if (isRefMarker(node) && node.type === "inter-doc" /* InternalDoc */) {
          const oldTaskKey = node.ref;
          const newTaskKey = deepDuplicateImpl(
            graph,
            oldTaskKey,
            outRecords,
            newKey
          );
          node.ref = newTaskKey;
        }
      }
    }
    if (parentNoteNewKey) {
      newData.parentNote = parentNoteNewKey;
    } else if (root.parentNote) {
      delete newData.parentNote;
    }
    outRecords[newKey] = newData;
    return newKey;
  }
  function fixSorting(outRecords) {
    const sortedRecords = Object.entries(outRecords).sort(
      (a, b) => sortStampCompare(a[1], b[1])
    );
    const timeStamp = /* @__PURE__ */ new Date();
    timeStamp.setTime(timeStamp.getTime() + sortedRecords.length);
    for (const [key, data] of sortedRecords) {
      data.sortStamp = fromTimestamp(timeStamp, key);
      timeStamp.setTime(timeStamp.getTime() - 1);
    }
  }
  function lastTextNode(rt) {
    let textNode;
    for (const [node] of dfs(rt.root)) {
      if (isTextNode(node) && node.text.length > 0) {
        textNode = node;
      }
    }
    return textNode;
  }
  function tryAppendText(noteData, text) {
    const title = noteData.title;
    if (!title || !text || !isRichText(title)) {
      return;
    }
    const lastNode = lastTextNode(title);
    if (!lastNode) {
      return;
    }
    lastNode.text += text;
    noteData.title = title;
  }
  var DUP_TITLE_SUFFIX, DEFAULT_DUPLICATE_OPTS;
  var init_duplicate = __esm({
    "cfds/client/duplicate.ts"() {
      init_common();
      init_orderstamp();
      init_scheme_types();
      init_model();
      init_tree();
      init_sorting();
      DUP_TITLE_SUFFIX = " (copy)";
      DEFAULT_DUPLICATE_OPTS = {
        suffix: DUP_TITLE_SUFFIX
      };
    }
  });

  // styles/components/new-icons/icon-delete.tsx
  function IconDelete({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_276.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_276.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2.5 3V13C2.5 14.1046 3.39543 15 4.5 15H11.5C12.6046 15 13.5 14.1046 13.5 13V3",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_276.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M6 3V2C6 1.44772 6.44772 1 7 1H9C9.55228 1 10 1.44772 10 2V3",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_276.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "15",
          y1: "3",
          x2: "1",
          y2: "3",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_276.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "6",
          y1: "7",
          x2: "6",
          y2: "12",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_276.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "10",
          y1: "7",
          x2: "10",
          y2: "12",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_276;
  var init_icon_delete = __esm({
    "styles/components/new-icons/icon-delete.tsx"() {
      import_react_18_276 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-duplicate.tsx
  function IconDuplicate({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_277.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M14 15H5",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M5 4V15",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2 1V12",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M5 4H14",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2 1H11",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M14 4V15",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "11",
          y1: "1",
          x2: "11",
          y2: "4",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_277.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "2",
          y1: "12",
          x2: "5",
          y2: "12",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_277;
  var init_icon_duplicate = __esm({
    "styles/components/new-icons/icon-duplicate.tsx"() {
      import_react_18_277 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-task.tsx
  function IconTask2({
    color = "mono" /* Mono */,
    size = 16 /* Small */,
    className
  }) {
    const colorOpts = COLOR_MAP3[color];
    return /* @__PURE__ */ import_react_18_278.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 17 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_278.default.createElement("g", { clipPath: "url(#clip0_611_8550)" }, /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 14.5H2",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2 1.5V14.5",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2 1.5H15",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 1.5V14.5",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M7.32618 10.739L11.5 5",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_278.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M5.5 8.13037L7.32605 10.739",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )),
      /* @__PURE__ */ import_react_18_278.default.createElement("defs", null, /* @__PURE__ */ import_react_18_278.default.createElement("clipPath", { id: "clip0_611_8550" }, /* @__PURE__ */ import_react_18_278.default.createElement(
        "rect",
        {
          width: "16",
          height: "16",
          fill: "white",
          transform: "translate(0.5)"
        }
      )))
    );
  }
  var import_react_18_278, COLOR_MAP3;
  var init_icon_task = __esm({
    "styles/components/new-icons/icon-task.tsx"() {
      import_react_18_278 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
      COLOR_MAP3 = {
        ["mono" /* Mono */]: {
          var1: brandLightTheme.mono.m4,
          var2: brandLightTheme.mono.m3,
          var3: brandLightTheme.mono.m4
        },
        ["primary" /* Primary */]: {
          var1: brandLightTheme.primary.p9,
          var2: brandLightTheme.primary.p8,
          var3: brandLightTheme.primary.p10
        }
      };
    }
  });

  // styles/components/new-icons/icon-note.tsx
  function IconNote({
    color = "mono" /* Mono */,
    size = 16 /* Small */,
    className
  }) {
    const colorOpts = COLOR_MAP4[color];
    return /* @__PURE__ */ import_react_18_279.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_279.default.createElement("g", { "clip-path": "url(#clip0_970_30419)" }, /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 13V13.5C1 14.3284 1.67157 15 2.5 15V15C3.32843 15 4 14.3284 4 13.5V13",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 10V13",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 10H3.5",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 12V13C15 14.1046 14.1046 15 13 15H12",
          stroke: colorOpts.var2,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M3 15H12",
          stroke: colorOpts.var2,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 1V12",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4 1H15",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4 1V13",
          stroke: colorOpts.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "12",
          y1: "5",
          x2: "7",
          y2: "5",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "12",
          y1: "8",
          x2: "7",
          y2: "8",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_279.default.createElement(
        "line",
        {
          opacity: "0.7",
          x1: "12",
          y1: "11",
          x2: "7",
          y2: "11",
          stroke: colorOpts.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )),
      /* @__PURE__ */ import_react_18_279.default.createElement("defs", null, /* @__PURE__ */ import_react_18_279.default.createElement("clipPath", { id: "clip0_970_30419" }, /* @__PURE__ */ import_react_18_279.default.createElement("rect", { width: "15.9983", height: "16", fill: "white" })))
    );
  }
  var import_react_18_279, COLOR_MAP4;
  var init_icon_note = __esm({
    "styles/components/new-icons/icon-note.tsx"() {
      import_react_18_279 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
      COLOR_MAP4 = {
        ["mono" /* Mono */]: {
          var1: brandLightTheme.mono.m4,
          var2: brandLightTheme.mono.m3,
          var3: brandLightTheme.mono.m4
        },
        ["primary" /* Primary */]: {
          var1: brandLightTheme.primary.p9,
          var2: brandLightTheme.primary.p8,
          var3: brandLightTheme.primary.p10
        }
      };
    }
  });

  // styles/components/new-icons/icon-view-note.tsx
  function IconViewNote({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_280.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 13V13.5C1 14.3284 1.67157 15 2.5 15V15C3.32843 15 4 14.3284 4 13.5V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 10V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 10H3.5",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 12V13C15 14.1046 14.1046 15 13 15H12",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M3 15H12",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 1V12",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4 1H15",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4 1V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8.82617 10.739L12.2727 6",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_280.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M7 8.13037L8.82605 10.739",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_280;
  var init_icon_view_note = __esm({
    "styles/components/new-icons/icon-view-note.tsx"() {
      import_react_18_280 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-open.tsx
  function IconOpen({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_281.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M12.8999 1.5V6.65",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 1.5H12.9",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 1.5V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4.1 13V13.15C4.1 14.006 3.40604 14.7 2.55 14.7V14.7C1.69396 14.7 1 14.006 1 13.15V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M4.1001 7.35V13",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M15 7.35V12.5",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M12.5 14.7H13C14.1046 14.7 15 13.8046 15 12.7V12.5",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2.7998 14.7H12.4998",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_281.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M4.1001 7.35H15.0001",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_281;
  var init_icon_open = __esm({
    "styles/components/new-icons/icon-open.tsx"() {
      import_react_18_281 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-due-date.tsx
  function IconDueDate({
    size = 16 /* Small */,
    className,
    state = "none" /* None */
  }) {
    const colors = COLOR_MAP5[state];
    return /* @__PURE__ */ import_react_18_282.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_282.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 15C11.866 15 15 11.866 15 8",
          stroke: colors.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_282.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1",
          stroke: colors.var2,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_282.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M15 8C15 4.13401 11.866 1 8 1",
          stroke: colors.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_282.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 8L10.5 10.5",
          stroke: colors.var3,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_282.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 4.54541V7.99996",
          stroke: colors.var1,
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_282, COLOR_MAP5;
  var init_icon_due_date = __esm({
    "styles/components/new-icons/icon-due-date.tsx"() {
      import_react_18_282 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
      COLOR_MAP5 = {
        ["none" /* None */]: {
          var1: brandLightTheme.mono.m5,
          var2: brandLightTheme.mono.m6,
          var3: brandLightTheme.mono.m4
        },
        ["late" /* Late */]: {
          var1: brandLightTheme.supporting.O3,
          var2: brandLightTheme.supporting.O4,
          var3: brandLightTheme.supporting.O2
        }
      };
    }
  });

  // web-app/src/shared/item-menu/actions/index.tsx
  function EditCardAction({
    cardManager,
    source,
    editor,
    ...props
  }) {
    const logger = useLogger();
    const docRouter = useDocumentRouter();
    const openItem = () => {
      logger.log({
        severity: "INFO",
        event: "Click",
        source: "menu:note:open",
        destination: "editor",
        vertex: cardManager.key
      });
      if (editor) {
        editor.selection = null;
      }
      docRouter.goTo(cardManager);
    };
    return /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        ...props,
        onClick: openItem,
        IconComponent: IconOpen,
        text: "Open"
      }
    );
  }
  function EditDueDateAction({
    cardManager,
    source,
    ...props
  }) {
    const dueDateEditor = useDueDate();
    const onClick = () => {
      dueDateEditor.edit(cardManager.getVertexProxy());
    };
    return /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        ...props,
        onClick,
        IconComponent: IconDueDate,
        text: "Add Due Date"
      }
    );
  }
  function ViewInNoteAction({
    cardManager,
    source,
    ...props
  }) {
    const logger = useLogger();
    const navigate = (0, import_react_router_6_74.useNavigate)();
    const pCard = usePartialVertex(cardManager, ["workspace", "parentNote"]);
    const openNote = (0, import_react_18_283.useCallback)(() => {
      logger.log({
        severity: "INFO",
        event: "Click",
        source: "menu:note:view-in-parent",
        vertex: pCard.key
      });
      navigate(`${pCard.workspace.key}/${pCard.parentNote.key}`);
    }, [pCard, logger, navigate]);
    if (!pCard.parentNote) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        ...props,
        onClick: openNote,
        IconComponent: IconViewNote,
        text: "View In Note"
      }
    );
  }
  function cardHasChildren(card) {
    try {
      for (const [child] of card.inEdges("parentNote")) {
        if (!child.isDeleted)
          return true;
      }
    } catch (e) {
    }
    return false;
  }
  function DeleteCardAction({
    cardManager,
    source,
    onDeleted = () => {
    },
    ...props
  }) {
    const [open, setOpen] = (0, import_react_18_283.useState)(false);
    const resolveRef = (0, import_react_18_283.useRef)(() => {
    });
    const logger = useLogger();
    const card = useVertex(cardManager);
    const navigate = (0, import_react_router_6_74.useNavigate)();
    const onOpen = (0, import_react_18_283.useCallback)(() => {
      setOpen(true);
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "delete",
        vertex: card.key,
        source: source || "menu:note:delete"
      });
      return new Promise((resolve) => {
        resolveRef.current = () => {
          resolve();
          resolveRef.current = () => {
          };
        };
      });
    }, [setOpen, logger, card, source]);
    const closeDialog = (0, import_react_18_283.useCallback)(
      (isCancelled) => {
        setOpen(false);
        resolveRef.current();
        if (isCancelled) {
          logger.log({
            severity: "INFO",
            event: "Cancel",
            flow: "delete",
            vertex: card.key,
            source: source || "menu:note:delete"
          });
        }
      },
      [setOpen, logger, card, source]
    );
    const onDeleteClick = (0, import_react_18_283.useCallback)(() => {
      card.isDeleted = 1;
      logger.log({
        severity: "INFO",
        event: "End",
        flow: "delete",
        vertex: card.key,
        source: source || "menu:note:delete"
      });
      closeDialog(false);
      onDeleted && onDeleted();
      navigate("/");
    }, [card, logger, closeDialog, onDeleted, source, navigate]);
    const hasChildren = cardHasChildren(card);
    const msg = hasChildren ? "Deleting this item is permanent and will include the data it contains; including text and items" : "Deleting this item is permanent";
    const deleteText = hasChildren ? "Delete Items" : "Delete";
    return /* @__PURE__ */ import_react_18_283.default.createElement(import_react_18_283.default.Fragment, null, /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        ...props,
        onClick: onOpen,
        IconComponent: IconDelete,
        text: "Delete"
      }
    ), /* @__PURE__ */ import_react_18_283.default.createElement(
      Dialog,
      {
        open,
        onClickOutside: () => closeDialog(true),
        onClose: () => closeDialog(true)
      },
      /* @__PURE__ */ import_react_18_283.default.createElement(DialogContent, null, /* @__PURE__ */ import_react_18_283.default.createElement(H32, null, "Are you sure?"), /* @__PURE__ */ import_react_18_283.default.createElement(Text2, null, msg)),
      /* @__PURE__ */ import_react_18_283.default.createElement(DialogActions, null, /* @__PURE__ */ import_react_18_283.default.createElement(Button, { onClick: () => closeDialog(true) }, "Cancel"), /* @__PURE__ */ import_react_18_283.default.createElement(RaisedButton, { onClick: onDeleteClick }, deleteText))
    ));
  }
  function DuplicateCardAction({
    editorRootKey,
    cardManager,
    source,
    editor,
    ...props
  }) {
    const graph = useGraphManager();
    const logger = useLogger();
    const navigate = (0, import_react_router_6_74.useNavigate)();
    const onDuplicate = () => {
      const newCard = duplicateCard(graph, cardManager.key);
      logger.log({
        severity: "INFO",
        event: "Duplicate",
        vertex: cardManager.key,
        target: newCard?.key,
        source
      });
      if (!editor || editorRootKey === cardManager.key) {
        navigate(`${newCard?.workspace.key}/${newCard?.key}`);
        return;
      }
      const cardEntry = ElementUtils.findNode(
        editor,
        (n) => CardElement.isCard(n) && n.ref === cardManager.key
      );
      if (!cardEntry) {
        return;
      }
      const [, path] = cardEntry;
      CardElement.insertNote(editor, newCard, import_slate_0_876.Path.next(path));
    };
    return /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        ...props,
        onClick: onDuplicate,
        IconComponent: IconDuplicate,
        text: "Duplicate"
      }
    );
  }
  function ConvertNoteAction({ cardManager, source }) {
    const logger = useLogger();
    const toastController = useToastController();
    const { type } = usePartialVertex(cardManager, ["type"]);
    const text = type === "note" /* Note */ ? "Convert To Task" : "Convert To Note";
    const onClick = () => {
      const p = cardManager.getVertexProxy();
      const newType = type === "note" /* Note */ ? "task" /* Task */ : "note" /* Note */;
      p.type = newType;
      logger.log({
        severity: "INFO",
        event: "MetadataChanged",
        source: "menu:note:convert",
        vertex: cardManager.key
      });
      toastController.displayToast({
        text: `${type} converted to ${newType}`,
        action: {
          text: "Undo",
          fn: (dismiss) => {
            cardManager.getVertexProxy().type = type;
            dismiss();
          }
        },
        duration: 3e3
      });
    };
    return /* @__PURE__ */ import_react_18_283.default.createElement(
      MenuAction,
      {
        IconComponent: type === "note" /* Note */ ? IconTask2 : IconNote,
        text,
        onClick,
        color: "mono" /* Mono */
      }
    );
  }
  var import_react_18_283, import_react_router_6_74, import_slate_0_876;
  var init_actions = __esm({
    "web-app/src/shared/item-menu/actions/index.tsx"() {
      import_react_18_283 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_74 = __require("https://esm.sh/react-router@6.7.0");
      import_slate_0_876 = __require("https://esm.sh/slate@0.87.0");
      init_duplicate();
      init_note();
      init_buttons();
      init_dialog();
      init_icon_delete();
      init_icon_duplicate();
      init_icon_task();
      init_icon_note();
      init_icon_view_note();
      init_icon_open();
      init_icon_due_date();
      init_types2();
      init_menu();
      init_texts();
      init_toast();
      init_graph();
      init_react_utils();
      init_card();
      init_element_utils();
      init_due_date_editor();
      init_vertex2();
      init_logger();
    }
  });

  // web-app/src/shared/item-menu/index.tsx
  function CardMenuView({
    cardManager,
    allowsEdit,
    onDeleted,
    className,
    source,
    editorRootKey,
    direction,
    position,
    editor
  }) {
    const logger = useLogger();
    const partialNote = usePartialVertex(cardManager, ["parentNote"]);
    if (!cardManager) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_284.default.createElement(
      Menu,
      {
        renderButton: () => /* @__PURE__ */ import_react_18_284.default.createElement(IconOverflow_default, null),
        align: "end",
        direction,
        position,
        className
      },
      allowsEdit && /* @__PURE__ */ import_react_18_284.default.createElement(
        EditCardAction,
        {
          cardManager,
          source,
          editor
        }
      ),
      /* @__PURE__ */ import_react_18_284.default.createElement(EditDueDateAction, { cardManager, source }),
      partialNote.parentNote && /* @__PURE__ */ import_react_18_284.default.createElement(ViewInNoteAction, { cardManager, source }),
      /* @__PURE__ */ import_react_18_284.default.createElement(
        DuplicateCardAction,
        {
          cardManager,
          source,
          editorRootKey,
          editor
        }
      ),
      /* @__PURE__ */ import_react_18_284.default.createElement(ConvertNoteAction, { cardManager, source }),
      /* @__PURE__ */ import_react_18_284.default.createElement(
        DeleteCardAction,
        {
          cardManager,
          source,
          onDeleted
        }
      )
    );
  }
  var import_react_18_284;
  var init_item_menu = __esm({
    "web-app/src/shared/item-menu/index.tsx"() {
      import_react_18_284 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_menu();
      init_icons();
      init_actions();
      init_logger();
      init_vertex2();
    }
  });

  // web-app/src/core/slate/elements/card.element/card-node/card-actions.tsx
  function CardActions({
    editorRootKey,
    card,
    className
  }) {
    const styles = useStyles37();
    const editor = (0, import_slate_react_0_873.useSlateStatic)();
    return /* @__PURE__ */ import_react_18_285.default.createElement(
      "div",
      {
        contentEditable: false,
        className: cn(styles.actionsContainer, className)
      },
      /* @__PURE__ */ import_react_18_285.default.createElement(DueDateIndicator, { card }),
      /* @__PURE__ */ import_react_18_285.default.createElement(
        CardMenuView,
        {
          cardManager: card,
          source: "editor:body:inline-task",
          editorRootKey,
          allowsEdit: true,
          editor
        }
      )
    );
  }
  function DueDateIndicator({ card }) {
    const { dueDate } = usePartialVertex(card, ["dueDate"]);
    const dueDateEditor = useDueDate();
    const logger = useLogger();
    if (!dueDate) {
      return null;
    }
    const onClick = () => {
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "edit",
        type: "due",
        source: "editor:body:inline-task",
        vertex: card.key
      });
      dueDateEditor.edit(card.getVertexProxy());
    };
    const isOverdue = dueDate < /* @__PURE__ */ new Date();
    return /* @__PURE__ */ import_react_18_285.default.createElement(Tooltip, { text: `Due by ${formatTimeDiff2(dueDate)}` }, /* @__PURE__ */ import_react_18_285.default.createElement(IconButton, { onClick }, /* @__PURE__ */ import_react_18_285.default.createElement(IconCalendar_default, { fill: isOverdue ? "#fe4a62" : "#9cb2cd" })));
  }
  var import_react_18_285, import_slate_react_0_873, useStyles37;
  var init_card_actions = __esm({
    "web-app/src/core/slate/elements/card.element/card-node/card-actions.tsx"() {
      import_react_18_285 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_react_0_873 = __require("https://esm.sh/slate-react@0.87.1");
      init_due_date_editor();
      init_vertex2();
      init_item_menu();
      init_dateutils();
      init_styles();
      init_buttons();
      init_icons();
      init_tooltip();
      init_css_objects();
      init_logger();
      useStyles37 = makeStyles((theme) => ({
        actionsContainer: {
          height: styleguide.gridbase * 4,
          alignItems: "center",
          basedOn: [layout.row]
        },
        uploading: {
          color: theme.background.placeholderText
        }
      }));
    }
  });

  // web-app/src/core/slate/elements/card.element/card-node/index.tsx
  function LoadingCardNode({
    attributes,
    children
  }) {
    const styles = useStyles38();
    return /* @__PURE__ */ import_react_18_286.default.createElement("div", { ...attributes, className: cn(styles.root) }, /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.card) }, /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.noteLine, styles.skeleton) }, children)));
  }
  function Placeholder({ element }) {
    const styles = useStyles38();
    const isEmpty = !import_slate_0_877.Node.string(element);
    const placeholder = useCardPlaceholderText();
    if (!isEmpty) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_286.default.createElement(Text2, { className: cn(styles.cardPlaceholder), contentEditable: false }, placeholder);
  }
  function AssigneeDropDown({
    assignable,
    color,
    prefix,
    showExpanded = false
  }) {
    const styles = useStyles38();
    const { name } = usePartialVertex(assignable, ["name"]);
    const ref = (0, import_react_18_286.useRef)(null);
    const width = useAnimateWidth(ref, showExpanded);
    const style = (0, import_react_18_286.useMemo)(() => {
      const s = {
        color,
        ...width
      };
      if (showExpanded) {
        s.borderColor = color;
      }
      return s;
    }, [color, showExpanded, width]);
    return /* @__PURE__ */ import_react_18_286.default.createElement(
      "div",
      {
        contentEditable: false,
        className: cn(styles.inlineTag),
        style,
        ref
      },
      /* @__PURE__ */ import_react_18_286.default.createElement(Text2, null, prefix, name),
      /* @__PURE__ */ import_react_18_286.default.createElement(
        IconDropDownArrow_default,
        {
          className: cn(styles.inlineTagArrow, !showExpanded && styles.hideArrow),
          fill: color
        }
      )
    );
  }
  function InlineAssignee({
    user,
    workspaceManager,
    cardManager
  }) {
    const styles = useStyles38();
    const { users } = usePartialVertex(workspaceManager, ["users"]);
    const userManagers = (0, import_react_18_286.useMemo)(
      () => Array.from(users).map((u) => u.manager),
      [users]
    );
    const { assignees } = usePartialVertex(cardManager, ["assignees"]);
    const assigneesManagers = (0, import_react_18_286.useMemo)(
      () => Array.from(assignees).map((u) => u.manager),
      [assignees]
    );
    const [expanded, setExpanded] = (0, import_react_18_286.useState)(false);
    const userKey = user.key;
    const color = (0, import_react_18_286.useMemo)(() => getColorForUserId(`${userKey}`), [userKey]);
    const renderSelected = (0, import_react_18_286.useCallback)(
      ({ user: user2 }) => /* @__PURE__ */ import_react_18_286.default.createElement(
        AssigneeDropDown,
        {
          assignable: user2,
          showExpanded: expanded,
          color,
          prefix: "@"
        }
      ),
      [expanded, color]
    );
    return /* @__PURE__ */ import_react_18_286.default.createElement(
      "div",
      {
        onMouseEnter: () => setExpanded(true),
        onMouseLeave: () => setExpanded(false),
        onClick: () => setExpanded(false)
      },
      /* @__PURE__ */ import_react_18_286.default.createElement(
        Assignee,
        {
          user,
          users: userManagers,
          cardManager,
          assignees: assigneesManagers,
          source: "editor:title",
          onInviteUserSelected: () => {
          },
          renderSelected,
          className: cn(styles.tagButton)
        }
      )
    );
  }
  function InlineTag({
    tag,
    cardManager
  }) {
    const [expanded, setExpanded] = (0, import_react_18_286.useState)(false);
    const renderSelected = (0, import_react_18_286.useCallback)(
      (tagMng) => /* @__PURE__ */ import_react_18_286.default.createElement(
        AssigneeDropDown,
        {
          assignable: tagMng,
          color: brandLightTheme.mono.m1,
          showExpanded: expanded,
          prefix: "#"
        }
      ),
      [expanded]
    );
    const onSelected = (0, import_react_18_286.useCallback)(
      (t) => {
        const note = cardManager.getVertexProxy();
        note.tags.set(t.parentTag, t);
      },
      [cardManager]
    );
    const onDelete = (0, import_react_18_286.useCallback)(
      (t) => {
        const note = cardManager.getVertexProxy();
        note.tags.delete(t.parentTag);
      },
      [cardManager]
    );
    return /* @__PURE__ */ import_react_18_286.default.createElement(
      "div",
      {
        onMouseEnter: () => setExpanded(true),
        onMouseLeave: () => setExpanded(false),
        onClick: () => setExpanded(false)
      },
      /* @__PURE__ */ import_react_18_286.default.createElement(
        TagView,
        {
          tag,
          onSelected,
          onDelete,
          renderSelected
        }
      )
    );
  }
  function AssigneePill({ user }) {
    const styles = useStyles38();
    const { name } = usePartialVertex(user, ["name"]);
    const color = getColorForUserId(user.key);
    return /* @__PURE__ */ import_react_18_286.default.createElement(
      Pill,
      {
        color,
        pillStyle: "border" /* Border */,
        extended: true,
        className: cn(styles.assigneePill)
      },
      /* @__PURE__ */ import_react_18_286.default.createElement(PillContent, null, name),
      /* @__PURE__ */ import_react_18_286.default.createElement(PillAction, null, /* @__PURE__ */ import_react_18_286.default.createElement(IconDropDownArrow_default, { fill: color }))
    );
  }
  var import_react_18_286, import_slate_0_877, import_slate_react_0_874, animName, useStyles38, CardNode, ShortCardMetadata, ExtendedCardMetadata;
  var init_card_node = __esm({
    "web-app/src/core/slate/elements/card.element/card-node/index.tsx"() {
      import_react_18_286 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_877 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_874 = __require("https://esm.sh/slate-react@0.87.1");
      init_styles();
      init_colors();
      init_icons();
      init_inputs();
      init_texts();
      init_css_objects();
      init_theme();
      init_graph();
      init_vertex2();
      init_animate();
      init_element_utils();
      init_selection_utils();
      init_assignees_view();
      init_placeholder();
      init_pill();
      init_tag_button();
      init_tag_view();
      init_card();
      init_assignees_icon();
      init_tag_icon();
      init_card_actions();
      init_note();
      animName = keyframes({
        from: {
          backgroundPosition: [styleguide.gridbase * -14, 0]
        },
        to: {
          backgroundPosition: [styleguide.gridbase * 14, 0]
        }
      });
      useStyles38 = makeStyles((theme, resolveClass) => ({
        root: {
          margin: [styleguide.gridbase, 0],
          [`& + ${resolveClass("root")}`]: {
            marginBottom: 0
          }
        },
        card: {
          borderBottom: `1px solid ${theme.background.placeholderText}`,
          boxSizing: "border-box",
          ...styleguide.transition.short,
          transitionProperty: "height, color",
          basedOn: [layout.column],
          ":hover": {
            actionsContainer: {
              opacity: 1
            }
          }
        },
        skeleton: {
          animationDuration: "1s",
          animationFillMode: "forwards",
          animationIterationCount: "infinite",
          animationName: animName,
          animationTimingFunction: "linear",
          backgroundColor: theme.background[300],
          background: "linear-gradient(to left, #f0f3f7 8%, #ced8e5 18%, #f0f3f7 33%)",
          backgroundSize: ["100%", "100%"]
        },
        cardDone: {
          color: theme.background.placeholderText
        },
        noteLine: {
          position: "relative",
          height: styleguide.gridbase * 4,
          flexShrink: 0,
          flexGrow: 0,
          flexBasis: styleguide.gridbase * 4,
          alignItems: "center",
          basedOn: [layout.row]
        },
        actionsContainer: {
          position: "absolute",
          top: 0,
          right: styleguide.gridbase * 0.5,
          opacity: 0,
          ...styleguide.transition.short,
          transitionProperty: "opacity"
        },
        selected: {
          backgroundColor: theme.background[100]
        },
        checkbox: {
          userSelect: "none",
          marginRight: styleguide.gridbase
        },
        inlineMetadata: {
          userSelect: "none",
          marginLeft: styleguide.gridbase,
          basedOn: [layout.row]
        },
        tagButton: {
          userSelect: "none",
          marginLeft: styleguide.gridbase * 0.5,
          padding: 0
        },
        inlineTag: {
          height: styleguide.gridbase * 3,
          boxSizing: "border-box",
          border: "1px solid transparent",
          padding: [0, styleguide.gridbase * 0.5],
          borderRadius: styleguide.gridbase * 1.5,
          alignItems: "center",
          whiteSpace: "nowrap",
          ...styleguide.transition.short,
          transitionProperty: "width border-color",
          basedOn: [layout.row]
        },
        cardText: {
          minWidth: 2
        },
        inlineTagArrow: {
          marginLeft: styleguide.gridbase * 0.5
        },
        hideArrow: {
          display: "none"
        },
        extendedMetadata: {
          paddingLeft: styleguide.gridbase * 4,
          overflow: "hidden",
          userSelect: "none",
          basedOn: [layout.column]
        },
        tag: {
          userSelect: "none",
          margin: [0, styleguide.gridbase * 0.5]
        },
        metadataRow: {
          height: styleguide.gridbase * 3,
          alignItems: "center",
          marginBottom: styleguide.gridbase,
          basedOn: [layout.row]
        },
        assigneesIcon: {
          marginRight: styleguide.gridbase * 0.5
        },
        strikethroughAnchor: {
          position: "relative",
          basedOn: [layout.row]
        },
        strikethrough: {
          position: "absolute",
          height: 1,
          backgroundColor: theme.background.placeholderText,
          width: "100%",
          left: 0,
          top: "50%",
          transform: "scale(0)",
          transformOrigin: "left center",
          ...styleguide.transition.standard,
          transitionProperty: "transform"
        },
        cardPlaceholder: {
          position: "relative",
          left: -2,
          whiteSpace: "nowrap",
          color: theme.background.placeholderText,
          userSelect: "none",
          pointerEvents: "none"
          // position: 'absolute',
          // top: '50%',
          // left: '50%',
          // transform: 'translate(-50%, -50%)'
        },
        strikeEnabled: {
          transform: "scale(1)"
        },
        hide: {
          height: 0
        },
        assigneePill: {
          marginRight: styleguide.gridbase
        }
      }));
      CardNode = function({
        element,
        attributes,
        children
      }) {
        const styles = useStyles38();
        const editor = (0, import_slate_react_0_874.useSlateStatic)();
        const rootCard = useCurrentCard();
        const cardId = element.ref;
        const graph = useGraphManager();
        const cardManager = graph.getVertexManager(cardId);
        const card = usePartialVertex(cardManager, [
          "tags",
          "title",
          "workspace",
          "type"
        ]);
        const theme = useTheme();
        const divRef = (0, import_react_18_286.useRef)(null);
        const selected = (0, import_slate_react_0_874.useSelected)();
        const focused = (0, import_slate_react_0_874.useFocused)();
        const [isExpanded, setIsExpanded] = (0, import_react_18_286.useState)(false);
        (0, import_react_18_286.useEffect)(() => {
          if (!import_slate_react_0_874.ReactEditor.isFocused(editor)) {
            return;
          }
          if (!selected) {
            setIsExpanded(false);
            return;
          }
          const [node, path] = SelectionUtils.extractSingleElement(editor);
          if (!node) {
            setIsExpanded(false);
            return;
          }
          const thisNode = ElementUtils.getClosestNode(
            editor,
            path,
            (node2) => CardElement.isCard(node2) && node2.ref === cardId
          );
          return setIsExpanded(!!thisNode);
        }, [selected, editor, focused, cardId]);
        const isActionable = card.type === "task" /* Task */;
        const done = card.status === "Done";
        const onChecked = () => {
          card.status = card.status === "Done" ? "ToDo" : "Done";
        };
        const style = useAnimateHeight(divRef, isExpanded);
        return /* @__PURE__ */ import_react_18_286.default.createElement(EditableCardContext, { cardManager }, /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.root) }, /* @__PURE__ */ import_react_18_286.default.createElement(
          "div",
          {
            className: cn(
              styles.card,
              isExpanded && styles.selected,
              done && styles.cardDone
            ),
            ref: divRef,
            style
          },
          /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.noteLine) }, isActionable && /* @__PURE__ */ import_react_18_286.default.createElement(
            CheckBox_default,
            {
              name: cardId,
              checked: done,
              onChange: onChecked,
              contentEditable: false,
              className: cn(styles.checkbox),
              color: theme.background[600]
            }
          ), /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.strikethroughAnchor) }, /* @__PURE__ */ import_react_18_286.default.createElement("div", { ...attributes, className: cn(styles.cardText) }, children), /* @__PURE__ */ import_react_18_286.default.createElement(
            "div",
            {
              contentEditable: false,
              className: cn(
                styles.strikethrough,
                done && styles.strikeEnabled
              )
            }
          ), /* @__PURE__ */ import_react_18_286.default.createElement(Placeholder, { element })), !isExpanded && /* @__PURE__ */ import_react_18_286.default.createElement(ShortCardMetadata, { cardManager }), /* @__PURE__ */ import_react_18_286.default.createElement(
            CardActions,
            {
              card: cardManager,
              editorRootKey: rootCard.key,
              className: cn(styles.actionsContainer)
            }
          )),
          /* @__PURE__ */ import_react_18_286.default.createElement(
            ExtendedCardMetadata,
            {
              cardManager,
              className: cn(!isExpanded && styles.hide)
            }
          )
        )));
      };
      ShortCardMetadata = import_react_18_286.default.memo(function({
        cardManager
      }) {
        const styles = useStyles38();
        const { workspace, tags, assignees } = usePartialVertex(cardManager, [
          "workspace",
          "tags",
          "assignees"
        ]);
        return /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.inlineMetadata), contentEditable: false }, Array.from(assignees).map((user) => /* @__PURE__ */ import_react_18_286.default.createElement(
          InlineAssignee,
          {
            key: user.key,
            user: user.manager,
            workspaceManager: workspace.manager,
            cardManager
          }
        )), Array.from(tags).map(([parentTag, tag]) => /* @__PURE__ */ import_react_18_286.default.createElement(
          InlineTag,
          {
            key: tag.key,
            tag: tag.manager,
            cardManager
          }
        )));
      });
      ExtendedCardMetadata = import_react_18_286.default.forwardRef(function({ cardManager, className }, ref) {
        const styles = useStyles38();
        const card = usePartialVertex(cardManager, ["tags", "workspace"]);
        const wsMng = card.workspace.manager;
        const tagsMng = /* @__PURE__ */ new Map();
        for (const [p, c] of card.tags) {
          tagsMng.set(
            p.manager,
            c.manager
          );
        }
        const renderAssignee = (0, import_react_18_286.useCallback)(
          ({ user }) => /* @__PURE__ */ import_react_18_286.default.createElement(AssigneePill, { user }),
          []
        );
        const onTagSelected = (tag) => {
          const currentTags = card.tags;
          currentTags.set(tag.parentTag || tag, tag);
          card.tags = currentTags;
        };
        const onTagDeleted = (tag) => {
          const currentTags = card.tags;
          currentTags.delete(tag.parentTag || tag);
          card.tags = currentTags;
        };
        return /* @__PURE__ */ import_react_18_286.default.createElement(
          "div",
          {
            contentEditable: false,
            ref,
            className: cn(className, styles.extendedMetadata)
          },
          /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.metadataRow) }, /* @__PURE__ */ import_react_18_286.default.createElement(TagIcon, null), Array.from(card.tags).map(([_, tag]) => /* @__PURE__ */ import_react_18_286.default.createElement(
            TagView,
            {
              buttonClassName: cn(styles.tag),
              key: tag.key,
              tag: tag.manager,
              onSelected: onTagSelected,
              onDelete: onTagDeleted,
              showMenu: true
            }
          )), /* @__PURE__ */ import_react_18_286.default.createElement(
            TagButton,
            {
              noteId: card,
              onTagged: onTagSelected,
              className: cn(styles.tag)
            }
          )),
          /* @__PURE__ */ import_react_18_286.default.createElement("div", { className: cn(styles.metadataRow) }, /* @__PURE__ */ import_react_18_286.default.createElement(AssigneesIcon, { className: cn(styles.assigneesIcon) }), /* @__PURE__ */ import_react_18_286.default.createElement(
            AssigneesView,
            {
              cardManager,
              cardType: "regular",
              source: "editor:body:inline-task",
              reverse: true,
              renderAssignee
            }
          ))
        );
      });
    }
  });

  // web-app/src/core/react-utils/base-utils.ts
  function useMountedIndicator2() {
    const isMountedRef = (0, import_react_18_287.useRef)(true);
    (0, import_react_18_287.useEffect)(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    return isMountedRef;
  }
  var import_react_18_287;
  var init_base_utils = __esm({
    "web-app/src/core/react-utils/base-utils.ts"() {
      import_react_18_287 = __require("https://esm.sh/react@18.2.0");
    }
  });

  // web-app/src/core/slate/mentions/assignees.tsx
  function UserSuggestion({
    item,
    ...rest
  }) {
    const { name } = usePartialVertex(item, ["name"]);
    return /* @__PURE__ */ import_react_18_288.default.createElement(SuggestionItem, { item, ...rest }, /* @__PURE__ */ import_react_18_288.default.createElement(SuggestionItemIcon, null, /* @__PURE__ */ import_react_18_288.default.createElement(avatar_default, { user: item, size: "small" })), name);
  }
  function UserItemComponent({
    item,
    ...rest
  }) {
    return /* @__PURE__ */ import_react_18_288.default.createElement(UserSuggestion, { item, ...rest });
  }
  function AssigneesSuggestionComponent({
    filter,
    SuggestionComponent,
    closeMention
  }) {
    const card = useCurrentCard();
    const partial = usePartialVertex(card, [
      "assignees",
      "workspace",
      "workspaceKey"
    ]);
    const wsMng = partial.workspace.manager;
    const isMounted = useMountedIndicator2();
    const availableAssignees = Array.from(partial.workspace.users);
    const items = availableAssignees.filter((u) => !partial.assignees.has(u)).map((x) => x.manager);
    const filteredTags = filterSortMentions(
      items,
      filter,
      (t) => t.getVertexProxy().name
    );
    const keyForItem = (0, import_react_18_288.useCallback)(
      (item) => item.key,
      //(item === INVITE_USER ? INVITE_USER : item.key),
      []
    );
    const onItemSelected = (userItem) => {
      closeMention();
      const user = userItem.getVertexProxy();
      const { assignees } = partial;
      if (assignees.size === 1) {
        assignees.clear();
      }
      assignees.add(user);
      partial.assignees = assignees;
    };
    return /* @__PURE__ */ import_react_18_288.default.createElement(
      SuggestionComponent,
      {
        items: filteredTags,
        keyForItem,
        onItemSelected,
        ItemSuggestionComponent: UserItemComponent
      }
    );
  }
  function createAssigneesPlugin(options) {
    return createMentionsPlugin({
      ...options,
      trigger: "@",
      MentionComponent: AssigneesSuggestionComponent
    });
  }
  var import_react_18_288;
  var init_assignees2 = __esm({
    "web-app/src/core/slate/mentions/assignees.tsx"() {
      import_react_18_288 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_vertex2();
      init_base_utils();
      init_avatar();
      init_mentions();
      init_card();
      init_mention_node();
    }
  });

  // web-app/src/core/slate/elements/card.element/index.tsx
  function EditableCardContext({
    cardManager,
    children
  }) {
    return /* @__PURE__ */ import_react_18_289.default.createElement(cardContext.Provider, { value: cardManager }, children);
  }
  function useCurrentCard() {
    return (0, import_react_18_289.useContext)(cardContext);
  }
  function isCardProps(props) {
    return props.element.tagName === CARD_TYPE && props.element.type === "inter-doc";
  }
  function isLoadingCardProps(props) {
    return CardElement.isLoadingCard(props.element);
  }
  function renderCard(props) {
    if (isCardProps(props)) {
      return /* @__PURE__ */ import_react_18_289.default.createElement(CardNode, { ...props });
    }
    if (isLoadingCardProps(props)) {
      return /* @__PURE__ */ import_react_18_289.default.createElement(LoadingCardNode, { ...props });
    }
  }
  function createNote(parent, currentUser, options) {
    const {
      likeSibling,
      body = {
        root: { children: [{ tagName: "p", children: [{ text: "" }] }] }
      },
      title = {
        root: { children: [{ tagName: "p", children: [{ text: "" }] }] }
      }
    } = options || {};
    const assignees = likeSibling ? likeSibling.assignees : [currentUser];
    const child = parent.graph.createVertex(NS_NOTES, {
      creationDate: /* @__PURE__ */ new Date(),
      workspace: parent.workspaceKey,
      // tags: tagsMap,
      title,
      body,
      type: "task" /* Task */,
      parentNote: parent.key,
      assignees: new Set(Array.from(assignees).map((x) => x.key)),
      createdBy: currentUser.key
    });
    return child;
  }
  function createCardPlugin(editor, getContainingNote, getCurrentUser, logger) {
    return mergePlugins([
      createAutoReplaceHandler({
        trigger: {
          default: {
            metaKeys: [],
            key: " "
          }
        },
        prefix: "-",
        editor,
        canTrigger: ([node]) => {
          return CardElement.canTransformToCard(node);
        },
        onTriggered([node, path]) {
          const el = node;
          CardElement.replaceAsCard(
            editor,
            el,
            path,
            getContainingNote(),
            getCurrentUser()
          );
        }
      }),
      createTagsPlugin({
        canOpen() {
          return CardElement.isSingleCard(editor);
        },
        editor
      }),
      createAssigneesPlugin({
        canOpen() {
          return CardElement.isSingleCard(editor);
        },
        editor
      }),
      {
        onKeyDown(e) {
          if (e.key !== "Enter" && e.key !== "Backspace") {
            return;
          }
          const [currentNode, currentPath] = SelectionUtils.extractSingleElement(editor);
          if (!currentNode) {
            return;
          }
          const el = ElementUtils.getClosestNode(
            editor,
            currentPath,
            CardElement.isCard
          );
          if (!el) {
            return;
          }
          const containing = getContainingNote();
          if (!containing) {
            console.warn("No containing note found");
            return;
          }
          const [node, path] = el;
          if (CardElement.isEmptyCard(node)) {
            e.preventDefault();
            CardElement.unwrapCard(editor, currentPath);
            logger.log({
              severity: "INFO",
              event: "Delete",
              vertex: node.ref,
              source: "editor:key-down",
              id: e.key
            });
            return;
          }
          if (e.key === "Backspace") {
            return;
          }
          e.preventDefault();
          const child = createNote(containing.getVertexProxy(), getCurrentUser());
          const insertAt = import_slate_0_878.Path.next(path);
          CardElement.insertNote(editor, child, insertAt);
          import_slate_0_878.Transforms.setSelection(editor, {
            focus: {
              path: [...insertAt, 0, 0],
              offset: 0
            },
            anchor: {
              path: [...insertAt, 0, 0],
              offset: 0
            }
          });
        }
      },
      { renderElement: renderCard }
    ]);
  }
  var import_react_18_289, import_slate_0_878, CARD_TYPE, cardContext, ALLOWED_ELEMENTS, CardElement;
  var init_card = __esm({
    "web-app/src/core/slate/elements/card.element/index.tsx"() {
      import_react_18_289 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_878 = __require("https://esm.sh/slate@0.87.0");
      init_scheme_types();
      init_tags();
      init_element_utils();
      init_selection_utils();
      init_plugins();
      init_auto_replace();
      init_card_node();
      init_assignees2();
      init_note();
      CARD_TYPE = "ref";
      cardContext = import_react_18_289.default.createContext(null);
      ALLOWED_ELEMENTS = [
        "p",
        "h1",
        "h2"
      ];
      CardElement = {
        isCard(value) {
          return import_slate_0_878.Element.isElement(value) && value.tagName === CARD_TYPE;
        },
        isLoadingCard(node) {
          return import_slate_0_878.Element.isElement(node) && node.type === "inter-doc" && !!node.loading;
        },
        canTransformToCard(node) {
          return import_slate_0_878.Element.isElement(node) && ALLOWED_ELEMENTS.includes(node.tagName);
        },
        isSingleCard(editor) {
          return ElementUtils.isSingleElement(editor, CardElement.isCard);
        },
        isEmptyCard(card) {
          return ElementUtils.isEmptyElement(card.children[0]);
        },
        insertNote(editor, note, at) {
          import_slate_0_878.Transforms.insertNodes(
            editor,
            [
              {
                tagName: "ref",
                type: "inter-doc",
                ref: note.key,
                children: note.title.root.children
              }
            ],
            { at }
          );
        },
        unwrapCard(editor, at) {
          const el = ElementUtils.getClosestNode(editor, at, CardElement.isCard);
          if (!el) {
            return;
          }
          const [, cardPath] = el;
          import_slate_0_878.Transforms.unwrapNodes(editor, { at: cardPath });
        },
        replaceAsCard(editor, node, path, parentNoteMng, currentUser) {
          const child = createNote(parentNoteMng.getVertexProxy(), currentUser, {
            title: {
              root: {
                children: [
                  {
                    tagName: "p",
                    children: node.children.map((x) => {
                      const { localKey, ...text } = x;
                      return text;
                    })
                  }
                ]
              }
            }
          });
          const reffedPath = import_slate_0_878.Editor.pathRef(editor, path);
          CardElement.insertNote(editor, child, path);
          const cardPath = import_slate_0_878.Editor.pathRef(editor, [...path, 0]);
          if (import_slate_0_878.Path.equals(path, [0])) {
            import_slate_0_878.Transforms.insertNodes(
              editor,
              {
                tagName: "p",
                children: [{ text: "" }]
              },
              { at: path }
            );
          }
          import_slate_0_878.Transforms.setSelection(editor, {
            focus: {
              path: [...cardPath.current, 0],
              offset: 0
            },
            anchor: {
              path: [...cardPath.current, 0],
              offset: 0
            }
          });
          import_slate_0_878.Transforms.removeNodes(editor, {
            at: reffedPath.current || void 0
          });
          reffedPath.unref();
          cardPath.unref();
        }
      };
    }
  });

  // web-app/src/core/slate/cfds/with-cfds.tsx
  function withCfds(editor) {
    const { apply, insertFragment, isVoid } = editor;
    const cfdsEditor = editor;
    editor.localKey = { id: uniqueId() };
    cfdsEditor._isInExternalSelectionChange = false;
    cfdsEditor._isCfdsInternal = true;
    editor.apply = (operation) => {
      apply(operation);
      if (operation.type === "set_selection" && !cfdsEditor._isInExternalSelectionChange && cfdsEditor.onLocalSelectionChanged) {
        cfdsEditor.onLocalSelectionChanged(editor.selection);
      }
    };
    editor.insertFragment = (fragment) => {
      const sanitizedFragment = fragment.map((node) => {
        const { localKey, ...newNode } = node;
        return newNode;
      });
      insertFragment(sanitizedFragment);
    };
    editor.isVoid = (el) => {
      return CardElement.isLoadingCard(el) || isVoid(el);
    };
    cfdsEditor.undo = () => {
    };
    cfdsEditor.redo = () => {
    };
    return cfdsEditor;
  }
  function isCfdsInternal(editor) {
    return !!editor._isCfdsInternal;
  }
  function slateRangeToCfdsRange(editor, range) {
    if (!range)
      return void 0;
    const anchor = import_slate_0_879.Node.get(editor, range.anchor.path);
    const focus = import_slate_0_879.Node.get(editor, range.focus.path);
    return {
      anchor: {
        node: anchor,
        offset: range.anchor.offset
      },
      focus: {
        node: focus,
        offset: range.focus.offset
      }
    };
  }
  var import_slate_0_879, import_slate_react_0_875, findKey, CfdsEditor;
  var init_with_cfds = __esm({
    "web-app/src/core/slate/cfds/with-cfds.tsx"() {
      import_slate_0_879 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_875 = __require("https://esm.sh/slate-react@0.87.1");
      init_common();
      init_card();
      init_error();
      findKey = import_slate_react_0_875.ReactEditor.findKey;
      import_slate_react_0_875.ReactEditor.findKey = (editor, node) => {
        if (!isCfdsInternal(editor)) {
          return findKey(editor, node);
        }
        if (import_slate_0_879.Editor.isEditor(node)) {
          return editor.localKey;
        }
        return editor._treeKeys.keyFor(node);
      };
      CfdsEditor = {
        setExternalSelection(editor, selection) {
          const cfdsEditor = editor;
          cfdsEditor._isInExternalSelectionChange = true;
          cfdsEditor.selection = selection;
          cfdsEditor._isInExternalSelectionChange = false;
        },
        slateRangeToCfdsRange,
        findPath(parent, child) {
          for (let i = 0; i < parent.children.length; i++) {
            const current = parent.children[i];
            if (current === child) {
              return [i];
            }
            if (import_slate_0_879.Element.isElement(current) || import_slate_0_879.Editor.isEditor(current)) {
              const inner = CfdsEditor.findPath(current, child);
              if (inner) {
                inner.unshift(i);
                return inner;
              }
            }
          }
          notReached("CfdsEditor.findPath() failed finding a path");
        },
        cfdsRangeToSlateRange(editor, range) {
          if (!range)
            return null;
          const anchor = range.anchor.node;
          const focus = range.focus.node;
          const anchorPath = CfdsEditor.findPath(editor, anchor);
          const focusPath = CfdsEditor.findPath(editor, focus);
          return {
            anchor: {
              path: anchorPath,
              offset: range.anchor.offset
            },
            focus: {
              path: focusPath,
              offset: range.focus.offset
            }
          };
        }
      };
    }
  });

  // web-app/src/core/cfds/react/graph-use.ts
  function registerOnCriticalError(manager, onCriticalError) {
    if (manager === void 0 || manager === null) {
      return;
    }
    manager.on(EVENT_CRITICAL_ERROR, onCriticalError);
    return () => {
      manager.removeListener(EVENT_CRITICAL_ERROR, onCriticalError);
    };
  }
  function useOnCriticalError(onCriticalError) {
    const graphMng = useGraphManager();
    (0, import_react_18_290.useEffect)(() => {
      return registerOnCriticalError(graphMng, onCriticalError);
    }, [graphMng]);
  }
  var import_react_18_290;
  var init_graph_use = __esm({
    "web-app/src/core/cfds/react/graph-use.ts"() {
      init_vertex_manager();
      import_react_18_290 = __require("https://esm.sh/react@18.2.0");
      init_graph();
    }
  });

  // web-app/src/core/slate/cfds/use-cfds-editor.ts
  function makeExpirationDate(expirationInMs) {
    return new Date(Date.now() + expirationInMs + expirationBuffer);
  }
  function useUndoContext(editor, vMng, field, addBodyRefs) {
    const graph = useGraphManager();
    (0, import_react_18_291.useEffect)(() => {
      const options = {
        vertices: [
          {
            keys: [vMng.key],
            filter: (_, mut) => {
              return mutationPackHasField(mut, field);
            },
            snapshotFields: [field]
          }
        ]
      };
      if (addBodyRefs) {
        const childKeys = vMng.getVertexProxy().getBodyRefs();
        options.vertices?.push({
          keys: childKeys,
          filter: (_, mut) => {
            return mutationPackHasField(mut, "title");
          },
          snapshotFields: ["title"]
        });
      }
      options.filters = [
        {
          filter: (v, mut) => {
            return v instanceof Note && v.parentNote?.key === vMng.key && mutationPackHasField(mut, "title");
          },
          initialSnapshot: { data: { isDeleted: 1 }, local: {} },
          snapshotFields: ["title"]
        }
      ];
      const undoCtx = graph.undoManager.createContext(options);
      editor.undo = () => {
        const res = undoCtx.undo();
        if (!res && !import_slate_react_0_876.ReactEditor.isFocused(editor)) {
          import_slate_react_0_876.ReactEditor.focus(editor);
        }
      };
      editor.redo = () => {
        const res = undoCtx.redo();
        if (!res && !import_slate_react_0_876.ReactEditor.isFocused(editor)) {
          import_slate_react_0_876.ReactEditor.focus(editor);
        }
      };
      return () => {
        editor.undo = () => {
        };
        editor.redo = () => {
        };
        undoCtx.dispose();
      };
    }, [editor, graph, vMng, field, addBodyRefs]);
  }
  function handleSelection(editor, selection) {
    if (!import_slate_react_0_876.ReactEditor.isFocused(editor)) {
      return;
    }
    const slateSelection = CfdsEditor.cfdsRangeToSlateRange(editor, selection);
    if (!editor.selection && !slateSelection) {
      return;
    }
    if (!editor.selection && slateSelection || editor.selection && !slateSelection || !import_slate_0_8710.Range.equals(slateSelection, editor.selection)) {
      CfdsEditor.setExternalSelection(editor, slateSelection);
    }
  }
  function useCfdsEditor(vertexMng, field, editor, selectionId, opts = {}) {
    const vertex = usePartialVertex(vertexMng, [field]);
    const {
      undoAddBodyRefs = DEFAULT_OPTS.undoAddBodyRefs,
      expirationInMs = DEFAULT_OPTS.expirationInMs
    } = opts;
    useOnCriticalError(() => {
      import_slate_react_0_876.ReactEditor.blur(editor);
    });
    useUndoContext(editor, vertexMng, field, undoAddBodyRefs);
    const richtext = vertex[field];
    const onChange = (0, import_react_18_291.useCallback)(
      (newValue) => {
        const ranges = {};
        if (editor.selection) {
          ranges[selectionId] = {
            ...CfdsEditor.slateRangeToCfdsRange(editor, editor.selection),
            expiration: makeExpirationDate(expirationInMs)
          };
        }
        const v = vertexMng.getVertexProxy();
        v[field] = {
          root: {
            children: newValue
          },
          ranges
        };
      },
      [vertexMng, editor, selectionId, expirationInMs, field]
    );
    const value = richtext.root.children;
    const selection = (richtext.ranges || {})[selectionId];
    const slateValue = (0, import_react_18_291.useMemo)(() => {
      if (SET_EXTERNAL_SELECTION) {
        editor.children = value;
        handleSelection(editor, selection);
      }
      return value;
    }, [value, selection, editor]);
    (0, import_react_18_291.useEffect)(() => {
      const intervalId = setInterval(() => {
        const proxy = vertexMng.getVertexProxy();
        const rt = proxy[field];
        let selection2 = (rt.ranges || {})[selectionId];
        if (!selection2) {
          if (!editor.selection) {
            return;
          }
          selection2 = CfdsEditor.slateRangeToCfdsRange(editor, editor.selection);
        }
        proxy[field] = {
          root: rt.root,
          ranges: {
            [selectionId]: {
              ...selection2,
              expiration: makeExpirationDate(expirationInMs)
            }
          }
        };
      }, expirationInMs);
      return () => {
        clearInterval(intervalId);
      };
    }, [vertexMng, field, expirationInMs, selectionId, editor]);
    if (isCfdsInternal(editor)) {
      editor._treeKeys = richtext.nodeKeys;
    }
    return {
      onChange,
      value: slateValue
    };
  }
  var import_react_18_291, import_slate_0_8710, import_slate_react_0_876, DEFAULT_OPTS, expirationBuffer, SET_EXTERNAL_SELECTION;
  var init_use_cfds_editor = __esm({
    "web-app/src/core/slate/cfds/use-cfds-editor.ts"() {
      import_react_18_291 = __require("https://esm.sh/react@18.2.0");
      import_slate_0_8710 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_876 = __require("https://esm.sh/slate-react@0.87.1");
      init_mutations();
      init_vertex2();
      init_with_cfds();
      init_graph();
      init_note();
      init_graph_use();
      DEFAULT_OPTS = {
        undoAddBodyRefs: false,
        expirationInMs: 1e3 * 10
      };
      expirationBuffer = 1e4;
      SET_EXTERNAL_SELECTION = true;
    }
  });

  // web-app/src/core/slate/utils/list-utils.ts
  var import_slate_0_8711, ListUtils;
  var init_list_utils = __esm({
    "web-app/src/core/slate/utils/list-utils.ts"() {
      import_slate_0_8711 = __require("https://esm.sh/slate@0.87.0");
      init_element_utils();
      ListUtils = {
        isNestedContainer(value) {
          if (!import_slate_0_8711.Element.isElement(value)) {
            return false;
          }
          return value.tagName === "ol" || value.tagName === "ul";
        },
        isNestedChild(value) {
          return import_slate_0_8711.Element.isElement(value) && (value.tagName === "li" || ListUtils.isNestedContainer(value));
        },
        getContainerParent(editor, path) {
          return import_slate_0_8711.Editor.above(editor, {
            at: path,
            mode: "lowest",
            match: (node, p) => !import_slate_0_8711.Path.equals(path, p) && ListUtils.isNestedContainer(node)
          });
        },
        setList(editor, path, listType) {
          const [node] = import_slate_0_8711.Editor.node(editor, path);
          const texts = Array.from(import_slate_0_8711.Node.texts(node)).map(([text]) => text);
          import_slate_0_8711.Transforms.removeNodes(editor, { at: path });
          import_slate_0_8711.Transforms.insertNodes(
            editor,
            {
              tagName: listType,
              children: [
                {
                  tagName: "li",
                  children: texts
                }
              ]
            },
            { at: path }
          );
          const newPath = [...path, 0, 0];
          import_slate_0_8711.Transforms.setSelection(editor, {
            anchor: {
              path: newPath,
              offset: 0
            },
            focus: {
              path: newPath,
              offset: 0
            }
          });
        },
        liftListItem(editor, path) {
          const [item] = import_slate_0_8711.Editor.node(editor, path);
          const [itemNode, itemPath] = ListUtils.isNestedChild(item) ? [item, path] : import_slate_0_8711.Editor.above(editor, {
            at: path,
            mode: "lowest",
            match: ListUtils.isNestedChild
          });
          const itemRef = import_slate_0_8711.Editor.pathRef(editor, itemPath);
          const [containerNode, containerPath] = ListUtils.getContainerParent(
            editor,
            itemPath
          );
          const containerPathRef = import_slate_0_8711.Editor.pathRef(editor, containerPath);
          const itemIndex = itemPath[itemPath.length - 1];
          if (itemIndex !== 0 && itemIndex !== containerNode.children.length - 1) {
            const splitPath = import_slate_0_8711.Path.next(containerPath);
            import_slate_0_8711.Transforms.insertNodes(
              editor,
              {
                tagName: containerNode.tagName,
                children: []
              },
              {
                at: splitPath
              }
            );
            import_slate_0_8711.Transforms.moveNodes(editor, {
              at: containerPath,
              to: [...splitPath, 0],
              match: (_, p) => import_slate_0_8711.Path.isSibling(p, itemRef.current) && import_slate_0_8711.Path.isAfter(p, itemRef.current)
            });
          }
          const indexAfterSplit = itemRef.current[itemRef.current.length - 1];
          import_slate_0_8711.Transforms.moveNodes(editor, {
            at: itemRef.current,
            to: indexAfterSplit === 0 ? containerPath : import_slate_0_8711.Path.next(containerPath)
          });
          const newContainer = ListUtils.getContainerParent(editor, itemRef.current);
          if (itemNode.tagName === "li" && !newContainer) {
            import_slate_0_8711.Transforms.setNodes(editor, { tagName: "p" }, { at: itemRef.current });
          }
          itemRef.unref();
          const [updatedContainer] = import_slate_0_8711.Editor.node(editor, containerPathRef.current);
          if (ElementUtils.isEmptyElement(updatedContainer)) {
            import_slate_0_8711.Transforms.removeNodes(editor, { at: containerPathRef.current });
          }
          containerPathRef.unref();
        }
      };
    }
  });

  // web-app/src/core/slate/elements/list-item.element.tsx
  function isListItemProps(props) {
    return props.element.tagName === LIST_ITEM_TYPE;
  }
  function ListItemElementNode(props) {
    const styles = useStyles39();
    const { dir } = props.attributes;
    const isRtl = dir === "rtl";
    const level = (0, import_react_18_292.useContext)(listContext);
    return /* @__PURE__ */ import_react_18_292.default.createElement(
      "li",
      {
        ...props.attributes,
        className: cn(styles[`level_${level}_${isRtl ? "rtl" : "ltr"}`])
      },
      /* @__PURE__ */ import_react_18_292.default.createElement(Text2, null, props.children)
    );
  }
  function renderElementItem(props) {
    if (isListItemProps(props)) {
      return /* @__PURE__ */ import_react_18_292.default.createElement(ListItemElementNode, { ...props });
    }
  }
  function createListItemPlugin(editor) {
    return {
      renderElement: renderElementItem,
      onKeyDown(e) {
        if (e.key !== "Tab" || e.shiftKey) {
          return;
        }
        if (ListItemElement.isSingleListItem(editor)) {
          e.preventDefault();
          const [, path] = ElementUtils.getClosestNode(
            editor,
            editor.selection,
            ListItemElement.isListItem
          );
          const [parent] = ListUtils.getContainerParent(editor, path);
          ListUtils.setList(editor, path, parent.tagName);
        }
      }
    };
  }
  var import_react_18_292, import_slate_0_8712, listContext, useStyles39, LIST_ITEM_TYPE, ListItemElement;
  var init_list_item_element = __esm({
    "web-app/src/core/slate/elements/list-item.element.tsx"() {
      import_react_18_292 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8712 = __require("https://esm.sh/slate@0.87.0");
      init_element_utils();
      init_texts();
      init_list_utils();
      init_css_objects();
      listContext = import_react_18_292.default.createContext(0);
      useStyles39 = makeStyles((theme) => {
        let levelStyles = {};
        for (let level = 1; level < 6; level++) {
          levelStyles[`level_${level}_ltr`] = {
            marginLeft: level * 20,
            textAlign: "start"
          };
          levelStyles[`level_${level}_rtl`] = {
            marginRight: level * 20,
            textAlign: "start"
          };
        }
        return levelStyles;
      }, "list-item_element_ce3599");
      LIST_ITEM_TYPE = "li";
      ListItemElement = {
        isListItem(value) {
          return import_slate_0_8712.Element.isElement(value) && value.tagName === "li";
        },
        isSingleListItem(editor) {
          return ElementUtils.isSingleElement(editor, ListItemElement.isListItem);
        }
      };
    }
  });

  // web-app/src/core/slate/elements/bullet-list.element.tsx
  function isBulletListProps(props) {
    return props.element.tagName === BULLET_LIST_TYPE;
  }
  function BulletListElementNode(props) {
    const styles = useStyles40();
    const level = (0, import_react_18_293.useContext)(listContext);
    return /* @__PURE__ */ import_react_18_293.default.createElement("ul", { ...props.attributes, className: cn(styles.bulletList) }, /* @__PURE__ */ import_react_18_293.default.createElement(listContext.Provider, { value: level + 1 }, props.children));
  }
  function renderBulletList(props) {
    if (isBulletListProps(props)) {
      return /* @__PURE__ */ import_react_18_293.default.createElement(BulletListElementNode, { ...props });
    }
  }
  function createBulletListPlugin(editor) {
    return mergePlugins([
      createAutoReplaceHandler({
        trigger: {
          default: {
            metaKeys: [],
            key: " "
          }
        },
        prefix: "*",
        editor,
        onTriggered([node, path]) {
          ListUtils.setList(editor, path, BULLET_LIST_TYPE);
        }
      }),
      { renderElement: renderBulletList }
    ]);
  }
  var import_react_18_293, useStyles40, BULLET_LIST_TYPE;
  var init_bullet_list_element = __esm({
    "web-app/src/core/slate/elements/bullet-list.element.tsx"() {
      import_react_18_293 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_plugins();
      init_auto_replace();
      init_list_utils();
      init_list_item_element();
      useStyles40 = makeStyles(() => ({
        bulletList: {
          padding: 0,
          paddingInlineStart: 0
        }
      }));
      BULLET_LIST_TYPE = "ul";
    }
  });

  // web-app/src/shared/card/create.ts
  function createNewNote(graph, ws, data) {
    const { type } = data;
    const baseData = {
      workspace: KeyFromVertexId(ws),
      createdBy: graph.rootKey,
      title: emptyDoc(),
      body: emptyDoc(),
      type,
      assignees: /* @__PURE__ */ new Set([graph.rootKey]),
      // tags: tagsMap,
      creationDate: /* @__PURE__ */ new Date()
    };
    const card = graph.createVertex(NS_NOTES, {
      ...baseData,
      ...data
    });
    return card;
  }
  var emptyDoc;
  var init_create = __esm({
    "web-app/src/shared/card/create.ts"() {
      init_scheme_types();
      init_vertex();
      emptyDoc = () => ({
        root: { children: [{ tagName: "p", children: [{ text: "" }] }] }
      });
    }
  });

  // web-app/src/core/slate/elements/card.element/with-cards.ts
  function withCards(editor, getNote) {
    const { insertFragment, normalizeNode } = editor;
    editor.insertFragment = (fragment) => {
      const sanitized = fragment.map((node) => {
        if (CardElement.isCard(node)) {
          const noteMgr = getNote && getNote();
          if (noteMgr !== void 0 && noteMgr.graph.hasVertex(node.ref)) {
            let duplicatedTask = duplicateCard(noteMgr.graph, node.ref, {
              suffix: ""
            });
            if (duplicatedTask === void 0) {
              duplicatedTask = createNewNote(
                noteMgr.graph,
                noteMgr.getVertexProxy().workspace,
                {
                  ...noteMgr.graph.getVertex(node.ref).record.cloneData(),
                  body: initRichText()
                }
              );
            }
            if (duplicatedTask !== void 0) {
              node.ref = duplicatedTask.key;
            } else {
              node = node.children[0];
            }
          } else {
            node = node.children[0];
          }
        }
        return node;
      });
      insertFragment(sanitized);
    };
    editor.normalizeNode = (entry) => {
      const [node, path] = entry;
      if (CardElement.isCard(node) && import_slate_0_8713.Path.equals(path, [editor.children.length - 1])) {
        import_slate_0_8713.Transforms.insertNodes(
          editor,
          {
            tagName: "p",
            children: [{ text: "" }]
          },
          { at: [editor.children.length] }
        );
        return;
      }
      normalizeNode(entry);
    };
    return editor;
  }
  var import_slate_0_8713;
  var init_with_cards = __esm({
    "web-app/src/core/slate/elements/card.element/with-cards.ts"() {
      import_slate_0_8713 = __require("https://esm.sh/slate@0.87.0");
      init_duplicate();
      init_tree();
      init_create();
      init_card();
    }
  });

  // web-app/src/core/slate/elements/header.element.tsx
  function isHeaderProps(props) {
    return props.element.tagName === HEADING_1_TYPE;
  }
  function HeaderElementNode(props) {
    const styles = useStyles41();
    return /* @__PURE__ */ import_react_18_294.default.createElement(H22, { ...props.attributes, className: cn(styles.header) }, props.children);
  }
  function renderHeader(props) {
    if (isHeaderProps(props)) {
      return /* @__PURE__ */ import_react_18_294.default.createElement(HeaderElementNode, { ...props });
    }
  }
  function selectionStartEndPoints(editor) {
    if (import_slate_0_8714.Range.isCollapsed(editor.selection)) {
      return [editor.selection.focus, editor.selection.focus];
    } else {
      return import_slate_0_8714.Range.edges(
        import_slate_0_8714.Editor.unhangRange(editor, editor.selection, { voids: true })
      );
    }
  }
  function rangeOfBlockAtPoint(editor, point) {
    let [headerNode, rootPath] = import_slate_0_8714.Editor.parent(editor, point);
    let rangeStart = { path: rootPath.concat([0]), offset: 0 };
    let lastNodeIndex = headerNode.children.length - 1;
    let lastNode = headerNode.children[lastNodeIndex];
    let rangeEnd = {
      path: rootPath.concat([lastNodeIndex]),
      offset: lastNode.text.length
    };
    return [rangeStart, rangeEnd];
  }
  function createEnterHandler(editor, tagName) {
    return {
      onKeyDown(e) {
        if (!isKeyPressed(e, "Enter")) {
          return;
        }
        let [selectionStart, selectionEnd] = selectionStartEndPoints(editor);
        let elementAtStart = import_slate_0_8714.Editor.parent(
          editor,
          selectionStart
        )[0];
        if (elementAtStart.tagName !== tagName) {
          return;
        }
        e.preventDefault();
        let setPrefix = false, setSuffix = false;
        if (import_slate_0_8714.Point.equals(
          selectionStart,
          rangeOfBlockAtPoint(editor, selectionStart)[0]
        )) {
          setPrefix = true;
        } else if (import_slate_0_8714.Point.equals(selectionEnd, rangeOfBlockAtPoint(editor, selectionEnd)[1])) {
          setSuffix = true;
        }
        import_slate_0_8714.Editor.insertBreak(editor);
        if (setSuffix) {
          import_slate_0_8714.Transforms.setNodes(editor, { tagName: "p" });
        } else if (setPrefix) {
          import_slate_0_8714.Transforms.setNodes(editor, { tagName: "p" }, { at: selectionStart });
        }
      }
    };
  }
  function createHeaderPlugin(editor) {
    return mergePlugins([
      createAutoReplaceHandler({
        trigger: {
          default: {
            metaKeys: [],
            key: " "
          }
        },
        prefix: "#",
        editor,
        onTriggered([node, path]) {
          import_slate_0_8714.Transforms.setNodes(editor, { tagName: HEADING_1_TYPE }, { at: path });
        }
      }),
      { renderElement: renderHeader },
      createEnterHandler(editor, "h1")
    ]);
  }
  var import_react_18_294, import_slate_0_8714, useStyles41, HEADING_1_TYPE;
  var init_header_element = __esm({
    "web-app/src/core/slate/elements/header.element.tsx"() {
      import_react_18_294 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8714 = __require("https://esm.sh/slate@0.87.0");
      init_styles();
      init_texts();
      init_css_objects();
      init_plugins();
      init_auto_replace();
      init_hotkeys();
      useStyles41 = makeStyles(() => ({
        header: {
          marginBottom: styleguide.gridbase * 2
        }
      }));
      HEADING_1_TYPE = "h1";
    }
  });

  // web-app/src/core/slate/elements/header2.element.tsx
  function isHeader2Props(props) {
    return props.element.tagName === HEADING_2_TYPE;
  }
  function Header2ElementNode(props) {
    const styles = useStyles42();
    return /* @__PURE__ */ import_react_18_295.default.createElement(H32, { ...props.attributes, className: cn(styles.header2) }, props.children);
  }
  function renderHeader2(props) {
    if (isHeader2Props(props)) {
      return /* @__PURE__ */ import_react_18_295.default.createElement(Header2ElementNode, { ...props });
    }
  }
  function createHeader2Plugin(editor) {
    return mergePlugins([
      createAutoReplaceHandler({
        trigger: {
          default: {
            metaKeys: [],
            key: " "
          }
        },
        prefix: "##",
        editor,
        onTriggered([node, path]) {
          import_slate_0_8715.Transforms.setNodes(editor, { tagName: HEADING_2_TYPE }, { at: path });
        }
      }),
      { renderElement: renderHeader2 },
      createEnterHandler(editor, "h2")
    ]);
  }
  var import_react_18_295, import_slate_0_8715, useStyles42, HEADING_2_TYPE;
  var init_header2_element = __esm({
    "web-app/src/core/slate/elements/header2.element.tsx"() {
      import_react_18_295 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8715 = __require("https://esm.sh/slate@0.87.0");
      init_styles();
      init_css_objects();
      init_plugins();
      init_auto_replace();
      init_texts();
      init_header_element();
      useStyles42 = makeStyles((theme) => ({
        header2: {
          marginBottom: styleguide.gridbase
        }
      }));
      HEADING_2_TYPE = "h2";
    }
  });

  // web-app/src/core/slate/elements/numbered-list.element.tsx
  function isNumberedListProps(props) {
    return props.element.tagName === NUMBERED_LIST_TYPE;
  }
  function NumberedListElementNode(props) {
    const styles = useStyles43();
    const level = (0, import_react_18_296.useContext)(listContext);
    return /* @__PURE__ */ import_react_18_296.default.createElement("ol", { ...props.attributes, className: cn(styles.numberedList) }, /* @__PURE__ */ import_react_18_296.default.createElement(listContext.Provider, { value: level + 1 }, props.children));
  }
  function renderNumberedList(props) {
    if (isNumberedListProps(props)) {
      return /* @__PURE__ */ import_react_18_296.default.createElement(NumberedListElementNode, { ...props });
    }
  }
  function createNumberedListPlugin(editor) {
    return mergePlugins([
      createAutoReplaceHandler({
        trigger: {
          default: {
            metaKeys: [],
            key: " "
          }
        },
        prefix: "1.",
        editor,
        onTriggered([node, path]) {
          ListUtils.setList(editor, path, NUMBERED_LIST_TYPE);
        }
      }),
      {
        renderElement: renderNumberedList
      }
    ]);
  }
  var import_react_18_296, useStyles43, NUMBERED_LIST_TYPE;
  var init_numbered_list_element = __esm({
    "web-app/src/core/slate/elements/numbered-list.element.tsx"() {
      import_react_18_296 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_plugins();
      init_auto_replace();
      init_list_utils();
      init_list_item_element();
      useStyles43 = makeStyles(() => ({
        numberedList: {
          padding: 0,
          paddingInlineStart: 0
        }
      }));
      NUMBERED_LIST_TYPE = "ol";
    }
  });

  // web-app/src/core/slate/plugins/leaves.tsx
  function Leaf(props) {
    const styles = useStyles44();
    const { leaf } = props;
    const classes = cn(MARK_PROPS.map((p) => leaf[p] && styles[p]));
    return /* @__PURE__ */ import_react_18_297.default.createElement("span", { ...props.attributes, className: classes }, props.children);
  }
  function renderLeaf(props) {
    return /* @__PURE__ */ import_react_18_297.default.createElement(Leaf, { ...props });
  }
  function createKeyDownHandlers(editor) {
    return {
      onKeyDown(e) {
        for (const handler of handlers) {
          if (isHotkeyActive(e, handler.hotkey)) {
            e.preventDefault();
            e.stopPropagation();
            LeafUtils.toggleMark(editor, editor.selection, handler.prop);
            return;
          }
        }
      }
    };
  }
  function createLeafPlugin(editor) {
    return {
      renderLeaf,
      ...createKeyDownHandlers(editor)
    };
  }
  var import_react_18_297, import_slate_0_8716, useStyles44, MARK_PROPS, BOLD_SHORTCUT, ITALIC_SHORTCUT, STRIKETHROUGH_SHORTCUT, UNDERLINE_SHORTCUT, handlers, LeafUtils;
  var init_leaves = __esm({
    "web-app/src/core/slate/plugins/leaves.tsx"() {
      import_react_18_297 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8716 = __require("https://esm.sh/slate@0.87.0");
      init_css_objects();
      init_hotkeys();
      useStyles44 = makeStyles(() => ({
        bold: {
          fontWeight: "600"
        },
        underline: {
          textDecoration: "underline"
        },
        strikethrough: {
          textDecoration: "line-through",
          "&underline": {
            textDecoration: "underline line-through"
          }
        },
        italic: {
          fontStyle: "italic"
        }
      }));
      MARK_PROPS = ["bold", "italic", "underline", "strikethrough"];
      BOLD_SHORTCUT = {
        default: {
          metaKeys: ["meta" /* Meta */],
          key: "b"
        }
      };
      ITALIC_SHORTCUT = {
        default: {
          metaKeys: ["meta" /* Meta */],
          key: "i"
        }
      };
      STRIKETHROUGH_SHORTCUT = {
        default: {
          metaKeys: ["meta" /* Meta */],
          key: "s"
        }
      };
      UNDERLINE_SHORTCUT = {
        default: {
          metaKeys: ["meta" /* Meta */],
          key: "u"
        }
      };
      handlers = [
        [BOLD_SHORTCUT, "bold"],
        [ITALIC_SHORTCUT, "italic"],
        [STRIKETHROUGH_SHORTCUT, "strikethrough"],
        [UNDERLINE_SHORTCUT, "underline"]
      ].map(([shortcut, prop]) => ({
        prop,
        hotkey: getPlatformHotkey(shortcut)
      }));
      LeafUtils = {
        getMarkStatus(editor, at, mark) {
          const fragment = import_slate_0_8716.Node.fragment(editor, at);
          const leaves = fragment.flatMap(
            (x) => Array.from(import_slate_0_8716.Node.texts(x)).map(([text, path]) => [x, text, path])
          );
          let all = true;
          let some = false;
          for (const [, text] of leaves) {
            const markVal = text[mark];
            all = all && markVal;
            some = some || markVal;
          }
          if (all) {
            return 2 /* On */;
          }
          if (some) {
            return 1 /* Partial */;
          }
          return 0 /* Off */;
        },
        toggleMark(editor, at, mark) {
          const markStatus = LeafUtils.getMarkStatus(editor, at, mark);
          if (markStatus === 2 /* On */) {
            import_slate_0_8716.Editor.removeMark(editor, mark);
          } else {
            import_slate_0_8716.Editor.addMark(editor, mark, true);
          }
        }
      };
    }
  });

  // web-app/src/core/slate/plugins/base.tsx
  function createBaseRender(editor, Component = Paragraph) {
    return {
      renderElement(props) {
        if (props.element.tagName === "p") {
          return /* @__PURE__ */ import_react_18_298.default.createElement(Component, { ...props }, props.children);
        }
      }
    };
  }
  function createNestedContainersHandler(editor) {
    return {
      onKeyDown(e) {
        const isNestedChild = ElementUtils.isSingleElement(
          editor,
          ListUtils.isNestedChild
        );
        if (!isNestedChild) {
          return;
        }
        const [node, path] = import_slate_0_8717.Editor.node(editor, editor.selection);
        switch (e.key) {
          case "Enter":
          case "Backspace": {
            if (!ElementUtils.isEmpty(node)) {
              return;
            }
            e.preventDefault();
            ListUtils.liftListItem(editor, path);
            break;
          }
          case "Tab": {
            if (e.shiftKey) {
              e.preventDefault();
              ListUtils.liftListItem(editor, path);
              break;
            }
          }
        }
      }
    };
  }
  function createBaseBodyPlugin(editor) {
    return mergePlugins([
      createNestedContainersHandler(editor),
      createLeafPlugin(editor)
    ]);
  }
  function createBaseTitlePlugin(editor, DefaultComponent, onFocusNext) {
    return mergePlugins([
      {
        onKeyDown(e) {
          if (isKeyPressed(e, "Enter") || isKeyPressed(e, "Tab")) {
            import_slate_react_0_877.ReactEditor.blur(editor);
            e.preventDefault();
            e.stopPropagation();
            window.setTimeout(() => {
              onFocusNext();
            }, 0);
          }
        }
      },
      createBaseRender(editor, DefaultComponent),
      createLeafPlugin(editor)
    ]);
  }
  var import_react_18_298, import_slate_0_8717, import_slate_react_0_877, Paragraph;
  var init_base3 = __esm({
    "web-app/src/core/slate/plugins/base.tsx"() {
      import_react_18_298 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8717 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_877 = __require("https://esm.sh/slate-react@0.87.1");
      init_texts();
      init_css_objects();
      init_plugins();
      init_element_utils();
      init_hotkeys();
      init_list_utils();
      init_leaves();
      Paragraph = ({ children, attributes }) => {
        return /* @__PURE__ */ import_react_18_298.default.createElement("div", { ...attributes, className: cn(useStyles7.text) }, children);
      };
    }
  });

  // web-app/src/core/slate/plugins/link-decoration/link-leaf.tsx
  function isLinkLeafProps(props) {
    const { leaf } = props;
    return !isMention(leaf) && !!leaf.link;
  }
  function LinkLeaf({ leaf, children, attributes }) {
    const styles = useStyles45();
    const ref = (0, import_react_18_299.useRef)(null);
    const [isOpen, setIsOpen] = (0, import_react_18_299.useState)(false);
    const onMouseEnter = (0, import_react_18_299.useCallback)(() => setIsOpen(true), []);
    const onMouseLeave = (0, import_react_18_299.useCallback)(() => setIsOpen(false), []);
    const onClick = (0, import_react_18_299.useCallback)((e) => e.stopPropagation(), []);
    const { link } = leaf;
    return /* @__PURE__ */ import_react_18_299.default.createElement(
      "span",
      {
        ...attributes,
        ref,
        className: cn(styles.anchor),
        onMouseEnter,
        onMouseLeave
      },
      children,
      /* @__PURE__ */ import_react_18_299.default.createElement(
        popper_default,
        {
          open: isOpen,
          anchor: ref.current,
          contentEditable: false,
          position: "right",
          direction: "out"
        },
        /* @__PURE__ */ import_react_18_299.default.createElement(
          "a",
          {
            className: cn(styles.button),
            href: link,
            target: "_blank",
            rel: "noopener noreferrer",
            onClick
          },
          /* @__PURE__ */ import_react_18_299.default.createElement(IconLink_default, { fill: "#9CB2CD", className: cn(styles.icon) })
        )
      )
    );
  }
  var import_react_18_299, useStyles45;
  var init_link_leaf = __esm({
    "web-app/src/core/slate/plugins/link-decoration/link-leaf.tsx"() {
      init_mentions();
      import_react_18_299 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_icons();
      init_popper();
      init_css_objects();
      useStyles45 = makeStyles((theme) => ({
        anchor: {
          color: "-webkit-link",
          textDecoration: "underline"
        },
        button: {
          marginLeft: styleguide.gridbase,
          backgroundColor: theme.background[0],
          borderRadius: 4,
          height: styleguide.gridbase * 3,
          width: styleguide.gridbase * 3,
          userSelect: "none",
          boxShadow: "0 3px 5px 0 rgba(42, 62, 82, 0.12)",
          basedOn: [layout.column, layout.centerCenter]
        },
        icon: {
          transform: "scale(1.5)",
          transformOrigin: "center center"
        }
      }));
    }
  });

  // web-app/src/core/slate/plugins/link-decoration/index.tsx
  function getUrlRanges(str) {
    const ranges = [];
    let index = 0;
    while (index + "http://".length <= str.length) {
      const letters = str.substring(index, index + "https://".length);
      if (letters.startsWith("http://") || letters === "https://") {
        let rangeEnd = str.indexOf(" ", index + letters.length);
        if (rangeEnd === -1) {
          rangeEnd = str.length;
        }
        ranges.push({
          start: index,
          end: rangeEnd,
          url: str.substring(index, rangeEnd)
        });
        index = rangeEnd;
      } else {
        index++;
      }
    }
    return ranges;
  }
  function createLinkDecoration() {
    return {
      decorate([node, path]) {
        if (!import_slate_0_8718.Text.isText(node) || isMention(node)) {
          return EMPTY;
        }
        const urls = getUrlRanges(node.text);
        return urls.map((data) => ({
          link: data.url,
          anchor: { path, offset: data.start },
          focus: { path, offset: data.end }
        }));
      },
      renderLeaf(props) {
        if (isLinkLeafProps(props)) {
          return /* @__PURE__ */ import_react_18_2100.default.createElement(LinkLeaf, { ...props });
        }
        return null;
      }
    };
  }
  var import_react_18_2100, import_slate_0_8718, EMPTY;
  var init_link_decoration = __esm({
    "web-app/src/core/slate/plugins/link-decoration/index.tsx"() {
      import_react_18_2100 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8718 = __require("https://esm.sh/slate@0.87.0");
      init_mentions();
      init_link_leaf();
      EMPTY = [];
    }
  });

  // web-app/src/core/slate/index.tsx
  function createOvvioEditor(getNote) {
    return withCfds(withCards((0, import_slate_react_0_878.withReact)(withMentions((0, import_slate_0_8719.createEditor)())), getNote));
  }
  function useBodyEditor(noteManager) {
    const { sessionId } = useCfdsContext();
    const noteManagerRef = (0, import_react_18_2101.useRef)(noteManager);
    const currentUser = useCurrentUser();
    const editor = (0, import_react_18_2101.useMemo)(
      () => createOvvioEditor(() => noteManagerRef.current),
      []
    );
    const logger = useLogger();
    (0, import_react_18_2101.useEffect)(() => {
      noteManagerRef.current = noteManager;
    }, [noteManager]);
    const plugins = (0, import_react_18_2101.useMemo)(
      () => createPluginStack([
        createBaseRender(editor),
        createHeader2Plugin(editor),
        createHeaderPlugin(editor),
        createListItemPlugin(editor),
        createBulletListPlugin(editor),
        createNumberedListPlugin(editor),
        createCardPlugin(
          editor,
          () => noteManager,
          () => currentUser,
          logger
        ),
        createLinkDecoration(),
        createBaseBodyPlugin(editor)
      ]),
      [editor, logger, currentUser, noteManager]
    );
    const handlers2 = useCfdsEditor(
      noteManager,
      "body",
      editor,
      `${currentUser.key}/${sessionId}`,
      { undoAddBodyRefs: true }
    );
    return {
      editor,
      plugins,
      handlers: handlers2
    };
  }
  function useTitleEditor(note, DefaultComponent, source, opts = {}) {
    const { onFocusNext } = {
      ...DEFAULT_OPTS2,
      ...opts
    };
    const { sessionId } = useCfdsContext();
    const user = useCurrentUser();
    const noteRef = (0, import_react_18_2101.useRef)(note);
    (0, import_react_18_2101.useEffect)(() => {
      noteRef.current = note;
    }, [note]);
    const editor = (0, import_react_18_2101.useMemo)(() => createOvvioEditor(() => noteRef.current), []);
    const plugins = (0, import_react_18_2101.useMemo)(
      () => createPluginStack(
        [
          !source || source !== "list" ? createTagsPlugin({
            canOpen: () => true,
            editor
          }) : void 0,
          !source || source !== "list" ? createAssigneesPlugin({
            canOpen: () => true,
            editor
          }) : void 0,
          createBaseTitlePlugin(editor, DefaultComponent, onFocusNext)
        ].filter(isDefined)
      ),
      [editor, source, DefaultComponent, onFocusNext]
    );
    const handlers2 = useCfdsEditor(
      note,
      "title",
      editor,
      `${user.key}/${sessionId}`
    );
    return {
      editor,
      plugins,
      handlers: handlers2
    };
  }
  var import_react_18_2101, import_slate_0_8719, import_slate_react_0_878, noop2, DEFAULT_OPTS2;
  var init_slate = __esm({
    "web-app/src/core/slate/index.tsx"() {
      init_graph();
      import_react_18_2101 = __require("https://esm.sh/react@18.2.0");
      import_slate_0_8719 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_878 = __require("https://esm.sh/slate-react@0.87.1");
      init_use_cfds_editor();
      init_with_cfds();
      init_bullet_list_element();
      init_card();
      init_with_cards();
      init_header_element();
      init_header2_element();
      init_list_item_element();
      init_numbered_list_element();
      init_mentions();
      init_tags();
      init_plugins();
      init_base3();
      init_assignees2();
      init_vertex2();
      init_comparisons();
      init_link_decoration();
      init_logger();
      noop2 = () => {
      };
      DEFAULT_OPTS2 = {
        onFocusNext: noop2
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/focus-reporter.tsx
  function FocusReporter({ cardManager, source }) {
    const focused = (0, import_slate_react_0_879.useFocused)();
    const logger = useLogger();
    (0, import_react_18_2102.useEffect)(() => {
      logger.log({
        severity: "INFO",
        event: focused ? "Start" : "End",
        flow: "edit",
        vertex: cardManager.key,
        source
      });
    }, [focused, logger, cardManager, source]);
    return null;
  }
  var import_react_18_2102, import_slate_react_0_879;
  var init_focus_reporter = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/focus-reporter.tsx"() {
      import_react_18_2102 = __require("https://esm.sh/react@18.2.0");
      import_slate_react_0_879 = __require("https://esm.sh/slate-react@0.87.1");
      init_logger();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/floating-menu.tsx
  function HeaderButton({
    editor,
    headerType
  }) {
    const styles = useStyles46();
    const { selection } = editor;
    const isActive = selection && ElementUtils.getNodeToggleStatus(
      editor,
      selection,
      (node) => import_slate_0_8720.Element.isElement(node) && node.tagName === headerType
    ) === 2 /* On */;
    const otherTags = (0, import_react_18_2103.useMemo)(
      () => ALLOWED_ELEMENTS.filter((x) => x !== headerType),
      [headerType]
    );
    const onClick = (e) => {
      e.preventDefault();
      ElementUtils.toggleNode(
        editor,
        selection,
        { tagName: headerType },
        (node) => import_slate_0_8720.Element.isElement(node) && (node.tagName === headerType || !otherTags.includes(node.tagName)),
        {
          match: (n) => import_slate_0_8720.Element.isElement(n) && ALLOWED_ELEMENTS.includes(n.tagName)
        }
      );
    };
    const texts = HEADER_MAP[headerType];
    return /* @__PURE__ */ import_react_18_2103.default.createElement(Tooltip, { text: texts.tooltip }, /* @__PURE__ */ import_react_18_2103.default.createElement(
      Button,
      {
        className: cn(styles.menuButton, isActive && styles.active),
        onClick
      },
      texts.button
    ));
  }
  function makeMarkButton(mark, tooltip, IconComponent) {
    return ({ marks }) => {
      const styles = useStyles46();
      const isActive = marks && marks[mark];
      const editor = (0, import_slate_react_0_8710.useSlateStatic)();
      const handler = (0, import_react_18_2103.useCallback)(
        (e) => {
          e.preventDefault();
          import_slate_react_0_8710.ReactEditor.focus(editor);
          setTimeout(() => {
            import_slate_react_0_8710.ReactEditor.focus(editor);
            LeafUtils.toggleMark(editor, editor.selection, mark);
          }, 0);
        },
        [editor]
      );
      return /* @__PURE__ */ import_react_18_2103.default.createElement(Tooltip, { text: tooltip }, /* @__PURE__ */ import_react_18_2103.default.createElement(
        Button,
        {
          className: cn(styles.menuButton, isActive && styles.active),
          onClick: handler
        },
        /* @__PURE__ */ import_react_18_2103.default.createElement(IconComponent, { fill: "currentColor", className: cn(styles.icon) })
      ));
    };
  }
  function TaskButton({
    isVisible,
    rootManager,
    setVisible
  }) {
    const styles = useStyles46();
    const editor = (0, import_slate_react_0_8710.useSlate)();
    const user = useCurrentUser();
    const { selection } = editor;
    const logger = useLogger();
    const selectionState = (0, import_react_18_2103.useMemo)(() => {
      if (!isVisible) {
        return 0 /* Hidden */;
      }
      const entry = ElementUtils.getSingleElement(editor);
      if (!entry) {
        return 0 /* Hidden */;
      }
      const [node] = entry;
      if (CardElement.isCard(node)) {
        return 2 /* Active */;
      }
      if (CardElement.canTransformToCard(node)) {
        return 1 /* Visible */;
      }
      return 0 /* Hidden */;
    }, [isVisible, selection]);
    (0, import_react_18_2103.useEffect)(() => {
      setVisible(selectionState !== 0 /* Hidden */);
    }, [selectionState, setVisible]);
    if (selectionState === 0 /* Hidden */) {
      return null;
    }
    const handler = () => {
      if (selectionState === 2 /* Active */) {
        CardElement.unwrapCard(editor, editor.selection.focus.path);
      } else {
        const [node, path] = ElementUtils.getSingleElement(editor);
        CardElement.replaceAsCard(editor, node, path, rootManager, user);
      }
    };
    return /* @__PURE__ */ import_react_18_2103.default.createElement(Tooltip, { text: "Task" }, /* @__PURE__ */ import_react_18_2103.default.createElement(
      Button,
      {
        className: cn(
          styles.menuButton,
          selectionState === 2 /* Active */ && styles.active
        ),
        onClick: handler
      },
      /* @__PURE__ */ import_react_18_2103.default.createElement(IconTask_default, { fill: "currentColor", className: cn(styles.icon) })
    ));
  }
  function ListButton({
    editor,
    listType,
    setVisible
  }) {
    const styles = useStyles46();
    const list = (0, import_react_18_2103.useMemo)(() => LIST_MAP[listType], [listType]);
    const { selection } = editor;
    const [el, path] = SelectionUtils.extractSingleElement(editor, selection);
    const isParagraph = path && import_slate_0_8720.Path.isChild(path, []) && el && el.tagName === "p";
    const onClick = (e) => {
      e.preventDefault();
      ListUtils.setList(editor, path, listType);
    };
    (0, import_react_18_2103.useEffect)(() => {
      setVisible(isParagraph === true);
    }, [isParagraph, setVisible]);
    if (!isParagraph) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_2103.default.createElement(Tooltip, { text: list.tooltip }, /* @__PURE__ */ import_react_18_2103.default.createElement(Button, { className: cn(styles.menuButton), onClick }, /* @__PURE__ */ import_react_18_2103.default.createElement(list.Icon, { fill: "currentColor", className: cn(styles.icon) })));
  }
  var import_react_18_2103, import_slate_0_8720, import_slate_react_0_8710, useStyles46, HEADER_MAP, BoldButton, ItalicButton, StrikethroughButton, UnderlineButton, LIST_MAP, FloatingMenu;
  var init_floating_menu = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/floating-menu.tsx"() {
      import_react_18_2103 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8720 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_8710 = __require("https://esm.sh/slate-react@0.87.1");
      init_styles();
      init_buttons();
      init_icons();
      init_tooltip();
      init_css_objects();
      init_vertex2();
      init_card();
      init_leaves();
      init_element_utils();
      init_list_utils();
      init_selection_utils();
      init_logger();
      useStyles46 = makeStyles((theme) => ({
        menu: {
          position: "absolute",
          bottom: styleguide.gridbase * 3,
          height: styleguide.gridbase * 5,
          left: "50%",
          transform: `translate(-50%, ${styleguide.gridbase * 3}px)`,
          backgroundColor: theme.background[800],
          color: theme.background[0],
          border: `1px solid ${theme.background[100]}`,
          padding: [0, styleguide.gridbase * 0.5],
          borderRadius: 6,
          opacity: 0,
          ...styleguide.transition.short,
          transitionProperty: "opacity transform",
          alignItems: "center",
          userSelect: "none",
          basedOn: [layout.row]
        },
        visible: {
          opacity: 1,
          transform: "translateX(-50%)"
        },
        menuButton: {
          color: theme.background[0],
          width: styleguide.gridbase * 4,
          height: "100%",
          userSelect: "none"
        },
        icon: {
          userSelect: "none"
        },
        separator: {
          height: `calc(100% - ${styleguide.gridbase * 2}px)`,
          width: 1,
          backgroundColor: theme.background[100]
        },
        active: {
          color: theme.primary[500]
        }
      }));
      HEADER_MAP = {
        h1: {
          button: "H1",
          tooltip: "Heading 1"
        },
        h2: {
          button: "H2",
          tooltip: "Heading 2"
        }
      };
      BoldButton = makeMarkButton("bold", "Bold", IconBold_default);
      ItalicButton = makeMarkButton("italic", "Italic", IconItalic_default);
      StrikethroughButton = makeMarkButton(
        "strikethrough",
        "Strikethrough",
        IconStrikethrough_default
      );
      UnderlineButton = makeMarkButton("underline", "Underline", IconUnderline_default);
      LIST_MAP = {
        ol: {
          Icon: IconNumberList_default,
          tooltip: "Numbered List"
        },
        ul: {
          Icon: IconBulletList_default,
          tooltip: "Bullet List"
        }
      };
      FloatingMenu = import_react_18_2103.default.memo(
        ({ rootManager }) => {
          const styles = useStyles46();
          const editor = (0, import_slate_react_0_8710.useSlate)();
          const [listsVisible, setListsVisible] = (0, import_react_18_2103.useState)([false, false, false]);
          const setVisible = (index, visible) => {
            setListsVisible((current) => {
              const v = current.concat();
              if (v[index] === visible) {
                return current;
              }
              v[index] = visible;
              return v;
            });
          };
          const handleClick = (e) => {
            e.stopPropagation();
            e.preventDefault();
            import_slate_react_0_8710.ReactEditor.focus(editor);
          };
          const marks = import_slate_0_8720.Editor.marks(editor) || {};
          const showSeparator = listsVisible.some((x) => x);
          return /* @__PURE__ */ import_react_18_2103.default.createElement("div", { className: cn(styles.menu, styles.visible), onClick: handleClick }, /* @__PURE__ */ import_react_18_2103.default.createElement(HeaderButton, { editor, headerType: "h1" }), /* @__PURE__ */ import_react_18_2103.default.createElement(HeaderButton, { editor, headerType: "h2" }), /* @__PURE__ */ import_react_18_2103.default.createElement("div", { className: cn(styles.separator) }), /* @__PURE__ */ import_react_18_2103.default.createElement(BoldButton, { marks }), /* @__PURE__ */ import_react_18_2103.default.createElement(ItalicButton, { marks }), /* @__PURE__ */ import_react_18_2103.default.createElement(UnderlineButton, { marks }), /* @__PURE__ */ import_react_18_2103.default.createElement(StrikethroughButton, { marks }), showSeparator && /* @__PURE__ */ import_react_18_2103.default.createElement("div", { className: cn(styles.separator) }), /* @__PURE__ */ import_react_18_2103.default.createElement(
            ListButton,
            {
              editor,
              listType: "ol",
              setVisible: (x) => setVisible(0, x)
            }
          ), /* @__PURE__ */ import_react_18_2103.default.createElement(
            ListButton,
            {
              editor,
              listType: "ul",
              setVisible: (x) => setVisible(1, x)
            }
          ), /* @__PURE__ */ import_react_18_2103.default.createElement(
            TaskButton,
            {
              isVisible: true,
              rootManager,
              setVisible: (x) => setVisible(2, x)
            }
          ));
        }
      );
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/body-editor.strings.json
  var body_editor_strings_default;
  var init_body_editor_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/body-editor.strings.json"() {
      body_editor_strings_default = {
        en: {
          createTaskCta: "Type '-' and hit 'Space' to create a task",
          CreateTaskTitle: "Add a task",
          CreateTaskText: "Add an action item to your note by typing '-' and hitting 'Space'"
        }
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/task-cta-view.tsx
  function shouldShowPlaceholder(editor) {
    if (editor.children.length === 1 && !import_slate_0_8721.Node.string(editor)) {
      return false;
    }
    const [node] = ElementUtils.findNode(editor, CardElement.isCard);
    return !node;
  }
  function TaskCtaView({ onClick = () => {
  } }) {
    const styles = useStyles47();
    const editor = (0, import_slate_react_0_8711.useSlate)();
    const strings = useStrings3();
    if (!shouldShowPlaceholder(editor)) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_2104.default.createElement("div", { className: cn(styles.placeholder), onClick }, /* @__PURE__ */ import_react_18_2104.default.createElement(Text2, null, strings.createTaskCta));
  }
  var import_react_18_2104, import_slate_0_8721, import_slate_react_0_8711, useStyles47, useStrings3;
  var init_task_cta_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/task-cta-view.tsx"() {
      import_react_18_2104 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8721 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_8711 = __require("https://esm.sh/slate-react@0.87.1");
      init_css_objects();
      init_texts();
      init_styleguide();
      init_element_utils();
      init_card();
      init_localization();
      init_body_editor_strings();
      useStyles47 = makeStyles((theme) => ({
        placeholder: {
          marginTop: styleguide.gridbase,
          height: styleguide.gridbase * 3,
          lineHeight: `${styleguide.gridbase * 3}px `,
          color: "rgba(17, 8, 43, 0.3)",
          userSelect: "none"
        }
      }));
      useStrings3 = createUseStrings(body_editor_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/index.tsx
  function usePlaceholder(cardManager) {
    const { title } = usePartialVertex(cardManager, ["title"]);
    const text = import_slate_0_8722.Node.string(title.root);
    if (!text) {
      return "";
    }
    return "Start writing here";
  }
  var import_react_18_2105, import_slate_0_8722, import_slate_react_0_8712, useStyles48, body_editor_default;
  var init_body_editor = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/body-editor/index.tsx"() {
      import_react_18_2105 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_0_8722 = __require("https://esm.sh/slate@0.87.0");
      import_slate_react_0_8712 = __require("https://esm.sh/slate-react@0.87.1");
      init_vertex2();
      init_slate();
      init_card();
      init_selection_utils();
      init_styleguide();
      init_css_objects();
      init_focus_reporter();
      init_floating_menu();
      init_task_cta_view();
      init_logger();
      useStyles48 = makeStyles((theme) => ({
        editor: {
          margin: "0 auto",
          boxSizing: "border-box",
          "::selection": {
            backgroundColor: theme.primary[500]
          },
          "& *": {
            "::selection": {
              backgroundColor: theme.primary[400]
            }
          },
          color: theme.background.text
        },
        rtl: {
          direction: "rtl",
          placeholder: {
            right: styleguide.gridbase * 8,
            left: "unset"
          }
        },
        placeholder: {
          position: "absolute",
          top: 0,
          left: styleguide.gridbase * 8,
          color: "rgba(17, 8, 43, 0.3)",
          height: styleguide.gridbase * 3,
          fontSize: styleguide.gridbase * 2,
          lineHeight: `${styleguide.gridbase * 3}px`,
          pointerEvents: "none"
        }
      }));
      body_editor_default = import_react_18_2105.default.forwardRef(function BodyView({ cardManager, className, isRtl }, ref) {
        const styles = useStyles48();
        const placeholder = usePlaceholder(cardManager);
        const { editor, plugins, handlers: handlers2 } = useBodyEditor(cardManager);
        const logger = useLogger();
        (0, import_react_18_2105.useImperativeHandle)(
          ref,
          () => ({
            focus() {
              SelectionUtils.focusAtEnd(editor);
            }
          }),
          [editor]
        );
        const onCtaClick = () => {
          logger.log({
            severity: "INFO",
            event: "Click",
            source: "editor:task-cta",
            vertex: cardManager.key
          });
          SelectionUtils.focusAtEnd(editor);
        };
        const onClick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (!editor.selection) {
            SelectionUtils.focusAtEnd(editor);
          }
        };
        return /* @__PURE__ */ import_react_18_2105.default.createElement(
          "div",
          {
            className: cn(className, styles.editor, isRtl && styles.rtl),
            onClick
          },
          /* @__PURE__ */ import_react_18_2105.default.createElement(import_react_18_2105.default.StrictMode, null, /* @__PURE__ */ import_react_18_2105.default.createElement(EditableCardContext, { cardManager }, /* @__PURE__ */ import_react_18_2105.default.createElement(import_slate_react_0_8712.Slate, { editor, ...handlers2 }, /* @__PURE__ */ import_react_18_2105.default.createElement(FocusReporter, { cardManager, source: "editor:body" }), /* @__PURE__ */ import_react_18_2105.default.createElement(
            import_slate_react_0_8712.Editable,
            {
              ...plugins,
              tabIndex: 1,
              placeholder,
              onClick: (e) => e.stopPropagation()
            }
          ), /* @__PURE__ */ import_react_18_2105.default.createElement(FloatingMenu, { rootManager: cardManager }), /* @__PURE__ */ import_react_18_2105.default.createElement(TaskCtaView, { onClick: onCtaClick }))))
        );
      });
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/legend-view.tsx
  function mapKey(key) {
    if (key !== "Meta") {
      return key;
    }
    if (isMacOS()) {
      return "\u2318";
    }
    return "Ctrl";
  }
  function Shortcut3({ children, keys, macOSKeys }) {
    const styles = useStyles49();
    let actualKeys = keys;
    if (macOSKeys && isMacOS()) {
      actualKeys = macOSKeys;
    }
    return /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.shortcut) }, children, /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(layout.flexSpacer) }), actualKeys.map((x, i) => {
      const hasPlus = i < actualKeys.length - 1 && actualKeys[i + 1] !== x;
      return /* @__PURE__ */ import_react_18_2106.default.createElement(import_react_18_2106.default.Fragment, { key: `${x}${i}` }, /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.key) }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, mapKey(x))), hasPlus && /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.plus) }, "+"));
    }));
  }
  function LegendTooltip({ anchor, open, onClose }) {
    const styles = useStyles49();
    return /* @__PURE__ */ import_react_18_2106.default.createElement(
      popper_default,
      {
        position: "top",
        direction: "out",
        align: "end",
        anchor,
        open
      },
      /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.tooltip) }, /* @__PURE__ */ import_react_18_2106.default.createElement(Bold2, null, "Want to work fast?"), /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Click here to open the keyboard shortcuts cheat-sheet in order to make the most out of your work."), /* @__PURE__ */ import_react_18_2106.default.createElement(Button, { className: cn(styles.tooltipClose), onClick: onClose }, /* @__PURE__ */ import_react_18_2106.default.createElement(IconClose_default, { className: cn(styles.tooltipIcon) })))
    );
  }
  function LegendView({ legendState, changeState, onClose }) {
    const styles = useStyles49();
    (0, import_react_18_2106.useEffect)(() => {
      if (legendState === 1 /* Opening */) {
        changeState(2 /* Open */);
      } else if (legendState === 3 /* Closing */) {
        setTimeout(() => {
          changeState(0 /* Close */);
        }, 500);
      }
    }, [legendState, changeState]);
    if (legendState === 0 /* Close */) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_2106.default.createElement(import_react_18_2106.default.Fragment, null, legendState === 2 /* Open */ && /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.legendBackdrop), onClick: onClose }), /* @__PURE__ */ import_react_18_2106.default.createElement(
      "div",
      {
        className: cn(
          styles.legend,
          legendState === 2 /* Open */ && styles.open
        )
      },
      /* @__PURE__ */ import_react_18_2106.default.createElement(Button, { className: cn(styles.closeButton), onClick: onClose }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.closeText) }, "Close"), /* @__PURE__ */ import_react_18_2106.default.createElement(IconClose_default, { fill: "#a09caa" })),
      /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.header) }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Keyboard Shortcuts")),
      /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.section) }, /* @__PURE__ */ import_react_18_2106.default.createElement(H32, null, "Insert/Actions"), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["-", "Space"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Create a task")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["#hashtag"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Add a tag")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["@Name"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Assign a task"))),
      /* @__PURE__ */ import_react_18_2106.default.createElement("div", { className: cn(styles.section) }, /* @__PURE__ */ import_react_18_2106.default.createElement(H32, null, "Text Formatting"), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["#", "Space"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, /* @__PURE__ */ import_react_18_2106.default.createElement("span", { className: cn(styles.h1) }, "H1"), " headline")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["#", "#", "Space"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, /* @__PURE__ */ import_react_18_2106.default.createElement("span", { className: cn(styles.h2) }, "H2"), " headline")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["Meta", "b"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.bold) }, "Bold")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["Meta", "i"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.italic) }, "italic")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["Meta", "u"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.underline) }, "Underline")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["Meta", "s"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, { className: cn(styles.strikethrough) }, "Strikethrough")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["*", "Space"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Bullet List")), /* @__PURE__ */ import_react_18_2106.default.createElement(Shortcut3, { keys: ["1.", "Space"] }, /* @__PURE__ */ import_react_18_2106.default.createElement(Text2, null, "Numbered List")))
    ));
  }
  function shouldBeOpen() {
    const didClick = window.localStorage.getItem("did_dismiss_legend");
    return !didClick;
  }
  function LegendButton() {
    const styles = useStyles49();
    const anchor = (0, import_react_18_2106.useRef)(null);
    const [showTooltip, setShowTooltip] = (0, import_react_18_2106.useState)(false);
    const [legendState, setLegendState] = (0, import_react_18_2106.useState)(0 /* Close */);
    const logger = useLogger();
    (0, import_react_18_2106.useEffect)(() => {
      const t = setTimeout(() => {
        if (shouldBeOpen()) {
          setShowTooltip(true);
        }
      }, 2e3);
      return () => {
        clearTimeout(t);
      };
    }, []);
    const click = () => {
      logger.log({
        severity: "INFO",
        event: "Navigation",
        type: "open",
        source: "editor:legend"
      });
      setShowTooltip(false);
      setLegendState(1 /* Opening */);
    };
    const onClose = () => {
      logger.log({
        severity: "INFO",
        event: "Navigation",
        type: "close",
        source: "editor:legend"
      });
      localStorage.setItem("did_dismiss_legend", Date.now() + "");
      setLegendState(3 /* Closing */);
    };
    const hideTooltip = () => {
      logger.log({
        severity: "INFO",
        event: "Navigation",
        type: "close",
        source: "editor:tooltip"
      });
      window.localStorage.setItem("did_dismiss_legend", Date.now() + "");
      setShowTooltip(false);
    };
    const changeState = (newState) => {
      setLegendState(newState);
    };
    return /* @__PURE__ */ import_react_18_2106.default.createElement("div", null, /* @__PURE__ */ import_react_18_2106.default.createElement(
      IconButton,
      {
        ref: anchor,
        className: cn(styles.hintButton),
        onClick: click
      },
      /* @__PURE__ */ import_react_18_2106.default.createElement(IconKeyboard_default, null)
    ), /* @__PURE__ */ import_react_18_2106.default.createElement(
      LegendTooltip,
      {
        anchor: anchor.current,
        open: showTooltip,
        onClose: hideTooltip
      }
    ), /* @__PURE__ */ import_react_18_2106.default.createElement(
      LegendView,
      {
        legendState,
        changeState,
        onClose
      }
    ));
  }
  var import_react_18_2106, blinkAnim, useStyles49;
  var init_legend_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/legend-view.tsx"() {
      import_react_18_2106 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_icons();
      init_buttons();
      init_css_objects();
      init_styles();
      init_texts();
      init_popper();
      init_utils4();
      init_logger();
      blinkAnim = keyframes((theme) => ({
        from: {
          backgroundColor: "transparent"
        },
        to: {
          backgroundColor: theme.primary[400]
        }
      }));
      useStyles49 = makeStyles((theme) => ({
        hintButton: {
          position: "absolute",
          bottom: styleguide.gridbase * 2,
          right: styleguide.gridbase * 2
        },
        blink: {
          animation: `2s ${blinkAnim} infinite linear alternate`
        },
        header: {
          borderBottom: "1px solid rgba(156, 178, 205, 0.6)",
          height: styleguide.gridbase * 5,
          marginTop: styleguide.gridbase * 4,
          alignItems: "center",
          basedOn: [layout.row]
        },
        section: {
          marginTop: styleguide.gridbase * 5
        },
        shortcut: {
          marginTop: styleguide.gridbase * 2.5,
          basedOn: [layout.row, layout.centerCenter]
        },
        key: {
          marginRight: styleguide.gridbase,
          padding: [0, styleguide.gridbase],
          borderRadius: 5,
          boxSizing: "border-box",
          height: styleguide.gridbase * 3,
          backgroundColor: "#e6e8eb",
          basedOn: [layout.column, layout.centerCenter],
          minWidth: styleguide.gridbase * 3,
          ":last-child": {
            marginRight: 0
          }
        },
        plus: {
          marginRight: styleguide.gridbase
        },
        legendBackdrop: {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        },
        legend: {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          backgroundColor: theme.background[0],
          width: "100%",
          maxWidth: styleguide.gridbase * 45,
          boxSizing: "border-box",
          padding: styleguide.gridbase * 4,
          overflowY: "auto",
          ...styleguide.transition.standard,
          transform: "translateX(100%)",
          boxShadow: theme.shadows.z2
        },
        h1: {
          fontWeight: "900"
        },
        h2: {
          fontWeight: "500"
        },
        closeButton: {
          position: "absolute",
          top: styleguide.gridbase * 2,
          right: styleguide.gridbase * 2,
          color: "rgba(17, 8, 43, 0.6)",
          basedOn: [layout.row, layout.centerCenter]
        },
        closeText: {
          lineHeight: `${styleguide.gridbase * 2}px`,
          marginRight: styleguide.gridbase
        },
        open: {
          transform: "translateX(0)"
        },
        bold: {
          fontWeight: "bold"
        },
        italic: {
          fontStyle: "italic"
        },
        underline: {
          textDecoration: "underline"
        },
        strikethrough: {
          textDecoration: "line-through"
        },
        tooltip: {
          position: "relative",
          backgroundColor: theme.background[0],
          boxSizing: "border-box",
          width: styleguide.gridbase * 30,
          padding: styleguide.gridbase * 2,
          borderRadius: 6,
          boxShadow: "0 8px 8px 0 rgba(0, 0, 0, 0.08), 0 0 8px 0 rgba(0, 0, 0, 0.12)",
          basedOn: [layout.column]
        },
        tooltipClose: {
          position: "absolute",
          top: styleguide.gridbase * 2,
          right: styleguide.gridbase * 2,
          width: styleguide.gridbase * 2,
          height: styleguide.gridbase * 2
        },
        tooltipIcon: {
          width: styleguide.gridbase * 2,
          height: styleguide.gridbase * 2
        }
      }));
    }
  });

  // styles/components/new-icons/icon-content.tsx
  function IconContent({ className, size = 16 /* Small */ }) {
    return /* @__PURE__ */ import_react_18_2107.default.createElement(
      "svg",
      {
        width: size,
        height: size,
        viewBox: "0 0 17 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2107.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M3.99832 6.31999H13.9983",
          stroke: "#3F3F3F",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2107.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M3.99832 2.98673H13.9983",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2107.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M3.99832 9.65348H13.9983",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2107.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M3.99832 12.9867H13.9983",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_2107;
  var init_icon_content = __esm({
    "styles/components/new-icons/icon-content.tsx"() {
      import_react_18_2107 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/card-item/card-tag-view.tsx
  function TagPill({ tag, setTag, onDelete, isExpanded }) {
    const styles = useStyles50();
    const { name } = usePartialVertex(tag, ["name"]);
    const renderSelected = (0, import_react_18_2108.useCallback)(
      () => /* @__PURE__ */ import_react_18_2108.default.createElement(
        Pill,
        {
          className: cn(styles.tag),
          extended: isExpanded,
          pillStyle: isExpanded ? "border" /* Border */ : "none" /* None */
        },
        /* @__PURE__ */ import_react_18_2108.default.createElement(PillContent, null, /* @__PURE__ */ import_react_18_2108.default.createElement(Text2, null, "#", name)),
        /* @__PURE__ */ import_react_18_2108.default.createElement(PillAction, null, /* @__PURE__ */ import_react_18_2108.default.createElement(IconDropDownArrow_default, null))
      ),
      [name, isExpanded, styles]
    );
    return /* @__PURE__ */ import_react_18_2108.default.createElement(
      TagView,
      {
        key: tag.key,
        tag,
        onDelete,
        renderSelected,
        onSelected: (tag2) => setTag(tag2.manager)
      }
    );
  }
  function CardTags({
    card,
    size,
    isExpanded,
    source
  }) {
    const { tags, workspace } = usePartialVertex(card, ["tags", "workspace"]);
    const styles = useStyles50();
    const logger = useLogger();
    const cardTags = Array.from(tags.values()).filter(
      (tag) => !tag.isNull && !tag.isDeleted && (!tag.parentTag || !tag.parentTag.isDeleted)
    );
    const onDelete = (0, import_react_18_2108.useCallback)(
      (tagManager) => {
        const tag = tagManager.getVertexProxy();
        const proxy = card.getVertexProxy();
        const newTags = proxy.tags;
        const tagToDelete = tag.parentTag || tag;
        newTags.delete(tagToDelete);
        proxy.tags = newTags;
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          type: "tag",
          removed: tag.key,
          vertex: card.key,
          source
        });
      },
      [card, logger]
    );
    const onTag = (0, import_react_18_2108.useCallback)(
      (tagManager) => {
        const proxy = card.getVertexProxy();
        const tag = tagManager.getVertexProxy();
        const newTags = proxy.tags;
        const tagKey = tag.parentTag || tag;
        const currentTag = newTags.get(tagKey);
        newTags.set(tagKey, tag);
        proxy.tags = newTags;
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          type: "tag",
          vertex: card.key,
          removed: currentTag?.key,
          added: tag.key,
          source
        });
      },
      [card, logger]
    );
    return /* @__PURE__ */ import_react_18_2108.default.createElement(
      "div",
      {
        className: cn(
          styles.tagsView,
          size === "small" /* Small */ && styles.tagsWrap
        )
      },
      cardTags.sort(coreValueCompare).map((tag) => /* @__PURE__ */ import_react_18_2108.default.createElement(
        TagPill,
        {
          key: tag.key,
          tag: tag.manager,
          onDelete: () => onDelete(tag.manager),
          setTag: onTag,
          isExpanded
        }
      )),
      /* @__PURE__ */ import_react_18_2108.default.createElement(
        TagButton,
        {
          onTagged: (t) => onTag(t.manager),
          noteId: card,
          className: cn(!isExpanded && styles.hide)
        }
      )
    );
  }
  var import_react_18_2108, useStyles50;
  var init_card_tag_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/card-item/card-tag-view.tsx"() {
      import_react_18_2108 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_vertex2();
      init_pill();
      init_tag_button();
      init_tag_view();
      init_styles();
      init_icons();
      init_texts();
      init_css_objects();
      init_card_item();
      init_logger();
      init_comparable();
      useStyles50 = makeStyles((theme) => ({
        tagsView: {
          // height: styleguide.gridbase * 3,
          alignItems: "center",
          basedOn: [layout.row]
        },
        tagsWrap: {
          flexWrap: "wrap",
          alignItems: "flex-start",
          marginBottom: styleguide.gridbase,
          tag: {
            marginBottom: styleguide.gridbase
          }
        },
        tag: {
          marginRight: styleguide.gridbase * 0.5
        },
        hide: {
          opacity: 0
        }
      }));
    }
  });

  // web-app/src/shared/utils/move.ts
  function stripAssigneesNotInWorkspace(card) {
    const wsUsers = card.workspace.users;
    const newAssignees = new Set(card.assignees);
    for (const u of card.assignees) {
      if (!wsUsers.has(u)) {
        newAssignees.delete(u);
      }
    }
    card.assignees = newAssignees;
    for (const child of card.childCards) {
      stripAssigneesNotInWorkspace(child);
    }
  }
  function moveCard(cardManager, destinationMng, graph, logger, source) {
    const result = duplicateCard(graph, cardManager.key, {
      suffix: ""
    });
    if (result !== void 0) {
      result.workspace = destinationMng.getVertexProxy();
      stripAssigneesNotInWorkspace(result);
      cardManager.getVertexProxy().isDeleted = 1;
      logger.log({
        severity: "INFO",
        event: "VertexMoved",
        vertex: result.key,
        origin: cardManager.key,
        uiSource: source
      });
    } else {
      logger.log({
        severity: "INFO",
        error: "DuplicateFailed",
        vertex: cardManager.key,
        uiSource: source
      });
    }
    return result;
  }
  var init_move = __esm({
    "web-app/src/shared/utils/move.ts"() {
      init_duplicate();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/card-item/workspace-indicator.tsx
  function WorkspaceIndicatorButton({
    workspace,
    isExpanded,
    className,
    readOnly
  }) {
    const styles = useStyles51();
    const { name } = usePartialVertex(workspace, ["name"]);
    const ref = (0, import_react_18_2109.useRef)(null);
    const style = useAnimateWidth(ref, isExpanded);
    const theme = useTheme();
    return /* @__PURE__ */ import_react_18_2109.default.createElement(
      "div",
      {
        className: cn(styles.workspaceItem, styles.indicatorButton, className),
        ref,
        style
      },
      /* @__PURE__ */ import_react_18_2109.default.createElement(
        WorkspaceIcon,
        {
          workspaceManager: workspace,
          size: styleguide.gridbase * 2.75
        }
      ),
      /* @__PURE__ */ import_react_18_2109.default.createElement(Text2, { className: cn(styles.wsName) }, name),
      readOnly !== true && /* @__PURE__ */ import_react_18_2109.default.createElement("div", { className: cn(styles.wsArrow, !isExpanded && styles.hide) }, /* @__PURE__ */ import_react_18_2109.default.createElement(IconDropDownArrow_default, { fill: theme.background.placeholderText })),
      /* @__PURE__ */ import_react_18_2109.default.createElement("div", { className: cn(styles.wsSeparator) })
    );
  }
  function CardWorkspaceIndicator({
    card,
    isExpanded,
    source,
    className
  }) {
    const { workspace } = usePartialVertex(card, ["workspace"]);
    const workspaceManager = workspace?.manager;
    const graph = useGraphManager();
    const toastController = useToastController();
    const logger = useLogger();
    const navigate = (0, import_react_router_6_75.useNavigate)();
    if (!workspaceManager) {
      return null;
    }
    const onMove = (ws) => {
      const newCard = moveCard(card, ws, graph, logger, source);
      if (!newCard) {
        toastController.displayToast({
          text: `Move failed. Try again later`,
          duration: 1500
        });
        return;
      }
      toastController.displayToast({
        text: `Card moved to ${ws.getVertexProxy().name}`,
        duration: 1500
      });
      if (source === "title") {
        navigate(`/${newCard.workspace.key}/${newCard.key}`);
      }
    };
    return /* @__PURE__ */ import_react_18_2109.default.createElement(
      WorkspaceIndicator,
      {
        workspace: workspaceManager,
        setWorkspace: onMove,
        className,
        isExpanded,
        readOnly: false
      }
    );
  }
  function WorkspaceIndicator({
    workspace,
    setWorkspace,
    isExpanded,
    className,
    readOnly,
    menuClassName,
    ButtonComponent = WorkspaceIndicatorButton,
    validateMove = true
  }) {
    const renderButton = (0, import_react_18_2109.useCallback)(
      () => /* @__PURE__ */ import_react_18_2109.default.createElement(
        ButtonComponent,
        {
          workspace,
          className,
          isExpanded,
          readOnly
        }
      ),
      [workspace, className, isExpanded, readOnly, ButtonComponent]
    );
    const [changeTo, setChangeTo] = (0, import_react_18_2109.useState)(
      null
    );
    const onWsChanged = (ws) => {
      if (validateMove) {
        setChangeTo(ws);
      } else {
        setWorkspace(ws);
      }
    };
    const onMove = () => {
      setWorkspace(changeTo);
      setChangeTo(null);
    };
    if (readOnly) {
      return renderButton();
    }
    return /* @__PURE__ */ import_react_18_2109.default.createElement(import_react_18_2109.default.Fragment, null, /* @__PURE__ */ import_react_18_2109.default.createElement(
      Menu,
      {
        className: menuClassName,
        renderButton,
        align: "start",
        position: "top"
      },
      /* @__PURE__ */ import_react_18_2109.default.createElement(SelectWorkspaceMenu, { value: workspace, onChange: onWsChanged })
    ), /* @__PURE__ */ import_react_18_2109.default.createElement(
      MoveWorkspaceDialog,
      {
        isOpen: !!changeTo,
        close: () => setChangeTo(null),
        onMove
      }
    ));
  }
  function sortWorkspaces(ws1, ws2, pinnedWorkspaces, hiddenWorkspaces) {
    if (pinnedWorkspaces.has(ws1.key) && !pinnedWorkspaces.has(ws2.key)) {
      return -1;
    }
    if (!pinnedWorkspaces.has(ws1.key) && pinnedWorkspaces.has(ws2.key)) {
      return 1;
    }
    if (hiddenWorkspaces.has(ws1.key) && !hiddenWorkspaces.has(ws2.key)) {
      return 1;
    }
    if (!hiddenWorkspaces.has(ws1.key) && hiddenWorkspaces.has(ws2.key)) {
      return -1;
    }
    return coreValueCompare(ws1, ws2);
  }
  function SelectWorkspaceMenu({
    value,
    onChange
  }) {
    const styles = useStyles51();
    const graph = useGraphManager();
    const user = useCurrentUser();
    const { hiddenWorkspaces, pinnedWorkspaces } = usePartialVertex(
      user.settings,
      ["hiddenWorkspaces", "pinnedWorkspaces"]
    );
    const workspacesQuery = useSharedQuery("workspaces");
    const workspaces = useVertices(workspacesQuery.results);
    const sortedWorkspaces = Array.from(workspaces).filter((x) => !!x.name).sort(
      (ws1, ws2) => sortWorkspaces(ws1, ws2, pinnedWorkspaces, hiddenWorkspaces)
    );
    const onSelect = (wsMng) => {
      if (value && wsMng.key === value.key) {
        return;
      }
      onChange(wsMng);
    };
    return /* @__PURE__ */ import_react_18_2109.default.createElement(Scroller2, null, (ref) => /* @__PURE__ */ import_react_18_2109.default.createElement("div", { ref, className: cn(styles.move) }, sortedWorkspaces.map((ws) => /* @__PURE__ */ import_react_18_2109.default.createElement(
      MenuItem,
      {
        key: ws.key,
        className: cn(
          styles.workspaceItem,
          styles.moveWsItem,
          value?.key === ws.key && styles.selectedWs
        ),
        onClick: () => onSelect(ws.manager)
      },
      /* @__PURE__ */ import_react_18_2109.default.createElement(
        WorkspaceIcon,
        {
          workspaceManager: ws.manager,
          size: styleguide.gridbase * 2.75
        }
      ),
      /* @__PURE__ */ import_react_18_2109.default.createElement(Text2, { className: cn(styles.wsName) }, ws.name)
    ))));
  }
  function MoveWorkspaceDialog({
    onMove,
    close,
    isOpen
  }) {
    const styles = useStyles51();
    return /* @__PURE__ */ import_react_18_2109.default.createElement(Dialog, { open: isOpen, onClose: close, onClickOutside: close }, /* @__PURE__ */ import_react_18_2109.default.createElement(DialogContent, null, /* @__PURE__ */ import_react_18_2109.default.createElement(H22, { className: cn(styles.dialogTitle) }, "Are you sure?"), /* @__PURE__ */ import_react_18_2109.default.createElement(Text2, null, "Moving this card will move all of its children and will remove tags that don't exist in the destination workspace")), /* @__PURE__ */ import_react_18_2109.default.createElement(DialogActions, null, /* @__PURE__ */ import_react_18_2109.default.createElement(Button, { onClick: close }, "Cancel"), /* @__PURE__ */ import_react_18_2109.default.createElement(RaisedButton, { onClick: onMove }, "Move")));
  }
  var import_react_18_2109, import_react_router_6_75, showAnim3, useStyles51;
  var init_workspace_indicator = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/card-item/workspace-indicator.tsx"() {
      import_react_18_2109 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_75 = __require("https://esm.sh/react-router@6.7.0");
      init_styles();
      init_buttons();
      init_dialog();
      init_icons();
      init_menu();
      init_texts();
      init_toast();
      init_css_objects();
      init_theme();
      init_graph();
      init_vertex2();
      init_animate();
      init_scrolling2();
      init_move();
      init_workspace_icon();
      init_logger();
      init_comparable();
      init_query2();
      showAnim3 = keyframes({
        "0%": {
          opacity: 0
        },
        "99%": {
          opacity: 0
        },
        "100%": {
          opacity: 1
        }
      });
      useStyles51 = makeStyles((theme) => ({
        workspaceItem: {
          alignItems: "center",
          basedOn: [layout.row]
        },
        indicatorButton: {
          ...styleguide.transition.short,
          transitionProperty: "all"
        },
        wsName: {
          marginLeft: styleguide.gridbase,
          marginRight: styleguide.gridbase * 0.5,
          whiteSpace: "nowrap",
          color: theme.background.placeholderText
        },
        wsSeparator: {
          alignSelf: "center",
          height: styleguide.gridbase * 2,
          width: 1,
          backgroundColor: theme.background.placeholderText,
          opacity: 0.7,
          marginRight: styleguide.gridbase,
          marginLeft: styleguide.gridbase * 0.5
        },
        wsArrow: {
          position: "relative",
          top: 1,
          animation: `${showAnim3} ${styleguide.transition.duration.short}ms backwards linear`,
          cursor: "pointer"
        },
        hide: {
          display: "none"
        },
        dialogTitle: {
          marginBottom: styleguide.gridbase * 2
        },
        move: {
          overflowY: "auto",
          maxHeight: styleguide.gridbase * 32
        },
        moveWsItem: {
          backgroundColor: theme.background[0],
          transition: `opacity linear ${styleguide.transition.duration.short}ms`,
          ":hover": {
            backgroundColor: theme.background[300]
          }
        },
        selectedWs: {
          backgroundColor: theme.background[400]
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/card-item/index.tsx
  function getStrikethroughSVG(fill) {
    return encodeURIComponent(
      `
  <svg xmlns='http://www.w3.org/2000/svg' 
    width='${TITLE_LINE_HEIGHT}' 
    height='${TITLE_LINE_HEIGHT}'
    viewBox='0 0 ${TITLE_LINE_HEIGHT} ${TITLE_LINE_HEIGHT}'>
    <line x1='0' y1='${TITLE_LINE_HEIGHT / 2}' x2='${TITLE_LINE_HEIGHT}' y2='${TITLE_LINE_HEIGHT / 2}' stroke='${fill}'/>
  </svg>
  `.replace(/\n/g, "")
    );
  }
  function Title({
    card,
    source
  }) {
    const { editor, plugins, handlers: handlers2 } = useTitleEditor(card, TitleNode, source);
    return /* @__PURE__ */ import_react_18_2110.default.createElement("div", null, /* @__PURE__ */ import_react_18_2110.default.createElement(import_slate_react_0_8713.Slate, { editor, ...handlers2 }, /* @__PURE__ */ import_react_18_2110.default.createElement(import_slate_react_0_8713.Editable, { ...plugins, readOnly: true })));
  }
  function CardHeader({
    card,
    className,
    isExpanded,
    source,
    hideMenu,
    size
  }) {
    const styles = useStyles52();
    return /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className }, /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.header) }, /* @__PURE__ */ import_react_18_2110.default.createElement(
      CardWorkspaceIndicator,
      {
        card,
        source,
        isExpanded
      }
    ), size === "regular" /* Regular */ && /* @__PURE__ */ import_react_18_2110.default.createElement(
      CardTags,
      {
        size,
        card,
        isExpanded,
        source
      }
    ), /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_2110.default.createElement(
      AssigneesView,
      {
        cardManager: card,
        cardType: "small",
        source,
        isExpanded
      }
    ), !hideMenu && /* @__PURE__ */ import_react_18_2110.default.createElement(
      CardMenuView,
      {
        cardManager: card,
        allowsEdit: true,
        source,
        className: cn(styles.menu, isExpanded && styles.menuVisible)
      }
    )), size === "small" /* Small */ && /* @__PURE__ */ import_react_18_2110.default.createElement(
      CardTags,
      {
        size,
        card,
        isExpanded,
        source
      }
    ));
  }
  function StatusCheckbox({
    card,
    source
  }) {
    const styles = useStyles52();
    const theme = useTheme();
    const logger = useLogger();
    const pCard = usePartialVertex(card, ["tags", "workspace", "type", "status"]);
    if (pCard.type !== "task" /* Task */ || pCard.status !== "Done") {
      return /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.checkboxPlaceholder, styles.status) });
    }
    const isDone = pCard.status === "Done";
    const onChange = (0, import_react_18_2110.useCallback)(() => {
      pCard.status = pCard.status === "Done" ? "ToDo" : "Done";
      logger.log({
        severity: "INFO",
        event: "MetadataChanged",
        type: "status",
        vertex: pCard.key,
        status: pCard.status,
        source
      });
    }, [pCard, logger, source, isDone]);
    return /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.status) }, /* @__PURE__ */ import_react_18_2110.default.createElement(
      CheckBox_default,
      {
        color: theme.background.text,
        checked: isDone,
        onChange,
        name: "status"
      }
    ));
  }
  function ChildCard({ card, size, index, isVisible }) {
    const styles = useStyles52();
    return /* @__PURE__ */ import_react_18_2110.default.createElement(CardItem, { size, card, className: cn(styles.child) });
  }
  var import_react_18_2110, import_slate_react_0_8713, TITLE_LINE_HEIGHT, useStyles52, TitleNode, CardItem;
  var init_card_item = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/card-item/index.tsx"() {
      import_react_18_2110 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_react_0_8713 = __require("https://esm.sh/slate-react@0.87.1");
      init_note();
      init_vertex2();
      init_react_utils();
      init_animate();
      init_slate();
      init_item_menu();
      init_assignees_view();
      init_styles();
      init_icons();
      init_inputs();
      init_texts();
      init_css_objects();
      init_theme();
      init_card_footer();
      init_card_tag_view();
      init_workspace_indicator();
      init_logger();
      TITLE_LINE_HEIGHT = styleguide.gridbase * 3;
      useStyles52 = makeStyles((theme) => ({
        cardContainer: {
          position: "relative"
        },
        expander: {
          position: "absolute",
          cursor: "pointer",
          top: styleguide.gridbase,
          left: 0,
          transform: `translateX(calc(-100% - ${styleguide.gridbase * 0.5}px))`
        },
        expanderIcon: {
          ...styleguide.transition.short,
          transitionProperty: "transform",
          transform: "rotate(0)"
        },
        expanderIconExpanded: {
          transform: "rotate(180deg)"
        },
        card: {
          backgroundColor: theme.background[0],
          cursor: "pointer",
          padding: styleguide.gridbase,
          boxSizing: "border-box",
          boxShadow: theme.shadows.z2,
          borderRadius: 6,
          basedOn: [layout.column]
        },
        ["regular" /* Regular */]: {
          preview: {
            paddingRight: styleguide.gridbase * 12
          }
        },
        ["small" /* Small */]: {},
        taskCard: {
          preview: {
            // marginLeft: styleguide.gridbase * 4.5,
          }
        },
        header: {
          position: "relative",
          alignItems: "center",
          flexWrap: "wrap",
          marginBottom: styleguide.gridbase,
          basedOn: [layout.row]
        },
        menu: {
          opacity: 0,
          transition: `${styleguide.transition.duration.short}ms linear opacity`
        },
        menuVisible: {
          opacity: 1
        },
        titleRow: {
          alignItems: "flex-start",
          basedOn: [layout.row]
        },
        titleTextContainer: {
          // padding: [0, styleguide.gridbase * 0],
          position: "relative"
        },
        strikethrough: {
          width: "100%",
          position: "absolute",
          left: "0",
          top: "0",
          height: "100%",
          // height: 1,
          // top: '50%',
          // backgroundColor: theme.background.text,
          ...styleguide.transition.short,
          transitionProperty: "transform",
          transform: "scale(0)",
          transformOrigin: "left center",
          backgroundImage: `url("data:image/svg+xml;utf8,${getStrikethroughSVG(
            theme.background.text
          )}")`
        },
        strikethroughDone: {
          transform: "scale(1)"
        },
        checkboxPlaceholder: {
          width: styleguide.gridbase * 3,
          height: styleguide.gridbase * 3
        },
        status: {
          marginRight: styleguide.gridbase,
          height: styleguide.gridbase * 3,
          width: styleguide.gridbase * 3,
          basedOn: [layout.column, layout.centerCenter]
        },
        titleText: {
          fontSize: 16,
          lineHeight: `${TITLE_LINE_HEIGHT}px`
        },
        preview: {
          marginTop: styleguide.gridbase * 1.25,
          marginLeft: styleguide.gridbase * 4
        },
        childList: {
          paddingLeft: styleguide.gridbase * 4,
          ...styleguide.transition.short,
          transitionProperty: "height"
        },
        hide: {
          overflow: "hidden"
        },
        child: {
          margin: [styleguide.gridbase * 2, 0]
        }
      }));
      TitleNode = import_react_18_2110.default.forwardRef(
        ({ className, ...props }, ref) => {
          const styles = useStyles52();
          return /* @__PURE__ */ import_react_18_2110.default.createElement(Text2, { ref, className: cn(styles.titleText, className), ...props });
        }
      );
      CardItem = import_react_18_2110.default.forwardRef(function CardItemView({ card, className, showChildCards, size, ...rest }, ref) {
        const styles = useStyles52();
        const childListRef = (0, import_react_18_2110.useRef)(null);
        const documentRouter = useDocumentRouter();
        const pCard = usePartialVertex(card, [
          "childCards",
          "tags",
          "type",
          "status"
        ]);
        const { childCards } = pCard;
        const [expanded, setExpanded] = (0, import_react_18_2110.useState)(false);
        const style = useAnimateHeight(childListRef, expanded);
        const [isInHover, setIsInHover] = (0, import_react_18_2110.useState)(false);
        const isTask = pCard.type === "task" /* Task */;
        const isDone = pCard.status === "Done";
        const logger = useLogger();
        const onMouseEnter = (0, import_react_18_2110.useCallback)(() => {
          setIsInHover(true);
        }, []);
        const onMouseLeave = (0, import_react_18_2110.useCallback)(() => {
          setIsInHover(false);
        }, []);
        const source = "list";
        const onClick = (0, import_react_18_2110.useCallback)(() => {
          documentRouter.goTo(card);
          logger.log({
            severity: "INFO",
            event: "Navigation",
            type: "open",
            source,
            destination: "editor",
            vertex: card.key
          });
        }, [card, documentRouter, logger, source]);
        return /* @__PURE__ */ import_react_18_2110.default.createElement(
          "div",
          {
            className: cn(styles.cardContainer, className),
            ref,
            ...rest
          },
          /* @__PURE__ */ import_react_18_2110.default.createElement(
            "div",
            {
              className: cn(styles.card, isTask && styles.taskCard, styles[size]),
              onMouseEnter,
              onMouseLeave,
              onClick
            },
            /* @__PURE__ */ import_react_18_2110.default.createElement(
              CardHeader,
              {
                size,
                card,
                isExpanded: isInHover,
                source
              }
            ),
            /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.titleRow) }, /* @__PURE__ */ import_react_18_2110.default.createElement(StatusCheckbox, { source, card }), /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.titleTextContainer) }, /* @__PURE__ */ import_react_18_2110.default.createElement(Title, { source, card }), /* @__PURE__ */ import_react_18_2110.default.createElement(
              "div",
              {
                className: cn(
                  styles.strikethrough,
                  isDone && styles.strikethroughDone
                )
              }
            ))),
            /* @__PURE__ */ import_react_18_2110.default.createElement("div", { className: cn(styles.preview) }),
            /* @__PURE__ */ import_react_18_2110.default.createElement(CardFooter, { size, card, source })
          ),
          showChildCards && !!childCards.length && /* @__PURE__ */ import_react_18_2110.default.createElement(
            "div",
            {
              className: cn(styles.expander),
              onClick: () => setExpanded((x) => !x)
            },
            /* @__PURE__ */ import_react_18_2110.default.createElement(
              IconExpander_default,
              {
                className: cn(
                  styles.expanderIcon,
                  expanded && styles.expanderIconExpanded
                )
              }
            )
          ),
          showChildCards && /* @__PURE__ */ import_react_18_2110.default.createElement(
            "div",
            {
              className: cn(styles.childList, !expanded && styles.hide),
              ref: childListRef,
              style
            },
            expanded && childCards.map((child, index) => /* @__PURE__ */ import_react_18_2110.default.createElement(
              ChildCard,
              {
                size,
                key: child.key,
                card: child.manager,
                index,
                isVisible: expanded
              }
            ))
          )
        );
      });
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/card-item/card-footer.tsx
  function DueDateIndicator2({ card, source }) {
    const styles = useStyles53();
    const { dueDate } = usePartialVertex(card, ["dueDate"]);
    const dueDateEditor = useDueDate();
    const logger = useLogger();
    const theme = useTheme();
    if (!dueDate) {
      return null;
    }
    const onClick = (e) => {
      e.stopPropagation();
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "edit",
        type: "due",
        vertex: card.key,
        source
      });
      dueDateEditor.edit(card.getVertexProxy());
    };
    const isOverdue = dueDate < /* @__PURE__ */ new Date();
    const color = isOverdue ? theme.primary[400] : theme.background.textSecondary;
    return /* @__PURE__ */ import_react_18_2111.default.createElement(Button, { className: cn(styles.footerItem), onClick }, /* @__PURE__ */ import_react_18_2111.default.createElement(IconCalendar_default, { fill: color }), /* @__PURE__ */ import_react_18_2111.default.createElement(Text2, { style: { color } }, formatTimeDiff(dueDate)));
  }
  function ContentIndicator({ card }) {
    const { bodyPreview } = usePartialVertex(card, ["bodyPreview"]);
    const styles = useStyles53();
    if (!bodyPreview.trim()) {
      return null;
    }
    return /* @__PURE__ */ import_react_18_2111.default.createElement("div", { className: cn(styles.footerItem, styles.margin) }, /* @__PURE__ */ import_react_18_2111.default.createElement(IconContent, null));
  }
  function CardFooter({
    card,
    source,
    className,
    size = "regular" /* Regular */
  }) {
    const styles = useStyles53();
    return /* @__PURE__ */ import_react_18_2111.default.createElement("div", { className: cn(styles.footer, className) }, size === "small" /* Small */ && /* @__PURE__ */ import_react_18_2111.default.createElement(ContentIndicator, { card }), /* @__PURE__ */ import_react_18_2111.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_2111.default.createElement(DueDateIndicator2, { card, source }));
  }
  var import_react_18_2111, FOOTER_HEIGHT, useStyles53;
  var init_card_footer = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/card-item/card-footer.tsx"() {
      import_react_18_2111 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_date();
      init_vertex2();
      init_due_date_editor();
      init_styles();
      init_buttons();
      init_icons();
      init_icon_content();
      init_texts();
      init_css_objects();
      init_theme();
      init_card_item();
      init_logger();
      FOOTER_HEIGHT = styleguide.gridbase * 2;
      useStyles53 = makeStyles((theme) => ({
        footer: {
          alignItems: "center",
          minHeight: styleguide.gridbase,
          color: theme.background.textSecondary,
          basedOn: [layout.row]
        },
        footerItem: {
          marginTop: styleguide.gridbase * 0.5,
          height: FOOTER_HEIGHT
        },
        attachments: {
          alignItems: "center",
          basedOn: [layout.row]
        },
        attachment: {
          color: theme.background.textSecondary
        },
        margin: {
          marginRight: styleguide.gridbase
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/title-editor/index.tsx
  function Title2({ children, attributes }) {
    return /* @__PURE__ */ import_react_18_2112.default.createElement(H12, { ...attributes }, children);
  }
  function TitleEditorView({
    cardManager,
    className,
    isRtl,
    focusNext,
    onDelete
  }) {
    const styles = useStyles54();
    const { editor, plugins, handlers: handlers2 } = useTitleEditor(
      cardManager,
      Title2,
      "title",
      {
        onFocusNext: focusNext
      }
    );
    return /* @__PURE__ */ import_react_18_2112.default.createElement("div", { className: cn(className, styles.header, isRtl && styles.rtl) }, /* @__PURE__ */ import_react_18_2112.default.createElement(import_slate_react_0_8714.Slate, { editor, ...handlers2 }, /* @__PURE__ */ import_react_18_2112.default.createElement(
      CardHeader,
      {
        size: "regular" /* Regular */,
        card: cardManager,
        source: "title",
        isExpanded: true,
        hideMenu: true
      }
    ), /* @__PURE__ */ import_react_18_2112.default.createElement("div", { className: cn(styles.textContainer) }, /* @__PURE__ */ import_react_18_2112.default.createElement("div", { className: cn(layout.flex, styles.noteEditor) }, /* @__PURE__ */ import_react_18_2112.default.createElement(EditableCardContext, { cardManager }, /* @__PURE__ */ import_react_18_2112.default.createElement(FocusReporter, { cardManager, source: "editor:title" }), /* @__PURE__ */ import_react_18_2112.default.createElement(
      import_slate_react_0_8714.Editable,
      {
        ...plugins,
        placeholder: "Name your card",
        tabIndex: 0
      }
    ))), /* @__PURE__ */ import_react_18_2112.default.createElement(
      CardMenuView,
      {
        cardManager,
        onDeleted: onDelete,
        source: "title",
        position: "bottom",
        editorRootKey: cardManager.key
      }
    )), /* @__PURE__ */ import_react_18_2112.default.createElement(
      CardFooter,
      {
        className: cn(styles.footer),
        card: cardManager,
        source: "title"
      }
    )));
  }
  var import_react_18_2112, import_slate_react_0_8714, useStyles54;
  var init_title_editor = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/title-editor/index.tsx"() {
      import_react_18_2112 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_react_0_8714 = __require("https://esm.sh/slate-react@0.87.1");
      init_css_objects();
      init_styles();
      init_texts();
      init_slate();
      init_card();
      init_item_menu();
      init_focus_reporter();
      init_card_footer();
      init_card_item();
      useStyles54 = makeStyles((theme) => ({
        placeholder: {
          marginLeft: styleguide.gridbase * 1.5,
          marginRight: styleguide.gridbase * 1.5,
          marginBottom: styleguide.gridbase * 2,
          color: "#b7b4bf",
          fontSize: 12,
          position: "absolute",
          top: "50%",
          transform: "translateY(-50%)",
          pointerEvents: "none",
          direction: "ltr"
        },
        header: {
          position: "relative"
        },
        textContainer: {
          position: "relative",
          alignItems: "center",
          minHeight: styleguide.gridbase * 7,
          basedOn: [layout.row],
          ":hover": {
            backgroundColor: theme.background[100],
            overflowIcon: {
              opacity: 1
            }
          }
        },
        tags: {
          marginLeft: 0,
          marginBottom: styleguide.gridbase * 2,
          "& > :first-child": {
            marginLeft: 0
          }
        },
        footer: {
          height: styleguide.gridbase * 4
        },
        rtl: {
          direction: "rtl"
        },
        noteHeader: {
          fontSize: 56
        },
        noteEditor: {
          maxWidth: "100%",
          flexShrink: 1
        },
        pills: {
          flexShrink: 1,
          flexWrap: "wrap",
          basedOn: [layout.row]
        },
        assignees: {
          alignSelf: "center"
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/content.tsx
  function CardEditorContent({
    cardManager,
    showWS = false
  }) {
    const styles = useStyles55();
    const rtl = false;
    const bodyEditorRef = (0, import_react_18_2113.useRef)(null);
    const focusNext = (0, import_react_18_2113.useCallback)(() => {
      bodyEditorRef.current?.focus();
    }, []);
    return /* @__PURE__ */ import_react_18_2113.default.createElement(Scroller2, null, (ref) => /* @__PURE__ */ import_react_18_2113.default.createElement("div", { className: cn(styles.container), ref }, /* @__PURE__ */ import_react_18_2113.default.createElement(
      "div",
      {
        className: cn(styles.headerContainer),
        onClick: (e) => e.stopPropagation()
      },
      /* @__PURE__ */ import_react_18_2113.default.createElement(
        TitleEditorView,
        {
          cardManager,
          isRtl: rtl,
          className: cn(styles.header, styles.contained),
          showWS,
          focusNext
        }
      )
    ), /* @__PURE__ */ import_react_18_2113.default.createElement(
      body_editor_default,
      {
        className: cn(styles.contained),
        cardManager,
        isRtl: rtl,
        ref: bodyEditorRef
      }
    ), /* @__PURE__ */ import_react_18_2113.default.createElement(LegendButton, null)));
  }
  var import_react_18_2113, useStyles55;
  var init_content = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/content.tsx"() {
      import_react_18_2113 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styles();
      init_responsive();
      init_body_editor();
      init_scrolling2();
      init_legend_view();
      init_title_editor();
      useStyles55 = makeStyles((theme) => ({
        container: {
          flexShrink: 1,
          overflowY: "auto",
          width: "100%",
          paddingTop: styleguide.gridbase * 10,
          margin: [0, "auto"],
          basedOn: [layout.flex]
        },
        headerContainer: {
          paddingTop: styleguide.gridbase * 4,
          paddingBottom: styleguide.gridbase * 4,
          [MediaQueries.TabletAndMobile]: {
            paddingTop: styleguide.gridbase * 3,
            paddingBottom: styleguide.gridbase * 3
          }
        },
        header: {
          fontSize: 32,
          fontWeight: "bold",
          margin: "0 auto",
          "::selection": {
            backgroundColor: theme.primary[500]
          },
          "& *": {
            "::selection": {
              backgroundColor: theme.primary[400]
            }
          },
          outline: "none",
          border: "none",
          background: "transparent",
          color: theme.background.text
        },
        contained: {
          width: "100%",
          maxWidth: styleguide.gridbase * 100,
          padding: [styleguide.gridbase * 16, styleguide.gridbase * 8],
          paddingTop: 0,
          [MediaQueries.Tablet]: {
            padding: [styleguide.gridbase * 3, styleguide.gridbase * 2],
            paddingTop: 0
          },
          [MediaQueries.Mobile]: {
            padding: [styleguide.gridbase * 3, styleguide.gridbase],
            paddingTop: 0
          }
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/note-editor/index.tsx
  function NoteNotFound() {
    return /* @__PURE__ */ import_react_18_2114.default.createElement(import_react_router_dom_6_72.Navigate, { to: "/", replace: true });
  }
  function NoteView({ noteId }) {
    const routeNoteId = (0, import_react_router_dom_6_72.useParams)().noteId;
    if (!noteId && routeNoteId) {
      noteId = routeNoteId;
    }
    return noteId ? /* @__PURE__ */ import_react_18_2114.default.createElement(InnerNoteView, { noteId }) : /* @__PURE__ */ import_react_18_2114.default.createElement(NoteNotFound, null);
  }
  function InnerNoteView({ noteId }) {
    const styles = useStyles56();
    const graph = useGraphManager();
    const cardManager = graph.getVertexManager(noteId);
    const card = useVertex(cardManager);
    let content = null;
    if (card.isDeleted) {
      return /* @__PURE__ */ import_react_18_2114.default.createElement(NoteNotFound, null);
    } else {
      content = /* @__PURE__ */ import_react_18_2114.default.createElement(CardEditorContent, { cardManager });
    }
    return /* @__PURE__ */ import_react_18_2114.default.createElement(ErrorBoundary, null, /* @__PURE__ */ import_react_18_2114.default.createElement("div", { className: cn(styles.root) }, /* @__PURE__ */ import_react_18_2114.default.createElement("div", { className: cn(styles.relative) }, /* @__PURE__ */ import_react_18_2114.default.createElement(FloatingBackButton, null), content)));
  }
  var import_react_18_2114, import_react_router_dom_6_72, kAllowEditorCrashes, useStyles56, ErrorBoundary;
  var init_note_editor = __esm({
    "web-app/src/app/workspace-content/workspace-view/note-editor/index.tsx"() {
      import_react_18_2114 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_dom_6_72 = __require("https://esm.sh/react-router-dom@6.7.0");
      init_layout();
      init_css_objects();
      init_vertex2();
      init_floating_back_button();
      init_graph();
      init_content();
      kAllowEditorCrashes = false;
      useStyles56 = makeStyles((theme) => ({
        root: {
          position: "relative",
          height: "100%",
          width: "100%",
          flexShrink: 1,
          basedOn: [layout.column, layout.flex]
        },
        relative: {
          position: "relative",
          overflow: "hidden",
          flexShrink: 1,
          basedOn: [layout.flex, layout.column]
        },
        loader: {
          basedOn: [layout.column, layout.flex, layout.centerCenter]
        }
      }));
      ErrorBoundary = class extends import_react_18_2114.default.Component {
        constructor(props) {
          super(props);
          this.state = { hasError: false };
        }
        static getDerivedStateFromError(error) {
          if (kAllowEditorCrashes) {
            return { hasError: false };
          }
          return { hasError: true };
        }
        componentDidCatch(error, errorInfo) {
          console.error(error, errorInfo);
        }
        render() {
          if (this.state.hasError) {
            return /* @__PURE__ */ import_react_18_2114.default.createElement(import_react_router_dom_6_72.Navigate, { to: "/" });
          }
          return this.props.children;
        }
      };
    }
  });

  // web-app/src/shared/dragndrop/context.tsx
  function generateId() {
    return ++_id;
  }
  function init2(disabled) {
    return {
      dragData: null,
      dragOverData: null,
      disabled
    };
  }
  function dndReducer(state, action) {
    switch (action.type) {
      case START_DRAG: {
        const { payload } = action;
        return {
          ...state,
          dragData: {
            data: payload.data,
            index: payload.index,
            dropZone: payload.dropZone,
            placeholderStyle: payload.placeholderStyle || {}
          },
          dragOverData: {
            dropZone: payload.dropZone,
            dragPosition: { y: "bottom", x: "right" },
            index: payload.index - 1
          }
        };
      }
      case CANCEL_DRAG:
      case END_DRAG: {
        return {
          ...state,
          dragData: null,
          dragOverData: null
        };
      }
      case SET_OVER_INDEX: {
        const { payload } = action;
        if (state.disabled) {
          return state;
        }
        if (payload.dropZone === state.dragData?.dropZone && (payload.index === state.dragData.index || payload.index === state.dragData.index - 1)) {
          return {
            ...state,
            dragOverData: {
              index: state.dragData.index - 1,
              dragPosition: payload.dragPosition,
              dropZone: payload.dropZone
            }
          };
        }
        return {
          ...state,
          dragOverData: {
            index: payload.index,
            dragPosition: payload.dragPosition,
            dropZone: payload.dropZone
          }
        };
      }
      case SET_DISABLED: {
        const { payload } = action;
        if (payload.disabled === state.disabled) {
          return state;
        }
        return init2(payload.disabled);
      }
      default:
        throw new Error("Unknown action type");
    }
  }
  function DragAndDropContext({
    children,
    onDragStarted = () => {
    },
    onDragCancelled = () => {
    },
    onDrop = () => {
    },
    disabled = false
  }) {
    const [state, dispatch] = (0, import_react_18_2115.useReducer)(dndReducer, disabled, init2);
    const listeners = (0, import_react_18_2115.useRef)({
      onDragStarted,
      onDragCancelled,
      onDrop
    });
    const id = (0, import_react_18_2115.useMemo)(() => `ctx_${generateId()}`, []);
    const ctx2 = (0, import_react_18_2115.useMemo)(
      () => ({
        id,
        onDragStarted(data, index, dropZone, placeholderStyle) {
          dispatch({
            type: START_DRAG,
            payload: {
              data,
              index,
              dropZone,
              placeholderStyle
            }
          });
          listeners.current.onDragStarted(
            data,
            index,
            dropZone,
            placeholderStyle
          );
        },
        onDragCancelled(e) {
          dispatch({ type: CANCEL_DRAG });
          listeners.current.onDragCancelled(e);
        },
        onDrop(item, relativeTo, dragPosition, index) {
          dispatch({ type: END_DRAG });
          listeners.current.onDrop(item, relativeTo, dragPosition, index);
        },
        setDragOverIndex(index, dragPosition, dropZone) {
          if (state.dragOverData && state.dragOverData.index === index && state.dragOverData.dropZone === dropZone) {
            return;
          }
          dispatch({
            type: SET_OVER_INDEX,
            payload: { index, dragPosition, dropZone }
          });
        },
        state
      }),
      [id, state]
    );
    (0, import_react_18_2115.useEffect)(() => {
      listeners.current = {
        onDragStarted,
        onDragCancelled,
        onDrop
      };
    }, [onDragStarted, onDragCancelled, onDrop]);
    (0, import_react_18_2115.useEffect)(() => {
      dispatch({
        type: SET_DISABLED,
        payload: { disabled }
      });
    }, [disabled]);
    return /* @__PURE__ */ import_react_18_2115.default.createElement(dragCtx.Provider, { value: ctx2 }, children);
  }
  function useDndContext(data) {
    const ctx2 = (0, import_react_18_2115.useContext)(dragCtx);
    if (!ctx2) {
      throw new Error(
        "Draggable and Droppable components must be descendant components of DragAndDropContext"
      );
    }
    const gid = (0, import_react_18_2115.useMemo)(generateId, []);
    const id = `${ctx2.id}:${gid}`;
    return { id, ctx: ctx2 };
  }
  var import_react_18_2115, dragCtx, _id, START_DRAG, CANCEL_DRAG, END_DRAG, SET_OVER_INDEX, SET_DISABLED;
  var init_context3 = __esm({
    "web-app/src/shared/dragndrop/context.tsx"() {
      import_react_18_2115 = __toESM(__require("https://esm.sh/react@18.2.0"));
      dragCtx = import_react_18_2115.default.createContext(null);
      _id = 0;
      START_DRAG = "START_DRAG";
      CANCEL_DRAG = "CANCEL_DRAG";
      END_DRAG = "END_DRAG";
      SET_OVER_INDEX = "SET_OVER_INDEX";
      SET_DISABLED = "SET_DISABLED";
    }
  });

  // web-app/src/shared/dragndrop/cancellation-reasons.tsx
  var CANCELLATION_REASONS, cancellation_reasons_default;
  var init_cancellation_reasons = __esm({
    "web-app/src/shared/dragndrop/cancellation-reasons.tsx"() {
      CANCELLATION_REASONS = /* @__PURE__ */ ((CANCELLATION_REASONS2) => {
        CANCELLATION_REASONS2["USER_CANCELLED"] = "USER_CANCELLED";
        CANCELLATION_REASONS2["DISABLED"] = "DISABLED";
        CANCELLATION_REASONS2["NO_DATA"] = "NO_DATA";
        CANCELLATION_REASONS2["NOT_ALLOWED"] = "NOT_ALLOWED";
        return CANCELLATION_REASONS2;
      })(CANCELLATION_REASONS || {});
      cancellation_reasons_default = CANCELLATION_REASONS;
    }
  });

  // web-app/src/shared/dragndrop/droppable.tsx
  function isAllowsDropResult(result) {
    return typeof result !== "boolean";
  }
  function Droppable({
    children,
    allowsDrop = (item) => !!item,
    items,
    onDrop
  }) {
    const { id, ctx: ctx2 } = useDndContext(DROP_ZONE);
    const onDropImpl = (e) => {
      const { dragOverData, disabled, dragData } = ctx2.state;
      if (!dragData) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.USER_CANCELLED
        });
      }
      if (disabled) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.DISABLED
        });
      }
      if (!dragOverData || dragOverData.dropZone !== id) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.NO_DATA
        });
      }
      const item = ctx2.state.dragData?.data;
      if (!item) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.NO_DATA
        });
      }
      let relativeTo = items[dragOverData.index];
      const { dragPosition } = dragOverData;
      const res = typeof allowsDrop === "boolean" ? allowsDrop : allowsDrop(item);
      if (isAllowsDropResult(res) && !res.isAllowed || !res) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.NOT_ALLOWED,
          context: isAllowsDropResult(res) && res.context
        });
      }
      if (item === relativeTo) {
        return ctx2.onDragCancelled({
          reason: cancellation_reasons_default.USER_CANCELLED
        });
      }
      onDrop(item, relativeTo, dragPosition);
      ctx2.onDrop(item, relativeTo, dragPosition);
    };
    const onDragOver = (e) => {
      if (e.dataTransfer?.types.includes("text/ovvio")) {
        if (!ctx2.state.dragData) {
          return;
        }
        e.preventDefault();
        if (!items.length) {
          ctx2.setDragOverIndex(0, { x: "left", y: "top" }, id);
        }
      }
    };
    const onDragLeave = (e) => {
    };
    const isInDrag = !!ctx2.state.dragData;
    const isDragOver = ctx2.state.dragOverData !== null && ctx2.state.dragOverData.dropZone === id;
    const attributes = {
      onDragOver,
      onDragLeave,
      onDrop: onDropImpl,
      "data-drag-id": id
    };
    return /* @__PURE__ */ import_react_18_2116.default.createElement(dropZoneContext.Provider, { value: id }, typeof children === "function" ? children({ attributes, isInDrag, isDragOver }) : children);
  }
  var import_react_18_2116, DROP_ZONE, dropZoneContext;
  var init_droppable = __esm({
    "web-app/src/shared/dragndrop/droppable.tsx"() {
      import_react_18_2116 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_cancellation_reasons();
      init_context3();
      DROP_ZONE = "DROP_ZONE";
      dropZoneContext = import_react_18_2116.default.createContext("");
    }
  });

  // web-app/src/shared/dragndrop/util.ts
  function serializeId(id) {
    return id;
  }
  function getBoundingBoxes(el) {
    const rect = el.getBoundingClientRect();
    return rect;
  }
  function useDragPositionCalculator(isDragActive) {
    const boundingBoxCache = (0, import_react_18_2117.useRef)(/* @__PURE__ */ new WeakMap());
    (0, import_react_18_2117.useEffect)(() => {
      boundingBoxCache.current = /* @__PURE__ */ new WeakMap();
    }, [isDragActive]);
    const calcPosition = (0, import_react_18_2117.useCallback)((e, prevPos) => {
      const { target } = e;
      if (!target) {
        return;
      }
      let rect = boundingBoxCache.current.get(e.target);
      if (!rect) {
        rect = getBoundingBoxes(target);
        boundingBoxCache.current.set(target, rect);
      }
      return calcDragPosition(e, rect, prevPos);
    }, []);
    return calcPosition;
  }
  function calcDragPosition(e, rect, prevPos) {
    const y = e.clientY;
    const relativeY = y - rect.y;
    const pos = relativeY / rect.height;
    let yPos = "top";
    if (pos < 0.9 && pos > 0.5) {
      yPos = "bottom";
    }
    const x = e.clientX;
    const relativeX = x - rect.x;
    const p = relativeX / rect.width;
    let xPos = "left";
    if (p > 0.5) {
      xPos = "right";
    }
    return PosMap[yPos][xPos];
  }
  function throttle(fn, limit = 1e3 / 60) {
    let lastRun;
    let result;
    return function(...args) {
      if (!lastRun || performance.now() - lastRun < limit) {
        return result;
      }
      result = fn(...args);
      lastRun = performance.now();
    };
  }
  var import_react_18_2117, DragPositions, PosMap;
  var init_util = __esm({
    "web-app/src/shared/dragndrop/util.ts"() {
      import_react_18_2117 = __require("https://esm.sh/react@18.2.0");
      DragPositions = {
        TopLeft: {
          x: "left",
          y: "top"
        },
        TopRight: {
          x: "right",
          y: "top"
        },
        BottomLeft: {
          x: "left",
          y: "bottom"
        },
        BottomRight: {
          x: "right",
          y: "bottom"
        }
      };
      PosMap = {
        top: {
          left: DragPositions.TopLeft,
          right: DragPositions.TopRight
        },
        bottom: {
          left: DragPositions.BottomLeft,
          right: DragPositions.BottomRight
        }
      };
    }
  });

  // web-app/src/shared/dragndrop/draggable.tsx
  function Draggable({
    children,
    data,
    index,
    effectAllowed = "all"
  }) {
    const { id, ctx: ctx2 } = useDndContext(data);
    const { disabled } = ctx2.state;
    const [isInDrag, setIsInDrag] = (0, import_react_18_2118.useState)(false);
    const dropZoneId = (0, import_react_18_2118.useContext)(dropZoneContext);
    const calcPosition = useDragPositionCalculator(
      ctx2.state.dragData?.dropZone === dropZoneId
    );
    const [dragPosition, setDragPosition] = (0, import_react_18_2118.useState)(
      void 0
    );
    (0, import_react_18_2118.useEffect)(() => {
      const val = ctx2.state.dragData?.dropZone === dropZoneId && ctx2.state.dragData?.index === index;
      let cancelled = false;
      requestAnimationFrame(() => {
        if (!cancelled) {
          setIsInDrag(val);
        }
      });
      return () => {
        cancelled = true;
      };
    }, [ctx2, dropZoneId, index]);
    const ref = (0, import_react_18_2118.useRef)();
    const placeHolder = (0, import_react_18_2118.useRef)();
    const onDragStart = (e) => {
      if (placeHolder.current) {
        placeHolder.current.remove();
        placeHolder.current = void 0;
      }
      const serialized = serializeId(id);
      e.dataTransfer?.setData("text/ovvio", serialized);
      e.dataTransfer.effectAllowed = effectAllowed;
      let placeholderStyle = {};
      if (ref.current) {
        const el = ref.current.cloneNode(true);
        placeHolder.current = el;
        el.style.position = "absolute";
        el.style.top = "-99999px";
        const rect = ref.current.getBoundingClientRect();
        el.style.width = rect.width + "px";
        el.style.height = rect.height + "px";
        el.style.cursor = "grabbing";
        el.style.display = "grid";
        document.body.appendChild(el);
        placeholderStyle = {
          height: rect.height
        };
        e.dataTransfer?.setDragImage(
          el,
          e.clientX - rect.left,
          e.clientY - rect.top
        );
      }
      ctx2.onDragStarted(data, index, dropZoneId, placeholderStyle);
    };
    const onDragEnter = (0, import_react_18_2118.useCallback)(
      (e) => {
        if (!ctx2.state.dragData) {
          return;
        }
        const pos = calcPosition(e);
        if (pos) {
          setDragPosition(pos);
          ctx2.setDragOverIndex(index, pos, dropZoneId);
        }
      },
      [ctx2, calcPosition, index, dropZoneId]
    );
    const onDragOver = (0, import_react_18_2118.useCallback)(
      throttle((e) => {
        if (!ctx2.state.dragData) {
          return;
        }
        setDragPosition((current) => {
          const pos = calcPosition(e, current);
          if (pos) {
            ctx2.setDragOverIndex(index, pos, dropZoneId);
            return pos;
          }
          return current;
        });
      }, 100),
      [ctx2, calcPosition, index, dropZoneId]
    );
    const onDragLeave = (e) => {
    };
    const onDrop = (e) => {
    };
    const onDragEnd = (e) => {
      if (placeHolder.current) {
        placeHolder.current.remove();
        placeHolder.current = void 0;
      }
      if (e.dataTransfer?.dropEffect === "none") {
        ctx2.onDragCancelled({
          reason: cancellation_reasons_default.USER_CANCELLED
        });
      }
    };
    const dropOverBefore = ctx2.state.dragOverData && ctx2.state.dragOverData.dropZone === dropZoneId && ctx2.state.dragOverData.index < index;
    const attributes = {
      onDragStart,
      draggable: !disabled,
      onDragEnter,
      onDragOver,
      onDragLeave,
      onDragEnd,
      onDrop,
      "data-drag-id": id,
      "data-drag-index": index
    };
    return children(
      {
        attributes,
        isInDrag,
        isDragActive: ctx2.state.dragData?.dropZone === dropZoneId,
        dragPosition,
        dropOverBefore,
        isDraggedOver: ctx2.state.dragOverData?.dropZone === dropZoneId && ctx2.state.dragOverData?.index === index,
        placeholderStyle: ctx2.state.dragData && ctx2.state.dragData.placeholderStyle || {}
      },
      ref
    );
  }
  var import_react_18_2118;
  var init_draggable = __esm({
    "web-app/src/shared/dragndrop/draggable.tsx"() {
      import_react_18_2118 = __require("https://esm.sh/react@18.2.0");
      init_cancellation_reasons();
      init_context3();
      init_droppable();
      init_util();
    }
  });

  // web-app/src/shared/dragndrop/index.ts
  var init_dragndrop = __esm({
    "web-app/src/shared/dragndrop/index.ts"() {
      init_context3();
      init_draggable();
      init_droppable();
      init_cancellation_reasons();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/card-item/draggable-card.tsx
  function setDragSort(items, item, relativeTo, dragPosition) {
    if (!items.length) {
      return;
    }
    const index = items.indexOf(relativeTo);
    const nextIndex = dragPosition.y === "top" ? index - 1 : index + 1;
    let nextStamp;
    if (nextIndex <= 0) {
      nextStamp = present();
    } else if (nextIndex >= items.length) {
      nextStamp = past();
    } else {
      const x = items[nextIndex].getVertexProxy();
      nextStamp = x.sortStamp;
    }
    item.vertex.sortStamp = between(relativeTo.vertex.sortStamp, nextStamp);
  }
  var import_react_18_2119, useStyles57, DraggableCard;
  var init_draggable_card = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/card-item/draggable-card.tsx"() {
      import_react_18_2119 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_orderstamp();
      init_animate();
      init_styles();
      init_css_objects();
      init_card_item();
      useStyles57 = makeStyles((theme) => ({
        noMargin: {
          margin: 0
        },
        draggableCard: {
          position: "relative"
        },
        draggedIndicator: {
          position: "absolute",
          width: "100%",
          height: styleguide.gridbase * 0.5,
          backgroundColor: theme.primary[400]
        },
        "drag-top": {
          top: 0
        },
        "drag-bottom": {
          bottom: 0
        },
        dragAnimator: {
          ...styleguide.transition.short,
          transitionProperty: "height"
        },
        hide: {
          height: 0,
          overflow: "hidden"
        }
      }));
      DraggableCard = import_react_18_2119.default.forwardRef(function({
        attributes,
        isInDrag,
        isDragActive,
        dragPosition,
        dropOverBefore,
        placeholderStyle,
        isDraggedOver,
        className,
        ...cardProps
      }, ref) {
        const styles = useStyles57();
        const dragRef = (0, import_react_18_2119.useRef)(null);
        const { height } = useAnimateHeight(dragRef, isInDrag);
        const style = (0, import_react_18_2119.useMemo)(
          () => isDragActive ? { height: isInDrag ? 0 : height } : {},
          [isInDrag, height, isDragActive]
        );
        return /* @__PURE__ */ import_react_18_2119.default.createElement(
          "div",
          {
            ref,
            className: cn(
              className,
              styles.draggableCard,
              isInDrag && styles.noMargin
            ),
            ...attributes
          },
          /* @__PURE__ */ import_react_18_2119.default.createElement(
            "div",
            {
              ref: dragRef,
              style,
              className: cn(styles.dragAnimator, isInDrag && styles.hide)
            },
            /* @__PURE__ */ import_react_18_2119.default.createElement(CardItem, { ...cardProps }),
            isDraggedOver && /* @__PURE__ */ import_react_18_2119.default.createElement(
              "div",
              {
                className: cn(
                  styles.draggedIndicator,
                  dragPosition && styles[`drag-${dragPosition.y}`]
                )
              }
            )
          )
        );
      });
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board-card.tsx
  function BoardCard({
    card,
    index
  }) {
    const styles = useStyles58();
    return /* @__PURE__ */ import_react_18_2120.default.createElement(Draggable, { data: card, index }, (props, ref) => /* @__PURE__ */ import_react_18_2120.default.createElement(
      DraggableCard,
      {
        ...props,
        ref,
        size: "small" /* Small */,
        key: card.key,
        card,
        className: cn(styles.item)
      }
    ));
  }
  var import_react_18_2120, useStyles58;
  var init_board_card = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board-card.tsx"() {
      import_react_18_2120 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_css_objects();
      init_draggable();
      init_card_item();
      init_draggable_card();
      useStyles58 = makeStyles((theme) => ({
        item: {
          marginBottom: styleguide.gridbase * 2
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board-column.tsx
  function ColumnTitle({ title, onCreateCard }) {
    const styles = useStyles59();
    const [sentinel, setSentinel] = (0, import_react_18_2121.useState)(null);
    const scrollParent = useScrollParent();
    const [isSticky, setIsSticky] = (0, import_react_18_2121.useState)(false);
    (0, import_react_18_2121.useEffect)(() => {
      if (!sentinel) {
        return;
      }
      const observer = new IntersectionObserver(
        (records) => {
          for (const record of records) {
            const targetInfo = record.boundingClientRect;
            const rootBoundsInfo = record.rootBounds;
            if (targetInfo.bottom < (rootBoundsInfo?.top || 0)) {
              setIsSticky(true);
            }
            if (targetInfo.bottom > (rootBoundsInfo?.top || 0) && targetInfo.bottom < (rootBoundsInfo?.bottom || 0)) {
              setIsSticky(false);
            }
          }
        },
        { threshold: [0], root: scrollParent }
      );
      observer.observe(sentinel);
      return () => {
        observer.disconnect();
      };
    }, [sentinel, scrollParent]);
    return /* @__PURE__ */ import_react_18_2121.default.createElement(Layer, null, (style) => /* @__PURE__ */ import_react_18_2121.default.createElement(
      "div",
      {
        className: cn(styles.columnTitle, isSticky && styles.stickyShadow),
        style
      },
      /* @__PURE__ */ import_react_18_2121.default.createElement("div", { className: cn(styles.columnHeader) }, /* @__PURE__ */ import_react_18_2121.default.createElement(H42, { className: cn(styles.titleText) }, title), /* @__PURE__ */ import_react_18_2121.default.createElement("div", { className: cn(layout.flexSpacer) }), onCreateCard && /* @__PURE__ */ import_react_18_2121.default.createElement(Button, { onClick: onCreateCard }, /* @__PURE__ */ import_react_18_2121.default.createElement(IconCreateNew_default, null))),
      /* @__PURE__ */ import_react_18_2121.default.createElement(
        "div",
        {
          className: cn(styles.stickyNotifier),
          ref: (ref) => setSentinel(ref)
        }
      )
    ));
  }
  function Column({
    children,
    title,
    onCreateCard,
    ...rest
  }) {
    const styles = useStyles59();
    return /* @__PURE__ */ import_react_18_2121.default.createElement("div", { className: cn(styles.column) }, /* @__PURE__ */ import_react_18_2121.default.createElement(ColumnTitle, { title, onCreateCard, ...rest }), /* @__PURE__ */ import_react_18_2121.default.createElement("div", { className: cn(styles.columnContent) }, children));
  }
  function BoardColumn({
    title,
    children,
    ...props
  }) {
    return /* @__PURE__ */ import_react_18_2121.default.createElement(Droppable, { ...props }, (droppableProps) => /* @__PURE__ */ import_react_18_2121.default.createElement(Column, { ...droppableProps.attributes, title }, children));
  }
  var import_react_18_2121, useStyles59;
  var init_board_column = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board-column.tsx"() {
      import_react_18_2121 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_buttons();
      init_icons();
      init_layer();
      init_texts();
      init_css_objects();
      init_scrolling2();
      init_droppable();
      useStyles59 = makeStyles((theme) => ({
        column: {
          marginTop: styleguide.gridbase,
          position: "relative",
          maxWidth: styleguide.gridbase * 40,
          minWidth: styleguide.gridbase * 30,
          flexShrink: 0,
          flexBasis: "33%",
          boxSizing: "border-box",
          marginRight: styleguide.gridbase,
          backgroundColor: theme.background[400],
          borderRadius: 4
        },
        columnHeader: {
          paddingBottom: styleguide.gridbase,
          alignItems: "center",
          basedOn: [layout.row]
        },
        columnTitle: {
          background: "inherit",
          position: "sticky",
          top: 0,
          padding: styleguide.gridbase,
          ...styleguide.transition.short,
          transitionProperty: "box-shadow"
        },
        stickyShadow: {
          boxShadow: theme.shadows.z1
        },
        stickyNotifier: {
          backgroundColor: "yellow",
          position: "absolute",
          visibility: "hidden",
          width: "100%",
          top: -styleguide.gridbase,
          height: 1
        },
        titleText: {},
        columnContent: {
          boxSizing: "border-box",
          padding: styleguide.gridbase,
          width: "100%"
        },
        item: {
          marginBottom: styleguide.gridbase * 2
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board.strings.json
  var board_strings_default;
  var init_board_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/board.strings.json"() {
      board_strings_default = {
        en: {
          userNotInWorkspace: "Selected user is not a part of {workspace} workspace",
          tagNotInWorkspace: "Tag `{tag}` does not exist in `{workspace}` workspace",
          invite: "Invite",
          unassigned: "Unassigned",
          dragNotSupported: "Drag and drop is not allowed in this view"
        }
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/assignees-board-view.tsx
  function AssigneesBoardView({ query }) {
    useQuery2(query);
    const logger = useLogger();
    const strings = useStrings4();
    const toast = useToastController();
    const sortedUsers = usePartialVertices(
      filterIterable(
        query.groups.keys(),
        (id) => typeof id !== "undefined"
      ),
      ["name"]
    ).sort(coreValueCompare);
    const onDragCancelled = (0, import_react_18_2122.useCallback)(
      ({
        reason,
        context: context2
      }) => {
        if (reason === cancellation_reasons_default.NOT_ALLOWED) {
          logger.log({
            severity: "INFO",
            event: "Cancel",
            flow: "dnd",
            type: "assignee",
            reason: "denied",
            source: "board",
            added: context2?.user?.key,
            vertex: context2?.card.key
          });
          const wsName = context2?.card.vertex.workspace.name;
          toast.displayToast({
            duration: 5e3,
            text: format(strings.userNotInWorkspace, { workspace: wsName })
            // action: {
            //   text: strings.invite,
            //   fn: dismiss => {
            //     dismiss();
            //   },
            // },
          });
        }
      },
      [toast, strings, logger]
    );
    const onDrop = (destinationUser, items, item, relativeTo, dragPosition) => {
      const card = item.getVertexProxy();
      logger.log({
        severity: "INFO",
        event: "End",
        flow: "dnd",
        type: "assignee",
        vertex: item.key,
        source: "board",
        added: destinationUser?.key,
        removed: Array.from(card.assignees).map((u) => u.key)
      });
      card.clearAssignees();
      card.assignees.add(destinationUser.vertex);
      setDragSort(items, item, relativeTo, dragPosition);
    };
    const allowsDrop = (user, note) => {
      if (typeof user === "undefined") {
        return true;
      }
      return note.workspace.users.has(user) || {
        isAllowed: false,
        context: {
          user: user?.manager,
          card: note.manager
        }
      };
    };
    return /* @__PURE__ */ import_react_18_2122.default.createElement(DragAndDropContext, { onDragCancelled }, sortedUsers.map((user) => /* @__PURE__ */ import_react_18_2122.default.createElement(
      BoardColumn,
      {
        title: user ? user.name : strings.unassigned,
        key: user?.key,
        items: query.groups.get(user?.key),
        allowsDrop: (item) => allowsDrop(user, item),
        onDrop: (item, relativeTo, dragPosition) => onDrop(
          user.manager,
          query.groups.get(user?.key),
          item,
          relativeTo,
          dragPosition
        )
      },
      query.groups.get(user?.key).map((card, index) => /* @__PURE__ */ import_react_18_2122.default.createElement(BoardCard, { card, index, key: card.key }))
    )));
  }
  var import_react_18_2122, useStrings4;
  var init_assignees_board_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/assignees-board-view.tsx"() {
      import_react_18_2122 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_vertex2();
      init_localization();
      init_dragndrop();
      init_toast();
      init_draggable_card();
      init_board_card();
      init_board_column();
      init_board_strings();
      init_query2();
      init_logger();
      init_common();
      init_comparable();
      useStrings4 = createUseStrings(board_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/tag-board-view.tsx
  function TagBoardView({ query }) {
    useQuery2(query, false);
    const logger = useLogger();
    const groups = query.groups;
    const groupBy = usePartialFilter(["groupByPivot"]).groupByPivot;
    const graph = useGraphManager();
    const childTagManagers = Array.from(
      mapIterable(
        filterIterable(groups.keys(), (k) => typeof k === "string"),
        (k) => graph.getVertexManager(k)
      )
    );
    const sortedChildTags = usePartialVertices(childTagManagers, ["name"]).sort();
    const unassigned = groups.get(void 0);
    const strings = useStrings5();
    const onDrop = (tag, items, item, relativeTo, dragPosition) => {
      const note = item.getVertexProxy();
      logger.log({
        severity: "INFO",
        event: "End",
        flow: "dnd",
        vertex: item.key,
        type: "tag",
        source: "board",
        added: tag?.key,
        removed: tag === void 0 ? note.tags.get(groupBy)?.key : void 0
      });
      if (typeof tag === "undefined") {
        note.tags.delete(groupBy);
      } else {
        note.tags.set(groupBy, tag.vertex);
      }
      setDragSort(items, item, relativeTo, dragPosition);
    };
    return /* @__PURE__ */ import_react_18_2123.default.createElement(DragAndDropContext, null, unassigned?.length || 0 > 0 ? /* @__PURE__ */ import_react_18_2123.default.createElement(
      BoardColumn,
      {
        key: void 0,
        items: groups.get(void 0),
        title: strings.unassigned,
        onDrop: (...args) => onDrop(void 0, groups.get(void 0), ...args)
      },
      groups.get(void 0).map((note, index) => /* @__PURE__ */ import_react_18_2123.default.createElement(BoardCard, { key: note.key, card: note, index }))
    ) : null, sortedChildTags.map((tag) => /* @__PURE__ */ import_react_18_2123.default.createElement(
      BoardColumn,
      {
        key: tag.key,
        items: groups.get(tag.key),
        title: tag.name,
        onDrop: (...args) => onDrop(
          tag.manager,
          groups.get(tag.key),
          ...args
        )
      },
      groups.get(tag.key).map((card, index) => /* @__PURE__ */ import_react_18_2123.default.createElement(BoardCard, { key: card.key, card, index }))
    )));
  }
  var import_react_18_2123, useStrings5;
  var init_tag_board_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/tag-board-view.tsx"() {
      import_react_18_2123 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_vertex2();
      init_localization();
      init_dragndrop();
      init_draggable_card();
      init_board_card();
      init_board_column();
      init_board_strings();
      init_logger();
      init_query2();
      init_app();
      init_graph();
      init_common();
      useStrings5 = createUseStrings(board_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/workspace-board-view.tsx
  function WorkspaceBoardView({ query }) {
    useQuery2(query, false);
    const groups = query.groups;
    const workspaces = usePartialVertices(groups.keys(), [
      "name",
      "sortStamp"
    ]);
    const logger = useLogger();
    const toast = useToastController();
    const strings = useStrings6();
    const columns = workspaces.sort(coreValueCompare);
    const onDragCancelled = (0, import_react_18_2124.useCallback)(() => {
      logger.log({
        severity: "INFO",
        event: "Cancel",
        flow: "dnd",
        source: "board",
        type: "workspace",
        status: "cancelled",
        reason: "not-supported"
      });
      toast.displayToast({
        duration: 5e3,
        text: strings.dragNotSupported
      });
    }, [toast, logger, strings]);
    const onDrop = (workspace, items, item, relativeTo, dragPosition) => {
    };
    return /* @__PURE__ */ import_react_18_2124.default.createElement(DragAndDropContext, { onDragCancelled }, columns.map((column) => /* @__PURE__ */ import_react_18_2124.default.createElement(
      BoardColumn,
      {
        title: column.name,
        key: column.key,
        items: groups.get(column.key),
        allowsDrop: () => false,
        onDrop: (item, relativeTo, dragPosition) => onDrop(
          column.manager,
          groups.get(column.key),
          item,
          relativeTo,
          dragPosition
        )
      },
      groups.get(column.key).map((card, index) => /* @__PURE__ */ import_react_18_2124.default.createElement(BoardCard, { card, index, key: card.key }))
    )));
  }
  var import_react_18_2124, useStrings6;
  var init_workspace_board_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/workspace-board-view.tsx"() {
      import_react_18_2124 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_toast();
      init_vertex2();
      init_localization();
      init_dragndrop();
      init_board_card();
      init_board_column();
      init_board_strings();
      init_logger();
      init_comparable();
      init_query2();
      useStrings6 = createUseStrings(board_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/board-view/index.tsx
  function BoardView({ className }) {
    const styles = useStyles60();
    const filter = useFilter();
    const query = useQuery2(filter.buildQuery("BoardView"));
    let content = null;
    const groupBy = filter.groupBy;
    if (groupBy === "workspace") {
      content = /* @__PURE__ */ import_react_18_2125.default.createElement(WorkspaceBoardView, { query });
    } else if (groupBy === "tag") {
      content = /* @__PURE__ */ import_react_18_2125.default.createElement(TagBoardView, { query });
    } else {
      content = /* @__PURE__ */ import_react_18_2125.default.createElement(AssigneesBoardView, { query });
    }
    return /* @__PURE__ */ import_react_18_2125.default.createElement(Scroller2, null, (ref) => /* @__PURE__ */ import_react_18_2125.default.createElement("div", { ref, className: cn(styles.boardRoot, className) }, content));
  }
  var import_react_18_2125, useStyles60;
  var init_board_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/board-view/index.tsx"() {
      import_react_18_2125 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_css_objects();
      init_scrolling2();
      init_assignees_board_view();
      init_tag_board_view();
      init_workspace_board_view();
      init_query2();
      init_app();
      useStyles60 = makeStyles((theme) => ({
        boardRoot: {
          overflowY: "auto",
          height: "100%",
          paddingBottom: styleguide.gridbase * 2,
          boxSizing: "border-box",
          alignItems: "flex-start",
          basedOn: [layout.row]
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/cards-display.strings.json
  var cards_display_strings_default;
  var init_cards_display_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/cards-display.strings.json"() {
      cards_display_strings_default = {
        en: {
          list: "List View",
          group: "Group View",
          board: "Board View",
          priority: "Priority",
          groupBy: "Group By",
          created: "Date Created",
          modified: "Date Modified",
          due: "Due Date",
          workspace: "Workspace",
          assignee: "Assignee",
          tag: "Tag",
          groupByTag: "Tag...",
          filter: "Filter",
          searchResults: "Search Results",
          compose: "Compose",
          task: "Tasks",
          note: "Notes",
          newTask: "New Task",
          newNote: "New Note",
          search: "Search...",
          clear: "Clear"
        }
      };
    }
  });

  // styles/components/new-icons/icon-sort.tsx
  function IconSort({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2126.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 17 17",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9.00012 5H14.5001",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9.00012 1H16.0001",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9.00012 9H13.0001",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M4.79822 15.0254L1.99821 12.4004",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M7.59802 12.4004L4.79801 15.0254",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2126.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M4.79968 1V15",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_2126;
  var init_icon_sort = __esm({
    "styles/components/new-icons/icon-sort.tsx"() {
      import_react_18_2126 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-filter.tsx
  function IconFilter({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2127.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 17",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "circle",
        {
          opacity: "0.6",
          cx: "2.75",
          cy: "11.125",
          r: "1.75",
          transform: "rotate(-90 2.75 11.125)",
          stroke: "#262626",
          strokeWidth: "2"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 15.5L2.75 12.875",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 9.375L2.75 1.5",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "circle",
        {
          opacity: "0.6",
          cx: "13.25",
          cy: "11.125",
          r: "1.75",
          transform: "rotate(-90 13.25 11.125)",
          stroke: "#262626",
          strokeWidth: "2"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M13.25 15.5L13.25 12.875",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M13.25 9.375L13.25 1.5",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "circle",
        {
          opacity: "0.6",
          cx: "8",
          cy: "5.875",
          r: "1.75",
          transform: "rotate(-90 8 5.875)",
          stroke: "#262626",
          strokeWidth: "2"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 15.5L8 7.625",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2127.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 4.125L8 1.5",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    );
  }
  var import_react_18_2127;
  var init_icon_filter = __esm({
    "styles/components/new-icons/icon-filter.tsx"() {
      import_react_18_2127 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/tabs/index.tsx
  function TabButton({
    children,
    renderContent,
    value,
    style,
    isSelected,
    setSelected,
    className,
    onSelected
  }) {
    const styles = useStyles61();
    const onClick = (e) => {
      e.stopPropagation();
      setSelected(value);
      if (onSelected) {
        onSelected(value);
      }
    };
    const content = renderContent ? renderContent({ isSelected }) : children;
    return /* @__PURE__ */ import_react_18_2128.default.createElement(
      Button,
      {
        className: cn(styles.tab, isSelected && styles.selected, className),
        style,
        onClick
      },
      content
    );
  }
  function TabsHeader({
    children,
    selected,
    setSelected,
    className
  }) {
    const styles = useStyles61();
    const count = import_react_18_2128.default.Children.count(children);
    let selectedIndex = 0;
    return /* @__PURE__ */ import_react_18_2128.default.createElement("div", { className: cn(styles.header, className) }, import_react_18_2128.default.Children.map(children, (tab, i) => {
      if (!import_react_18_2128.default.isValidElement(tab)) {
        return tab;
      }
      const { value } = tab.props;
      const style = tab.props.style || {};
      const isSelected = value === selected;
      if (isSelected) {
        selectedIndex = i;
      }
      const newProps = {
        isSelected,
        setSelected,
        style: {
          ...style,
          flexBasis: `${100 / count}%`
        }
      };
      return import_react_18_2128.default.cloneElement(tab, newProps);
    }), /* @__PURE__ */ import_react_18_2128.default.createElement(
      "div",
      {
        className: cn(styles.selectedTabIndicator),
        style: {
          width: `${100 / count}%`,
          transform: `translateX(${100 * selectedIndex}%)`
        }
      }
    ));
  }
  var import_react_18_2128, useStyles61;
  var init_tabs = __esm({
    "styles/components/tabs/index.tsx"() {
      import_react_18_2128 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styleguide();
      init_layout();
      init_buttons();
      init_theme();
      init_typography();
      useStyles61 = makeStyles(
        (theme) => ({
          header: {
            position: "relative",
            basedOn: [layout.row]
          },
          tab: {
            height: styleguide.gridbase * 6,
            color: brandLightTheme.colors.text,
            borderBottom: `1px solid ${brandLightTheme.supporting.O1}`,
            transitionDuration: `${styleguide.transition.duration.standard}ms`,
            transitionProperty: "color",
            transitionTimingFunction: "linear",
            basedOn: [layout.row, layout.centerCenter, useStyles2.h5]
          },
          selected: {
            ...useStyles2.label.rules
          },
          selectedTabIndicator: {
            position: "absolute",
            bottom: 0,
            left: 0,
            height: 2,
            transform: "translateX(0)",
            backgroundColor: brandLightTheme.supporting.O2,
            ...styleguide.transition.standard,
            transitionProperty: "transform"
          },
          tabsRoot: {
            width: "100%",
            boxSizing: "border-box",
            overflow: "hidden"
          },
          tabsFlipper: {
            flexShrink: 0,
            overflow: "visible",
            ...styleguide.transition.standard,
            transitionProperty: "transform",
            basedOn: [layout.row]
          }
        }),
        "tabs_3a7361"
      );
    }
  });

  // styles/components/new-icons/icon-compose.tsx
  function IconCompose({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2129.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 17 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2129.default.createElement("g", { clipPath: "url(#clip0_1176_37502)" }, /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M5 13.2578L2.87868 11.1365",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M5 13.2578L14.8995 3.35832",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M10.6565 3.35817L12.7778 5.47949",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M12.657 1.35817L14.7783 3.47949",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2.87854 11.1362L12.778 1.23674",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2.87868 11.1365L5 13.2578",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1.81825 14.3182L5.00023 13.2576",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1.81842 14.3184L2.87908 11.1364",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2129.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M12.5962 3.53996L14.364 5.30773C15.145 6.08878 15.145 7.35511 14.364 8.13615L13.6568 8.84326",
          stroke: "#F5F9FB",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )),
      /* @__PURE__ */ import_react_18_2129.default.createElement("defs", null, /* @__PURE__ */ import_react_18_2129.default.createElement("clipPath", { id: "clip0_1176_37502" }, /* @__PURE__ */ import_react_18_2129.default.createElement(
        "rect",
        {
          width: "16",
          height: "16",
          fill: "white",
          transform: "translate(0.5)"
        }
      )))
    );
  }
  var import_react_18_2129;
  var init_icon_compose = __esm({
    "styles/components/new-icons/icon-compose.tsx"() {
      import_react_18_2129 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/compose-button.tsx
  function ComposeButton() {
    const styles = useStyles62();
    const logger = useLogger();
    const docRouter = useDocumentRouter();
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    const [container, setContainer] = (0, import_react_18_2130.useState)(null);
    const graph = useGraphManager();
    const createCard = (0, import_react_18_2130.useCallback)(
      (ws) => {
        const note = createNewNote(graph, ws, {
          type: "note" /* Note */
        });
        logger.log({
          severity: "INFO",
          event: "Create",
          type: "note",
          source: "toolbar:compose",
          vertex: note.key
        });
        docRouter.goTo(note);
      },
      [logger, graph, docRouter]
    );
    if (selectedWorkspacesQuery.count === 1) {
      return /* @__PURE__ */ import_react_18_2130.default.createElement(Button, { onClick: () => createCard(selectedWorkspacesQuery.results[0]) }, /* @__PURE__ */ import_react_18_2130.default.createElement(ComposeInternalButton, { ref: (div) => setContainer(div) }));
    }
    return /* @__PURE__ */ import_react_18_2130.default.createElement(
      Menu,
      {
        renderButton: () => /* @__PURE__ */ import_react_18_2130.default.createElement(ComposeInternalButton, { ref: (div) => setContainer(div) }),
        position: "right",
        align: "center",
        direction: "in",
        popupClassName: cn(styles.workspacesList)
      },
      /* @__PURE__ */ import_react_18_2130.default.createElement(SelectWorkspaceMenu, { value: null, onChange: (ws) => createCard(ws) })
    );
  }
  var import_react_18_2130, useStyles62, useStrings7, ComposeInternalButton;
  var init_compose_button = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/compose-button.tsx"() {
      import_react_18_2130 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_note();
      init_styles();
      init_buttons();
      init_menu();
      init_icon_compose();
      init_typography();
      init_css_objects();
      init_responsive();
      init_theme();
      init_localization();
      init_react_utils();
      init_workspace_indicator();
      init_cards_display_strings();
      init_logger();
      init_create();
      init_query2();
      init_graph();
      useStyles62 = makeStyles(() => ({
        compose: {
          background: brandLightTheme.colors.primaryButton,
          height: styleguide.gridbase * 4,
          boxSizing: "border-box",
          padding: [0, styleguide.gridbase],
          borderRadius: styleguide.gridbase * 2,
          ...styleguide.transition.short,
          transitionProperty: "box-shadow",
          ":hover": {
            boxShadow: brandLightTheme.shadows.z2
          },
          alignItems: "center",
          basedOn: [layout.row]
        },
        text: {
          color: brandLightTheme.colors.primaryButtonText,
          padding: [0, styleguide.gridbase],
          basedOn: [useStyles2.button],
          [MediaQueries.TabletAndMobile]: {
            display: "none"
          }
        },
        workspacesList: {
          maxHeight: styleguide.gridbase * 30,
          overflowY: "auto"
        }
      }));
      useStrings7 = createUseStrings(cards_display_strings_default);
      ComposeInternalButton = import_react_18_2130.default.forwardRef(
        ({ className }, ref) => {
          const styles = useStyles62();
          const strings = useStrings7();
          return /* @__PURE__ */ import_react_18_2130.default.createElement("div", { className: cn(styles.compose, className), ref }, /* @__PURE__ */ import_react_18_2130.default.createElement(IconCompose, null), /* @__PURE__ */ import_react_18_2130.default.createElement("span", { className: cn(styles.text) }, strings.compose));
        }
      );
    }
  });

  // styles/components/new-icons/icon-group.tsx
  function IconGroup({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2131.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 1H15",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linecap": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 15H15",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linecap": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M15 1L15 15",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linecap": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M1 1L0.999999 15",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linecap": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "rect",
        {
          opacity: "0.7",
          x: "4.5",
          y: "4.5",
          width: "2",
          height: "2",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linejoin": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "rect",
        {
          opacity: "0.7",
          x: "4.5",
          y: "9.5",
          width: "2",
          height: "2",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linejoin": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "rect",
        {
          opacity: "0.7",
          x: "9.5",
          y: "4.5",
          width: "2",
          height: "2",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linejoin": "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2131.default.createElement(
        "rect",
        {
          opacity: "0.7",
          x: "9.5",
          y: "9.5",
          width: "2",
          height: "2",
          stroke: "#262626",
          "stroke-width": "2",
          "stroke-linejoin": "round"
        }
      )
    );
  }
  var import_react_18_2131;
  var init_icon_group = __esm({
    "styles/components/new-icons/icon-group.tsx"() {
      import_react_18_2131 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/group-by-drop-down.tsx
  function GroupByTagButton({ tag }) {
    const { parentTag, name: childName } = usePartialVertex(tag, [
      "parentTag",
      "name"
    ]);
    const { name: parentName } = usePartialVertex(parentTag.manager, ["name"]);
    return /* @__PURE__ */ import_react_18_2132.default.createElement(Text2, null, `${parentName}/${childName}`);
  }
  function GroupByDropDown() {
    const styles = useStyles63();
    const logger = useLogger();
    const strings = useStrings8();
    const partialFilter = usePartialFilter(["groupBy", "groupByPivot"]);
    const parentTagsQuery = useSharedQuery("parentTags");
    const setGroup = (0, import_react_18_2132.useCallback)(
      (group) => {
        logger.log({
          severity: "INFO",
          event: "FilterChange",
          type: "groupBy:" + group
        });
        partialFilter.groupBy = group;
      },
      [logger, partialFilter]
    );
    const renderButton = (0, import_react_18_2132.useCallback)(() => {
      const content = partialFilter.groupBy === "tag" ? /* @__PURE__ */ import_react_18_2132.default.createElement(
        GroupByTagButton,
        {
          tag: partialFilter.groupByPivot.manager
        }
      ) : /* @__PURE__ */ import_react_18_2132.default.createElement(Text2, null, strings[partialFilter.groupBy]);
      return /* @__PURE__ */ import_react_18_2132.default.createElement("div", { className: cn(styles.dropDownButton) }, /* @__PURE__ */ import_react_18_2132.default.createElement(IconGroup, null), /* @__PURE__ */ import_react_18_2132.default.createElement(Text2, { className: cn(styles.dropDownButtonText) }, strings.groupBy, ":\xA0"), content);
    }, [strings, partialFilter, styles]);
    const setTag = (0, import_react_18_2132.useCallback)(
      (tag) => {
        logger.log({
          severity: "INFO",
          event: "FilterChange",
          type: "groupBy:tag",
          vertex: tag.key
        });
        partialFilter.groupBy = "tag";
        partialFilter.groupByPivot = tag;
      },
      [logger, partialFilter]
    );
    return /* @__PURE__ */ import_react_18_2132.default.createElement(Menu, { renderButton, align: "start" }, /* @__PURE__ */ import_react_18_2132.default.createElement(MenuItem, { onClick: () => setGroup("workspace") }, strings.workspace), /* @__PURE__ */ import_react_18_2132.default.createElement(MenuItem, { onClick: () => setGroup("assignee") }, strings.assignee), /* @__PURE__ */ import_react_18_2132.default.createElement(SecondaryMenuItem, { text: strings.groupByTag }, parentTagsQuery.map((tag) => /* @__PURE__ */ import_react_18_2132.default.createElement(MenuItem, { key: tag.key, onClick: () => setTag(tag) }, tag.name))));
  }
  var import_react_18_2132, useStyles63, useStrings8;
  var init_group_by_drop_down = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/group-by-drop-down.tsx"() {
      import_react_18_2132 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_icon_group();
      init_menu();
      init_texts();
      init_css_objects();
      init_localization();
      init_cards_display_strings();
      init_logger();
      init_app();
      init_query2();
      init_vertex2();
      useStyles63 = makeStyles((theme) => ({
        dropDownButtonText: {
          marginLeft: styleguide.gridbase
        },
        dropDownButton: {
          marginRight: styleguide.gridbase * 3,
          basedOn: [layout.row, layout.centerCenter]
        }
      }));
      useStrings8 = createUseStrings(cards_display_strings_default);
    }
  });

  // styles/components/new-icons/icon-list-view.tsx
  function IconListView({
    size = 24 /* Medium */,
    className,
    isToggled
  }) {
    const color = isToggled ? brandLightTheme.colors.toggleButtonActiveIcon : brandLightTheme.colors.toggleButtonInactiveIcon;
    return /* @__PURE__ */ import_react_18_2133.default.createElement(
      "svg",
      {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2133.default.createElement(
        "path",
        {
          d: "M2.99988 5.47693H20.723",
          stroke: color,
          strokeWidth: "3",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2133.default.createElement(
        "path",
        {
          d: "M2.99988 12.0004H20.723",
          stroke: color,
          strokeWidth: "3",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2133.default.createElement(
        "path",
        {
          d: "M2.99988 18.5228H20.723",
          stroke: color,
          strokeWidth: "3",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_2133;
  var init_icon_list_view = __esm({
    "styles/components/new-icons/icon-list-view.tsx"() {
      import_react_18_2133 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
    }
  });

  // styles/components/new-icons/icon-board-view.tsx
  function IconBoardView({
    size = 24 /* Medium */,
    className,
    isToggled
  }) {
    const color = isToggled ? brandLightTheme.colors.toggleButtonActiveIcon : brandLightTheme.colors.toggleButtonInactiveIcon;
    return /* @__PURE__ */ import_react_18_2134.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2134.default.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M3 3C2.44772 3 2 3.44772 2 4L2 11C2 11.5523 2.44772 12 3 12H7C7.55229 12 8 11.5523 8 11V4C8 3.44772 7.55229 3 7 3L3 3Z",
          fill: color
        }
      ),
      /* @__PURE__ */ import_react_18_2134.default.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M10.4998 3C9.94747 3 9.49976 3.44772 9.49976 4L9.49976 20C9.49976 20.5523 9.94747 21 10.4998 21H14.4998C15.052 21 15.4998 20.5523 15.4998 20L15.4998 4C15.4998 3.44772 15.052 3 14.4998 3L10.4998 3Z",
          fill: color
        }
      ),
      /* @__PURE__ */ import_react_18_2134.default.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M18.0002 3C17.448 3 17.0002 3.44772 17.0002 4L17.0002 16C17.0002 16.5523 17.448 17 18.0002 17H22.0002C22.5525 17 23.0002 16.5523 23.0002 16V4C23.0002 3.44772 22.5525 3 22.0002 3L18.0002 3Z",
          fill: color
        }
      )
    );
  }
  var import_react_18_2134;
  var init_icon_board_view = __esm({
    "styles/components/new-icons/icon-board-view.tsx"() {
      import_react_18_2134 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_theme();
      init_types2();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/view-toggle.tsx
  function ViewToggle({ className }) {
    const styles = useStyles64();
    const logger = useLogger();
    const strings = useStrings9();
    const partialFilter = usePartialFilter(["viewType"]);
    const setView = (0, import_react_18_2135.useCallback)(
      (type) => {
        logger.log({
          severity: "INFO",
          event: "Navigation",
          type,
          source: "toolbar"
        });
        partialFilter.viewType = type;
      },
      [logger, partialFilter]
    );
    return /* @__PURE__ */ import_react_18_2135.default.createElement("div", { className: cn(className, styles.container) }, /* @__PURE__ */ import_react_18_2135.default.createElement(tooltip_default, { text: strings.list }, /* @__PURE__ */ import_react_18_2135.default.createElement(
      Button,
      {
        className: cn(
          styles.toggleButton,
          partialFilter.viewType === "list" /* List */ && styles.selected
        ),
        onClick: () => setView("list" /* List */)
      },
      /* @__PURE__ */ import_react_18_2135.default.createElement(IconListView, { isToggled: partialFilter.viewType === "list" /* List */ })
    )), /* @__PURE__ */ import_react_18_2135.default.createElement(tooltip_default, { text: strings.board }, /* @__PURE__ */ import_react_18_2135.default.createElement(
      Button,
      {
        className: cn(
          styles.toggleButton,
          partialFilter.viewType === "board" /* Board */ && styles.selected
        ),
        onClick: () => setView("board" /* Board */)
      },
      /* @__PURE__ */ import_react_18_2135.default.createElement(
        IconBoardView,
        {
          isToggled: partialFilter.viewType === "board" /* Board */
        }
      )
    )));
  }
  var import_react_18_2135, HEIGHT, useStyles64, useStrings9;
  var init_view_toggle = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/view-toggle.tsx"() {
      import_react_18_2135 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_buttons();
      init_icon_list_view();
      init_icon_board_view();
      init_tooltip();
      init_css_objects();
      init_localization();
      init_display_bar();
      init_cards_display_strings();
      init_logger();
      init_app();
      HEIGHT = styleguide.gridbase * 4;
      useStyles64 = makeStyles((theme) => ({
        container: {
          basedOn: [layout.row]
        },
        toggleButton: {
          height: HEIGHT,
          minWidth: styleguide.gridbase * 4,
          padding: [0, styleguide.gridbase * 1.5],
          boxSizing: "border-box",
          backgroundColor: theme.background[400],
          color: theme.background[600],
          ":first-child": {
            borderTopLeftRadius: HEIGHT / 2,
            borderBottomLeftRadius: HEIGHT / 2
          },
          ":last-child": {
            borderTopRightRadius: HEIGHT / 2,
            borderBottomRightRadius: HEIGHT / 2
          },
          alignItems: "center",
          basedOn: [layout.row]
        },
        text: {
          justifyContent: "center",
          basedOn: [layout.flexSpacer, layout.row]
        },
        selected: {
          color: theme.background[0],
          backgroundColor: theme.background[600]
        }
      }));
      useStrings9 = createUseStrings(cards_display_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/index.tsx
  function SortByDropDown({ source }) {
    const styles = useStyles65();
    const strings = useStrings10();
    const logger = useLogger();
    const partialFilter = usePartialFilter(["sortBy"]);
    const sortBy = partialFilter.sortBy;
    const renderSelected = (0, import_react_18_2136.useCallback)(
      () => /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(styles.dropDownButton) }, /* @__PURE__ */ import_react_18_2136.default.createElement(IconSort, null), /* @__PURE__ */ import_react_18_2136.default.createElement(Text2, { className: cn(styles.dropDownButtonText) }, strings[sortBy])),
      [strings, sortBy, styles]
    );
    const onChange = (0, import_react_18_2136.useCallback)(
      (val) => {
        logger.log({
          severity: "INFO",
          event: "FilterChange",
          type: "sortBy:" + val,
          vertex: partialFilter.key,
          source
        });
        partialFilter.sortBy = val;
      },
      [logger, partialFilter, source]
    );
    return /* @__PURE__ */ import_react_18_2136.default.createElement(
      DropDown,
      {
        value: sortBy,
        onChange,
        renderSelected
      },
      FilterSortByValues.map((x) => /* @__PURE__ */ import_react_18_2136.default.createElement(DropDownItem, { value: x, key: x }, /* @__PURE__ */ import_react_18_2136.default.createElement(Text2, null, strings[x])))
    );
  }
  function ExtraFilters(props) {
    let content = null;
    if (props.viewType === "list" /* List */) {
      content = /* @__PURE__ */ import_react_18_2136.default.createElement(SortByDropDown, null);
    } else {
      content = /* @__PURE__ */ import_react_18_2136.default.createElement(GroupByDropDown, null);
    }
    return /* @__PURE__ */ import_react_18_2136.default.createElement(import_react_18_2136.default.Fragment, null, content);
  }
  function FilterButton({ showFilters, setShowFilters }) {
    const styles = useStyles65();
    const strings = useStrings10();
    const logger = useLogger();
    const filterButtonClicked = (0, import_react_18_2136.useCallback)(() => {
      logger.log({
        severity: "INFO",
        event: "Click",
        source: "toolbar:filterButton",
        flag: !showFilters
      });
      setShowFilters((x) => !x);
    }, [logger, showFilters, setShowFilters]);
    return /* @__PURE__ */ import_react_18_2136.default.createElement(
      Button,
      {
        onClick: filterButtonClicked,
        className: cn(styles.filterButton, showFilters && styles.hasFilters)
      },
      /* @__PURE__ */ import_react_18_2136.default.createElement(IconFilter, null),
      /* @__PURE__ */ import_react_18_2136.default.createElement(Text2, { className: cn(styles.dropDownButtonText) }, strings.filter)
    );
  }
  function NoteTypeToggle() {
    const strings = useStrings10();
    const styles = useStyles65();
    const filterContext2 = useFilterContext2();
    const graph = useGraphManager();
    return /* @__PURE__ */ import_react_18_2136.default.createElement(
      TabsHeader,
      {
        selected: filterContext2.filter.getVertexProxy().noteType,
        setSelected: (type) => filterContext2.setFilter(
          graph.getVertexManager(
            type === "note" /* Note */ ? FilterKeyNotes2 : FilterKeyTasks2
          )
        ),
        className: cn(styles.noteTypeToggle)
      },
      /* @__PURE__ */ import_react_18_2136.default.createElement(TabButton, { value: "task" /* Task */ }, strings.task),
      /* @__PURE__ */ import_react_18_2136.default.createElement(TabButton, { value: "note" /* Note */ }, strings.note)
    );
  }
  function DisplayBar(props) {
    const { setViewType, className, showFilters, setShowFilters, ...rest } = props;
    const { viewType } = props;
    const styles = useStyles65();
    return (
      // <UserOnboard playAfter={After} tutorialId="DISPLAY_BAR" steps={steps}>
      /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(styles.bar, className) }, /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(styles.barRow, styles.viewRow) }, /* @__PURE__ */ import_react_18_2136.default.createElement(NoteTypeToggle, null)), /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(styles.barRow) }, /* @__PURE__ */ import_react_18_2136.default.createElement(
        FilterButton,
        {
          showFilters,
          setShowFilters
        }
      ), /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(styles.separator) }), /* @__PURE__ */ import_react_18_2136.default.createElement(ViewToggle, { className: cn(styles.viewToggle) }), /* @__PURE__ */ import_react_18_2136.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_2136.default.createElement(ExtraFilters, { ...rest }), /* @__PURE__ */ import_react_18_2136.default.createElement(ToolbarRightItem, null, /* @__PURE__ */ import_react_18_2136.default.createElement(ComposeButton, null))))
    );
  }
  var import_react_18_2136, BUTTON_HEIGHT, SIDES_PADDING, MOBILE_PADDING, TABLET_PADDING, useStyles65, useStrings10;
  var init_display_bar = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/index.tsx"() {
      import_react_18_2136 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_note();
      init_styles();
      init_buttons();
      init_icon_sort();
      init_icon_filter();
      init_drop_down();
      init_tabs();
      init_texts();
      init_css_objects();
      init_theme();
      init_responsive();
      init_localization();
      init_toolbar();
      init_cards_display_strings();
      init_compose_button();
      init_group_by_drop_down();
      init_view_toggle();
      init_scheme_types();
      init_logger();
      init_app();
      init_graph();
      BUTTON_HEIGHT = styleguide.gridbase * 4;
      SIDES_PADDING = styleguide.gridbase * 11;
      MOBILE_PADDING = styleguide.gridbase;
      TABLET_PADDING = styleguide.gridbase;
      useStyles65 = makeStyles(() => ({
        bar: {
          justifyContent: "flex-end",
          alignItems: "stretch",
          marginTop: styleguide.gridbase * 2,
          boxSizing: "border-box",
          basedOn: [layout.column]
        },
        barRow: {
          padding: [0, SIDES_PADDING],
          height: styleguide.gridbase * 6,
          basedOn: [layout.row, layout.centerCenter]
        },
        viewRow: {
          borderBottom: `${brandLightTheme.supporting.O1} 1px solid`,
          marginBottom: styleguide.gridbase,
          padding: 0
        },
        filters: {
          padding: [0, SIDES_PADDING],
          [MediaQueries.TabletOnly]: {
            padding: [0, TABLET_PADDING]
          },
          [MediaQueries.Mobile]: {
            padding: [0, MOBILE_PADDING]
          }
        },
        dropDownButtonText: {
          marginLeft: styleguide.gridbase
        },
        dropDownButton: {
          marginRight: styleguide.gridbase * 3,
          basedOn: [layout.row, layout.centerCenter]
        },
        viewToggle: {},
        noteTypeToggle: {
          width: styleguide.gridbase * 40
        },
        separator: {
          height: BUTTON_HEIGHT,
          width: 1,
          margin: [0, styleguide.gridbase],
          background: brandLightTheme.secondary.s5
        },
        filterButton: {
          height: BUTTON_HEIGHT,
          borderRadius: BUTTON_HEIGHT * 0.5,
          padding: [0, styleguide.gridbase * 2],
          background: brandLightTheme.colors.secondaryButton,
          color: brandLightTheme.colors.text,
          basedOn: [useButtonStyles.button]
        },
        hasFilters: {
          backgroundColor: brandLightTheme.colors.secondaryButtonActive
        }
      }));
      useStrings10 = createUseStrings(cards_display_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/filter-checkbox.tsx
  function getChecked(checked) {
    switch (checked) {
      case -1 /* Partial */:
      case 0 /* Off */:
        return false;
      case 1 /* On */:
        return true;
      default:
        return !!checked;
    }
  }
  function CheckedIcon() {
    return /* @__PURE__ */ import_react_18_2137.default.createElement(
      "svg",
      {
        width: "8",
        height: "8",
        viewBox: "0 0 8 8",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2137.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.82642 6.73901L7.00024 1",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2137.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M1.00024 4.13037L2.8263 6.73901",
          stroke: "#1960CF",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  function PartialIcon() {
    return /* @__PURE__ */ import_react_18_2137.default.createElement(
      "svg",
      {
        width: "8",
        height: "2",
        viewBox: "0 0 8 2",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2137.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M1 1L7 1",
          stroke: "#1960CF",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  function FilterCheckbox({ checked, onChecked }) {
    const styles = useStyles66();
    const isChecked = getChecked(checked);
    const onChange = (e) => {
      e.stopPropagation();
      onChecked();
    };
    return /* @__PURE__ */ import_react_18_2137.default.createElement("label", { className: cn(styles.checkbox) }, isChecked && /* @__PURE__ */ import_react_18_2137.default.createElement(CheckedIcon, null), checked === -1 /* Partial */ && /* @__PURE__ */ import_react_18_2137.default.createElement(PartialIcon, null), /* @__PURE__ */ import_react_18_2137.default.createElement(
      "input",
      {
        onChange,
        className: cn(styles.input),
        type: "checkbox",
        checked: isChecked
      }
    ));
  }
  var import_react_18_2137, SIZE, useStyles66;
  var init_filter_checkbox = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/filter-checkbox.tsx"() {
      import_react_18_2137 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styles();
      SIZE = styleguide.gridbase * 2;
      useStyles66 = makeStyles(
        (theme) => ({
          checkbox: {
            display: "inline-flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            width: SIZE,
            height: SIZE,
            borderRadius: SIZE * 0.5,
            background: theme.background[0]
          },
          input: {
            appearance: "none",
            margin: 0
          }
        }),
        "filter-checkbox_e52d7c"
      );
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/filters.strings.json
  var filters_strings_default;
  var init_filters_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/filters.strings.json"() {
      filters_strings_default = {
        en: {
          assignees: "Assignees",
          showMore: "Show More...",
          showLess: "Show less"
        }
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/index.tsx
  function AssigneeView({
    selected,
    user,
    onToggle
  }) {
    const u = usePartialVertex(user, ["name"]);
    const styles = useStyles67();
    return /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.sectionOption), onClick: onToggle }, /* @__PURE__ */ import_react_18_2138.default.createElement(RadioCheckBox, { checked: selected, onChecked: onToggle }), " ", u.name);
  }
  function FilterBackdrop({
    style,
    onClick
  }) {
    const styles = useStyles67();
    const click = (0, import_react_18_2138.useCallback)(
      (e) => {
        e.stopPropagation();
        e.preventDefault();
        if (onClick) {
          onClick();
        }
      },
      [onClick]
    );
    return createUniversalPortal(
      /* @__PURE__ */ import_react_18_2138.default.createElement("div", { style, className: styles.backdrop, onClick: click })
    );
  }
  function FiltersView({
    className,
    isVisible,
    setIsVisible
  }) {
    const styles = useStyles67();
    return /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.root) }, /* @__PURE__ */ import_react_18_2138.default.createElement(Layer, null, (style) => /* @__PURE__ */ import_react_18_2138.default.createElement(import_react_18_2138.default.Fragment, null, isVisible && /* @__PURE__ */ import_react_18_2138.default.createElement(
      FilterBackdrop,
      {
        style,
        onClick: () => setIsVisible(false)
      }
    ), /* @__PURE__ */ import_react_18_2138.default.createElement(
      "div",
      {
        className: cn(
          className,
          styles.animator,
          !isVisible && styles.hide
        ),
        style: { zIndex: style.zIndex + 1 }
      },
      /* @__PURE__ */ import_react_18_2138.default.createElement(InternalFiltersView, null)
    ))));
  }
  function toggleTag(filter, tag) {
    if (tag.parent) {
      if (filter.tags.has(tag)) {
        filter.tags.delete(tag);
      } else {
        filter.tags.add(tag);
      }
    } else {
      for (const t of tag.childTagsQuery.results) {
        const childTag = t.getVertexProxy();
        if (filter.tags.has(childTag)) {
          filter.tags.delete(childTag);
        } else {
          filter.tags.add(childTag);
        }
      }
    }
  }
  function getTagState(filter, tag) {
    const filterTags = filter.tags;
    if (filterTags.has(tag)) {
      return 1 /* On */;
    }
    if (!tag.parentTag) {
      for (const childMgr of tag.childTagsQuery.results) {
        if (filterTags.has(childMgr.getVertexProxy())) {
          return -1 /* Partial */;
        }
      }
    }
    return 0 /* Off */;
  }
  function TagSection({ tag }) {
    const styles = useStyles67();
    const strings = useStrings11();
    const [showMore, setShowMore] = (0, import_react_18_2138.useState)(false);
    const parentTag = useVertex(tag);
    const childTagsQuery = useExistingQuery(parentTag.childTagsQuery);
    const filter = useFilter();
    let visibleTags = useVertices(childTagsQuery.results);
    const hasMore = visibleTags.length > SECTION_SIZE;
    if (!showMore) {
      visibleTags = visibleTags.slice(0, SECTION_SIZE);
    }
    return /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.section) }, /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.sectionHeader) }, /* @__PURE__ */ import_react_18_2138.default.createElement(
      RadioCheckBox,
      {
        checked: getTagState(filter, parentTag),
        onChecked: () => toggleTag(filter, parentTag)
      }
    ), parentTag.name), visibleTags.map((childTag) => /* @__PURE__ */ import_react_18_2138.default.createElement(
      "div",
      {
        className: cn(styles.sectionOption),
        key: childTag.key,
        onClick: () => toggleTag(filter, childTag)
      },
      /* @__PURE__ */ import_react_18_2138.default.createElement(
        RadioCheckBox,
        {
          checked: getTagState(filter, childTag),
          onChecked: () => toggleTag(filter, childTag)
        }
      ),
      childTag.name
    )), hasMore && /* @__PURE__ */ import_react_18_2138.default.createElement(
      "div",
      {
        onClick: () => setShowMore((x) => !x),
        className: cn(styles.showMore)
      },
      showMore ? strings.showLess : strings.showMore
    ));
  }
  function InternalFiltersView() {
    const styles = useStyles67();
    const strings = useStrings11();
    const filter = useFilter();
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    const selectedWorkspaces = useVertices(selectedWorkspacesQuery.results);
    const parentTagsQuery = useSharedQuery("parentTags");
    const assigneesSet = /* @__PURE__ */ new Set();
    for (const ws of selectedWorkspaces) {
      update2(assigneesSet, ws.users);
    }
    let assignees = Array.from(assigneesSet).sort(coreValueCompare);
    const [showMore, setShowMore] = (0, import_react_18_2138.useState)(false);
    const hasMore = assignees.length > SECTION_SIZE;
    if (!showMore) {
      assignees = assignees.slice(0, SECTION_SIZE);
    }
    return /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.filtersView) }, /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.section) }, /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.sectionHeader) }, strings.assignees), assignees.map((user) => /* @__PURE__ */ import_react_18_2138.default.createElement(
      AssigneeView,
      {
        user,
        ...user,
        onToggle: () => toggleMembership(filter.assignees, user)
      }
    )), hasMore && /* @__PURE__ */ import_react_18_2138.default.createElement(
      "div",
      {
        onClick: () => setShowMore((x) => !x),
        className: cn(styles.showMore)
      },
      showMore ? strings.showLess : strings.showMore
    )), parentTagsQuery.map((tag) => /* @__PURE__ */ import_react_18_2138.default.createElement(TagSection, { tag })));
  }
  function RadioCheckBox({
    checked,
    onChecked
  }) {
    const styles = useStyles67();
    return /* @__PURE__ */ import_react_18_2138.default.createElement("div", { className: cn(styles.checkbox) }, /* @__PURE__ */ import_react_18_2138.default.createElement(FilterCheckbox, { checked, onChecked }));
  }
  var import_react_18_2138, useStyles67, useStrings11, SECTION_SIZE;
  var init_filters = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/index.tsx"() {
      import_react_18_2138 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_layer();
      init_typography();
      init_css_objects();
      init_theme();
      init_ssr();
      init_vertex2();
      init_localization();
      init_filter_checkbox();
      init_filters_strings();
      init_query2();
      init_set();
      init_comparable();
      init_app();
      useStyles67 = makeStyles(
        () => ({
          root: {
            position: "relative",
            overflow: "visible"
          },
          animator: {
            position: "absolute",
            top: "100%",
            left: 0,
            right: 0,
            opacity: 1,
            transform: "translateY(0)",
            overflow: "hidden",
            ...styleguide.transition.standard,
            transitionProperty: "all",
            background: brandLightTheme.secondary.s2,
            boxShadow: brandLightTheme.shadows.z1
          },
          hide: {
            pointerEvents: "none",
            boxShadow: "none",
            opacity: 0,
            transform: `translateY(${styleguide.gridbase * -2}px)`
          },
          container: {},
          filtersView: {
            width: "100%",
            maxHeight: styleguide.gridbase * 30,
            overflowY: "auto",
            boxSizing: "border-box",
            padding: [styleguide.gridbase * 2, 0],
            flexWrap: "wrap",
            basedOn: [layout.row]
          },
          section: {
            width: styleguide.gridbase * 22,
            marginRight: styleguide.gridbase * 4,
            marginBottom: styleguide.gridbase * 2
          },
          sectionHeader: {
            marginBottom: styleguide.gridbase,
            alignItems: "center",
            cursor: "pointer",
            userSelect: "none",
            basedOn: [useStyles2.bold, layout.row]
          },
          sectionOption: {
            height: styleguide.gridbase * 2.5,
            marginBottom: styleguide.gridbase * 0.5,
            alignItems: "center",
            cursor: "pointer",
            userSelect: "none",
            basedOn: [useStyles2.text, layout.row]
          },
          showMore: {
            height: styleguide.gridbase * 2.5,
            marginBottom: styleguide.gridbase * 0.5,
            textDecoration: "underline",
            alignItems: "center",
            cursor: "pointer",
            userSelect: "none",
            basedOn: [useStyles2.text, layout.row]
          },
          backdrop: {
            position: "absolute",
            top: 0,
            right: 0,
            left: 0,
            bottom: 0
          },
          checkbox: {
            marginRight: styleguide.gridbase,
            basedOn: [layout.column, layout.centerCenter]
          }
        }),
        "filters_965b1f"
      );
      useStrings11 = createUseStrings(filters_strings_default);
      SECTION_SIZE = 5;
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/active-filters.tsx
  function CloseIcon({ onClick }) {
    const theme = useTheme();
    const styles = useStyles68();
    return /* @__PURE__ */ import_react_18_2139.default.createElement("div", { onClick, className: cn(styles.closeIcon) }, /* @__PURE__ */ import_react_18_2139.default.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ import_react_18_2139.default.createElement(
      "path",
      {
        opacity: "0.6",
        d: "M9.41436 9.41436L6.58594 6.58594",
        stroke: theme.background.text,
        strokeWidth: "2",
        strokeLinecap: "round"
      }
    ), /* @__PURE__ */ import_react_18_2139.default.createElement(
      "path",
      {
        opacity: "0.6",
        d: "M6.58594 9.41406L9.41436 6.58564",
        stroke: theme.background.text,
        strokeWidth: "2",
        strokeLinecap: "round"
      }
    )));
  }
  function AssigneePill2({
    user,
    onDelete
  }) {
    const styles = useStyles68();
    const { name } = usePartialVertex(user, ["name"]);
    return /* @__PURE__ */ import_react_18_2139.default.createElement("div", { className: cn(styles.filterPill) }, /* @__PURE__ */ import_react_18_2139.default.createElement("span", { className: cn(styles.filterText) }, name), /* @__PURE__ */ import_react_18_2139.default.createElement(CloseIcon, { onClick: () => onDelete(user) }));
  }
  function TagPill2({
    tag,
    onDelete
  }) {
    const styles = useStyles68();
    return /* @__PURE__ */ import_react_18_2139.default.createElement("div", { className: cn(styles.filterPill) }, /* @__PURE__ */ import_react_18_2139.default.createElement("span", { className: cn(styles.filterText) }, tag.name), /* @__PURE__ */ import_react_18_2139.default.createElement(CloseIcon, { onClick: () => onDelete(tag) }));
  }
  function ActiveFiltersView({ className }) {
    const styles = useStyles68();
    const filter = useFilter();
    const showClear = filter.tags.size + filter.assignees.size > 0;
    return /* @__PURE__ */ import_react_18_2139.default.createElement("div", { className }, /* @__PURE__ */ import_react_18_2139.default.createElement("div", { className: cn(styles.filtersView) }, Array.from(filter.assignees).sort(coreValueCompare).map((user) => /* @__PURE__ */ import_react_18_2139.default.createElement(
      AssigneePill2,
      {
        key: user.key,
        user: user.manager,
        onDelete: () => filter.assignees.delete(user)
      }
    )), Array.from(filter.tags).sort(coreValueCompare).map((tag) => /* @__PURE__ */ import_react_18_2139.default.createElement(
      TagPill2,
      {
        key: tag.key,
        tag,
        onDelete: () => filter.tags.delete(tag)
      }
    )), showClear && /* @__PURE__ */ import_react_18_2139.default.createElement(
      Button,
      {
        onClick: () => {
          filter.assignees.clear();
          filter.tags.clear();
        }
      },
      "Clear"
    )));
  }
  var import_react_18_2139, useStyles68;
  var init_active_filters = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/filters/active-filters.tsx"() {
      import_react_18_2139 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_buttons();
      init_typography();
      init_css_objects();
      init_theme();
      init_vertex2();
      init_app();
      init_comparable();
      useStyles68 = makeStyles(
        () => ({
          filtersView: {
            alignItems: "center",
            basedOn: [layout.row]
          },
          filterPill: {
            height: styleguide.gridbase * 2,
            borderRadius: styleguide.gridbase,
            background: brandLightTheme.mono.m1,
            marginRight: styleguide.gridbase,
            alignItems: "center",
            justifyContent: "space-between",
            basedOn: [layout.row]
          },
          filterText: {
            marginLeft: styleguide.gridbase * 0.5,
            fontSize: "10px",
            lineHeight: "14px",
            basedOn: [useStyles2.text]
          },
          closeIcon: {
            cursor: "pointer",
            marginLeft: styleguide.gridbase * 0.5,
            height: "100%",
            basedOn: [layout.column, layout.centerCenter]
          }
        }),
        "active-filters_347c3d"
      );
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/search-field.tsx
  function SearchField({ query, setQuery }) {
    const styles = useStyles69();
    const strings = useStrings12();
    const logger = useLogger();
    return /* @__PURE__ */ import_react_18_2140.default.createElement("div", { className: cn(styles.base) }, /* @__PURE__ */ import_react_18_2140.default.createElement(
      TextField_default,
      {
        placeholder: strings.search,
        value: query,
        onChange: (e) => setQuery(e.target.value),
        onFocus: () => {
          logger.log({
            severity: "INFO",
            event: "Start",
            source: "toolbar:search",
            flow: "edit"
          });
        },
        onBlur: () => {
          logger.log({
            severity: "INFO",
            event: "End",
            source: "toolbar:search",
            flow: "edit"
          });
        },
        className: cn(styles.input)
      }
    ), query && /* @__PURE__ */ import_react_18_2140.default.createElement(Button, { className: cn(styles.clear), onClick: () => setQuery("") }, strings.clear));
  }
  var import_react_18_2140, useStyles69, useStrings12;
  var init_search_field = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/display-bar/search-field.tsx"() {
      import_react_18_2140 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_buttons();
      init_inputs();
      init_css_objects();
      init_localization();
      init_cards_display_strings();
      init_theme();
      init_TextField();
      init_logger();
      useStyles69 = makeStyles(() => ({
        base: {
          position: "relative",
          marginLeft: styleguide.gridbase * 3,
          basedOn: [layout.row, layout.flex]
        },
        input: {
          background: "radial-gradient(92.31% 92.31% at 7.69% 7.69%, rgba(255, 255, 255, 0.3) 0%, rgba(229, 229, 229, 0.3) 100%)",
          width: "100%",
          height: styleguide.gridbase * 4,
          border: `${brandLightTheme.primary.p9} solid 1px`,
          borderRadius: styleguide.gridbase * 2,
          basedOn: [useStyles15.textField]
        },
        icon: {
          alignItems: "flex-start",
          marginTop: styleguide.gridbase
        },
        clear: {
          position: "absolute",
          right: styleguide.gridbase,
          top: "50%",
          transform: "translateY(-50%)",
          fontSize: 12,
          height: styleguide.gridbase * 2,
          boxSizing: "border-box",
          padding: [0, styleguide.gridbase],
          borderRadius: styleguide.gridbase * 0.75,
          backgroundColor: brandLightTheme.mono.m1,
          color: brandLightTheme.colors.text
        }
      }));
      useStrings12 = createUseStrings(cards_display_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/empty-illustration.tsx
  function EmptyActivity({
    className,
    style
  }) {
    return /* @__PURE__ */ import_react_18_2141.default.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: "689",
        height: "369",
        viewBox: "0 0 689 369"
      },
      /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "none", fillRule: "evenodd", opacity: ".6" }, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M378.846 321.074h57.084v28.706h-57.084zM377.367 286.005h57.084v21.754h-57.084zM372.292 307.765h57.084v9.822h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M375.729 317.586h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M366.647 321.074h57.084v28.706h-57.084zM365.167 286.005h57.084v21.754h-57.084zM360.092 307.765h57.084v9.822h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M363.529 317.586h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M423.731 329.044v-7.97h-51.174zM379.332 255.291h57.084v17.741h-57.084zM385.267 273.032h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M367.133 255.291h57.084v17.741h-57.084zM373.068 273.032h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M430.152 278.273v-5.241h-33.651zM417.176 311.714v-3.95h-25.354z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M387.451 285.427h2.722v1.156h-2.722zM393.029 285.427h31.594v1.156h-31.594z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M377.769 307.181h30.233v1.156h-30.233zM365.167 307.181h8.556v1.156h-8.556zM377.486 272.454h40.334v1.156h-40.334z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M435.029 293.159h-1.156v-7.732h7.9V273.61h-5.934v-9.448h1.156v8.292h5.934v14.129h-7.9zM435.839 255.291h1.156v4.645h-1.156z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M432.464 272.454h6.265v1.156h-6.265z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M442.508 305.395h61.935v44.385h-61.935z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M429.272 305.395h61.935v44.385h-61.935z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M442.508 295.757h64.132v9.637h-64.132z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M427.075 295.757h64.132v9.637h-64.132z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M491.207 312.615v-7.22h-41.368z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M466.371 317.442h-12.264a2.929 2.929 0 1 1 0-5.856h12.264a2.929 2.929 0 1 1 0 5.856z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M446.2 322.695h28.079v14.733H446.2z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#624AC9",
          d: "M442.508 304.817h64.132v1.156h-64.132zM434.352 304.817h3.468v1.156h-3.468z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M426.498 295.757h1.156v9.637h-1.156zM428.694 331.34h1.156v2.383h-1.156zM428.694 305.395h1.156v20.24h-1.156z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M125.412 321.074h57.084v28.706h-57.084zM130.718 286.005h57.084v21.754h-57.084zM120.61 307.765h57.085v9.822H120.61z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M122.294 317.586h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M113.212 321.074h57.084v28.706h-57.084zM118.518 286.005h57.084v21.754h-57.084zM108.412 307.765h57.084v9.822h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M110.094 317.586h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M170.296 329.044v-7.97h-51.174zM122.705 268.22h57.084v17.741h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M110.505 268.22h57.084v17.741h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M165.495 311.714v-3.95h-25.354zM82.353 262.737h57.084v28.706H82.353z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M75.603 291.443h57.084v17.741H75.603zM80.874 227.668h57.084v21.754H80.874zM75.799 249.428h57.084v9.822H75.799z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M79.236 259.249h57.084v3.487H79.236z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M70.154 262.737h57.084v28.706H70.154z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M63.403 291.443h57.084v17.741H63.403zM68.674 227.668h57.084v21.754H68.674zM63.599 249.428h57.084v9.822H63.599z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M67.036 259.249h57.084v3.487H67.036z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M127.238 270.707v-7.97H76.064zM120.487 295.392v-3.949H95.133zM72.86 196.954h57.085v17.741H72.86zM74.615 214.695h57.084v12.973H74.615z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M60.66 196.954h57.085v17.741H60.66zM62.416 214.695H119.5v12.973H62.416z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M119.5 219.936v-5.241H85.847zM120.683 253.377v-3.95H95.328z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#8B77E8", d: "M126.47 309.183h14.896v40.597H126.47z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M56.771 309.183h69.699v40.597H56.771z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M149.605 327.855H134.71l-8.24-18.672h14.895zM126.618 338.737v-10.882H64.27z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M115.449 309.183h11.02v21.897h-11.02z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M118.23 327.855h-69.7l8.24-18.672h69.7z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#FFF" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M111.5 327.277h2.059v1.156H111.5zM54.737 312.368l1.119-2.537 1.058.467-1.12 2.537zM105.47 328.433H47.644l5.838-13.23 1.058.467-5.123 11.607h56.053z" })), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#624AC9",
          d: "M91.617 308.606h49.748v1.156H91.617zM78.393 308.606h7.518v1.156h-7.518z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M183.074 349.78h-1.156v-28.128H178.8v-3.488h-1.683v-10.977l10.107-.005v-20.6h-9.852v-1.155h11.007v22.91l-10.106.005v8.667h1.683v3.487h3.118z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M163.599 285.382h16.189v1.156h-16.19zM172.17 316.864h7.208v1.156h-7.207zM132.109 302.536h1.156v2.859h-1.156zM133.265 298.02h-1.156v-7.155h6.75v-27.55h-3.117v-3.488h-3.437V248.85l5.075-.005v-20.6h-6.259v-8.802h1.156v7.647h6.258V250l-5.075.005v8.666h3.437v3.488h3.118v29.862h-6.75z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M189.26 336.036h27.616v2.66H189.26zM189.26 347.12h27.616v2.66H189.26z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FF95A9", d: "M189.26 349.78v-13.744h2.661v13.744z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFB0BF", d: "M136.569 336.036h52.692v13.744h-52.692z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { transform: "translate(174.95 338.1)" }, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "5.08",
          cy: "4.833",
          fill: "#FFF",
          rx: "3.99",
          ry: "3.991",
          transform: "rotate(-76.714 5.08 4.833)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "5.098",
          cy: "4.812",
          fill: "#40327A",
          rx: "2.661",
          ry: "2.66",
          transform: "rotate(-22.5 5.098 4.812)"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M191.922 338.696h21.989v8.424h-21.99z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M143.754 339.527h23.172v6.761h-23.172z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#8B77E8", d: "M191.922 338.696h24.954v1.156h-24.954z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M76.505 168.225h57.084v28.706H76.505zM82.967 146.471h57.084v21.754H82.967z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M64.305 168.225h57.084v28.706H64.305zM70.767 146.471h57.084v21.754H70.767z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M121.39 175.618v-7.393H73.922zM74.954 115.757h57.084v17.741H74.954z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M76.709 133.497h57.084v12.973H76.709z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M62.754 115.757h57.084v17.741H62.754z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M64.509 133.497h57.084v12.973H64.509z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M127.33 202.323v-5.24H93.68z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M133.215 141.441h1.156v1.372h-1.156zM134.37 139.13h-1.156v-5.055h-1.754v-18.318h1.156v17.162h1.754z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M113.582 132.919h18.456v1.156h-18.456zM140.629 168.803h-27.94v-1.156h26.784v-1.773h1.156zM139.473 161.83h1.156v1.348h-1.156zM134.167 197.509h-9.023v-1.156h7.867v-25.045h1.156z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M129.367 196.954h1.156v11.043h-1.156zM102.243 167.647h7.242v1.156h-7.242zM90.958 227.09h2.722v1.156h-2.722zM96.536 227.09h31.595v1.156H96.536z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M181.973 290.865h34.902v1.156h-34.902z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { transform: "translate(342.4 159.6)" }, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M10.044 19.67L.968 17.835l1.464-7.246 9.077 1.834z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FF809F", d: "M10.864 30.405h-9.26v-7.392h9.26z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFC359",
          d: "M10.527 40.117l-9.155 1.387-1.108-7.308 9.155-1.387z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M99.36 65.628H5.88V.622h93.48z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M99.36 36.08v14.187H8.26l3.2-.499zM8.26 50.267h91.1v15.361H8.26z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#8B77E8", d: "M63.672 35.198l8.732 30.43h-7.551z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#8B77E8",
          d: "M99.937 66.206H49.706V65.05H98.78v-8.94h1.156z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M44.6 79.88h23.71l-5.216-44.682H44.6zM8.26 14.81V.621h91.1l-3.2.5z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#FFF" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M20.529 23.447l78.737-12.253.178 1.142-78.738 12.252zM48.843 14.34l50.424-7.846.178 1.141-50.424 7.847zM30.652 17.174l10.056-1.565.178 1.142-10.056 1.565z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M26.035 77.569h27.74v2.311h-27.74z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M99.937 21.106h-1.156V1.2h-56.66V.044h57.816zM5.88.044H16.62V1.2H5.88z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M44.023 59.528h1.156v1.3h-1.156zM45.178 56.11h-1.156V34.62h14.656v1.156h-13.5z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#8B77E8", d: "M98.782 52.306h1.156v1.878h-1.156z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M98.782 24.7h1.156v4.928h-1.156zM62.535 35.276l1.148-.134 5.215 44.684-1.148.134z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "54.827",
          cy: "45.654",
          fill: "#8B77E8",
          rx: "4.615",
          ry: "4.613"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M58.428 43.827a4.062 4.062 0 0 0-.777-1.057l.809-.826a5.2 5.2 0 0 1 .998 1.36l-1.03.523zM51.238 49.406a5.145 5.145 0 0 1-1.604-3.752 5.198 5.198 0 0 1 7.214-4.783l-.45 1.064a4.04 4.04 0 0 0-5.608 3.718c0 1.113.443 2.149 1.247 2.918l-.799.835z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M431.858 152.27h57.084v28.706h-57.084zM421.344 180.976h57.084v17.741h-57.084zM437.925 138.961h57.084v9.822h-57.084zM427.668 198.717h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M428.74 148.783h57.084v3.487H428.74z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M419.658 152.27h57.084v28.706h-57.084zM409.144 180.976h57.084v17.741h-57.084zM425.725 138.961h57.084v9.822h-57.084zM415.468 198.717h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M416.541 148.783h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M476.743 160.24v-7.97h-51.174zM466.229 184.926v-3.95h-25.355zM421.213 108.248h57.084v17.741h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M422.968 125.988h57.084v12.973h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M409.014 108.248h57.084v17.741h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M410.768 125.988h57.084v12.973h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M467.852 131.23v-5.242h-33.65zM482.81 142.91v-3.949h-25.355z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M430.94 214.35h-27.614v-2.66h27.615zM430.94 225.435h-27.614v-2.66h27.615z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M428.28 225.434V211.69h2.66v13.744z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M483.633 225.434h-52.692V211.69h52.692z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { transform: "translate(436.027 214.5)" }, /* @__PURE__ */ import_react_18_2141.default.createElement("ellipse", { cx: "4.135", cy: "4.062", fill: "#FFF", rx: "3.991", ry: "3.99" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "4.135",
          cy: "4.062",
          fill: "#40327A",
          rx: "2.661",
          ry: "2.66"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E9E6FF", d: "M428.28 222.774h-21.99v-8.424h21.99z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M476.447 221.942h-23.172v-6.76h23.172z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF8FAA",
          d: "M461.233 225.434h27.615v2.66h-27.615zM461.233 236.518h27.615v2.66h-27.615z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FF8FAA", d: "M461.233 239.178v-13.744h2.66v13.744z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFD259", d: "M408.54 225.434h52.692v13.744H408.54z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { transform: "translate(447.13 227.4)" }, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "4.892",
          cy: "4.94",
          fill: "#FFF",
          rx: "3.99",
          ry: "3.991",
          transform: "rotate(-76.714 4.892 4.94)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "4.895",
          cy: "4.903",
          fill: "#40327A",
          rx: "2.661",
          ry: "2.66",
          transform: "rotate(-22.5 4.895 4.903)"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M463.893 228.095h21.99v8.424h-21.99z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FFF", d: "M415.726 228.926h23.172v6.761h-23.172z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#624AC9", d: "M414.466 211.112h69.167v1.156h-69.167z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M485.33 211.69h-1.156v-12.395h-6.324v-5.266h1.156v4.11h6.324zM479.006 188.457h-1.156v-8.058h10.514v-27.551h-3.117v-4.643h9.184v-8.666h-14.957v-12.973h-1.755v-14.293h1.156v13.137h1.755v12.973h14.957v10.977h-9.184v2.332h3.117v29.862h-10.514z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M481.058 151.692h4.767v1.156h-4.767zM459 151.692h20.181v1.156h-20.18zM469.114 180.399h14.52v1.156h-14.52z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#8B77E8", d: "M470.93 228.095h17.918v1.156H470.93z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M419.332 81.722h57.792v26.526h-57.792z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M406.98 81.722h57.793v26.526H406.98z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M419.332 72.729h59.842v8.993h-59.842z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M404.932 72.729h59.842v8.993h-59.842z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M464.773 88.46v-6.738h-38.6z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M441.599 92.963h-11.444a2.733 2.733 0 1 1 0-5.464H441.6a2.733 2.733 0 1 1 0 5.464z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#624AC9",
          d: "M419.332 81.144h59.84V82.3h-59.84zM411.722 81.144h3.236V82.3h-3.236z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#8B77E8",
          d: "M430.109 107.67h27.897v1.156h-27.897zM462.93 107.67h7.203v1.156h-7.203z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M423.441 44.023h57.084v28.706h-57.084zM429.508 30.714h57.084v9.822h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#E1DBFF", d: "M420.323 40.535h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M411.241 44.023h57.084v28.706h-57.084zM417.308 30.714h57.084v9.822h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F0EDFF", d: "M408.123 40.535h57.084v3.487h-57.084z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M468.326 51.993v-7.97h-51.174zM422.531 0h57.084v17.741h-57.084zM424.285 17.741h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F0EDFF",
          d: "M410.331 0h57.084v17.741h-57.084zM412.086 17.741h57.084v12.973h-57.084z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#E1DBFF",
          d: "M469.17 22.982V17.74h-33.651zM474.392 34.663v-3.95h-25.354z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#CCC2FF",
          d: "M481.103 72.729h-1.156V44.6h-3.117v-4.643h9.184v-8.666h-5.223V18.319h-1.754V4.026h1.156v13.137h1.754v12.973h5.223v10.977h-9.184v2.332h3.117z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#CCC2FF", d: "M472.641 43.445h4.767v1.156h-4.767z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#B3A4F5" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M237.565 159.005l6.029-11.445h-5.598v-2.203h9.523l-6.028 11.445h6.18v2.203h-10.106zM258.336 148.31l7.77-14.752h-7.215v-2.84h12.276l-7.77 14.753h7.965v2.84zM279.107 137.616l9.512-18.06h-8.833v-3.475h15.028l-9.512 18.06h9.752v3.475z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#DDD6FF",
          d: "M232.246 338.464v-3.467l44.255-3.467v6.934z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M275.924 286.494h6.935v51.97h-6.935z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M326.535 338.464v-3.467l-44.255-3.467v6.934z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#A796F2", d: "M282.86 286.494v11.37l-6.936-.796v-10.574z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#4F37B3", transform: "translate(229.567 339.3)" }, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "5.399",
          cy: "6.174",
          rx: "4.333",
          ry: "4.334",
          transform: "rotate(-76.714 5.4 6.174)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "circle",
        {
          cx: "49.821",
          cy: "6.146",
          r: "4.334",
          transform: "rotate(-45 49.82 6.146)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "circle",
        {
          cx: "94.24",
          cy: "6.147",
          r: "4.334",
          transform: "rotate(-45 94.24 6.147)"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M282.282 286.494h1.156v33.866h-1.156zM282.282 322.19h1.156v2.215h-1.156zM232.246 337.886h22.128v1.156h-22.128zM257.978 337.886h4.045v1.156h-4.045zM271.27 337.886h55.266v1.156H271.27z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFD259",
          d: "M326.1 264.549h-29.412l-42.767-75.893a9.248 9.248 0 0 0-8.057-4.707h-47.452c-7.142 0-11.588 7.75-7.982 13.912l40.59 69.367a38.95 38.95 0 0 0 33.619 19.276H326.1c6.064 0 10.98-4.914 10.98-10.977 0-6.063-4.916-10.978-10.98-10.978z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#E5659B" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M192.357 202.305l.998-.584 20.398 34.864-.998.583zM192.354 202.293l-2.422-4.14a10.087 10.087 0 0 1-.869-1.915l1.097-.363c.193.582.452 1.152.77 1.695l2.422 4.14-.998.583zM188.62 194.146a9.591 9.591 0 0 1-.038-1.347l1.155.05c-.017.395-.006.793.033 1.184l-1.15.113zM331.154 266.434a10.32 10.32 0 0 0-.932-.46l.458-1.06c.353.152.702.324 1.036.51l-.562 1.01zM326.1 287.082h-3.094v-1.155h3.094c5.736 0 10.403-4.666 10.403-10.4 0-2.71-1.036-5.274-2.917-7.222l.83-.803a11.496 11.496 0 0 1 3.243 8.025c0 6.371-5.186 11.555-11.56 11.555zM311.689 285.927h4.578v1.156h-4.578zM309.907 287.082H264.64c-13.984 0-27.057-7.496-34.118-19.562l-7.795-13.323.997-.583 7.796 13.322c6.854 11.714 19.545 18.99 33.12 18.99h45.268v1.156zM220.407 250.214l.998-.584.67 1.145-.998.584z" })), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "circle",
        {
          cx: "413.994",
          cy: "234.303",
          r: "4.877",
          fill: "#7760DB",
          transform: "rotate(-45 413.994 234.303)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "264.816",
          cy: "204.263",
          fill: "#7760DB",
          rx: "11.557",
          ry: "11.557",
          transform: "rotate(-39.156 264.816 204.263)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "ellipse",
        {
          cx: "295.723",
          cy: "258.56",
          fill: "#7760DB",
          rx: "7.888",
          ry: "7.888",
          transform: "rotate(-37.508 295.723 258.56)"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M240.055 206.206l31.012 29.681-9.492-28.858-6.49-10.293z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M126.47 359.61H42.294h84.176z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M42.293 359.033h84.176v1.156H42.293z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M141.365 359.61h-5.797 5.797z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M135.568 359.033h5.797v1.156h-5.797z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M379.205 359.61H155.34h223.865z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M155.34 359.033h223.865v1.156H155.34z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M633.691 359.61H396.69 633.69z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M396.69 359.033h237.002v1.156H396.69z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M274.329 368.415H88.869h185.46z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M88.868 367.837h185.46v1.156H88.868z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M571.308 368.415H293.264h278.044z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M293.264 367.837h278.044v1.156H293.264z" })), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M683.372 349.784h5.619v1.156h-5.619zM0 349.784h673.543v1.156H0z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M208.269 349.785h170.935v1.156H208.269zM536.533 349.784h89.196v1.156h-89.196zM463.175 349.784h56.213v1.156h-56.213zM191.685 349.785h5.715v1.156h-5.715zM152.417 349.785h32.092v1.156h-32.092zM17.277 349.785h3.144v1.156h-3.144zM120.487 349.785h24.382v1.156h-24.382z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#C4B8FF",
          d: "M640.325 359.033h9.417v1.156h-9.417zM75.602 367.837h5.426v1.156h-5.426z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#DDD6FF", d: "M589.069 368.415h7.32-7.32z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#C4B8FF", d: "M589.069 367.837h7.32v1.156h-7.32z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M439.15 349.785h11.985v1.156H439.15z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M492.12 292.225l1.149-.126 5.418 49.393-1.15.126z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M48.53 349.784h66.919v1.156H48.53zM632.854 349.784h7.161v1.156h-7.161z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M409.722 198.717h-1.156v-18.318h10.515v-18.781h1.155v19.936h-10.514zM432.161 180.399h22.512v1.156h-22.512zM423.708 180.399h2.312v1.156h-2.312zM414.401 125.41h28.421v1.156h-28.421zM449.252 39.957h2.731v1.156h-2.731zM417.308 39.957h27.023v1.156h-27.023z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M28.319 349.784h13.974v1.156H28.319z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF95A9",
          fillRule: "nonzero",
          d: "M594.72 134.167c-.441.127-.904.203-1.385.209l-.525.007-.092-7.116h.001a3.15 3.15 0 1 0-.081-6.3h-.002l-3.122.04a3.179 3.179 0 0 1-3.22-3.137l-.039-3.022c-.76 1.275-2.194 2.126-3.774 2.147l-2.094.027-3.663.047-2.188.028-4.953.064a7.34 7.34 0 0 1-.583-.021l.127 9.765.072 5.609a7.512 7.512 0 0 0 7.61 7.413l4.068-.053.967 7.644h14.563l-1.687-13.35zm-20.115-.596l-1.8.057-.06-1.903 2.896-.77a2.64 2.64 0 0 1 2.91 1.14l1.19 1.883s-1.44-.524-5.136-.407z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M578.642 159.686l3.07 12.278 3.715-21.684h1.156l3.716 21.684 6.11-24.446h-17.767z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M585.427 150.28l-3.716 21.684.56 2.244 7.117 1.403.911-3.647-3.716-21.684zM575.384 344.002l-5.602 3.055a1.45 1.45 0 0 0 .694 2.724h14.669v-5.778H575.384z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#FF95A9", d: "M586.2 110.598l-.043-3.352.043 3.352z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M569.583 117.161l4.953-.064 2.188-.028 3.663-.047 2.094-.027c1.58-.021 3.015-.872 3.774-2.147l.039 3.022a3.178 3.178 0 0 0 3.22 3.137l3.122-.04h.002a3.151 3.151 0 1 1 .081 6.3h-.001l.092 7.116.525-.007a5.253 5.253 0 0 0 1.385-.209 5.25 5.25 0 0 0 3.8-5.11l-.129-9.884-.082-6.365c-.075-5.8-4.839-10.44-10.64-10.365l-1.574.02.062 4.783.043 3.353-.043-3.353-.062-4.782-11.747.151-2.432.032-2.52.032a7.243 7.243 0 0 0-7.15 7.335 7.237 7.237 0 0 0 3.789 6.269 7.205 7.205 0 0 0-1.213 4.103 7.237 7.237 0 0 0 4.304 6.52L569 117.14c.193.012.386.024.583.021z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M611.245 174.524a4.624 4.624 0 0 0-6.414-1.27l-6.073 4.064-.402.06 12.727 2.51a4.619 4.619 0 0 0 .162-5.364zM578.415 177.376l1.114-3.707a3.45 3.45 0 0 0-2.054.22l-7.416 3.22a4.62 4.62 0 0 0-2.726 4.923l10.608-1.591-.399-.163.873-2.902z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#7760DB",
          fillRule: "nonzero",
          d: "M629.805 186.94l.007-.005-15.715-34.46-.004.003a11.572 11.572 0 0 0-1.12-1.945c-3.591-5.015-10.45-6.287-15.592-3.015h-18.537a11.454 11.454 0 0 0-2.718-.926 11.573 11.573 0 0 0-10.78 1.667l.342.454a10.926 10.926 0 0 0-2.776 3.064 11.058 11.058 0 0 0-.927 1.922l-.223.605-.004-.002-1.587 4.293-.542-.2-.893 2.416.542.2-10.424 28.212a7.31 7.31 0 0 0 .98 6.865l-.463.342a7.88 7.88 0 0 0 7.508 3.11 7.866 7.866 0 0 0 1.483-.382l.003.013 8.047-2.869-.195-.544 25.367-9.113-12.091-4.945.437-1.07 22.918 9.372-.438 1.07-9.228-3.774-25.054 9.001.848 17.288c0 .689.036 1.369.1 2.041l.287 5.846.02.386c0 .018.003.036.005.054l2.382 48.52c0 .251.017.497.043.74l3.576 72.83h9.756v-73.57h-.007l.004-36.361a21.112 21.112 0 0 0 11.212-.381l13.083 110.326.028-.015h9.76c0-.115-.009-.228-.017-.341h.006l-8.47-122.41.276-5.623c.064-.672.1-1.353.1-2.042l.942-19.193 7.579 3.099.001-.005a7.883 7.883 0 0 0 10.725-5.765 7.829 7.829 0 0 0-.562-4.784zm-31.449-9.561l.402-.06 6.073-4.065a4.625 4.625 0 0 1 6.414 1.27 4.619 4.619 0 0 1-.162 5.363l-12.727-2.508zm-1.948-29.861l-6.109 24.446-.91 3.647-7.117-1.403-.56-2.245-3.07-12.277v-12.168h17.766zm-16.265 32.593l-2.202.33-.398-.163.398.163-10.608 1.592a4.62 4.62 0 0 1 2.726-4.924l7.416-3.22a3.448 3.448 0 0 1 2.054-.22l-1.114 3.707 1.115-3.708 3.005.592-2.392 5.85zm29.127 13.765l-4.68-1.914.438-1.07 4.68 1.914-.438 1.07z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M579.53 173.668l-1.115 3.708-.873 2.902.4.163 2.2-.33 2.392-5.851z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M604.559 191.97l.437-1.07 4.68 1.912-.438 1.07zM602.411 191.071l.438-1.07-22.918-9.37-.438 1.069 12.092 4.944-25.368 9.113.196.544.195.544 1.52-.546 25.055-9.001zM561.758 154.302l.004.001.223-.605c.251-.678.563-1.324.927-1.921a10.93 10.93 0 0 1 2.776-3.064l-.341-.455-.353-.47a12.067 12.067 0 0 0-3.855 4.912l-.018-.009-2.034 5.503.542.2.542.2 1.587-4.292zM548.485 192.829a7.31 7.31 0 0 1 .369-3.607l10.424-28.212-.542-.2-.542-.2-10.426 28.21-.178.487.015.008a8.473 8.473 0 0 0 1.3 7.46l.467-.346.462-.342a7.31 7.31 0 0 1-1.35-3.258z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M575.64 130.955l-2.896.77.06 1.903 1.801-.057c3.696-.117 5.136.407 5.136.407l-1.19-1.883a2.64 2.64 0 0 0-2.91-1.14z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M609.465 344.002l-.027.015-5.575 3.04a1.45 1.45 0 0 0 .695 2.724h14.668v-5.778h-9.76z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#CCC2FF" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M572.338 94.985h-1.156c0-2.207-1.046-3.31-2.152-4.476l-.106-.112.84-.794.105.11c1.157 1.22 2.469 2.605 2.469 5.272zM567.717 85.237h-1.156c0-2.667 1.312-4.05 2.469-5.271 1.106-1.168 2.152-2.27 2.152-4.477 0-2.206-1.045-3.309-2.152-4.476-1.157-1.22-2.469-2.603-2.469-5.27 0-2.667 1.312-4.05 2.469-5.271 1.106-1.167 2.152-2.27 2.152-4.476h1.156c0 2.667-1.312 4.05-2.47 5.27-1.106 1.168-2.15 2.27-2.15 4.477 0 2.206 1.044 3.308 2.151 4.475 1.157 1.22 2.469 2.604 2.469 5.271s-1.312 4.05-2.469 5.271c-1.106 1.168-2.152 2.27-2.152 4.477zM581.53 94.985h-1.156c0-2.207-1.045-3.31-2.151-4.477-1.158-1.22-2.469-2.604-2.469-5.271s1.311-4.05 2.469-5.271c1.106-1.168 2.151-2.27 2.151-4.477 0-2.206-1.045-3.309-2.151-4.476-1.158-1.22-2.469-2.603-2.469-5.27 0-2.667 1.311-4.05 2.469-5.271 1.106-1.167 2.151-2.27 2.151-4.476h1.156c0 2.667-1.311 4.05-2.468 5.27-1.107 1.168-2.152 2.27-2.152 4.477 0 2.206 1.045 3.308 2.152 4.475 1.157 1.221 2.468 2.604 2.468 5.271s-1.311 4.05-2.468 5.271c-1.107 1.168-2.152 2.27-2.152 4.477 0 2.207 1.045 3.31 2.152 4.477 1.157 1.22 2.468 2.604 2.468 5.27zM590.723 94.985h-1.156c0-2.207-1.045-3.31-2.152-4.477-1.157-1.22-2.468-2.604-2.468-5.271s1.311-4.051 2.468-5.272c.164-.173.328-.345.489-.522l.855.778c-.166.182-.335.36-.505.54-1.106 1.167-2.152 2.27-2.152 4.476s1.045 3.31 2.152 4.476c1.158 1.22 2.469 2.604 2.469 5.272zM590.723 75.49h-1.156c0-2.207-1.045-3.31-2.152-4.476-1.157-1.221-2.468-2.604-2.468-5.271h1.156c0 2.206 1.045 3.309 2.151 4.476 1.158 1.22 2.469 2.603 2.469 5.27zM588.468 61.041l-.842-.791c1.1-1.17 1.941-2.225 1.941-4.254h1.156c0 2.446-1.067 3.782-2.255 5.045z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M234.312 200.887a5.253 5.253 0 0 1-6.596 3.415l-5.186-1.646-4.308-1.368-5.079 12.571 20.936-3.887 5.977-3.766-5.688-5.495-.056.176zM248.589 183.992l-2.521 7.935 6.571 6.35 2.384-1.502 5.656-18.58-12.108 3.203c.27.812.298 1.712.018 2.594z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M246.06 191.949a8.404 8.404 0 0 1-10.552 5.464l-9.376-2.977-.822-.262a3.152 3.152 0 1 0 2.05 3.956v-.002l7.11 2.258-.103.325 5.688 5.495 12.584-7.93-6.572-6.35-.006.023z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#7760DB",
          fillRule: "nonzero",
          d: "M340.409 225.808c-1.216 0-2.352.329-3.335.896l-.003-.005-13.885 8.015 15.657-21.138-10.59-8.158-31.407 39.122-22.255-39.46 1.738.35 3.857-37.679-.008-.001a7.832 7.832 0 0 0-.744-4.246 7.885 7.885 0 0 0-10.536-3.644c-.018.009-.033.02-.05.028l-33.183 16.12 9.992 2.646a4.2 4.2 0 0 1 2.913 2.744l12.108-3.204-5.656 18.58-2.383 1.502-12.584 7.93-5.976 3.766-20.936 3.887 5.078-12.571-3.321-1.055a10.452 10.452 0 0 1-5.523-4.14l-4.3 6.597.488.318-2.19 3.359-.487-.317-.753 1.155.486.317-8.297 12.727a7.24 7.24 0 0 0-1.03 5.488 7.255 7.255 0 0 0 3.161 4.614 7.231 7.231 0 0 0 3.914 1.178l.574.017 35.933.35 15.45 22.034-.472.332 3.708 5.288.473-.332 1.053 1.502-.473.332 1.555 2.218.474-.332 2.323 3.313c6.228 8.882 18.33 11.357 27.553 5.636l25.373-15.753.305.492 3.54-2.197-.305-.491 16.288-10.11.304.49 8.28-5.14h71.693v-9.752l-72.85-3.575a6.753 6.753 0 0 0-.74-.043zm-82.146-2.178l-18.207-17.423 15.03-9.47 6.49 10.293 3.952 12.022 5.539 16.836-12.804-12.257z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M423.102 223.064c-.282 0-.555.09-.782.256l-8.321 6.1v9.759h5.201l5.147-14.347a1.322 1.322 0 0 0-1.245-1.768z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#4F37B3",
          d: "M317.434 253.938l.305.49.305.492 16.287-10.111-.305-.49-.305-.492z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M250.818 202.69l14.71 16.362-3.953-12.022-6.49-10.294-15.03 9.47 18.208 17.424-8.423-20.325z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M250.818 202.69l-.978.616 8.423 20.324 12.804 12.258-5.54-16.836z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FF95A9",
          d: "M222.787 173.07l-2.937 9.244a8.81 8.81 0 0 1-4.703 5.327l11.996 3.809a3.5 3.5 0 0 0 4.341-2.292l4.177-13.15-7.034-1.865-2.62-.694a11.574 11.574 0 0 0-3.22-.38z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          fillRule: "nonzero",
          d: "M214.9 200.233l3.322 1.055 4.308 1.368 5.186 1.646a5.253 5.253 0 0 0 6.596-3.415l.056-.176.103-.325-7.11-2.258-.002.002a3.152 3.152 0 1 1-2.05-3.956l.824.261v.001l9.375 2.977a8.404 8.404 0 0 0 10.553-5.464l.007-.022 2.52-7.935a4.178 4.178 0 0 0-.017-2.594 4.2 4.2 0 0 0-2.913-2.744l-9.992-2.645h-.004l-4.177 13.15a3.5 3.5 0 0 1-4.342 2.291l-11.996-3.808a8.81 8.81 0 0 0 4.703-5.327l2.938-9.245a11.555 11.555 0 0 1 3.22.38l2.62.694a7.086 7.086 0 0 0-4.879-7.675 7.073 7.073 0 0 0-6.253.987 6.3 6.3 0 0 0-6.726 2.627 4.188 4.188 0 0 0-.664 1.27l-.097.306-.003.007-1.543 4.86-.159.5a4.183 4.183 0 0 0 .23 3.108 4.192 4.192 0 0 0-2.522 2.656 4.2 4.2 0 0 0 1.887 4.897 10.468 10.468 0 0 0 1.48 8.407 10.446 10.446 0 0 0 5.521 4.14zm24.129-20.363c.532-.205 1.215.282 1.525 1.088.31.805.13 1.624-.404 1.829-.532.204-1.215-.283-1.525-1.088-.31-.805-.129-1.624.404-1.829z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#4F37B3",
          d: "M236.876 231.896l-35.933-.35-.573-.017a7.231 7.231 0 0 1-3.914-1.177 7.254 7.254 0 0 1-3.161-4.615 7.24 7.24 0 0 1 1.03-5.488l8.297-12.727-.486-.317-.482-.314-8.259 12.666-.075.108-.005.018a8.388 8.388 0 0 0-1.151 6.292 8.403 8.403 0 0 0 3.66 5.344 8.367 8.367 0 0 0 3.964 1.342v.03l36.483.355 15.11 21.547.474-.331.473-.332-15.452-22.034zM205.565 203.008l-.487-.318-.481-.313-2.19 3.359.482.314.486.317zM288.52 271.887c-9.222 5.721-21.324 3.246-27.552-5.636l-2.324-3.313-.473.331-.473.332 2.323 3.313c4.189 5.974 10.892 9.204 17.725 9.204 3.9 0 7.843-1.053 11.384-3.25l25.373-15.752-.305-.49-.305-.491-25.372 15.752zM256.036 259.218l-.473.331-.474.332 1.054 1.502.473-.331.473-.332z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#FFF",
          d: "M240.15 182.787c.533-.205.714-1.024.404-1.83-.31-.805-.993-1.292-1.525-1.087-.533.205-.714 1.024-.404 1.83.31.804.993 1.291 1.525 1.087z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("g", { fill: "#DDD6FF" }, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { d: "M185.161 239.187l-.607 5.778L173.06 349.78h-2.918l8.628-110.593zM486.928 239.187l.606 5.778L499.03 349.78h2.919l-8.63-110.593z" })), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#B3A4F5", d: "M166.762 239.187h337.542v5.778H166.762z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F8F7FF", d: "M166.762 244.965h138.412-138.412z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M166.761 244.387h138.412v1.156H166.761z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F8F7FF", d: "M465.284 244.965h39.02-39.02z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M465.284 244.387h39.02v1.156h-39.02z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F8F7FF", d: "M454.102 244.965h5.334-5.334z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M454.102 244.387h5.334v1.156h-5.334z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F8F7FF",
          d: "M176.316 320.084l-1.933 17.624 1.933-17.624z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M173.829 337.647l1.931-17.625 1.15.126-1.932 17.625z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F8F7FF",
          d: "M184.038 249.675l-7.142 65.118 7.142-65.118z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M176.342 314.732l7.136-65.122 1.15.125-7.137 65.123z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F8F7FF", d: "M498.13 300.84l.498 6.378-.498-6.378z" }), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M497.582 300.87l1.152-.09.498 6.377-1.152.09z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#F8F7FF",
          d: "M494.018 248.131l3.704 47.477-3.704-47.477z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#B3A4F5",
          d: "M493.465 248.164l1.152-.09 3.706 47.478-1.152.09z"
        }
      )), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#F8F7FF", d: "M342.656 244.965h105.101-105.101z" }), /* @__PURE__ */ import_react_18_2141.default.createElement("path", { fill: "#40327A", d: "M342.656 244.387h105.101v1.156h-105.1z" }))), /* @__PURE__ */ import_react_18_2141.default.createElement("g", null, /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#40327A",
          d: "M405.995 235.701a1.45 1.45 0 0 0-1.48.065l-5.338 3.495-4.608 8.602 5.095 2.728 6.925-12.927a1.45 1.45 0 0 0-.594-1.963z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#7760DB",
          d: "M336.785 203.749l-.004.007a6.713 6.713 0 0 0-.848-.416 6.68 6.68 0 1 0-5.481 12.17l-.002.003 9.959 5.025.26-.516 15.476 7.809-.26.515 5.133 2.59.26-.516 13.09 6.605-.26.516 2.902 1.465.26-.516 3.406 1.718-.26.516 14.079 7.103 4.604-8.594-62.314-35.484z"
        }
      ), /* @__PURE__ */ import_react_18_2141.default.createElement(
        "path",
        {
          fill: "#4F37B3",
          d: "M340.67 220.022l-.261.516-.26.516 15.475 7.809.26-.516.261-.516zM361.278 230.42l-.26.517-.26.515 13.089 6.605.26-.516.26-.515zM377.27 238.49l-.26.516-.26.516 3.405 1.718.26-.516.261-.515z"
        }
      )))
    );
  }
  var import_react_18_2141;
  var init_empty_illustration = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/empty-illustration.tsx"() {
      import_react_18_2141 = __toESM(__require("https://esm.sh/react@18.2.0"));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/empty-state.tsx
  function EmptyListState() {
    const styles = useStyles70();
    return /* @__PURE__ */ import_react_18_2142.default.createElement("div", { className: cn(layout.column, layout.flex) }, /* @__PURE__ */ import_react_18_2142.default.createElement(Text2, { className: cn(styles.header1, styles.text) }, "Time to Start Moving"), /* @__PURE__ */ import_react_18_2142.default.createElement(Text2, { className: cn(styles.header2, styles.text) }, "Create notes, invite team members and get some work done"), /* @__PURE__ */ import_react_18_2142.default.createElement("div", { className: cn(layout.centerCenter, styles.image) }, /* @__PURE__ */ import_react_18_2142.default.createElement(EmptyActivity, null)));
  }
  var import_react_18_2142, useStyles70;
  var init_empty_state = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/empty-state.tsx"() {
      import_react_18_2142 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_texts();
      init_styles();
      init_empty_illustration();
      useStyles70 = makeStyles((theme) => ({
        image: {
          display: "flex",
          marginTop: "30px"
        },
        text: {
          display: "inline-block",
          textAlign: "center"
        },
        header1: {
          fontSize: "24px",
          color: "#273142",
          marginTop: "8%",
          fontWeight: "normal"
        },
        header2: {
          fontSize: "18px",
          marginTop: "15px",
          color: "rgba(17, 8, 43, 0.8)"
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/infinite-scroll.tsx
  function InfiniteScroll({
    recordsLength,
    limit,
    setLimit,
    pageSize,
    isVisible
  }) {
    const styles = useStyles71();
    const scrollParent = useScrollParent();
    const parentEl = scrollParent;
    const previousLimit = (0, import_react_18_2143.useRef)(limit);
    const canLoadMore = recordsLength >= limit;
    const [didMount, setDidMount] = (0, import_react_18_2143.useState)(false);
    (0, import_react_18_2143.useEffect)(() => {
      if (limit < previousLimit.current) {
        if (parentEl) {
          parentEl.scrollTop = 0;
        }
      }
      previousLimit.current = limit;
    }, [limit, parentEl]);
    (0, import_react_18_2143.useEffect)(() => {
      if (parentEl && canLoadMore) {
        const handler = () => {
          const diff4 = parentEl.scrollHeight - (parentEl.scrollTop + parentEl.clientHeight);
          if (diff4 < THRESHOLD) {
            setLimit((x) => x + pageSize);
          }
        };
        parentEl.addEventListener("scroll", handler);
        return () => {
          parentEl.removeEventListener("scroll", handler);
        };
      }
    }, [parentEl, canLoadMore, pageSize, didMount, setLimit]);
    (0, import_react_18_2143.useEffect)(() => {
      let canMount = true;
      window.setTimeout(() => {
        if (canMount) {
          setDidMount(true);
        }
      }, 0);
      return () => {
        canMount = false;
      };
    }, []);
    if (canLoadMore && isVisible) {
      return /* @__PURE__ */ import_react_18_2143.default.createElement("div", { className: cn(styles.loaderContainer) }, /* @__PURE__ */ import_react_18_2143.default.createElement(spinner_view_default, { size: styleguide.gridbase * 3 }));
    }
    return null;
  }
  var import_react_18_2143, useStyles71, THRESHOLD;
  var init_infinite_scroll = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/infinite-scroll.tsx"() {
      import_react_18_2143 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_scrolling2();
      init_styles();
      init_spinner_view();
      init_css_objects();
      useStyles71 = makeStyles((theme) => ({
        loaderContainer: {
          basedOn: [layout.row, layout.centerCenter]
        }
      }));
      THRESHOLD = 300;
    }
  });

  // cfds/client/graph/vertices/filter.ts
  var init_filter = __esm({
    "cfds/client/graph/vertices/filter.ts"() {
      init_comparable();
      init_set();
      init_scheme_types();
      init_query();
      init_vertices();
      init_note();
    }
  });

  // cfds/client/graph/vertices/index.ts
  var init_vertices = __esm({
    "cfds/client/graph/vertices/index.ts"() {
      init_base2();
      init_user();
      init_workspace();
      init_note();
      init_tag();
      init_filter();
    }
  });

  // styles/components/new-icons/icon-new-task.tsx
  function IconNewTask({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2144.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 18 18",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2144.default.createElement(
        "rect",
        {
          x: "1.5",
          y: "1.5",
          width: "14.9375",
          height: "14.9375",
          rx: "1.5",
          fill: "#FBF6EF",
          stroke: "#3184DD"
        }
      ),
      /* @__PURE__ */ import_react_18_2144.default.createElement("g", { filter: "url(#filter0_bd_1176_23785)" }, /* @__PURE__ */ import_react_18_2144.default.createElement(
        "rect",
        {
          x: "1.06274",
          y: "1.0625",
          width: "15.9356",
          height: "15.9375",
          rx: "2",
          fill: "url(#paint0_radial_1176_23785)",
          fillOpacity: "0.3",
          shapeRendering: "crispEdges"
        }
      ), /* @__PURE__ */ import_react_18_2144.default.createElement(
        "rect",
        {
          x: "1.56274",
          y: "1.5625",
          width: "14.9356",
          height: "14.9375",
          rx: "1.5",
          stroke: "#CCCCCC",
          strokeOpacity: "0.3",
          style: STYLE,
          shapeRendering: "crispEdges"
        }
      )),
      /* @__PURE__ */ import_react_18_2144.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9 12L9 6",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2144.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M6 9L12 9",
          stroke: "#1960CF",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2144.default.createElement("defs", null, /* @__PURE__ */ import_react_18_2144.default.createElement(
        "filter",
        {
          id: "filter0_bd_1176_23785",
          x: "0.0627441",
          y: "0.0625",
          width: "17.9355",
          height: "17.9375",
          filterUnits: "userSpaceOnUse",
          colorInterpolationFilters: "sRGB"
        },
        /* @__PURE__ */ import_react_18_2144.default.createElement("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
        /* @__PURE__ */ import_react_18_2144.default.createElement("feGaussianBlur", { in: "BackgroundImage", stdDeviation: "0.5" }),
        /* @__PURE__ */ import_react_18_2144.default.createElement(
          "feComposite",
          {
            in2: "SourceAlpha",
            operator: "in",
            result: "effect1_backgroundBlur_1176_23785"
          }
        ),
        /* @__PURE__ */ import_react_18_2144.default.createElement(
          "feColorMatrix",
          {
            in: "SourceAlpha",
            type: "matrix",
            values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0",
            result: "hardAlpha"
          }
        ),
        /* @__PURE__ */ import_react_18_2144.default.createElement("feOffset", null),
        /* @__PURE__ */ import_react_18_2144.default.createElement("feGaussianBlur", { stdDeviation: "0.5" }),
        /* @__PURE__ */ import_react_18_2144.default.createElement("feComposite", { in2: "hardAlpha", operator: "out" }),
        /* @__PURE__ */ import_react_18_2144.default.createElement(
          "feColorMatrix",
          {
            type: "matrix",
            values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"
          }
        ),
        /* @__PURE__ */ import_react_18_2144.default.createElement(
          "feBlend",
          {
            mode: "normal",
            in2: "effect1_backgroundBlur_1176_23785",
            result: "effect2_dropShadow_1176_23785"
          }
        ),
        /* @__PURE__ */ import_react_18_2144.default.createElement(
          "feBlend",
          {
            mode: "normal",
            in: "SourceGraphic",
            in2: "effect2_dropShadow_1176_23785",
            result: "shape"
          }
        )
      ), /* @__PURE__ */ import_react_18_2144.default.createElement(
        "radialGradient",
        {
          id: "paint0_radial_1176_23785",
          cx: "0",
          cy: "0",
          r: "1",
          gradientUnits: "userSpaceOnUse",
          gradientTransform: "translate(2.28856 2.28846) rotate(45.0034) scale(20.804)"
        },
        /* @__PURE__ */ import_react_18_2144.default.createElement("stop", { stopColor: "white" }),
        /* @__PURE__ */ import_react_18_2144.default.createElement("stop", { offset: "1", stopColor: "#E5E5E5" })
      ))
    );
  }
  var import_react_18_2144, STYLE;
  var init_icon_new_task = __esm({
    "styles/components/new-icons/icon-new-task.tsx"() {
      import_react_18_2144 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
      STYLE = {
        mixBlendMode: "overlay"
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/list.strings.json
  var list_strings_default;
  var init_list_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/list.strings.json"() {
      list_strings_default = {
        en: {
          pinnedTasks: "My Pinned Tasks",
          pinTaskCta: "Pin your top tasks to organize your task list",
          pinnedNotes: "My Pinned Notes",
          pinNotesCta: "Pin your top notes to organize your notes",
          newTask: "New Task",
          saveDraft: "Save to",
          cardMoved: "Card moved to {workspace}",
          draftSaved: "Task saved to {workspace}"
        }
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/grid.tsx
  var import_react_18_2145, useGridStyles, ItemsTable;
  var init_grid = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/grid.tsx"() {
      import_react_18_2145 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_css_objects();
      useGridStyles = makeStyles(
        () => ({
          container: {
            display: "grid",
            gridTemplateColumns: [
              // [`[${GridColumns.DragAnchor}]`, styleguide.gridbase * 3],
              [`[${"icon" /* Type */}]`, styleguide.gridbase * 4],
              [`[${"title" /* Title */}]`, "minmax(min-content, auto)"],
              [`[${"expander" /* Expander */}]`, styleguide.gridbase * 4],
              [`[${"contentIndicator" /* ContentIndicator */}]`, styleguide.gridbase * 4],
              [`[${"workspace" /* Workspace */}]`, styleguide.gridbase * 10],
              [`[${"assignees" /* Assignees */}]`, "max-content"],
              [`[${"tags" /* Tags */}]`, "max-content"],
              [
                `[${"extra" /* Extra */}]`,
                `minmax(max-content, ${styleguide.gridbase * 20}px)`
              ],
              [`[${"dueDate" /* DueDate */}]`, "max-content"],
              [`[${"pin" /* Pin */}]`, styleguide.gridbase * 3],
              [`[${"menu" /* Menu */}]`, styleguide.gridbase * 4]
            ],
            gridAutoRows: "min-content",
            alignItems: "stretch"
          },
          table: {
            width: "100%",
            borderCollapse: "collapse"
          }
        }),
        "table_01387e"
      );
      ItemsTable = ({
        children,
        className
      }) => {
        const styles = useGridStyles();
        return /* @__PURE__ */ import_react_18_2145.default.createElement("table", { className: cn(styles.table) }, /* @__PURE__ */ import_react_18_2145.default.createElement("tbody", null, children));
      };
    }
  });

  // styles/components/new-icons/icon-arrow-down.tsx
  function IconArrowDown({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2146.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2146.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M10 8L6 4",
          stroke: "#4D4D4D",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2146.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M6 12L10 8",
          stroke: "#262626",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_2146;
  var init_icon_arrow_down = __esm({
    "styles/components/new-icons/icon-arrow-down.tsx"() {
      import_react_18_2146 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-pin-off.tsx
  function IconPinOff({ className, size = 16 /* Small */ }) {
    return /* @__PURE__ */ import_react_18_2147.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L8.875 13.25L9.75 12.375L10.625 8.875L14.125 5.375L10.625 1.875L7.125 5.375L3.625 6.25L2.75 7.125Z",
          fill: "#CCCCCC",
          stroke: "#B3B3B3",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M1 15L5.8125 10.1875",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L8.875 13.25",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8.875 13.25L9.75 12.375L10.625 8.875",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M10.625 8.875L14.125 5.375",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L3.625 6.25L7.125 5.375",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M10.625 1.875L7.125 5.375",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2147.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9.74976 1L14.9998 6.25",
          stroke: "#8C8C8C",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    );
  }
  var import_react_18_2147;
  var init_icon_pin_off = __esm({
    "styles/components/new-icons/icon-pin-off.tsx"() {
      import_react_18_2147 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // styles/components/new-icons/icon-pin-on.tsx
  function IconPinOn({ size = 16 /* Small */, className }) {
    return /* @__PURE__ */ import_react_18_2148.default.createElement(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L8.875 13.25L9.75 12.375L10.625 8.875L14.125 5.375L10.625 1.875L7.125 5.375L3.625 6.25L2.75 7.125Z",
          fill: "#8BC5EE",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M1 15L5.8125 10.1875",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L8.875 13.25",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8.875 13.25L9.75 12.375L10.625 8.875",
          stroke: "#6AB6EF",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M10.625 8.875L14.125 5.375",
          stroke: "#6AB6EF",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M2.75 7.125L3.625 6.25L7.125 5.375",
          stroke: "#57A5E9",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M10.625 1.875L7.125 5.375",
          stroke: "#57A5E9",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2148.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9.74976 1L14.9998 6.25",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    );
  }
  var import_react_18_2148;
  var init_icon_pin_on = __esm({
    "styles/components/new-icons/icon-pin-on.tsx"() {
      import_react_18_2148 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_types2();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/item.tsx
  function DraftItemRow({
    note,
    onWorkspaceMoved,
    onCancel
  }) {
    const styles = useStyles72();
    const onClickImpl = (e) => {
      e.stopPropagation();
    };
    const onKeyDown = (e) => {
      if (isHotkeyActive(e, {
        metaKeys: [],
        key: "Escape"
      })) {
        e.stopPropagation();
        onCancel();
      }
    };
    return /* @__PURE__ */ import_react_18_2149.default.createElement("tr", { className: cn(styles.row, styles.itemRow), onKeyDown }, /* @__PURE__ */ import_react_18_2149.default.createElement(TypeCell, { note, isDraft: true }), /* @__PURE__ */ import_react_18_2149.default.createElement(TitleCell, { note, isDraft: true, onClick: onClickImpl }), /* @__PURE__ */ import_react_18_2149.default.createElement(
      WorkspaceCell,
      {
        note,
        isDraft: true,
        onWorkspaceMoved
      }
    ), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }), /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["pin" /* Pin */]) }, /* @__PURE__ */ import_react_18_2149.default.createElement(Button, { onClick: onCancel }, /* @__PURE__ */ import_react_18_2149.default.createElement(IconDelete, null))));
  }
  function TitleCell({
    note,
    onClick,
    isDraft
  }) {
    const styles = useStyles72();
    const { editor, plugins, handlers: handlers2 } = useTitleEditor(
      note,
      isDraft ? DraftTitleNode : TitleNode2
    );
    (0, import_react_18_2149.useEffect)(() => {
      if (!isDraft) {
        return;
      }
      let cancelled = false;
      setTimeout(() => {
        if (cancelled) {
          return;
        }
        import_slate_react_0_8715.ReactEditor.focus(editor);
      }, 0);
      return () => {
        cancelled = true;
      };
    }, [isDraft, editor]);
    return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles.title), onClick: isDraft ? void 0 : onClick }, /* @__PURE__ */ import_react_18_2149.default.createElement("div", { className: cn(styles.titleContainer) }, /* @__PURE__ */ import_react_18_2149.default.createElement(import_slate_react_0_8715.Slate, { editor, ...handlers2 }, /* @__PURE__ */ import_react_18_2149.default.createElement(
      import_slate_react_0_8715.Editable,
      {
        className: cn(styles.titleEditor, !isDraft && styles.nowrap),
        ...plugins,
        readOnly: !isDraft
      }
    ))));
  }
  function WorkspaceDraftIndicatorComponent() {
    const styles = useStyles72();
    const strings = useStrings13();
    return /* @__PURE__ */ import_react_18_2149.default.createElement("div", { className: cn(styles.wsIndicator) }, strings.saveDraft);
  }
  function WorkspaceIndicatorComponent({
    workspace
  }) {
    const styles = useStyles72();
    const { name } = usePartialVertex(workspace, ["name"]);
    const color = useWorkspaceColor(workspace);
    const strings = useStrings13();
    const style = (0, import_react_18_2149.useMemo)(
      () => ({
        "--ws-background": color.background,
        "--ws-active": color.active,
        "--ws-inactive": color.inactive
      }),
      [color]
    );
    return /* @__PURE__ */ import_react_18_2149.default.createElement("div", { className: cn(styles.wsIndicator), style }, name || strings.saveDraft);
  }
  var import_react_18_2149, import_slate_react_0_8715, ROW_HEIGHT, useStyles72, useStrings13, Row, Cell, ItemRow, DoneIndicator, ExpanderCell, ContentIndicatorCell, AssigneesCell, TagsCell, TypeCell, ItemCheckbox, TitleNode2, DraftTitleNode, WorkspaceCell, DateCell, PinCell, MenuCell;
  var init_item = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/item.tsx"() {
      import_react_18_2149 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_slate_react_0_8715 = __require("https://esm.sh/slate-react@0.87.1");
      init_styles();
      init_buttons();
      init_inputs();
      init_icon_arrow_down();
      init_icon_content();
      init_icon_delete();
      init_icon_due_date();
      init_icon_new_task();
      init_icon_note();
      init_icon_pin_off();
      init_icon_pin_on();
      init_toast();
      init_typography();
      init_css_objects();
      init_theme();
      init_vertex2();
      init_localization();
      init_slate();
      init_hotkeys();
      init_assignees_view();
      init_item_menu();
      init_tag_button();
      init_tag_view();
      init_assignees();
      init_move();
      init_workspace_icon();
      init_workspace_indicator();
      init_list_strings();
      init_grid();
      init_logger();
      init_date();
      init_note();
      ROW_HEIGHT = styleguide.gridbase * 5.5;
      useStyles72 = makeStyles(
        (_, resolveClass) => ({
          row: {
            height: ROW_HEIGHT
          },
          itemRow: {
            position: "relative",
            // This is required to allow position relative for table
            // rows on certain browsers
            transform: "scale(1)",
            borderBottom: `1px solid ${brandLightTheme.primary.p3}`,
            ":hover": {
              ["dragAnchor" /* DragAnchor */]: {
                opacity: 1
              },
              visibleOnHover: {
                opacity: 1
              }
            },
            boxShadow: brandLightTheme.shadows.z2,
            // [`& + ${resolveClass('itemRow')}`]: {
            //   boxShadow: 'none',
            // },
            backgroundColor: brandLightTheme.colors.background
          },
          doneIndicator: {
            pointerEvents: "none",
            position: "absolute",
            top: "50%",
            left: styleguide.gridbase * 4,
            width: 0,
            height: 1,
            backgroundColor: brandLightTheme.mono.m4,
            ...styleguide.transition.standard,
            transitionProperty: "width"
          },
          doneIndicatorActive: {
            width: `calc(100% - ${styleguide.gridbase * 8}px)`
          },
          cell: {},
          cellInner: {
            height: "100%",
            alignItems: "center",
            basedOn: [layout.row]
          },
          iconCell: {
            width: styleguide.gridbase * 4,
            cellInner: {
              width: styleguide.gridbase * 4,
              alignItems: "center",
              justifyContent: "center"
            }
          },
          ["dragAnchor" /* DragAnchor */]: {
            cursor: "grab",
            opacity: 0
            // gridColumn: GridColumns.DragAnchor,
          },
          ["icon" /* Type */]: {
            width: styleguide.gridbase * 5
            // gridColumn: GridColumns.Type,
          },
          childPadding: {
            width: styleguide.gridbase * 5,
            background: brandLightTheme.primary.p2
          },
          ["title" /* Title */]: {
            // gridColumn: GridColumns.Title,
            width: "100%",
            cursor: "pointer",
            position: "relative"
          },
          titleContainer: {
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            alignItems: "center",
            basedOn: [layout.row]
          },
          ["expander" /* Expander */]: {
            // gridColumn: GridColumns.Expander,
            cursor: "pointer"
          },
          expanderIcon: {
            ...styleguide.transition.short,
            transitionProperty: "transform",
            transform: "rotate(90deg)"
          },
          expanderIconExpanded: {
            transform: "rotate(270deg)"
          },
          ["contentIndicator" /* ContentIndicator */]: {
            // gridColumn: GridColumns.ContentIndicator,
          },
          ["workspace" /* Workspace */]: {
            // gridColumn: GridColumns.Workspace,
            width: styleguide.gridbase * 10,
            padding: [0, styleguide.gridbase * 0.5],
            boxSizing: "border-box"
          },
          wsIndicatorButton: {
            alignItems: "flex-start"
          },
          wsIndicator: {
            width: styleguide.gridbase * 10,
            boxSizing: "border-box",
            textAlign: "start",
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
            userSelect: "none",
            backgroundColor: "var(--ws-background)",
            padding: [0, styleguide.gridbase * 0.5, styleguide.gridbase * 0.25],
            height: styleguide.gridbase * 2,
            lineHeight: `${styleguide.gridbase * 2}px`,
            marginRight: styleguide.gridbase * 0.5,
            borderRadius: [2, styleguide.gridbase, styleguide.gridbase, 2],
            basedOn: [useStyles2.textSmall]
          },
          ["assignees" /* Assignees */]: {
            // gridColumn: GridColumns.Assignees,
          },
          assignee: {
            marginRight: styleguide.gridbase * 0.5
          },
          ["tags" /* Tags */]: {
            padding: [0, styleguide.gridbase]
            // gridColumn: GridColumns.Tags,
          },
          tag: {
            marginRight: styleguide.gridbase * 0.5
          },
          ["dueDate" /* DueDate */]: {
            padding: [0, styleguide.gridbase * 0.5],
            whiteSpace: "nowrap"
            // basedOn: [layout.row],
          },
          dueDateIcon: {
            marginRight: styleguide.gridbase * 0.5
          },
          ["pin" /* Pin */]: {
            // gridColumn: GridColumns.Pin,
            width: styleguide.gridbase * 3
          },
          ["extra" /* Extra */]: {},
          pinOff: {
            opacity: 0,
            ...styleguide.transition.short,
            transitionProperty: "opacity"
          },
          pinOffOver: {
            opacity: 1
          },
          ["menu" /* Menu */]: {
            // gridColumn: GridColumns.Menu,
            // basedOn: [layout.row, layout.centerCenter],
          },
          nowrap: {
            whiteSpace: "nowrap"
          },
          titleEditor: {
            width: "100%",
            overflow: "hidden",
            textOverflow: "ellipsis"
          },
          titleText: {
            lineHeight: `${styleguide.gridbase * 3}px`,
            basedOn: [useStyles2.text]
          },
          fillRow: {
            backgroundColor: "transparent"
            // gridColumn: `${GridColumns.Type}/-1`,
          },
          border: {
            height: 1,
            boxSizing: "border-box",
            gridColumn: `${"icon" /* Type */}/-1`,
            borderBottom: `1px solid ${brandLightTheme.primary.p2}`,
            boxShadow: brandLightTheme.shadows.z2
          },
          plusButton: {
            height: styleguide.gridbase * 2,
            width: styleguide.gridbase * 2,
            borderRadius: styleguide.gridbase,
            backgroundColor: brandLightTheme.mono.m1,
            opacity: 0,
            ...styleguide.transition.short,
            transitionProperty: "opacity"
          },
          visibleOnHover: {
            opacity: 0
          },
          backdrop: {
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
          }
        }),
        "item_1cda8c"
      );
      useStrings13 = createUseStrings(list_strings_default);
      Row = ({ children, className }) => {
        const styles = useStyles72();
        return /* @__PURE__ */ import_react_18_2149.default.createElement("tr", { className: cn(styles.row, styles.fillRow, className) }, /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { colSpan: 100 }, children));
      };
      Cell = ({
        children,
        className,
        innerClassName,
        ...rest
      }) => {
        const styles = useStyles72();
        return /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, className), ...rest }, /* @__PURE__ */ import_react_18_2149.default.createElement("div", { className: cn(styles.cellInner, innerClassName) }, children));
      };
      ItemRow = import_react_18_2149.default.forwardRef(
        function({ onWorkspaceMoved, note, isChild, onClick = () => {
        }, attributes }, ref) {
          const styles = useStyles72();
          const gridStyles = useGridStyles();
          const [isMouseOver, setIsMouseOver] = (0, import_react_18_2149.useState)(false);
          const { childCards } = usePartialVertex(note, ["childCards"]);
          const onMouseOver = (0, import_react_18_2149.useCallback)(() => setIsMouseOver(true), []);
          const onMouseLeave = (0, import_react_18_2149.useCallback)(() => setIsMouseOver(false), []);
          const onClickImpl = (e) => {
            e.stopPropagation();
            onClick(note);
          };
          const [isExpanded, setIsExpanded] = (0, import_react_18_2149.useState)(false);
          return /* @__PURE__ */ import_react_18_2149.default.createElement(import_react_18_2149.default.Fragment, null, /* @__PURE__ */ import_react_18_2149.default.createElement(
            "tr",
            {
              className: cn(styles.row, styles.itemRow),
              ref,
              onMouseOver,
              onMouseLeave
            },
            isChild ? /* @__PURE__ */ import_react_18_2149.default.createElement(import_react_18_2149.default.Fragment, null, /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles.childPadding) }), /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles["title" /* Title */]) }, /* @__PURE__ */ import_react_18_2149.default.createElement("table", { className: cn(gridStyles.table) }, /* @__PURE__ */ import_react_18_2149.default.createElement(TypeCell, { note }), /* @__PURE__ */ import_react_18_2149.default.createElement(TitleCell, { note, onClick: onClickImpl })))) : /* @__PURE__ */ import_react_18_2149.default.createElement(import_react_18_2149.default.Fragment, null, /* @__PURE__ */ import_react_18_2149.default.createElement(TypeCell, { note }), /* @__PURE__ */ import_react_18_2149.default.createElement(TitleCell, { note, onClick: onClickImpl })),
            /* @__PURE__ */ import_react_18_2149.default.createElement(
              ExpanderCell,
              {
                note,
                isExpanded,
                setIsExpanded
              }
            ),
            /* @__PURE__ */ import_react_18_2149.default.createElement(ContentIndicatorCell, { note }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(WorkspaceCell, { note, onWorkspaceMoved }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(AssigneesCell, { note, showMenu: isMouseOver }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(TagsCell, { note, showMenu: isMouseOver }),
            /* @__PURE__ */ import_react_18_2149.default.createElement("td", { className: cn(styles.cell, styles["extra" /* Extra */]) }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(DateCell, { note }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(PinCell, { isChild, note, isMouseOver }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(MenuCell, { note }),
            /* @__PURE__ */ import_react_18_2149.default.createElement(DoneIndicator, { note })
          ), isExpanded && childCards.map((x) => /* @__PURE__ */ import_react_18_2149.default.createElement(
            ItemRow,
            {
              note: x.manager,
              key: x.key,
              onClick,
              isChild: true
            }
          )));
        }
      );
      DoneIndicator = ({ note }) => {
        const styles = useStyles72();
        const partial = usePartialVertex(note, ["status"]);
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          "div",
          {
            className: cn(
              styles.doneIndicator,
              partial.status === "Done" && styles.doneIndicatorActive
            )
          }
        );
      };
      ExpanderCell = ({
        note,
        isExpanded,
        setIsExpanded
      }) => {
        const styles = useStyles72();
        const { childCards } = usePartialVertex(note, ["childCards"]);
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          Cell,
          {
            className: cn(styles["expander" /* Expander */]),
            onClick: () => setIsExpanded((x) => !x)
          },
          !!childCards?.length && /* @__PURE__ */ import_react_18_2149.default.createElement(
            IconArrowDown,
            {
              className: cn(
                styles.expanderIcon,
                isExpanded && styles.expanderIconExpanded
              )
            }
          )
        );
      };
      ContentIndicatorCell = ({ note }) => {
        const styles = useStyles72();
        const { bodyPreview } = usePartialVertex(note, ["bodyPreview"]);
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          "td",
          {
            className: cn(
              styles.cell,
              styles.iconCell,
              styles["contentIndicator" /* ContentIndicator */]
            )
          },
          !!bodyPreview.trim().length && /* @__PURE__ */ import_react_18_2149.default.createElement(IconContent, null)
        );
      };
      AssigneesCell = ({
        note,
        showMenu
      }) => {
        const styles = useStyles72();
        const logger = useLogger();
        const [isInviteOpen, setIsInviteOpen] = (0, import_react_18_2149.useState)(false);
        const { assignees, workspace } = usePartialVertex(note, [
          "assignees",
          "workspace"
        ]);
        const { users } = usePartialVertex(
          workspace?.manager,
          ["users"]
        );
        const workspaces = (0, import_react_18_2149.useMemo)(
          () => [workspace?.manager],
          [workspace?.manager]
        );
        const userManagers = (0, import_react_18_2149.useMemo)(
          () => Array.from(users || []).map((x) => x.manager),
          [users]
        );
        const managers = (0, import_react_18_2149.useMemo)(
          () => Array.from(assignees || []).map((x) => x.manager),
          [assignees]
        );
        const onUsersInvited = (users2) => {
          for (const user of users2) {
            assignNote(logger, "list", note.getVertexProxy(), user.getVertexProxy());
          }
        };
        const onInviteUserSelected = () => {
          setIsInviteOpen(true);
        };
        return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles.assignees) }, managers.map((x) => /* @__PURE__ */ import_react_18_2149.default.createElement(
          Assignee,
          {
            key: x.key,
            user: x,
            cardManager: note,
            users: userManagers,
            assignees: managers,
            className: cn(styles.assignee),
            size: "small",
            onInviteUserSelected,
            source: "list"
          }
        )), /* @__PURE__ */ import_react_18_2149.default.createElement(
          AssignButton,
          {
            source: "list",
            cardManager: note,
            users: userManagers,
            assignees: managers,
            className: cn(styles.visibleOnHover, styles.assignee),
            onInviteUserSelected
          }
        ));
      };
      TagsCell = ({
        note,
        showMenu
      }) => {
        const styles = useStyles72();
        const logger = useLogger();
        const { tags, workspace } = usePartialVertex(note, ["tags", "workspace"]);
        const managers = (0, import_react_18_2149.useMemo)(
          () => Array.from(tags).map(([, x]) => x.manager),
          [tags]
        );
        const tagsMng = /* @__PURE__ */ new Map();
        for (const [p, c] of tags) {
          tagsMng.set(
            p.manager,
            c.manager
          );
        }
        const onDelete = (tag) => {
          const proxy = note.getVertexProxy();
          const newTags = proxy.tags;
          const tagToDelete = tag.parentTag || tag;
          newTags.delete(tagToDelete);
          proxy.tags = newTags;
          logger.log({
            severity: "INFO",
            event: "MetadataChanged",
            metadataType: "tag",
            uiSource: "list",
            vertex: note.key,
            removed: tag.key
          });
        };
        const onTag = (tag) => {
          const proxy = note.getVertexProxy();
          const newTags = proxy.tags;
          const tagKey = tag.parentTag || tag;
          const removedTag = newTags.get(tagKey);
          newTags.set(tagKey, tag);
          logger.log({
            severity: "INFO",
            event: "MetadataChanged",
            metadataType: "tag",
            removed: removedTag?.key,
            added: tag.key
          });
        };
        return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles["tags" /* Tags */]) }, managers.map((x) => /* @__PURE__ */ import_react_18_2149.default.createElement(
          TagView,
          {
            className: cn(styles.tag),
            showMenu: "hover",
            key: x.key,
            tag: x,
            onSelected: onTag,
            onDelete
          }
        )), /* @__PURE__ */ import_react_18_2149.default.createElement(
          TagButton,
          {
            onTagged: onTag,
            className: cn(styles.visibleOnHover),
            noteId: note
          }
        ));
      };
      TypeCell = ({
        note,
        isDraft
      }) => {
        const styles = useStyles72();
        const partialCard = usePartialVertex(note, ["type"]);
        const isActionable = partialCard.type === "task" /* Task */;
        return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles.iconCell, styles["icon" /* Type */]) }, isDraft ? /* @__PURE__ */ import_react_18_2149.default.createElement(IconNewTask, null) : isActionable ? /* @__PURE__ */ import_react_18_2149.default.createElement(ItemCheckbox, { note }) : /* @__PURE__ */ import_react_18_2149.default.createElement(IconNote, null));
      };
      ItemCheckbox = ({ note }) => {
        const partial = usePartialVertex(note, ["status"]);
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          CheckBox_default,
          {
            name: note.key,
            checked: partial.status === "Done",
            onChange: () => partial.status === "Done" ? "ToDo" : "Done"
          }
        );
      };
      TitleNode2 = import_react_18_2149.default.forwardRef(
        ({ className, ...props }, ref) => {
          const styles = useStyles72();
          return /* @__PURE__ */ import_react_18_2149.default.createElement(
            Text,
            {
              ref,
              className: cn(styles.titleText, styles.nowrap, className),
              ...props
            }
          );
        }
      );
      DraftTitleNode = import_react_18_2149.default.forwardRef(
        ({ className, ...props }, ref) => {
          const styles = useStyles72();
          return /* @__PURE__ */ import_react_18_2149.default.createElement(Text, { ref, className: cn(styles.titleText, className), ...props });
        }
      );
      WorkspaceCell = ({
        note,
        isDraft,
        onWorkspaceMoved
      }) => {
        const styles = useStyles72();
        const logger = useLogger();
        const { workspace } = usePartialVertex(note, ["workspace"]);
        const wsManager = workspace.manager;
        const toastController = useToastController();
        const strings = useStrings13();
        const setWorkspace = (workspace2) => {
          if (isDraft) {
            const proxy = note.getVertexProxy();
            proxy.workspace = workspace2.getVertexProxy();
          } else {
            moveCard(note, workspace2, note.graph, logger, "list");
          }
          if (onWorkspaceMoved) {
            onWorkspaceMoved(note);
          }
          toastController.displayToast({
            text: format(isDraft ? strings.draftSaved : strings.cardMoved, {
              workspace: workspace2.getVertexProxy().name
            }),
            duration: 1500
          });
        };
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          Cell,
          {
            className: cn(styles["workspace" /* Workspace */]),
            colSpan: isDraft ? 3 : 1
          },
          /* @__PURE__ */ import_react_18_2149.default.createElement(
            WorkspaceIndicator,
            {
              menuClassName: cn(styles.wsIndicatorButton),
              workspace: wsManager,
              isExpanded: false,
              setWorkspace,
              validateMove: !isDraft,
              ButtonComponent: isDraft ? WorkspaceDraftIndicatorComponent : WorkspaceIndicatorComponent
            }
          )
        );
      };
      DateCell = ({ note }) => {
        const styles = useStyles72();
        const { dueDate } = usePartialVertex(note, ["dueDate"]);
        let content = null;
        const isLate = dueDate ? dueDate < /* @__PURE__ */ new Date() : false;
        if (dueDate) {
          content = /* @__PURE__ */ import_react_18_2149.default.createElement(import_react_18_2149.default.Fragment, null, /* @__PURE__ */ import_react_18_2149.default.createElement(
            IconDueDate,
            {
              className: cn(styles.dueDateIcon),
              state: isLate ? "late" /* Late */ : "none" /* None */
            }
          ), /* @__PURE__ */ import_react_18_2149.default.createElement(TextSm, null, formatTimeDiff(dueDate)));
        }
        return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles["dueDate" /* DueDate */]) }, content);
      };
      PinCell = ({
        note,
        isMouseOver,
        isChild
      }) => {
        const styles = useStyles72();
        const { isPinned } = usePartialVertex(note, ["isPinned"]);
        const togglePin = () => {
          const proxy = note.getVertexProxy();
          proxy.isPinned = !proxy.isPinned;
        };
        return /* @__PURE__ */ import_react_18_2149.default.createElement(Cell, { className: cn(styles.iconCell, styles["pin" /* Pin */]) }, !isChild && /* @__PURE__ */ import_react_18_2149.default.createElement(Button, { onClick: togglePin }, isPinned ? /* @__PURE__ */ import_react_18_2149.default.createElement(IconPinOn, null) : /* @__PURE__ */ import_react_18_2149.default.createElement(
          IconPinOff,
          {
            className: cn(styles.pinOff, isMouseOver && styles.pinOffOver)
          }
        )));
      };
      MenuCell = ({ note }) => {
        const styles = useStyles72();
        return /* @__PURE__ */ import_react_18_2149.default.createElement(
          Cell,
          {
            className: cn(
              styles.iconCell,
              styles.visibleOnHover,
              styles["menu" /* Menu */]
            )
          },
          /* @__PURE__ */ import_react_18_2149.default.createElement(CardMenuView, { cardManager: note, source: "list" })
        );
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/index.tsx
  var init_table = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/table/index.tsx"() {
      init_grid();
      init_item();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/inline-task-button.tsx
  function InlineTaskButton({ draft, setDraft }) {
    const styles = useStyles73();
    const strings = useStrings14();
    const graph = useGraphManager();
    const rootUser = useRootUser3();
    const onClick = () => {
      const wss = Array.from(
        rootUser.getVertexProxy().settings.workspaces
      ).filter((x) => x instanceof Workspace);
      const ws = wss[0];
      const v = graph.createVertex(
        NS_NOTES,
        {
          createdBy: rootUser.key,
          body: {
            root: { children: [{ tagName: "p", children: [{ text: "" }] }] }
          },
          title: {
            root: { children: [{ tagName: "p", children: [{ text: "" }] }] }
          },
          type: "task" /* Task */,
          assignees: /* @__PURE__ */ new Set([rootUser.key]),
          workspace: ws.key
        },
        void 0,
        true
      );
      setDraft(v.manager);
    };
    const onSave = (note) => {
      const proxy = note.getVertexProxy();
      proxy.tags = new Map(proxy.workspace.taskTags);
      proxy.isLocal = false;
      setDraft(null);
    };
    const onCancel = () => {
      const proxy = draft.getVertexProxy();
      proxy.isDeleted = 1;
      setDraft(null);
    };
    if (!draft) {
      return /* @__PURE__ */ import_react_18_2150.default.createElement(Row, { className: cn(styles.row) }, /* @__PURE__ */ import_react_18_2150.default.createElement(Button, { className: cn(styles.button), onClick }, /* @__PURE__ */ import_react_18_2150.default.createElement(IconNewTask, { className: styles.icon }), /* @__PURE__ */ import_react_18_2150.default.createElement(Text, null, strings.newTask)));
    }
    return /* @__PURE__ */ import_react_18_2150.default.createElement(DraftItemRow, { onWorkspaceMoved: onSave, note: draft, onCancel });
  }
  var import_react_18_2150, useStyles73, useStrings14;
  var init_inline_task_button = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/inline-task-button.tsx"() {
      import_react_18_2150 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_scheme_types();
      init_vertices();
      init_note();
      init_styleguide();
      init_buttons();
      init_icon_new_task();
      init_typography();
      init_css_objects();
      init_theme();
      init_graph();
      init_localization();
      init_list_strings();
      init_table();
      init_item();
      useStyles73 = makeStyles(
        () => ({
          row: {
            borderBottom: `1px solid ${brandLightTheme.primary.p3}`
          },
          icon: {
            marginRight: styleguide.gridbase
          },
          button: {
            height: ROW_HEIGHT,
            boxShadow: brandLightTheme.shadows.z2,
            boxSizing: "border-box",
            padding: [0, styleguide.gridbase],
            backgroundColor: brandLightTheme.colors.background,
            basedOn: [useButtonStyles.button]
          }
        }),
        "inline-task-button_8162e3"
      );
      useStrings14 = createUseStrings(list_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/list-view/index.tsx
  function ListView({ className }) {
    const filter = useFilter();
    const pinnedNotesQuery = useQuery2(filter.buildQuery("listViewPinned", true));
    const unpinnedNotesQuery = useQuery2(
      filter.buildQuery("listViewUnpinned", false)
    );
    if (pinnedNotesQuery.count + unpinnedNotesQuery.count <= 0) {
      return /* @__PURE__ */ import_react_18_2151.default.createElement(EmptyListState, null);
    }
    return /* @__PURE__ */ import_react_18_2151.default.createElement(
      InnerListView,
      {
        noteType: filter.noteType,
        className,
        cards: {
          pinned: pinnedNotesQuery.results,
          unpinned: unpinnedNotesQuery.results
        }
      }
    );
  }
  function InnerListView({
    cards,
    className,
    noteType
  }) {
    const strings = useStrings15();
    const styles = useStyles74();
    const [limit, setLimit] = (0, import_react_18_2151.useState)(PAGE_SIZE);
    const logger = useLogger();
    const toastController = useToastController();
    const docRouter = useDocumentRouter();
    const onNoteSelected = (0, import_react_18_2151.useCallback)(
      (note) => {
        docRouter.goTo(note);
      },
      [docRouter]
    );
    const [draft, setDraft] = (0, import_react_18_2151.useState)(null);
    let visibleCards = cards.unpinned;
    visibleCards = visibleCards.slice(0, limit).filter((x) => x.key !== draft?.key);
    const onDragStarted = () => {
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "dnd",
        uiSource: "list"
      });
    };
    const onReportDrop = () => {
      logger.log({
        severity: "INFO",
        event: "End",
        flow: "dnd",
        uiSource: "list"
      });
    };
    const onDragCancelled = ({ reason }) => {
      logger.log({
        severity: "INFO",
        event: "Cancel",
        flow: "dnd",
        uiSource: "list"
      });
      if (reason === cancellation_reasons_default.DISABLED) {
        toastController.displayToast({
          text: `Drag and drop is not supported in the selected sort mode`,
          duration: 5e3
        });
      }
    };
    let headerText = "";
    if (noteType === "note" /* Note */) {
      headerText = cards.pinned.length ? strings.pinnedNotes : strings.pinNotesCta;
    } else if (noteType === "task" /* Task */) {
      headerText = cards.pinned.length ? strings.pinnedTasks : strings.pinTaskCta;
    }
    return /* @__PURE__ */ import_react_18_2151.default.createElement(
      DragAndDropContext,
      {
        disabled: true,
        onDragStarted,
        onDrop: onReportDrop,
        onDragCancelled
      },
      /* @__PURE__ */ import_react_18_2151.default.createElement(Scroller2, null, (ref) => /* @__PURE__ */ import_react_18_2151.default.createElement("div", { ref, className: cn(styles.listRoot, className) }, /* @__PURE__ */ import_react_18_2151.default.createElement(ItemsTable, null, !!headerText && /* @__PURE__ */ import_react_18_2151.default.createElement(Row, null, /* @__PURE__ */ import_react_18_2151.default.createElement(LabelSm, null, headerText)), cards.pinned.map((c, index) => /* @__PURE__ */ import_react_18_2151.default.createElement(Draggable, { key: c.key, index, data: c }, (draggableProps, ref2) => /* @__PURE__ */ import_react_18_2151.default.createElement(
        ItemRow,
        {
          index,
          note: c,
          key: c.key,
          ref: ref2,
          onClick: onNoteSelected,
          ...draggableProps
        }
      ))), /* @__PURE__ */ import_react_18_2151.default.createElement(Row, null), noteType === "task" /* Task */ && /* @__PURE__ */ import_react_18_2151.default.createElement(InlineTaskButton, { draft, setDraft }), visibleCards.map((c) => /* @__PURE__ */ import_react_18_2151.default.createElement(ItemRow, { note: c, key: c.key, onClick: onNoteSelected }))), /* @__PURE__ */ import_react_18_2151.default.createElement(
        InfiniteScroll,
        {
          limit,
          setLimit,
          pageSize: PAGE_SIZE,
          recordsLength: cards.unpinned.length,
          isVisible: true
        }
      )))
    );
  }
  var import_react_18_2151, useStyles74, useStrings15, PAGE_SIZE;
  var init_list_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/list-view/index.tsx"() {
      import_react_18_2151 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_note();
      init_styleguide();
      init_toast();
      init_typography();
      init_css_objects();
      init_localization();
      init_react_utils();
      init_scrolling2();
      init_dragndrop();
      init_empty_state();
      init_infinite_scroll();
      init_inline_task_button();
      init_list_strings();
      init_table();
      init_logger();
      init_app();
      init_query2();
      useStyles74 = makeStyles((theme) => ({
        item: {
          position: "relative",
          marginBottom: styleguide.gridbase * 2
        },
        listRoot: {
          height: "100%",
          overflowY: "auto"
        }
      }));
      useStrings15 = createUseStrings(list_strings_default);
      PAGE_SIZE = 20;
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/search-results/index.tsx
  function SearchResults({ className }) {
    const logger = useLogger();
    const graph = useGraphManager();
    const searchEngine = graph.noteSearchEngine;
    const { textQuery } = usePartialFilter(["textQuery"]);
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    (0, import_react_18_2152.useEffect)(() => {
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "search"
      });
      return () => {
        logger.log({
          severity: "INFO",
          event: "End",
          flow: "search"
        });
      };
    }, [logger]);
    const results = (0, import_react_18_2152.useMemo)(() => {
      const items = searchEngine.search(
        textQuery,
        (note) => selectedWorkspacesQuery.hasVertex(note)
      );
      return {
        unpinned: items,
        pinned: []
      };
    }, [searchEngine, selectedWorkspacesQuery, textQuery]);
    return /* @__PURE__ */ import_react_18_2152.default.createElement(InnerListView, { className, cards: results });
  }
  var import_react_18_2152;
  var init_search_results = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/search-results/index.tsx"() {
      import_react_18_2152 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_graph();
      init_logger();
      init_query2();
      init_app();
      init_list_view();
    }
  });

  // web-app/src/app/workspace-content/workspace-view/cards-display/index.tsx
  function CardsDisplay() {
    const styles = useStyles75();
    const [viewType, setViewType] = (0, import_react_18_2153.useState)("list" /* List */);
    const [showFilters, setShowFilters] = (0, import_react_18_2153.useState)(false);
    const strings = useStrings16();
    const filter = useFilter();
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    (0, import_react_18_2153.useEffect)(() => {
      if (viewType === "board" /* Board */) {
        filter.groupBy = selectedWorkspacesQuery.count > 1 ? "workspace" : "assignee";
      }
    }, [viewType, filter, selectedWorkspacesQuery]);
    let content = null;
    const isInSearch = (filter.textQuery?.length || 0) > 0;
    if (isInSearch) {
      content = /* @__PURE__ */ import_react_18_2153.default.createElement(SearchResults, { className: cn(styles.contentView) });
    } else {
      if (viewType === "list" /* List */) {
        content = /* @__PURE__ */ import_react_18_2153.default.createElement(ListView, { className: cn(styles.contentView) });
      } else if (viewType === "board" /* Board */) {
        content = /* @__PURE__ */ import_react_18_2153.default.createElement(BoardView, { className: cn(styles.contentView) });
      }
    }
    return /* @__PURE__ */ import_react_18_2153.default.createElement("div", { className: cn(styles.displayRoot) }, /* @__PURE__ */ import_react_18_2153.default.createElement("div", { className: cn(styles.displayMain) }, !isInSearch ? /* @__PURE__ */ import_react_18_2153.default.createElement(
      DisplayBar,
      {
        viewType,
        setViewType,
        showFilters,
        setShowFilters
      }
    ) : /* @__PURE__ */ import_react_18_2153.default.createElement(H2, { className: cn(styles.title) }, strings.searchResults), /* @__PURE__ */ import_react_18_2153.default.createElement(ToolbarCenterItem, { className: cn(layout.flexSpacer) }, /* @__PURE__ */ import_react_18_2153.default.createElement(
      SearchField,
      {
        query: filter.textQuery,
        setQuery: (q) => {
          filter.textQuery = q;
        }
      }
    )), /* @__PURE__ */ import_react_18_2153.default.createElement(
      FiltersView,
      {
        isVisible: showFilters,
        setIsVisible: setShowFilters,
        className: cn(styles.filters)
      }
    ), /* @__PURE__ */ import_react_18_2153.default.createElement(ActiveFiltersView, { className: cn(styles.activeFilters) }), /* @__PURE__ */ import_react_18_2153.default.createElement("div", { className: cn(styles.displayContent) }, content)));
  }
  var import_react_18_2153, useStyles75, useStrings16;
  var init_cards_display = __esm({
    "web-app/src/app/workspace-content/workspace-view/cards-display/index.tsx"() {
      import_react_18_2153 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_typography();
      init_css_objects();
      init_responsive();
      init_localization();
      init_toolbar();
      init_board_view();
      init_cards_display_strings();
      init_display_bar();
      init_filters();
      init_active_filters();
      init_search_field();
      init_list_view();
      init_search_results();
      init_app();
      init_query2();
      useStyles75 = makeStyles((theme) => ({
        displayRoot: {
          flexShrink: 0,
          flexGrow: 0,
          overflowY: "auto",
          height: "100%",
          width: "100%",
          basedOn: [layout.row]
        },
        displayMain: {
          position: "relative",
          height: "100%",
          overflow: "hidden",
          flexShrink: 1,
          flexGrow: 1,
          basedOn: [layout.column, layout.flex],
          backgroundColor: theme.background[100]
        },
        displayContent: {
          boxSizing: "border-box",
          padding: [styleguide.gridbase * 2, 0],
          overflow: "hidden",
          basedOn: [layout.flexSpacer]
        },
        title: {
          marginTop: styleguide.gridbase * 2,
          padding: [0, styleguide.gridbase * 2],
          height: styleguide.gridbase * 6,
          boxSizing: "border-box"
        },
        contentView: {
          padding: [0, SIDES_PADDING],
          [MediaQueries.TabletOnly]: {
            padding: [0, TABLET_PADDING]
          },
          [MediaQueries.Mobile]: {
            padding: [0, MOBILE_PADDING]
          }
        },
        filters: {
          padding: [0, SIDES_PADDING],
          [MediaQueries.TabletOnly]: {
            padding: [0, TABLET_PADDING]
          },
          [MediaQueries.Mobile]: {
            padding: [0, MOBILE_PADDING]
          }
        },
        activeFilters: {
          padding: [styleguide.gridbase * 2, SIDES_PADDING],
          [MediaQueries.TabletOnly]: {
            padding: [styleguide.gridbase * 2, TABLET_PADDING]
          },
          [MediaQueries.TabletOnly]: {
            padding: [styleguide.gridbase * 2, MOBILE_PADDING]
          }
        }
      }));
      useStrings16 = createUseStrings(cards_display_strings_default);
    }
  });

  // web-app/src/app/workspace-content/workspace-view/empty-state/empty-state.strings.json
  var empty_state_strings_default;
  var init_empty_state_strings = __esm({
    "web-app/src/app/workspace-content/workspace-view/empty-state/empty-state.strings.json"() {
      empty_state_strings_default = {
        en: {
          noSelectionTitle: "You haven't chosen any workspace",
          noSelectionText: "Choose workspaces and start getting things done",
          orVideo: "Or kick back and watch our amazing tutorial"
        }
      };
    }
  });

  // web-app/src/app/workspace-content/workspace-view/empty-state/index.tsx
  function EmptyState({ className }) {
    const styles = useStyles76();
    const strings = useStrings17();
    const [handPoint, setHandPoint] = (0, import_react_18_2154.useState)({
      x: 0,
      y: 0
    });
    return /* @__PURE__ */ import_react_18_2154.default.createElement("div", { className: cn(className, styles.root) }, /* @__PURE__ */ import_react_18_2154.default.createElement("div", { className: cn(styles.container) }, /* @__PURE__ */ import_react_18_2154.default.createElement(H32, { className: cn(styles.textPart) }, strings.noSelectionTitle), /* @__PURE__ */ import_react_18_2154.default.createElement(Text2, { className: cn(styles.textPart) }, strings.noSelectionText), /* @__PURE__ */ import_react_18_2154.default.createElement(
      ArrowIllustration,
      {
        handPoint,
        className: cn(styles.arrowIllustration)
      }
    ), /* @__PURE__ */ import_react_18_2154.default.createElement(
      Illustration2,
      {
        className: cn(styles.illustration),
        setHandLocation: setHandPoint
      }
    )));
  }
  function ArrowIllustration({
    className,
    handPoint
  }) {
    return /* @__PURE__ */ import_react_18_2154.default.createElement(
      "svg",
      {
        className,
        width: "422",
        height: "210",
        viewBox: "0 0 422 210",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M420.41 208.681C396.736 175.564 356.437 158.407 316.936 148.432C277.435 138.457 236.205 133.802 198.699 117.842C126.746 87.5183 89.7718 31.6583 18.8828 12.9053",
          stroke: "#CCC5BC",
          strokeWidth: "2",
          strokeMiterlimit: "10"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M25.5329 0.935059L0.262939 9.04806L19.8139 26.8701L25.5329 0.935059Z",
          fill: "#CCC5BC"
        }
      )
    );
  }
  function Illustration2({
    className,
    setHandLocation
  }) {
    return /* @__PURE__ */ import_react_18_2154.default.createElement(
      "svg",
      {
        className,
        width: "868",
        height: "646",
        viewBox: "0 0 868 646",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M860.219 276.926C859.578 274.676 858.939 272.434 858.258 270.193C858.049 269.474 857.839 268.755 857.619 268.036C857.179 266.579 856.728 265.114 856.267 263.655C852 249.89 847.187 236.2 842.343 222.566C839.733 215.207 836.995 207.877 834.07 200.602C823.699 174.847 810.898 149.772 792.569 126.651C791.51 125.306 790.43 123.971 789.34 122.655C788.407 121.524 787.474 120.405 786.519 119.283C785.481 118.069 784.443 116.855 783.384 115.66C782.346 114.475 781.298 113.297 780.228 112.13C780.175 112.064 780.123 112.008 780.07 111.953C779.053 110.842 778.036 109.73 777.008 108.638C776.86 108.489 776.724 108.339 776.578 108.19C775.865 107.424 775.141 106.668 774.408 105.911C773.821 105.284 773.223 104.669 772.605 104.052C772.134 103.557 771.64 103.071 771.149 102.577C770.53 101.942 769.901 101.315 769.261 100.691C768.831 100.261 768.39 99.8223 767.939 99.3927C767.279 98.7391 766.607 98.0855 765.936 97.441C764.877 96.4232 763.809 95.4146 762.718 94.3968C761.921 93.6411 761.103 92.8931 760.285 92.1465C759.928 91.8296 759.582 91.5112 759.226 91.1851C758.534 90.5589 757.842 89.9342 757.139 89.3263C753.135 85.7489 749.003 82.266 744.767 78.8669C743.813 78.1005 742.86 77.3357 741.884 76.5876C740.438 75.4388 738.98 74.3083 737.502 73.1976C737.093 72.8807 736.684 72.5714 736.274 72.2637C736.001 72.058 735.729 71.8523 735.456 71.6573C735.172 71.4425 734.89 71.2368 734.606 71.0311C733.338 70.0788 732.058 69.1449 730.769 68.2109C730.602 68.0799 730.423 67.958 730.245 67.8376C730.068 67.7066 729.888 67.5847 729.721 67.4644C729.344 67.1932 728.967 66.9235 728.579 66.6523C725.245 64.2801 721.858 61.9642 718.409 59.6956C685.044 37.7589 646.124 20.5012 604.423 10.3038C604.077 10.2109 603.721 10.1271 603.375 10.0418C573.753 2.88854 542.75 -0.707134 511.356 0.115604C493.312 0.592488 475.633 2.38423 458.332 5.25162C457.976 5.308 457.63 5.36437 457.284 5.42836C408.737 13.5994 363.063 30.2309 319.928 49.9918C319.571 50.1503 319.225 50.3179 318.879 50.4779C301.841 58.303 285.211 66.6233 268.948 75.0945C268.35 75.4023 267.763 75.7207 267.165 76.0285C263.16 78.1203 259.175 80.2214 255.212 82.3315C235.1 93.0241 215.2 103.959 195.1 114.661C191.87 116.379 188.641 118.107 185.401 119.806C185.034 120.002 184.678 120.197 184.31 120.385C184.027 120.543 183.734 120.692 183.439 120.851C183.388 120.878 183.324 120.916 183.262 120.944C180.137 122.588 177.013 124.221 173.867 125.838C170.544 127.556 167.199 129.246 163.843 130.908C153.777 135.895 143.313 140.321 131.652 142.628C120.748 144.785 109.57 145.812 99.2222 149.417C90.2676 152.545 82.1946 157.009 74.9911 162.145C70.9652 165.021 67.1594 168.084 63.5629 171.306C62.3353 172.408 61.141 173.52 59.9665 174.649C58.8648 175.696 57.7859 176.759 56.7267 177.842C49.7857 184.884 43.6415 192.438 38.0526 200.039C17.2297 228.345 4.67865 260.208 1.08222 292.62C-0.658331 308.3 -0.312345 324.11 2.21426 339.733C2.30834 340.405 2.42367 341.078 2.539 341.75C2.61184 342.189 2.69682 342.637 2.78028 343.076C2.97907 344.141 3.17938 345.204 3.39941 346.269C6.48293 361.331 11.829 375.947 18.2055 390.394C25.7018 407.38 34.1527 424.181 39.2393 441.728C41.9131 450.917 43.5899 460.284 43.643 469.706C43.7052 479.371 42.0284 488.962 40.4032 498.515C37.4365 515.884 34.7202 533.786 42.5003 550.671C48.6234 563.966 60.0636 575.411 73.7695 584.595C113.514 622.188 171.34 638.364 227.879 642.866C257.611 645.234 287.548 644.784 317.366 644.844C347.845 644.903 378.323 644.963 408.802 645.022C470.712 645.144 532.621 645.264 594.531 645.386C625.668 645.447 658.254 647.679 689.079 643.233C720.51 638.701 748.291 625.127 769.258 603.814C790.058 582.671 799.969 555.17 798.738 527.402C800.856 513.437 801.204 499.306 802.92 485.31C805.216 466.652 810.512 448.273 818.784 430.642C822.978 421.714 827.937 412.993 833.599 404.551C839.24 396.156 845.584 388.05 851.141 379.617C861.416 364.04 867.1 347.521 867.887 330.031C868.691 312.17 865.125 294.342 860.219 276.926Z",
          fill: "#F5ECDC"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M474.369 574.574C482.216 586.81 490.994 597.716 496.314 611.814C500.57 623.252 505.225 634.424 511.875 644H608.3C606.438 628.306 604.443 612.612 602.182 606.494C596.729 591.731 588.616 578.298 580.636 564.732C573.321 552.097 567.07 539.196 563.745 524.965C560.287 509.67 545.923 481.208 545.79 480.676C544.992 477.617 544.726 474.159 544.194 470.834C540.337 466.711 537.411 464.317 537.411 464.184C539.273 464.184 475.832 431.599 443.912 432.53C443.513 431.067 441.385 431.067 441.119 432.663H439.124C437.262 432.663 437.262 435.855 439.124 435.855C439.789 435.855 442.05 454.741 442.715 454.741C442.449 456.071 442.183 457.268 441.784 458.465C441.917 463.785 441.784 474.691 440.853 476.819C439.656 479.878 431.543 505.281 429.947 512.596C425.292 534.408 419.573 603.036 419.573 644.266H486.206C483.147 620.725 479.024 597.583 474.369 574.574Z",
          fill: "#C35A39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M474.369 574.574C479.024 597.583 483.014 620.725 486.605 644H511.875C505.225 634.424 500.57 623.119 496.314 611.814C491.127 597.583 482.216 586.81 474.369 574.574Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M545.125 269.073C544.726 256.571 539.938 244.069 537.411 231.833C532.49 207.627 519.855 186.081 500.304 170.786C500.038 170.52 499.772 170.52 499.506 170.52C499.373 170.387 499.107 170.254 498.841 170.254C487.403 170.121 476.098 175.042 467.054 181.825C463.729 184.352 460.803 187.278 458.941 191.002C456.281 196.322 456.281 202.839 455.483 208.558C453.488 221.193 451.493 233.163 453.621 246.064C454.552 251.916 456.148 257.502 457.877 263.221C459.34 268.009 459.872 272.664 463.995 275.59C467.586 278.25 470.379 282.772 474.901 283.969C479.955 285.299 483.413 291.151 488.068 289.954C495.25 288.092 504.028 279.447 511.343 280.644C517.594 281.708 523.712 283.304 530.096 283.171C534.219 283.038 539.805 282.506 542.997 279.58C545.524 277.053 545.125 272.531 545.125 269.073Z",
          fill: "#855140"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M435.533 295.008C433.804 297.402 431.011 300.86 430.346 303.786C430.745 302.988 431.011 302.19 431.41 301.392C431.011 302.323 430.745 303.387 430.479 304.451C430.213 305.382 429.947 306.446 429.814 307.51V307.643C429.814 308.707 429.681 309.638 429.681 310.702C429.681 311.234 429.814 311.899 429.814 312.697C430.08 312.963 430.213 313.894 429.947 315.091C430.479 317.618 431.011 320.012 431.809 322.539C432.208 323.869 432.607 325.066 433.139 326.396C433.272 326.662 434.602 329.854 434.336 329.322C434.735 329.987 435.001 330.652 435.134 330.785C435.799 331.982 436.331 333.312 436.996 334.509C438.326 336.903 439.789 339.43 441.252 341.691C444.045 346.213 446.971 350.469 450.03 354.725C450.828 355.922 455.749 361.774 451.759 357.119C453.222 358.848 454.552 360.71 456.015 362.439C459.074 366.163 462.133 369.754 465.724 372.946C466.256 373.478 466.921 374.01 467.453 374.542C469.315 375.473 471.044 376.936 472.906 378C474.635 378.931 476.364 379.862 478.093 380.66C478.891 380.793 480.753 381.724 481.152 381.857C484.876 383.187 488.733 383.985 492.59 384.783C493.654 384.916 494.718 384.916 495.915 385.049C498.043 385.182 500.171 385.182 502.299 385.182C504.161 385.182 505.89 384.916 507.752 384.783C508.55 384.65 509.481 384.517 510.412 384.384C514.801 383.453 518.924 381.724 523.18 380.66C523.845 380.261 524.643 379.995 525.308 379.596C527.037 378.665 528.766 377.734 530.362 376.803C532.49 375.473 534.618 374.01 536.746 372.68C537.544 372.015 538.342 371.35 539.007 370.685C542.066 367.892 544.859 364.966 547.519 361.907C549.115 360.045 550.711 358.316 552.307 356.454C552.972 355.656 553.637 354.858 554.302 354.06C554.435 353.794 556.43 351.134 556.164 351.666C556.696 350.868 557.228 350.07 557.76 349.405C560.819 340.76 564.144 332.115 567.469 323.603C563.745 320.943 559.888 318.682 556.031 316.421C540.736 307.776 524.643 300.594 508.284 294.21C500.57 291.151 492.723 288.358 484.876 285.565C476.896 282.772 468.916 279.58 460.537 277.984C452.956 276.388 445.242 276.654 437.661 277.851C439.523 283.437 439.124 290.087 435.533 295.008Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M522.515 304.584C517.195 284.235 515.2 263.487 516.663 242.606C517.461 241.941 517.195 241.143 516.663 240.611C516.264 239.148 513.471 239.281 513.338 241.01C505.092 247.261 493.92 249.788 483.945 252.847C483.28 252.98 483.014 253.512 482.881 253.911C482.349 254.177 481.95 254.842 481.95 255.507C484.344 271.334 485.142 305.648 486.738 306.18H486.871C487.27 306.978 488.467 307.244 489.265 306.845C495.25 308.441 501.368 309.239 507.619 309.239C512.54 309.239 518.126 309.239 521.983 306.047C522.648 305.781 522.781 305.116 522.515 304.584Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          opacity: "0.5",
          d: "M503.363 273.462C511.21 268.009 513.338 258.566 516.264 250.054C516.397 247.527 516.53 245.133 516.663 242.606C517.461 241.941 517.195 241.143 516.663 240.611C516.264 239.148 513.471 239.281 513.338 241.01C505.092 247.261 493.92 249.788 483.945 252.847C483.28 252.98 483.014 253.512 482.881 253.911C482.349 254.177 481.95 254.842 481.95 255.507C482.881 261.625 483.546 270.403 484.078 279.048C490.994 279.048 497.644 277.452 503.363 273.462Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M338.31 150.437C337.778 149.639 336.448 149.639 336.182 150.703C335.118 155.624 337.379 155.092 336.847 160.013C336.182 165.599 332.325 176.239 330.33 181.293C326.34 191.8 322.483 202.44 319.025 213.08C315.7 223.454 311.045 234.493 308.385 245.133C306.39 253.645 307.055 264.285 313.173 271.201C321.818 280.644 333.256 268.807 335.251 262.157C342.034 239.946 343.497 208.824 349.083 186.347C350.679 179.83 352.807 167.86 353.339 161.077C354.137 152.565 348.285 146.181 338.31 150.437Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M546.056 480.543C545.258 477.484 544.992 474.026 544.46 470.701C540.603 466.578 537.544 464.051 537.677 464.051C539.539 464.051 476.098 431.599 444.178 432.397C443.779 430.934 441.651 430.934 441.385 432.53H439.39C437.528 432.53 437.528 435.722 439.39 435.722C440.055 435.722 442.449 454.608 442.981 454.608C442.715 455.938 442.449 457.135 442.183 458.332C442.316 462.056 442.183 468.44 441.917 472.696C445.641 472.962 449.365 472.962 453.222 472.829C445.508 515.522 441.385 558.747 440.853 602.105C440.853 602.77 441.917 602.77 441.917 602.105C442.449 558.747 446.572 515.389 454.286 472.696C458.01 472.563 461.734 472.297 465.458 472.297C475.832 472.164 489.93 469.238 529.83 481.474C534.884 483.07 540.204 482.804 545.391 483.868C546.189 484.001 547.12 484.267 547.918 484.533C546.721 482.139 546.056 480.676 546.056 480.543Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M523.712 190.337C518.658 167.86 487.935 166.397 473.438 180.229C466.123 187.278 462.266 197.253 461.069 207.228C459.606 218.267 460.271 229.838 463.463 240.478C465.857 248.591 469.448 257.236 475.433 263.354C485.142 273.063 504.959 265.881 513.205 259.497C522.249 252.448 525.84 238.483 528.101 227.178C530.495 214.942 526.372 202.573 523.712 190.337Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M746.62 563.535C739.704 561.274 732.389 555.289 724.808 555.555C723.212 555.555 722.547 557.018 722.68 558.215C722.148 558.348 721.749 558.614 721.217 558.88C715.232 561.673 709.513 564.998 703.661 567.924C702.065 568.722 702.331 570.451 703.395 571.382C703.794 572.18 704.592 572.712 705.789 572.313C709.646 571.116 713.37 569.919 717.094 568.456C720.951 566.86 724.409 564.865 728.931 565.796C735.182 567.126 740.236 568.722 746.62 567.791C748.881 567.259 748.482 564.067 746.62 563.535Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M353.339 117.586C351.211 112.665 348.817 109.074 347.088 103.887C347.088 103.222 346.556 102.424 345.758 102.69C342.965 103.488 342.566 106.547 342.965 109.739C340.97 106.281 338.576 102.956 336.049 99.8969C333.921 97.3699 328.468 89.6559 325.808 91.5179C325.276 91.9169 325.01 92.3159 324.744 92.8479C323.68 91.7839 322.483 90.0549 321.02 91.3849C319.291 92.9809 320.355 97.1039 321.153 99.0989C322.35 101.759 324.212 104.153 326.074 106.281C327.404 107.877 328.734 109.473 330.064 111.069C329.133 113.463 326.074 113.463 324.611 115.458C323.547 116.921 323.547 118.517 324.079 120.379C321.685 123.039 318.493 125.832 320.621 130.221C321.951 132.881 324.212 134.743 326.473 136.472C328.734 143.521 328.468 151.235 331.527 158.151C332.059 159.481 332.99 160.811 334.187 161.476C335.384 162.008 348.817 169.855 353.073 159.082V158.949C353.073 158.816 353.073 158.683 353.073 158.55C353.871 153.895 355.467 147.644 355.999 142.989C356.531 138.467 357.462 133.546 357.196 129.024C357.196 124.768 354.802 121.31 353.339 117.586Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M746.487 556.22L734.517 554.624C734.384 554.624 734.251 554.491 734.118 554.491C727.202 551.831 720.286 553.56 713.503 555.954C710.045 557.151 706.72 558.747 703.129 559.279C696.479 560.21 693.021 555.954 690.228 550.501C689.563 549.171 688.1 549.171 687.169 549.836C683.312 550.634 679.588 551.033 675.598 551.166C673.736 551.299 673.071 553.161 673.736 554.491C673.736 554.89 673.869 555.289 674.135 555.821C677.46 560.476 680.918 565.131 684.243 569.786C685.706 571.781 687.036 573.643 688.632 575.372C694.351 581.623 704.725 585.746 712.705 587.874C714.966 588.406 716.163 585.879 714.833 584.283C712.838 581.756 707.119 579.096 705.523 576.303C702.464 571.249 707.385 568.589 711.242 566.594C713.37 565.53 718.424 564.599 720.419 563.402C723.212 562.604 726.138 562.205 729.064 562.205C735.581 562.072 741.566 563.136 747.817 560.343C749.812 559.279 748.349 556.486 746.487 556.22Z",
          fill: "#E68B60"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M589.946 337.169C587.153 331.716 582.631 327.726 577.577 324.401C564.543 315.623 550.445 308.175 536.48 300.993C535.549 300.594 534.751 300.993 534.352 301.658C533.953 301.658 533.554 301.791 533.155 302.19C511.21 324.002 494.053 349.937 482.615 378.399C482.349 379.197 481.285 379.064 481.019 378.399C477.162 365.232 473.438 352.198 470.246 338.898C467.719 328.258 466.256 318.948 468.118 308.175C469.847 298.333 471.975 288.624 474.369 278.915C474.768 277.319 455.483 275.324 448.7 275.058C441.385 274.792 423.297 276.654 416.115 277.851C400.554 280.511 399.091 281.309 383.397 282.905C383.264 282.905 383.131 282.905 382.998 282.905C378.077 282.772 374.486 282.373 371.161 281.974C366.772 281.575 362.915 281.176 357.462 281.442C355.733 281.575 354.403 280.112 354.536 278.383C354.536 278.25 354.536 277.984 354.536 277.851C355.334 267.344 349.615 256.305 348.551 245.133C348.019 239.414 347.354 233.695 348.418 227.976C349.216 223.587 351.078 219.464 352.408 215.208C354.536 208.292 354.802 201.642 351.61 195.258C351.211 194.593 351.477 191.667 351.61 191.268C353.339 184.884 354.669 178.5 355.733 171.983C355.999 170.52 353.605 168.791 352.142 169.057C347.487 170.121 342.832 171.318 338.177 172.382C334.32 173.313 330.33 175.175 326.606 176.372C324.345 177.037 324.611 188.874 321.818 194.061C301.336 232.631 288.967 290.619 292.691 309.638C296.681 329.854 324.478 348.208 342.034 352.73C363.314 358.183 381.535 350.203 403.347 352.73C418.642 354.592 418.509 361.375 419.44 374.542C420.77 393.694 426.356 432.131 433.006 450.352C434.735 455.14 436.597 461.391 441.784 463.652C446.971 465.913 465.325 453.145 499.24 468.307C508.417 472.43 529.83 471.898 538.076 472.031C538.475 472.031 538.874 471.898 539.007 471.765C547.12 471.765 552.573 460.327 555.765 454.342C561.351 443.702 566.272 432.663 570.794 421.624C575.715 409.92 578.375 397.152 583.828 385.714C588.217 376.67 593.005 369.621 594.468 358.715C594.867 351.533 593.138 343.553 589.946 337.169Z",
          fill: "#FFFBF5"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M565.075 369.754C558.159 371.616 555.1 380.394 554.967 386.778C554.967 392.231 556.43 397.684 556.829 403.137C557.361 409.654 556.297 416.038 555.765 422.555C555.233 428.274 555.632 433.86 556.297 439.579C556.696 442.904 557.095 446.096 557.627 449.421C562.149 440.377 566.272 430.934 570.262 421.624C575.183 409.92 577.843 397.152 583.296 385.714C583.429 385.448 583.562 385.182 583.695 384.916C580.104 377.468 573.188 367.493 565.075 369.754Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M473.305 268.807C469.847 262.689 462.931 258.034 461.069 250.985C460.138 247.394 460.67 243.404 461.069 239.68C461.601 234.626 462 229.705 461.867 224.784C461.734 215.74 462.665 206.563 459.207 197.918C458.01 198.051 454.685 198.849 453.488 199.647C453.754 199.248 454.02 198.982 454.286 198.583C455.084 197.519 453.621 196.056 452.823 197.12C451.227 199.248 449.897 201.376 448.966 203.77C448.966 203.903 448.833 203.903 448.833 204.036C447.37 207.627 446.705 211.617 446.439 215.607C445.774 225.316 448.168 235.158 443.912 244.468C440.72 251.384 437.927 257.236 439.124 265.083C439.922 270.004 441.385 274.925 444.045 279.181C447.503 284.9 451.759 285.831 458.276 286.23C461.867 286.363 468.251 289.289 473.571 290.087C475.566 290.353 477.428 288.757 477.561 286.762C477.96 280.511 476.497 274.526 473.305 268.807Z",
          fill: "#B76751"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M671.874 560.742C680.652 559.811 689.43 557.683 697.809 554.89C695.016 549.969 693.42 547.708 693.42 546.378C693.021 542.255 696.479 540.127 693.686 530.817C681.184 490.651 650.195 467.775 639.156 441.308C628.649 416.038 623.462 393.295 611.625 368.557C602.98 350.336 592.473 332.78 574.252 322.007C572.789 321.209 558.292 327.194 556.164 333.578C554.568 338.366 554.568 343.553 554.435 348.607C554.302 355.124 554.169 361.508 553.903 368.025C553.637 380.926 553.238 393.694 554.568 406.595C555.499 415.506 557.095 424.949 564.41 431.067C568.533 434.392 588.35 456.337 600.586 482.671C609.763 502.355 629.846 524.832 645.673 538.664C655.116 546.91 652.722 555.422 668.682 557.151C670.145 557.417 670.677 559.811 671.874 560.742Z",
          fill: "#FFFBF5"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M570.927 610.883C566.272 592.662 561.085 574.441 553.371 557.151C549.381 548.24 544.46 540.127 539.805 531.615C535.416 523.502 533.022 514.857 530.894 505.946C528.633 496.769 526.239 487.459 521.052 479.479C520.653 478.947 519.722 479.479 520.121 480.011C529.431 494.375 529.431 512.33 536.613 527.758C540.736 536.536 546.189 544.516 550.312 553.294C554.435 562.072 557.893 571.116 560.952 580.293C564.277 590.534 567.203 600.908 569.863 611.282C570.129 611.814 571.06 611.548 570.927 610.883Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M471.576 306.579C471.044 306.047 470.246 306.845 470.778 307.377C475.965 312.298 485.275 314.426 486.738 322.406C486.871 323.071 487.935 322.805 487.802 322.14C486.206 313.894 476.896 311.766 471.576 306.579Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M507.087 325.465C504.028 324.667 500.969 324.268 497.777 324.268C497.112 324.268 497.112 325.332 497.777 325.332C500.836 325.332 503.895 325.731 506.821 326.396C507.486 326.662 507.752 325.598 507.087 325.465Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M347.088 192.997C340.172 194.327 333.123 195.258 326.074 196.056C325.409 196.189 325.409 197.253 326.074 197.12C333.256 196.322 340.305 195.258 347.354 194.061C348.152 193.928 347.886 192.864 347.088 192.997Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M690.76 545.58C683.977 546.511 677.327 548.107 670.81 550.235C670.145 550.501 670.411 551.565 671.076 551.299C677.593 549.171 684.243 547.575 691.026 546.644C691.824 546.511 691.558 545.447 690.76 545.58Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M348.551 124.768C347.088 121.443 345.226 118.251 344.827 114.527C344.694 113.862 343.63 113.862 343.763 114.527C344.029 117.054 344.827 119.315 345.891 121.576C347.354 124.768 350.546 129.29 348.684 132.748C347.487 134.876 345.093 136.073 343.63 137.935C342.167 139.797 341.768 142.058 341.901 144.319C342.034 144.984 343.098 144.984 342.965 144.319C342.566 140.728 344.428 138.467 346.822 136.206C348.285 134.876 349.748 133.546 350.147 131.551C350.679 129.29 349.482 126.763 348.551 124.768Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M341.369 120.512C341.103 119.714 340.837 119.049 340.571 118.384C340.571 117.719 340.438 117.054 339.906 116.655C339.906 116.655 339.773 116.655 339.773 116.522C336.049 109.074 329.798 103.089 326.606 95.2416C326.34 94.5766 325.276 94.8427 325.542 95.5077C328.734 103.089 334.586 108.941 338.443 116.123C337.113 116.256 336.049 117.719 335.384 119.049C334.985 118.517 334.586 117.985 334.187 117.453C333.788 116.921 332.857 117.453 333.256 117.985C333.788 118.783 334.32 119.448 334.852 120.246C334.852 120.379 334.985 120.512 335.118 120.645C335.517 121.31 335.916 121.842 336.448 122.507C336.847 123.039 337.778 122.507 337.379 121.975C336.98 121.31 336.448 120.778 336.049 120.113C336.581 118.916 338.177 116.123 339.507 118.517C339.773 119.049 339.374 120.778 339.241 121.443C339.108 123.571 338.842 125.699 338.576 127.827C338.576 127.96 338.576 128.093 338.709 128.093C338.31 130.088 337.379 132.349 334.852 131.285C333.788 130.886 332.724 129.29 331.793 128.492L326.34 122.773C325.808 122.241 325.143 123.039 325.542 123.571L331.394 129.689C332.458 130.886 333.788 132.482 335.517 132.881V133.014C335.517 134.477 334.586 135.94 333.655 137.137C332.325 138.866 330.596 138.068 329 137.004C328.468 136.605 327.936 137.536 328.468 137.935C330.064 138.999 332.059 140.063 333.788 138.6C335.251 137.403 336.448 135.009 336.581 133.147V133.014C339.241 132.615 339.906 128.625 340.039 126.497C340.039 126.364 340.039 126.231 339.906 126.098C340.039 124.369 340.305 122.773 340.438 121.044C340.571 121.443 341.635 121.177 341.369 120.512Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M741.965 561.673C736.246 560.875 729.862 559.146 724.143 560.875C718.424 562.737 712.705 564.865 707.518 567.791C706.853 568.19 707.518 569.121 708.05 568.722C712.971 566.062 718.158 564.067 723.478 562.205C729.463 560.077 735.581 561.806 741.699 562.604C742.364 562.737 742.63 561.673 741.965 561.673Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M505.624 210.154C505.89 213.346 504.427 216.139 502.432 216.272C500.437 216.405 498.708 213.878 498.575 210.686C498.309 207.494 499.772 204.701 501.767 204.568C503.629 204.435 505.358 206.962 505.624 210.154Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M473.704 212.681C473.97 215.873 472.507 218.666 470.512 218.799C468.517 218.932 466.788 216.405 466.655 213.213C466.389 210.021 467.852 207.228 469.847 207.095C471.709 206.962 473.438 209.356 473.704 212.681Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M483.413 233.296C479.822 230.37 478.625 227.178 479.024 222.656C479.423 218.134 480.088 213.612 480.886 209.09C481.019 208.425 480.088 208.159 479.955 208.824C479.024 213.878 478.093 219.198 477.96 224.385C477.827 228.508 479.689 231.434 482.881 233.961C483.28 234.493 483.945 233.695 483.413 233.296Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M490.728 230.104C488.999 229.306 487.137 228.641 485.408 228.109C484.743 227.976 484.477 228.907 485.142 229.04C486.871 229.572 488.6 230.237 490.329 230.902C490.861 231.168 491.393 230.237 490.728 230.104Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M512.673 197.785C508.683 195.125 503.23 193.263 498.043 193.928C496.713 194.061 495.117 194.726 494.186 195.657C493.654 196.189 493.255 196.854 493.255 197.519C493.255 199.514 496.181 200.445 498.176 200.445C500.969 200.312 503.895 200.312 506.688 200.179C508.683 200.179 510.678 200.312 512.54 199.514C513.338 198.982 513.205 198.184 512.673 197.785Z",
          fill: "#C27155"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M478.359 198.184C478.093 197.652 477.561 197.253 476.763 196.987C475.034 196.322 473.039 196.588 471.31 196.987C469.847 197.386 458.542 201.908 461.734 202.972C462 203.105 462.399 203.105 462.798 203.105C467.719 202.972 473.97 203.504 477.561 200.844C478.625 200.046 478.891 199.115 478.359 198.184Z",
          fill: "#C27155"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M495.117 241.808C494.718 241.808 483.147 241.276 480.753 241.941C478.625 242.473 477.561 245.266 480.088 245.931H480.221C482.482 246.862 484.61 246.33 487.004 246.463C494.984 246.596 496.181 241.675 495.117 241.808Z",
          fill: "#FFFBF5"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M483.679 246.995C482.482 246.995 481.418 246.862 480.221 246.463C480.221 246.463 480.088 246.463 479.955 246.463C478.758 246.064 478.093 245.266 478.226 244.202C478.226 242.872 479.29 241.675 480.753 241.409C482.748 240.877 490.595 241.143 493.92 241.276C494.585 241.276 495.117 241.276 495.25 241.276C495.516 241.276 495.782 241.409 495.915 241.675C496.181 242.074 496.048 242.739 495.649 243.537C495.117 244.335 493.122 247.128 487.137 246.995C486.472 246.995 485.807 246.995 485.142 246.995C484.61 246.995 484.211 246.995 483.679 246.995ZM480.354 245.399C481.95 246.064 483.413 245.931 485.009 245.931C485.674 245.931 486.339 245.931 487.004 245.931C491.925 246.064 493.787 244.202 494.452 243.404C494.851 242.872 494.984 242.606 494.984 242.34C494.718 242.34 494.319 242.34 493.787 242.34C490.728 242.207 482.748 241.941 480.886 242.473C479.822 242.739 479.157 243.67 479.157 244.335C479.157 244.867 479.822 245.266 480.354 245.399Z",
          fill: "#AF471E"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M580.104 258.034C579.572 256.704 578.907 255.507 577.976 254.443C576.779 252.98 575.316 251.384 573.853 249.522C562.016 235.69 552.706 221.725 551.509 202.839C550.578 188.076 546.987 174.909 533.421 167.594C522.249 161.476 509.082 158.284 496.314 159.215C484.344 160.146 469.581 165.067 462 175.042C459.872 177.835 458.542 180.894 455.882 183.421C453.089 185.948 449.631 187.677 447.104 190.47C443.912 193.795 442.05 198.317 444.045 202.706C444.045 202.839 444.178 202.839 444.178 202.972C445.907 206.563 454.552 208.957 458.143 207.893C459.473 207.494 460.537 206.563 461.601 205.632C468.65 199.647 477.827 197.785 486.605 195.79C491.659 194.593 493.787 190.204 498.575 188.475C502.033 187.278 505.757 187.544 507.619 191.002C510.811 196.721 512.407 203.371 512.673 210.021C513.072 219.464 510.412 228.774 511.609 238.217C512.54 245.532 516.264 250.586 521.318 255.374C525.973 260.694 530.096 266.413 529.963 273.861C529.83 278.25 527.436 286.23 531.16 289.821C542.997 301.392 556.696 280.378 565.607 277.053C572.39 274.26 583.429 267.61 580.104 258.034Z",
          fill: "#B76751"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M559.09 263.62C556.962 254.975 552.839 247.261 546.987 240.478C543.795 236.887 540.337 233.296 538.608 228.774C537.012 224.252 537.145 219.331 536.879 214.543C536.081 198.982 532.49 182.49 521.185 171.052C520.653 170.52 519.988 171.318 520.387 171.85C532.49 184.086 535.283 201.642 535.948 218.134C536.081 222.257 536.347 226.38 537.943 230.237C539.406 233.695 541.933 236.621 544.46 239.547C550.844 246.862 555.632 254.709 558.026 264.152C558.292 264.551 559.356 264.285 559.09 263.62Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M455.749 205.499C453.887 206.962 451.626 207.095 449.631 205.898C449.099 205.499 448.567 206.43 449.099 206.829C451.36 208.159 454.153 208.159 456.281 206.43C456.813 205.898 456.281 204.967 455.749 205.499Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M482.216 457.933C473.305 443.436 465.724 428.274 459.34 412.447C459.074 411.782 458.01 412.048 458.276 412.713C464.66 428.54 472.374 443.835 481.285 458.465C481.684 459.13 482.615 458.598 482.216 457.933Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M469.315 449.022C464.261 443.037 459.473 436.786 455.217 430.136C454.818 429.604 453.887 430.136 454.286 430.668C458.675 437.318 463.463 443.702 468.65 449.687C469.049 450.352 469.847 449.554 469.315 449.022Z",
          fill: "#5C3D39"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M361.452 371.217L399.49 219.73C363.447 208.558 337.512 184.884 317.296 161.077C275.534 112 222.201 113.995 222.201 113.995L184.163 265.482C184.163 265.482 244.545 280.112 268.884 313.761C277.928 326.13 328.468 370.286 361.452 371.217Z",
          fill: "#88C3EF"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M143.731 163.072L159.292 52.5488C246.673 52.5488 299.607 114.394 299.607 114.394L284.046 224.917C284.046 224.917 209.965 165.599 143.731 163.072Z",
          fill: "#DFEDF3"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M762.314 467.908C762.314 467.908 703.927 476.553 625.457 453.544L638.89 378.532C638.89 378.532 731.724 397.95 779.737 390.236L762.314 467.908Z",
          fill: "#BFB6AC"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M695.548 421.491C695.548 421.491 618.541 422.688 527.436 392.098L510.811 498.232C510.811 498.232 593.537 519.911 673.204 526.561L695.548 421.491Z",
          fill: "#93AD8B"
        }
      ),
      /* @__PURE__ */ import_react_18_2154.default.createElement(
        "path",
        {
          d: "M717.759 404.999C717.759 404.999 640.752 406.196 549.647 375.606L533.022 481.74C533.022 481.74 615.748 503.419 695.415 510.069L717.759 404.999Z",
          fill: "#C8D6C4"
        }
      )
    );
  }
  var import_react_18_2154, useStrings17, useStyles76;
  var init_empty_state2 = __esm({
    "web-app/src/app/workspace-content/workspace-view/empty-state/index.tsx"() {
      import_react_18_2154 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_texts();
      init_css_objects();
      init_responsive();
      init_localization();
      init_empty_state_strings();
      useStrings17 = createUseStrings(empty_state_strings_default);
      useStyles76 = makeStyles(
        (theme) => ({
          root: {
            position: "relative",
            paddingTop: styleguide.gridbase * 8,
            height: "100%",
            width: "100%",
            boxSizing: "border-box",
            alignItems: "center",
            basedOn: [layout.column],
            backgroundColor: theme.background[100]
          },
          container: {
            alignItems: "center",
            height: "100%",
            basedOn: [layout.column]
          },
          textPart: {
            display: "block",
            marginBottom: styleguide.gridbase,
            flexShrink: 0
          },
          illustration: {
            paddingBottom: styleguide.gridbase * 8,
            flexShrink: 1
          },
          arrowIllustration: {
            position: "absolute",
            left: styleguide.gridbase * 3,
            top: styleguide.gridbase * 8,
            [MediaQueries.Mobile]: {
              display: "none !important"
            }
          }
        }),
        "empty-state_2a41ab"
      );
    }
  });

  // web-app/src/app/workspace-content/workspace-view/index.tsx
  function WorkspaceContentView({ className }) {
    const styles = useStyles77();
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    return /* @__PURE__ */ import_react_18_2155.default.createElement("div", { className: cn(styles.main, className) }, /* @__PURE__ */ import_react_18_2155.default.createElement(Toolbar, null), /* @__PURE__ */ import_react_18_2155.default.createElement(DueDateEditor, null, /* @__PURE__ */ import_react_18_2155.default.createElement("div", { className: cn(styles.content) }, /* @__PURE__ */ import_react_18_2155.default.createElement("div", { className: cn(styles.router) }, /* @__PURE__ */ import_react_18_2155.default.createElement(import_react_router_dom_6_73.Route, { path: `/:workspaceId/notes/:noteId` }, /* @__PURE__ */ import_react_18_2155.default.createElement(NoteView, null)), /* @__PURE__ */ import_react_18_2155.default.createElement(import_react_router_dom_6_73.Route, { path: "/" }, "selectedWorkspacesQuery.length ? (", /* @__PURE__ */ import_react_18_2155.default.createElement(CardsDisplay, null), ") : (", /* @__PURE__ */ import_react_18_2155.default.createElement(EmptyState, null), ")")))));
  }
  var import_react_18_2155, import_react_router_dom_6_73, useStyles77;
  var init_workspace_view = __esm({
    "web-app/src/app/workspace-content/workspace-view/index.tsx"() {
      import_react_18_2155 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_dom_6_73 = __require("https://esm.sh/react-router-dom@6.7.0");
      init_css_objects();
      init_toolbar();
      init_styles();
      init_due_date_editor();
      init_note_editor();
      init_cards_display();
      init_empty_state2();
      init_query2();
      useStyles77 = makeStyles((theme) => ({
        blurred: {
          filter: "blur(2px)"
        },
        main: {
          width: "100%",
          height: "100%",
          flexShrink: 0,
          flexGrow: 0,
          basedOn: [layout.column]
        },
        content: {
          position: "relative",
          width: "100%",
          height: `calc(100% - ${useStyles13.toolbar.rules.height}px)`,
          flexShrink: 1,
          basedOn: [layout.column, layout.flex]
        },
        router: {
          flexShrink: 0,
          flexGrow: 0,
          overflowY: "auto",
          width: "100%",
          height: "100%",
          basedOn: [layout.row]
        }
      }));
    }
  });

  // web-app/src/app/workspace-content/index.tsx
  function WorkspaceSelectorView({
    className
  }) {
    const graph = useGraphManager();
    return /* @__PURE__ */ import_react_18_2156.default.createElement(WorkspaceContentView, { className });
  }
  var import_react_18_2156;
  var init_workspace_content = __esm({
    "web-app/src/app/workspace-content/index.tsx"() {
      import_react_18_2156 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_graph();
      init_workspace_view();
    }
  });

  // styles/components/backdrop.tsx
  var import_react_18_2157, hideAnim2, backdropShow2, backdropHide2, useStyles78;
  var init_backdrop = __esm({
    "styles/components/backdrop.tsx"() {
      import_react_18_2157 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styleguide();
      init_layout();
      init_layer();
      init_css_objects();
      init_ssr();
      hideAnim2 = keyframes(
        {
          from: {
            opacity: 1,
            transform: "translateY(0)"
          },
          to: {
            opacity: 0,
            transform: "translateY(-50%)"
          }
        },
        "backdrop_dd7122"
      );
      backdropShow2 = keyframes(
        {
          from: {
            opacity: 0
          },
          to: {
            opacity: 1
          }
        },
        "backdrop_e31823"
      );
      backdropHide2 = keyframes(
        {
          from: {
            opacity: 1
          },
          to: {
            opacity: 0
          }
        },
        "backdrop_fa2a0d"
      );
      useStyles78 = makeStyles(
        (theme) => ({
          backdrop: {
            backgroundColor: "rgba(8, 25, 43, 0.2)",
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            basedOn: [layout.column, layout.centerCenter],
            animation: `${backdropShow2} 0.15s linear backwards`
          },
          highContrast: {
            backgroundColor: "rgba(255, 255, 255, 0.9)"
          },
          backdropHide: {
            animation: `${backdropHide2} 0.15s linear both`
          },
          hide: {
            animation: `${hideAnim2} 0.15s ${styleguide.transition.timing.standard} both`
          }
        }),
        "backdrop_2fa637"
      );
    }
  });

  // web-app/src/app/workspaces-bar/workspace-bar.strings.json
  var workspace_bar_strings_default;
  var init_workspace_bar_strings = __esm({
    "web-app/src/app/workspaces-bar/workspace-bar.strings.json"() {
      workspace_bar_strings_default = {
        en: {
          myWorkspaces: "My Workspaces",
          selectAll: "Select All",
          unselectAll: "Unselect All",
          add: "New Workspace",
          addShort: "Add",
          invite: "Invite to Workspace",
          inviteShort: "Invite",
          workspaceSettings: "Settings",
          hideWorkspace: "Hide for me",
          showWorkspace: "Show for me",
          hiddenWorkspaces: "Hidden Workspaces",
          hiddenWorkspacesShort: "Hidden",
          inDemo: "This is not available while in demo"
        }
      };
    }
  });

  // web-app/src/app/workspaces-bar/actions.tsx
  function WorkspaceBarActions({
    expanded,
    className
  }) {
    const styles = useStyles79();
    const strings = useStrings18();
    const logger = useLogger();
    const navigate = (0, import_react_router_6_76.useNavigate)();
    const [isShareOpen, setIsShareOpen] = (0, import_react_18_2158.useState)(false);
    const createNew = (0, import_react_18_2158.useCallback)(() => {
      logger.log({
        severity: "INFO",
        event: "Start",
        flow: "create",
        type: "workspace",
        source: "bar:workspace"
      });
      navigate("/new");
    }, [history, logger]);
    return /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.root, className) }, /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.action), onClick: createNew }, /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.actionIcon) }, /* @__PURE__ */ import_react_18_2158.default.createElement(IconPlus2, null)), /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.actionText) }, expanded ? strings.add : strings.addShort)), /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.action), onClick: () => setIsShareOpen(true) }, /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.actionIcon) }, /* @__PURE__ */ import_react_18_2158.default.createElement(IconInvite, null)), /* @__PURE__ */ import_react_18_2158.default.createElement("div", { className: cn(styles.actionText) }, expanded ? strings.invite : strings.inviteShort)));
  }
  function IconPlus2() {
    return /* @__PURE__ */ import_react_18_2158.default.createElement(
      "svg",
      {
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M8 13L8 3",
          stroke: "#945A52",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M3 8L13 8",
          stroke: "#6C2C23",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  function IconInvite() {
    return /* @__PURE__ */ import_react_18_2158.default.createElement(
      "svg",
      {
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M11 5C11 6.65685 9.65685 8 8 8C6.34315 8 5 6.65685 5 5",
          stroke: "#6C2C23",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M11 5C11 3.34315 9.65685 2 8 2C6.34315 2 5 3.34315 5 5",
          stroke: "#6C2C23",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.7",
          d: "M2 15V14C2 10.6863 4.68629 8 8 8V8",
          stroke: "#6C2C23",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.7",
          "fill-rule": "evenodd",
          "clip-rule": "evenodd",
          d: "M9.12602 14H2C1.44772 14 1 14.4477 1 15C1 15.5523 1.44772 16 2 16H10.3542C9.76377 15.4789 9.32838 14.7862 9.12602 14Z",
          fill: "#6C2C23"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.7",
          "fill-rule": "evenodd",
          "clip-rule": "evenodd",
          d: "M12.9002 9.00122C11.6376 7.76331 9.90793 7 8 7V9C8.97444 9 9.88377 9.27875 10.6526 9.76086C11.2868 9.30045 12.0615 9.02175 12.9002 9.00122Z",
          fill: "#6C2C23"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M13 15L13 11",
          stroke: "#945A52",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2158.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M11 13L15 13",
          stroke: "#6C2C23",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  var import_react_18_2158, import_react_router_6_76, useStyles79, useStrings18;
  var init_actions2 = __esm({
    "web-app/src/app/workspaces-bar/actions.tsx"() {
      import_react_18_2158 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_76 = __require("https://esm.sh/react-router@6.7.0");
      init_styles();
      init_typography();
      init_css_objects();
      init_theme();
      init_localization();
      init_logger();
      init_workspace_bar_strings();
      useStyles79 = makeStyles(
        () => ({
          root: {
            width: "100%",
            flexShrink: 0
          },
          action: {
            cursor: "pointer",
            userSelect: "none",
            height: styleguide.gridbase * 5,
            boxSizing: "border-box",
            width: "100%",
            backgroundColor: brandLightTheme.colors.secondaryButton,
            color: brandLightTheme.colors.barActionText,
            padding: styleguide.gridbase * 2,
            alignItems: "center",
            marginBottom: styleguide.gridbase,
            ":last-child": {
              marginBottom: 0
            },
            ":hover": {
              backgroundColor: brandLightTheme.colors.secondaryButtonActive,
              color: brandLightTheme.colors.text
            },
            basedOn: [layout.row]
          },
          disabled: {
            cursor: "not-allowed"
          },
          actionIcon: {
            marginRight: styleguide.gridbase,
            basedOn: [layout.column, layout.centerCenter]
          },
          actionText: {
            whiteSpace: "nowrap",
            color: "currentColor",
            basedOn: [useStyles2.button, layout.column, layout.centerCenter]
          }
        }),
        "actions_2eb8a6"
      );
      useStrings18 = createUseStrings(workspace_bar_strings_default);
    }
  });

  // web-app/src/app/workspaces-bar/ws-selection-utils.ts
  function toggleSelectionItem(items, toggled, selectedKeys, lastSelectedKey, actionType = "single") {
    const toggledIndex = items.findIndex((x) => x === toggled);
    if (toggledIndex === -1) {
      debugger;
      return {
        actionType: "clearAll",
        toggleType: "deselected",
        allSelectedItems: []
      };
    }
    if (!lastSelectedKey && actionType === "range" || !actionType) {
      actionType = "single";
    }
    switch (actionType) {
      case "range": {
        const lastSelectedIndex = items.findIndex((x) => x === lastSelectedKey);
        const slice = items.slice(
          Math.min(lastSelectedIndex, toggledIndex),
          Math.max(lastSelectedIndex, toggledIndex) + 1
        );
        const selected = selectedKeys.includes(toggled);
        let allSelectedItems = selectedKeys;
        if (selected) {
          allSelectedItems = selectedKeys.filter((x) => !slice.includes(x));
        } else {
          allSelectedItems = Array.from(/* @__PURE__ */ new Set([...selectedKeys, ...slice]));
        }
        return {
          actionType: "range",
          toggleType: selected ? "selected" : "deselected",
          allSelectedItems
        };
      }
      case "clearOthers": {
        return {
          actionType: "clearOthers",
          toggleType: "selected",
          allSelectedItems: [toggled]
        };
      }
      case "clearAll":
        return {
          actionType: "clearAll",
          toggleType: "deselected",
          allSelectedItems: []
        };
      case "single":
      default: {
        const newSelected = selectedKeys.filter((x) => x !== toggled);
        const toggleType = newSelected.length === selectedKeys.length ? "selected" : "deselected";
        if (toggleType === "selected") {
          newSelected.push(toggled);
        }
        return {
          actionType: "single",
          toggleType,
          allSelectedItems: newSelected
        };
      }
    }
  }
  function toggleActionFromEvent(e) {
    if (e.ctrlKey) {
      return "clearOthers";
    }
    if (e.shiftKey) {
      return "range";
    }
    return "single";
  }
  var init_ws_selection_utils = __esm({
    "web-app/src/app/workspaces-bar/ws-selection-utils.ts"() {
    }
  });

  // web-app/src/app/workspaces-bar/index.tsx
  function WorkspaceCheckbox({ toggled }) {
    const styles = useStyles80();
    return /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.itemToggle, toggled && styles.itemToggleChecked) }, toggled && /* @__PURE__ */ import_react_18_2159.default.createElement(CheckIcon, null));
  }
  function CheckIcon() {
    return /* @__PURE__ */ import_react_18_2159.default.createElement(
      "svg",
      {
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M6.82617 10.739L11 5",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M5 8.13037L6.82605 10.739",
          stroke: "white",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  function CollapseIcon({ className }) {
    return /* @__PURE__ */ import_react_18_2159.default.createElement(
      "svg",
      {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none",
        className,
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement("g", { clipPath: "url(#clip0_591_1399)" }, /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M9 12L15 18",
          stroke: "#3184DD",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ), /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.6",
          d: "M15 6L9 12",
          stroke: "#1960CF",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )),
      /* @__PURE__ */ import_react_18_2159.default.createElement("defs", null, /* @__PURE__ */ import_react_18_2159.default.createElement("clipPath", { id: "clip0_591_1399" }, /* @__PURE__ */ import_react_18_2159.default.createElement("rect", { width: "24", height: "24", fill: "white" })))
    );
  }
  function WorkspaceToggleView({
    selectedRatio,
    onSelectAll,
    onUnselectAll,
    className,
    expanded
  }) {
    const strings = useStrings19();
    const styles = useStyles80();
    return /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.toggleView) }, expanded && /* @__PURE__ */ import_react_18_2159.default.createElement("div", null, /* @__PURE__ */ import_react_18_2159.default.createElement(LabelSm, null, strings.myWorkspaces)), /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.toggleActions) }, /* @__PURE__ */ import_react_18_2159.default.createElement(
      TextSm,
      {
        onClick: onSelectAll,
        className: cn(
          styles.toggleViewButton,
          selectedRatio === 1 && styles.toggleViewButtonDisabled
        )
      },
      "Select All"
    ), /* @__PURE__ */ import_react_18_2159.default.createElement(
      TextSm,
      {
        onClick: onUnselectAll,
        className: cn(
          styles.toggleViewButton,
          selectedRatio === 0 && styles.toggleViewButtonDisabled
        )
      },
      "Unselect All"
    )));
  }
  function WorkspaceListItem({
    workspace,
    expanded,
    isSelected,
    onClick,
    isHidden,
    setIsHidden,
    isPinned,
    setIsPinned
  }) {
    const color = useWorkspaceColor(workspace);
    const { name } = usePartialVertex(workspace, ["name"]);
    const styles = useStyles80();
    const strings = useStrings19();
    const [isSettingsOpen, setIsSettingsOpen] = (0, import_react_18_2159.useState)(false);
    const style = (0, import_react_18_2159.useMemo)(
      () => ({
        "--ws-background": color.background,
        "--ws-inactive": color.inactive,
        "--ws-active": color.active
      }),
      [color]
    );
    const textRef = (0, import_react_18_2159.useRef)(null);
    const isOverflowing2 = textRef.current && textRef.current.offsetWidth < textRef.current.scrollWidth;
    const renderButton = (0, import_react_18_2159.useCallback)(() => /* @__PURE__ */ import_react_18_2159.default.createElement(IconOverflow_default, null), []);
    return /* @__PURE__ */ import_react_18_2159.default.createElement(
      "div",
      {
        className: cn(
          styles.listItem,
          expanded && styles.listItemExpanded,
          isSelected && styles.listItemSelected
        ),
        style
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement(tooltip_default, { text: name, disabled: !isOverflowing2, position: "right" }, /* @__PURE__ */ import_react_18_2159.default.createElement(
        "div",
        {
          className: cn(styles.itemTab),
          onClick,
          onContextMenu: onClick
        },
        /* @__PURE__ */ import_react_18_2159.default.createElement("div", { ref: textRef, className: cn(styles.itemText) }, name),
        /* @__PURE__ */ import_react_18_2159.default.createElement(WorkspaceCheckbox, { toggled: isSelected })
      )),
      /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(layout.flexSpacer) }),
      expanded && /* @__PURE__ */ import_react_18_2159.default.createElement(import_react_18_2159.default.Fragment, null, /* @__PURE__ */ import_react_18_2159.default.createElement(
        Button,
        {
          className: cn(styles.pinButton, isPinned && styles.pinButtonPinned),
          onClick: () => setIsPinned()
        },
        isPinned ? /* @__PURE__ */ import_react_18_2159.default.createElement(IconPinOn, null) : /* @__PURE__ */ import_react_18_2159.default.createElement(IconPinOff, null)
      ), /* @__PURE__ */ import_react_18_2159.default.createElement(
        Menu,
        {
          renderButton,
          direction: "out",
          position: "right",
          align: "start",
          className: cn(styles.itemMenu)
        },
        /* @__PURE__ */ import_react_18_2159.default.createElement(MenuItem, { onClick: () => setIsSettingsOpen(true) }, strings.workspaceSettings),
        /* @__PURE__ */ import_react_18_2159.default.createElement(MenuItem, { onClick: () => setIsHidden() }, isHidden ? strings.showWorkspace : strings.hideWorkspace)
      ))
    );
  }
  function ExpanderIcon({ className }) {
    return /* @__PURE__ */ import_react_18_2159.default.createElement(
      "svg",
      {
        className,
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M10 8L6 4",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      ),
      /* @__PURE__ */ import_react_18_2159.default.createElement(
        "path",
        {
          opacity: "0.8",
          d: "M6 12L10 8",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round"
        }
      )
    );
  }
  function WorkspacesList({ expanded }) {
    const styles = useStyles80();
    const strings = useStrings19();
    const [showHidden, setShowHidden] = (0, import_react_18_2159.useState)(false);
    const settings = usePartialUserSettings([
      "hiddenWorkspaces",
      "pinnedWorkspaces"
    ]);
    const { hiddenWorkspaces, pinnedWorkspaces } = settings;
    const workspacesQuery = useSharedQuery("workspaces");
    const workspaces = useVertices(workspacesQuery.results);
    const hidden = workspaces.filter((x) => hiddenWorkspaces.has(x.key));
    const visible = workspaces.filter((x) => !hiddenWorkspaces.has(x.key)).sort((x, y) => sortWorkspaces(x, y, pinnedWorkspaces, hiddenWorkspaces));
    const location = (0, import_react_router_6_77.useLocation)();
    const navigate = (0, import_react_router_6_77.useNavigate)();
    const logger = useLogger();
    const lastSelectedKey = (0, import_react_18_2159.useRef)();
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    const toggle = (e, wsMng) => {
      e.preventDefault();
      e.stopPropagation();
      if (location.pathname !== "/") {
        navigate("/");
        logger.log({
          severity: "INFO",
          event: "Click",
          uiSource: "workspace-bar",
          routeInfo: location.pathname + location.search + location.hash
        });
        return;
      }
      const proxy = wsMng.getVertexProxy();
      const collection = hidden.includes(proxy) ? hidden : visible;
      const toggleAction = toggleActionFromEvent(e);
      const r = toggleSelectionItem(
        collection.map((x) => x.key),
        wsMng.key,
        Array.from(selectedWorkspacesQuery.keys()),
        lastSelectedKey.current,
        toggleAction
      );
      const selectedKeys = new Set(r ? r.allSelectedItems : []);
      const prevSelectedKeys = new Set(selectedWorkspacesQuery.keys());
      workspacesQuery.forEach((ws) => ws.selected = selectedKeys.has(ws.key));
      const didSelect = r?.toggleType === "selected";
      if (didSelect) {
        lastSelectedKey.current = wsMng.key;
      }
      logger.log({
        severity: "INFO",
        event: "FilterChange",
        type: "workspace",
        added: Array.from(subtract(selectedKeys, prevSelectedKeys)),
        removed: Array.from(subtract(prevSelectedKeys, selectedKeys)),
        uiSource: "workspace-bar",
        action: r.actionType
      });
    };
    const setIsHidden = (0, import_react_18_2159.useCallback)(
      (ws, hidden2) => {
        hidden2 = Boolean(hidden2);
        hidden2 ? settings.hiddenWorkspaces.add(ws.key) : settings.hiddenWorkspaces.delete(ws.key);
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          type: "hide",
          flag: hidden2,
          vertex: ws.key,
          uiSource: "workspace-bar"
        });
      },
      [settings, logger]
    );
    const setIsPinned = (0, import_react_18_2159.useCallback)(
      (ws, pinned) => {
        pinned = Boolean(pinned);
        pinned ? settings.pinnedWorkspaces.add(ws.key) : settings.pinnedWorkspaces.delete(ws.key);
        logger.log({
          severity: "INFO",
          event: "MetadataChanged",
          type: "pin",
          flag: pinned,
          vertex: ws.key,
          uiSource: "workspace-bar"
        });
      },
      [settings, logger]
    );
    return /* @__PURE__ */ import_react_18_2159.default.createElement(Scroller, null, (ref) => /* @__PURE__ */ import_react_18_2159.default.createElement("div", { ref, className: cn(styles.list) }, visible.map((ws) => /* @__PURE__ */ import_react_18_2159.default.createElement(
      WorkspaceListItem,
      {
        setIsHidden: (hidden2) => setIsHidden(ws, hidden2),
        setIsPinned: (pinned) => setIsPinned(ws, pinned),
        isHidden: false,
        isPinned: pinnedWorkspaces.has(ws.key),
        key: ws.key,
        workspace: ws.manager,
        expanded,
        onClick: () => ws.selected = !ws.selected,
        isSelected: ws.selected
      }
    )), /* @__PURE__ */ import_react_18_2159.default.createElement(
      Button,
      {
        className: cn(styles.expander),
        disabled: !hidden.length,
        onClick: () => setShowHidden((x) => !x)
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.expanderText) }, expanded ? strings.hiddenWorkspaces : strings.hiddenWorkspacesShort),
      /* @__PURE__ */ import_react_18_2159.default.createElement(
        ExpanderIcon,
        {
          className: cn(
            styles.expanderIcon,
            showHidden && styles.expanderIconOpen
          )
        }
      )
    ), showHidden && hidden.map((ws) => /* @__PURE__ */ import_react_18_2159.default.createElement(
      WorkspaceListItem,
      {
        setIsHidden: (hidden2) => setIsHidden(ws, hidden2),
        setIsPinned: (pinned) => setIsPinned(ws, pinned),
        isHidden: true,
        isPinned: false,
        key: ws.key,
        workspace: ws.manager,
        expanded,
        onClick: (e) => ws.selected = !ws.selected,
        isSelected: ws.selected
      }
    ))));
  }
  function WorkspaceBarInternal({
    expanded,
    setExpanded,
    className
  }) {
    const styles = useStyles80();
    const { hiddenWorkspaces, pinnedWorkspaces } = usePartialUserSettings([
      "hiddenWorkspaces",
      "pinnedWorkspaces"
    ]);
    const workspacesQuery = useSharedQuery("workspaces");
    const selectedWorkspacesQuery = useSharedQuery("selectedWorkspaces");
    const logger = useLogger();
    const selectAll = (0, import_react_18_2159.useCallback)(() => {
      workspacesQuery.forEach(
        (ws) => ws.selected = !hiddenWorkspaces.has(ws.key)
      );
      logger.log({
        severity: "INFO",
        event: "FilterChange",
        uiSource: "workspace-bar",
        added: "ALL"
      });
    }, [workspacesQuery, logger, hiddenWorkspaces]);
    const unselectAll = (0, import_react_18_2159.useCallback)(() => {
      workspacesQuery.forEach((ws) => ws.selected = false);
      logger.log({
        severity: "INFO",
        event: "FilterChange",
        uiSource: "workspace-bar",
        removed: "ALL"
      });
    }, [workspacesQuery, logger]);
    return /* @__PURE__ */ import_react_18_2159.default.createElement(Layer, { priority: 2 }, (style) => /* @__PURE__ */ import_react_18_2159.default.createElement(
      "div",
      {
        style,
        className: cn(styles.root, !expanded && styles.collapsed, className)
      },
      /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.header) }, /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(styles.logoContainer) }, /* @__PURE__ */ import_react_18_2159.default.createElement(LogoIcon, { className: cn(styles.logoIcon) }), expanded && /* @__PURE__ */ import_react_18_2159.default.createElement(LogoText, { className: cn(styles.logoText) }), /* @__PURE__ */ import_react_18_2159.default.createElement("div", { className: cn(layout.flexSpacer) }), /* @__PURE__ */ import_react_18_2159.default.createElement(
        Button,
        {
          className: cn(styles.openBarButton),
          onClick: () => setExpanded((x) => !x)
        },
        /* @__PURE__ */ import_react_18_2159.default.createElement(
          CollapseIcon,
          {
            className: expanded ? styles.rotated : void 0
          }
        )
      )), /* @__PURE__ */ import_react_18_2159.default.createElement(
        WorkspaceToggleView,
        {
          expanded,
          selectedRatio: workspacesQuery.count && selectedWorkspacesQuery.count / workspacesQuery.count,
          onSelectAll: selectAll,
          onUnselectAll: unselectAll
        }
      )),
      /* @__PURE__ */ import_react_18_2159.default.createElement(WorkspacesList, { expanded, setExpanded }),
      /* @__PURE__ */ import_react_18_2159.default.createElement(WorkspaceBarActions, { expanded })
    ));
  }
  function MobileBar({ expanded, setExpanded, ...rest }) {
    const styles = useStyles80();
    return createUniversalPortal(
      /* @__PURE__ */ import_react_18_2159.default.createElement(Layer, { priority: 3 }, (style) => /* @__PURE__ */ import_react_18_2159.default.createElement(import_react_18_2159.default.Fragment, null, expanded && /* @__PURE__ */ import_react_18_2159.default.createElement(
        "div",
        {
          style,
          className: cn(styles.backdrop),
          onClick: () => setExpanded(false)
        }
      ), /* @__PURE__ */ import_react_18_2159.default.createElement(
        WorkspaceBarInternal,
        {
          ...rest,
          expanded,
          setExpanded
        }
      )))
    );
  }
  function DesktopBar(props) {
    return /* @__PURE__ */ import_react_18_2159.default.createElement(WorkspaceBarInternal, { ...props });
  }
  function WorkspacesBar(props) {
    const device = useCurrentDevice();
    const isMobile = device < 1 /* Tablet */;
    if (isMobile) {
      return /* @__PURE__ */ import_react_18_2159.default.createElement(MobileBar, { ...props });
    }
    return /* @__PURE__ */ import_react_18_2159.default.createElement(DesktopBar, { ...props });
  }
  var import_react_18_2159, import_react_router_6_77, EXPANDED_WIDTH, COLLAPSED_WIDTH, useStyles80, useStrings19;
  var init_workspaces_bar = __esm({
    "web-app/src/app/workspaces-bar/index.tsx"() {
      import_react_18_2159 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_77 = __require("https://esm.sh/react-router@6.7.0");
      init_set();
      init_styles();
      init_backdrop();
      init_buttons();
      init_icons();
      init_layer();
      init_logo();
      init_menu();
      init_icon_pin_off();
      init_icon_pin_on();
      init_tooltip();
      init_typography();
      init_css_objects();
      init_responsive();
      init_theme();
      init_scrolling();
      init_ssr();
      init_workspace_indicator();
      init_graph();
      init_query2();
      init_vertex2();
      init_localization();
      init_workspace_icon();
      init_actions2();
      init_workspace_bar_strings();
      init_ws_selection_utils();
      init_logger();
      EXPANDED_WIDTH = styleguide.gridbase * 25;
      COLLAPSED_WIDTH = styleguide.gridbase * 14;
      useStyles80 = makeStyles(
        () => ({
          root: {
            flexShrink: 0,
            width: "90vw",
            maxWidth: EXPANDED_WIDTH,
            // overflowY: 'hidden',
            // overflowX: 'visible',
            height: "100%",
            ...styleguide.transition.standard,
            transitionProperty: "width",
            [MediaQueries.Mobile]: {
              position: "absolute",
              top: 0,
              left: 0,
              transitionProperty: "transform",
              transform: "translateX(0)"
            },
            boxShadow: brandLightTheme.shadows.z4,
            backgroundColor: brandLightTheme.colors.background,
            basedOn: [layout.column]
          },
          collapsed: {
            [MediaQueries.Tablet]: {
              width: COLLAPSED_WIDTH
            },
            [MediaQueries.Mobile]: {
              transform: "translateX(-100%)",
              boxShadow: "none",
              openBarButton: {
                boxShadow: brandLightTheme.shadows.z4
              }
            }
          },
          backdrop: {
            basedOn: [useStyles78.backdrop]
          },
          mobileTabButton: {
            [MediaQueries.Tablet]: {
              display: "none !important"
            },
            position: "absolute",
            top: styleguide.gridbase,
            left: 0,
            width: styleguide.gridbase * 6,
            height: styleguide.gridbase * 5,
            backgroundColor: brandLightTheme.colors.background,
            ...styleguide.transition.standard,
            transitionProperty: "transform"
          },
          header: {
            width: "100%",
            flexShrink: 0,
            height: styleguide.gridbase * 17,
            justifyContent: "space-between",
            basedOn: [layout.column]
          },
          logoContainer: {
            boxSizing: "border-box",
            width: "100%",
            marginTop: styleguide.gridbase * 3,
            padding: [0, styleguide.gridbase * 2],
            alignItems: "center",
            basedOn: [layout.row]
          },
          logoIcon: {
            flexShrink: 0
          },
          logoText: {},
          openBarButton: {
            [MediaQueries.Mobile]: {
              position: "absolute",
              left: "100%",
              transform: "translateX(-16px)",
              backgroundColor: brandLightTheme.colors.background,
              width: styleguide.gridbase * 6,
              height: styleguide.gridbase * 5,
              borderRadius: `0 ${styleguide.gridbase * 2.5}px ${styleguide.gridbase * 2.5}px 0`
            }
          },
          rotated: {
            transform: "rotate(180deg)"
          },
          toggleView: {
            padding: [0, styleguide.gridbase * 2],
            boxSizing: "border-box",
            marginBottom: styleguide.gridbase * 0.5,
            width: "100%",
            // alignItems: 'center',
            // justifyContent: 'space-between',
            whiteSpace: "nowrap",
            basedOn: [layout.column]
          },
          toggleActions: {
            marginTop: styleguide.gridbase,
            justifyContent: "space-between",
            flexWrap: "wrap",
            basedOn: [layout.row]
          },
          toggleViewButton: {
            cursor: "pointer",
            textDecoration: "underline",
            basedOn: [useStyles2.text]
          },
          toggleViewButtonDisabled: {
            cursor: "not-allowed",
            color: brandLightTheme.colors.placeholderText
          },
          list: {
            overflowY: "auto",
            overflowX: "hidden",
            flexGrow: 1,
            flexShrink: 1,
            flexBasis: "100%"
          },
          listItem: {
            height: styleguide.gridbase * 4,
            flexShrink: 0,
            marginBottom: styleguide.gridbase * 0.5,
            ":hover": {
              itemMenu: {
                opacity: 1
              },
              pinButton: {
                opacity: 1
              }
            },
            basedOn: [layout.row]
          },
          itemTab: {
            cursor: "pointer",
            userSelect: "none",
            height: "100%",
            width: "100%",
            minWidth: COLLAPSED_WIDTH + styleguide.gridbase * 3,
            borderBottomRightRadius: styleguide.gridbase * 2,
            borderTopRightRadius: styleguide.gridbase * 2,
            maxWidth: styleguide.gridbase * 20.5,
            paddingLeft: styleguide.gridbase * 2,
            paddingRight: styleguide.gridbase,
            boxSizing: "border-box",
            alignItems: "center",
            whiteSpace: "nowrap",
            basedOn: [layout.row],
            ":hover": {
              border: `2px solid ${brandLightTheme.mono.m6}`,
              borderLeft: "none",
              paddingRight: styleguide.gridbase - 2
            }
          },
          listItemExpanded: {
            itemTab: {
              borderBottomRightRadius: styleguide.gridbase * 2,
              borderTopRightRadius: styleguide.gridbase * 2
            }
          },
          listItemSelected: {
            itemTab: {
              backgroundColor: "var(--ws-background)"
            }
          },
          itemText: {
            overflowX: "hidden",
            flexGrow: 1,
            flexShrink: 1,
            textOverflow: "ellipsis",
            basedOn: [useStyles2.text]
          },
          itemToggle: {
            marginLeft: styleguide.gridbase * 0.5,
            height: styleguide.gridbase * 2,
            width: styleguide.gridbase * 2,
            borderRadius: styleguide.gridbase,
            flexShrink: 0,
            background: "var(--ws-inactive)",
            basedOn: [layout.column, layout.centerCenter]
          },
          itemToggleChecked: {
            background: "var(--ws-active)"
          },
          itemMenu: {
            opacity: 0,
            ...styleguide.transition.short,
            transitionProperty: "opacity"
          },
          expander: {
            height: styleguide.gridbase * 4,
            padding: [styleguide.gridbase, styleguide.gridbase * 2],
            boxSizing: "border-box",
            alignItems: "center",
            basedOn: [layout.row],
            color: brandLightTheme.colors.text,
            ":disabled": {
              color: brandLightTheme.colors.grayedText
            }
          },
          expanderText: {
            color: "inherit",
            basedOn: [layout.flexSpacer, useStyles2.bold]
          },
          expanderIcon: {
            color: "inherit",
            marginLeft: styleguide.gridbase,
            transform: "rotate(90deg)"
          },
          expanderIconOpen: {
            transform: "rotate(270deg)"
          },
          pinButton: {
            opacity: 0,
            ...styleguide.transition.short,
            transitionProperty: "opacity"
          },
          pinButtonPinned: {
            opacity: 1
          }
        }),
        "workspaces-bar_881015"
      );
      useStrings19 = createUseStrings(workspace_bar_strings_default);
    }
  });

  // web-app/src/app/index.tsx
  var app_exports = {};
  __export(app_exports, {
    FilterContextProvider: () => FilterContextProvider,
    FilterKeyNotes: () => FilterKeyNotes2,
    FilterKeyTasks: () => FilterKeyTasks2,
    default: () => AppView,
    useFilter: () => useFilter,
    useFilterContext: () => useFilterContext2,
    usePartialFilter: () => usePartialFilter
  });
  function FilterContextProvider({
    filterKey,
    children
  }) {
    const graph = useGraphManager();
    const [filter, setFilter] = (0, import_react_18_2160.useState)(
      graph.getVertexManager(filterKey || FilterKeyTasks2)
    );
    return /* @__PURE__ */ import_react_18_2160.default.createElement(
      filterContext.Provider,
      {
        value: {
          filter,
          setFilter: (id) => setFilter(graph.getVertexManager(id))
        }
      },
      children
    );
  }
  function useFilterContext2() {
    return (0, import_react_18_2160.useContext)(filterContext);
  }
  function useFilter() {
    return useVertex(useFilterContext2().filter);
  }
  function usePartialFilter(keys) {
    return usePartialVertex(useFilterContext2().filter, keys);
  }
  function Root({ style }) {
    const styles = useStyles81();
    const [loading, setLoading] = (0, import_react_18_2160.useState)(true);
    const graph = useGraphManager();
    (0, import_react_18_2160.useEffect)(() => {
      graph.loadLocalContents().then(() => setLoading(false));
    }, [graph]);
    const device = useCurrentDevice();
    const [expanded, setExpanded] = (0, import_react_18_2160.useState)(device > 1 /* Tablet */);
    const workspacesQuery = useSharedQuery("workspaces");
    return /* @__PURE__ */ import_react_18_2160.default.createElement("div", { className: cn(styles.root), style }, /* @__PURE__ */ import_react_18_2160.default.createElement(FilterContextProvider, null, !loading ? /* @__PURE__ */ import_react_18_2160.default.createElement(import_react_18_2160.default.Fragment, null, /* @__PURE__ */ import_react_18_2160.default.createElement(WorkspacesBar, { expanded, setExpanded }), /* @__PURE__ */ import_react_18_2160.default.createElement("div", { className: cn(styles.content) }, /* @__PURE__ */ import_react_18_2160.default.createElement(import_react_router_dom_6_74.BrowserRouter, null, /* @__PURE__ */ import_react_18_2160.default.createElement(import_react_router_6_78.Route, { path: "/new" }, /* @__PURE__ */ import_react_18_2160.default.createElement(
      CreateWorkspaceView,
      {
        source: "bar:workspace",
        onWorkspaceCreated: (wsKey) => {
          workspacesQuery.forEach(
            (ws) => ws.selected = ws.key === wsKey
          );
          graph.getVertex(wsKey).selected = true;
        }
      }
    )), /* @__PURE__ */ import_react_18_2160.default.createElement(import_react_router_6_78.Route, { path: "/" }, /* @__PURE__ */ import_react_18_2160.default.createElement(WorkspaceSelectorView, null))))) : /* @__PURE__ */ import_react_18_2160.default.createElement(LoadingView, null)));
  }
  function AppView() {
    const theme = (0, import_react_18_2160.useMemo)(() => isDarkTheme ? darkTheme : lightTheme, []);
    return /* @__PURE__ */ import_react_18_2160.default.createElement(ThemeProvider, { theme, isRoot: true }, ({ style }) => /* @__PURE__ */ import_react_18_2160.default.createElement(Root, { style }));
  }
  var import_react_18_2160, import_react_router_6_78, import_react_router_dom_6_74, useStyles81, filterContext, FilterKeyTasks2, FilterKeyNotes2, isDarkTheme;
  var init_app = __esm({
    "web-app/src/app/index.tsx"() {
      import_react_18_2160 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_6_78 = __require("https://esm.sh/react-router@6.7.0");
      import_react_router_dom_6_74 = __require("https://esm.sh/react-router-dom@6.7.0");
      init_styles();
      init_css_objects();
      init_responsive();
      init_theme();
      init_graph();
      init_loading_view();
      init_new_workspace();
      init_workspace_content();
      init_workspaces_bar();
      init_query2();
      init_vertex2();
      useStyles81 = makeStyles((theme) => ({
        blurred: {
          filter: "blur(2px)"
        },
        root: {
          height: "100vh",
          width: "100vw",
          basedOn: [layout.row]
        },
        content: {
          height: "100%",
          overflow: "hidden",
          // width: `calc(100% - ${WORKSPACE_BAR_WIDTH}px)`,
          basedOn: [layout.column, layout.flexSpacer]
        }
      }));
      filterContext = import_react_18_2160.default.createContext(void 0);
      FilterKeyTasks2 = "TasksFilter";
      FilterKeyNotes2 = "NotesFilter";
      isDarkTheme = false;
    }
  });

  // web-app/src/core/cfds/react/graph.tsx
  function useGraphManager() {
    return (0, import_react_18_2161.useContext)(CFDSContext).graphManager;
  }
  function useSharedQueriesManager() {
    return useGraphManager().sharedQueriesManager;
  }
  function useRootUser3() {
    const graph = useGraphManager();
    const key = graph.rootKey;
    const user = (0, import_react_18_2161.useMemo)(
      () => graph && graph.getVertexManager(key),
      [graph, key]
    );
    return user;
  }
  function usePartialCurrentUser2(keys) {
    const graph = useGraphManager();
    return usePartialVertex(graph.getRootVertexManager(), keys || []);
  }
  function usePartialUserSettings(keys) {
    const u = usePartialCurrentUser2(["settings"]);
    return usePartialVertex(
      u.settings.manager,
      keys || []
    );
  }
  function useCfdsContext() {
    return (0, import_react_18_2161.useContext)(CFDSContext);
  }
  function CfdsClientProvider({
    userId,
    sessionId,
    children
  }) {
    const logger = useLogger();
    const sessionPtrKey = `${userId}/${sessionId}`;
    const graphManager = (0, import_react_18_2161.useMemo)(() => {
      const manager = new GraphManager(
        userId,
        (key) => key !== sessionPtrKey,
        "http://localhost"
      );
      manager.createVertex(
        NS_FILTER,
        { owner: userId, noteType: "note" /* Note */ },
        FilterKeyNotes2,
        true
      );
      manager.createVertex(
        NS_FILTER,
        { owner: userId, noteType: "task" /* Task */ },
        FilterKeyTasks2,
        true
      );
      manager.loadLocalContents().finally(() => {
        const user = manager.getRootVertex();
        if (user.isNull) {
          return;
        }
        const settings = user.settings;
        if (settings.isNull) {
          return;
        }
        const pinnedWorkspaces = settings.pinnedWorkspaces;
        manager.sharedQueriesManager.workspaces.forEach((ws) => {
          if (pinnedWorkspaces.has(ws.key)) {
            ws.selected = true;
          }
        });
      });
      return manager;
    }, [userId, sessionId, sessionPtrKey]);
    (0, import_react_18_2161.useEffect)(() => {
      const sessionIntervalId = setInterval(() => {
        logger.log({
          severity: "INFO",
          event: "SessionAlive",
          foreground: document.visibilityState === "visible"
        });
      }, 10 * 1e3);
      return () => {
        clearInterval(sessionIntervalId);
      };
    }, [logger, graphManager]);
    const ctx2 = (0, import_react_18_2161.useMemo)(
      () => ({
        graphManager,
        sessionId,
        searchEngine: new NoteSearchEngine(graphManager)
      }),
      [graphManager, sessionId]
    );
    return /* @__PURE__ */ import_react_18_2161.default.createElement(CFDSContext.Provider, { value: ctx2 }, children);
  }
  var import_react_18_2161, CFDSContext;
  var init_graph = __esm({
    "web-app/src/core/cfds/react/graph.tsx"() {
      init_graph_manager();
      import_react_18_2161 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_note_search();
      init_logger();
      init_scheme_types();
      init_vertex2();
      init_app();
      init_note();
      CFDSContext = import_react_18_2161.default.createContext({});
    }
  });

  // web-app/src/app/login/illustrations.tsx
  var import_react_18_2162, MASK_ALPHA_STYLE, LoginIllustration;
  var init_illustrations = __esm({
    "web-app/src/app/login/illustrations.tsx"() {
      import_react_18_2162 = __toESM(__require("https://esm.sh/react@18.2.0"));
      MASK_ALPHA_STYLE = { "mask-type": "alpha" };
      LoginIllustration = ({ className }) => /* @__PURE__ */ import_react_18_2162.default.createElement(
        "svg",
        {
          className,
          width: "743",
          height: "577",
          viewBox: "0 0 743 577",
          fill: "none",
          xmlns: "http://www.w3.org/2000/svg"
        },
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask0_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask0_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M732.345 270.925C722.849 236.593 707.631 200.505 686.613 166.26C682.804 160.042 678.788 153.885 674.587 147.807C674.448 147.598 674.3 147.398 674.151 147.19C659.115 125.511 641.628 104.893 621.671 86.3183C620.175 84.9276 618.671 83.5532 617.149 82.187C609.35 75.1693 601.184 68.4736 592.644 62.1518C592.193 61.812 591.749 61.4817 591.296 61.1514C590.009 60.2029 588.714 59.2639 587.409 58.3345C582.87 55.1081 578.235 51.9773 573.495 48.9692C572.269 48.1872 571.034 47.412 569.799 46.6559C569.356 46.3775 568.904 46.0991 568.451 45.8302C559.442 40.3164 550.076 35.2121 540.363 30.569C540.303 30.5349 540.233 30.5076 540.172 30.4735C536.372 28.6556 532.52 26.9168 528.615 25.2477C523.328 22.9862 517.945 20.8558 512.458 18.8645C506.571 16.7259 500.571 14.751 494.449 12.9604C494.031 12.8294 493.613 12.7079 493.197 12.5865C478.405 8.29964 462.961 5.0214 446.839 2.87321C379.541 -6.10034 300.625 4.75117 209.91 45.2133C144.352 74.4582 72.5323 138.268 40.7489 202.262C22.043 239.915 5.8688 282.317 1.1466 325.101C1.13841 325.204 1.12885 325.309 1.11248 325.413C1.08654 325.604 1.0688 325.795 1.05106 325.978C0.364567 332.395 -0.0626151 338.822 -0.20046 345.24C-0.461136 357.362 0.303151 369.458 2.30394 381.433C4.2092 392.833 7.2254 404.121 11.5395 415.217C22.0444 442.262 39.3486 465.854 58.9758 487.045C63.193 491.602 67.5153 496.046 71.9073 500.384C75.3343 503.776 78.794 507.15 82.3166 510.471C84.7432 512.775 87.1957 515.054 89.6824 517.298C90.6828 518.211 91.6914 519.116 92.7081 520.003C97.908 524.604 103.247 529.038 108.779 533.229C109.769 533.986 110.77 534.725 111.77 535.465C112.057 535.674 112.343 535.883 112.631 536.091C113.119 536.448 113.614 536.796 114.11 537.135C120.666 541.779 127.51 545.858 134.624 549.379C134.972 549.552 135.328 549.727 135.684 549.884C136.979 550.519 138.284 551.127 139.597 551.718C144.441 553.893 149.398 555.814 154.476 557.475C154.737 557.571 154.989 557.658 155.25 557.728C157.554 558.484 159.885 559.18 162.242 559.824C164.424 560.415 166.616 560.972 168.816 561.493C171.72 562.18 174.634 562.806 177.564 563.381C181.913 564.232 186.295 564.964 190.687 565.607C192.044 565.807 193.408 565.998 194.775 566.172C199.678 566.824 204.601 567.363 209.523 567.841C210.358 567.919 211.201 568.006 212.045 568.075C212.218 568.093 212.393 568.11 212.566 568.119C212.713 568.137 212.853 568.153 213.001 568.163C213.097 568.171 213.184 568.181 213.28 568.189C213.427 568.206 213.584 568.215 213.732 568.223C215.444 568.388 217.157 568.527 218.871 568.675C219.142 568.701 219.419 568.718 219.689 568.736C224.376 569.118 229.072 569.44 233.768 569.727C234.212 569.753 234.647 569.779 235.091 569.805C243.612 570.3 252.134 570.656 260.666 570.944C268.057 571.187 275.449 571.388 282.841 571.561C290.207 571.744 297.563 571.917 304.929 572.092C330.295 572.693 355.669 573.275 381.045 573.857C388.262 574.022 395.488 574.197 402.715 574.362C405.49 574.423 408.255 574.493 411.028 574.553C412.315 574.579 413.602 574.614 414.889 574.648C431.411 575.048 447.951 575.596 464.499 576.057C466.23 576.109 467.969 576.152 469.709 576.196C470.013 576.204 470.309 576.214 470.614 576.222C472.44 576.266 474.274 576.317 476.102 576.353C492.371 576.761 508.641 577.014 524.903 576.91C528.686 576.892 532.468 576.848 536.251 576.788C537.59 576.762 538.93 576.736 540.269 576.701C558.052 576.293 575.965 575.058 593.567 572.179C596.897 571.64 600.219 571.04 603.525 570.362C603.829 570.31 604.141 570.248 604.446 570.179C605.767 569.91 607.089 569.631 608.402 569.335C621.229 566.492 633.803 562.622 645.951 557.414C674.595 545.135 701.005 525.595 717.361 498.681C726.762 483.203 731.884 465.784 734.91 448.026C737.44 433.201 739.013 418.139 740.101 403.086C740.127 402.747 740.153 402.408 740.179 402.07C740.466 398.061 740.718 394.043 740.945 390.035C743.216 350.206 743.007 309.483 732.345 270.925Z",
            fill: "#F7EBDB"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask1_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask1_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M660.953 370.888L658.058 390.506L657.883 391.707L212.399 441.978L212.208 442.004L96.2907 356.436L97.5081 335.192L544.167 306.06L660.953 370.888Z",
            fill: "#C6A987"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask2_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask2_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M661.109 370.958L657.883 391.707L212.4 441.978L213.695 419.49L661.109 370.958Z",
            fill: "#AA8C68"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask3_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask3_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M661.296 370.999L213.419 421.369L97.5054 335.799L545.383 285.429L661.296 370.999Z",
            fill: "#E5CBAC"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask4_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask4_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M436.903 365.615L278.411 383.44L237.392 353.158L395.884 335.334L436.903 365.615Z",
            fill: "#2B1919"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask5_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask5_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M335.447 324.896L285.554 330.501L265.29 316.912L307.645 312.303L335.447 324.896Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M477.371 254.682C477.607 257.14 475.823 259.343 473.356 259.607L160.743 296.347L159.833 296.447L151.913 297.312C149.4 297.585 147.153 295.755 146.915 293.243L129.473 110.279C129.237 107.811 131.03 105.608 133.487 105.345L141.935 104.425L142.845 104.325L454.939 70.3706C457.442 70.0977 459.691 71.9279 459.927 74.4391L477.371 254.682Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M472.463 249.903C472.672 252.143 471.052 254.154 468.804 254.39L177.238 288.864L176.41 288.955L169.2 289.739C166.915 289.984 164.866 288.318 164.658 286.033L159.65 234.991L157.902 217.149L148.68 123.205L147.678 112.955C147.46 110.715 149.089 108.704 151.329 108.468L159.021 107.63L159.849 107.538L450.944 75.8503C453.219 75.5951 455.268 77.2615 455.486 79.5557L456.524 89.9705L465.855 183.632L467.658 201.72L472.463 249.903Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M160.743 296.348L159.833 296.448L141.936 104.425L142.847 104.325L160.743 296.348Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M307.645 312.303V277.636L263.462 281.764L265.29 316.912",
            fill: "#2B1919"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask6_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask6_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M388.665 342.96L387.345 343.106L374.791 344.508L373.462 344.654L362.121 345.919L360.791 346.075L349.221 347.367L347.891 347.512L336.632 348.769L335.312 348.915L287.128 354.303L285.808 354.449L273.219 355.851L271.898 355.997L260.356 357.289L259.027 357.435L257.952 356.634L259.282 356.488L270.824 355.196L272.145 355.05L284.734 353.648L286.054 353.494L334.228 348.114L335.558 347.968L346.817 346.711L348.146 346.566L359.717 345.274L361.047 345.118L372.388 343.853L373.717 343.707L386.261 342.305L387.59 342.159L388.665 342.96Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M397.021 349.188L395.684 349.333L268.703 363.515L267.374 363.662L266.3 362.86L267.629 362.714L394.61 348.531L395.947 348.387L396.411 348.732L397.021 349.188Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M404.732 354.94L403.403 355.087L276.422 369.26L275.085 369.414L274.011 368.613L275.34 368.459L402.329 354.285L403.649 354.131L404.405 354.695L404.732 354.94Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M412.715 360.894L411.395 361.04L398.842 362.441L397.514 362.587L386.181 363.853H386.171L384.851 364.007L373.271 365.301L371.943 365.445L360.682 366.702L359.362 366.847L311.188 372.227H311.178L309.858 372.383L297.27 373.784L295.95 373.93L284.406 375.223L283.077 375.369L282.003 374.568L283.332 374.422L294.876 373.129L296.195 372.983L308.784 371.581L310.104 371.426H310.114L358.288 366.047L359.608 365.901L370.869 364.644L372.197 364.5L383.777 363.206L385.097 363.051L396.438 361.786L397.768 361.64L410.312 360.239L411.641 360.093L412.715 360.894Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M284.406 375.223L283.077 375.369L282.003 374.568L275.085 369.414L274.011 368.613L267.374 363.662L266.3 362.86L259.027 357.435L257.952 356.634L259.282 356.488L260.356 357.289L267.629 362.714L268.703 363.515L275.34 368.459L276.422 369.26L283.332 374.422L284.406 375.223Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M297.27 373.784L295.95 373.93L294.876 373.129L293.391 372.028L292.317 371.227L287.948 367.977L286.874 367.176L285.399 366.074L284.324 365.273L280.246 362.223L279.172 361.422L277.689 360.321L276.613 359.519L271.898 355.997L270.824 355.196L272.145 355.05L273.219 355.851L277.943 359.373L279.017 360.174L280.502 361.276L281.576 362.077L285.654 365.118L286.736 365.919L288.211 367.02L289.286 367.821L293.646 371.081L294.72 371.882L296.195 372.983L297.27 373.784Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M311.178 372.227L309.858 372.383L308.784 371.581L306.135 369.605L305.061 368.805L301.857 366.42L300.783 365.619L298.143 363.652L297.069 362.851L294.147 360.675L293.073 359.874L290.432 357.899L289.359 357.098L285.808 354.449L284.734 353.648L286.054 353.494L287.128 354.303L290.687 356.952L291.761 357.753L294.41 359.72L295.484 360.521L298.398 362.697L299.48 363.498L302.121 365.473L303.195 366.274L306.39 368.659L307.465 369.461L310.104 371.426H310.114L311.178 372.227Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M360.682 366.702L359.362 366.847L358.288 366.047L351.651 361.104L351.369 360.894L350.577 360.303L350.295 360.093L343.659 355.151L343.649 355.141L342.585 354.35L342.575 354.34L335.948 349.397L335.312 348.915L334.874 348.596L334.228 348.114L335.558 347.968L336.203 348.449L336.632 348.769L337.277 349.251L343.914 354.194L344.996 354.995L351.624 359.948L351.906 360.157L352.698 360.749L352.981 360.958L359.608 365.901L360.682 366.702Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M373.271 365.301L371.943 365.445L370.869 364.644L364.706 360.048L363.959 359.492L363.631 359.246L362.885 358.691L356.713 354.094L356.24 353.739L355.639 353.293L355.166 352.938L349.002 348.34L347.928 347.539L347.891 347.512L346.817 346.711L348.146 346.566L349.221 347.367L349.257 347.395L350.331 348.196L356.495 352.792L356.967 353.138L357.569 353.593H357.577L358.051 353.939L364.214 358.537L364.961 359.1L365.279 359.338H365.288L366.035 359.902L372.197 364.5L373.271 365.301Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M386.171 363.853L384.851 364.007L383.777 363.206L377.904 358.827L376.867 358.045H376.858L376.83 358.026L375.793 357.244H375.784L369.912 352.874L369.138 352.301L368.838 352.073L368.064 351.5L362.202 347.122L361.128 346.32L360.791 346.075L359.717 345.274L361.047 345.118L362.121 345.919L362.456 346.174L363.532 346.976L369.403 351.346L370.167 351.919L370.477 352.145L371.251 352.72L377.113 357.098L378.16 357.882L378.187 357.899L379.234 358.683L385.097 363.051L386.171 363.853Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M398.842 362.441L397.514 362.587L396.438 361.786L391.251 357.917L390.177 357.116L389.53 356.634L388.456 355.833L383.257 351.964L382.183 351.163L381.811 350.88L380.736 350.079L375.547 346.211L374.473 345.41L373.462 344.654L372.388 343.853L373.717 343.707L374.791 344.508L375.803 345.264L376.877 346.065L382.066 349.934L383.148 350.736L383.512 351.008L384.596 351.81L389.785 355.687L390.859 356.488L391.505 356.971L392.579 357.771L397.768 361.64L398.842 362.441Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M412.715 360.894L411.395 361.04L410.312 360.239L404.15 355.642L403.403 355.087L403.075 354.841L402.329 354.285L396.157 349.689L395.684 349.333L395.083 348.888L394.61 348.531L388.446 343.935L387.372 343.134L387.345 343.106L386.261 342.305L387.59 342.159L388.665 342.96L388.701 342.988L389.776 343.789L395.947 348.387L396.411 348.732L397.021 349.188L397.495 349.533L403.649 354.131L404.405 354.695L404.732 354.94L405.479 355.496L411.641 360.093L412.715 360.894Z",
            fill: "#87423A"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask7_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask7_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M615.561 463.318C614.013 465.649 612.525 467.883 611.143 469.987C611.107 472.51 608.909 546.993 607.482 597.805C606.17 598.101 604.847 598.379 603.526 598.648C603.222 598.718 602.909 598.779 602.605 598.831C599.3 599.509 595.979 600.11 592.647 600.649C592.074 589.814 592.472 551.086 591.977 541.912C591.438 531.851 590.968 523.12 590.603 516.433C590.585 516.12 590.567 515.816 590.559 515.52C590.428 513.181 590.316 511.112 590.22 509.345C590.012 505.371 589.881 502.919 589.855 502.363C588.794 503.972 587.446 506.015 585.846 508.442C584.194 510.929 582.281 513.807 580.141 517.033C579.915 517.364 579.69 517.704 579.463 518.05C574.254 525.85 567.811 535.511 560.654 546.207C554.296 555.738 531.949 589.586 524.871 600.196C523.532 600.23 522.194 600.257 520.853 600.283C520.253 600.292 519.644 600.301 519.045 600.309C518.679 600.317 518.323 600.317 517.967 600.327C515.14 600.362 512.323 600.397 509.505 600.405C514.844 591.022 535.626 558.112 540.835 548.964C546.314 539.329 551.627 529.998 556.558 521.346C556.749 521.008 556.94 520.676 557.123 520.346C560.323 514.728 563.349 509.415 566.15 504.502C575.803 487.588 582.759 475.414 584.602 472.265C585.115 472.048 585.628 471.83 586.149 471.622C591.359 469.5 596.75 467.831 602.228 466.405C602.654 466.292 603.08 466.188 603.507 466.075C604.524 465.822 605.542 465.57 606.568 465.327C606.864 465.257 607.177 465.179 607.481 465.11C610.089 464.493 612.707 463.926 615.342 463.361C615.412 463.352 615.491 463.335 615.561 463.318Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M625.195 431.542L624.578 432.517L603.508 466.075L577.933 506.807L577.75 507.111L562.742 531.278L545.036 559.775L519.045 600.311C518.679 600.319 518.323 600.319 517.967 600.328L544.271 559.289L561.984 530.766L576.933 506.687L577.542 505.722L602.229 466.408L623.448 432.623L624.065 431.649L625.195 431.542Z",
            fill: "#AD7D68"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M607.346 470.135L603.53 598.647C603.226 598.717 602.913 598.778 602.609 598.83L606.434 470.153C606.737 470.135 607.042 470.135 607.346 470.135Z",
            fill: "#AD7D68"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M639.016 403.732C638.773 400.462 638.242 397.184 637.668 393.983C637.66 393.957 637.66 393.922 637.65 393.896C636.458 387.218 634.676 380.67 632.546 374.235C631.875 372.174 631.154 370.131 630.415 368.096C630.32 367.843 630.232 367.583 630.137 367.33C629.962 366.861 629.789 366.391 629.606 365.922C629.536 365.713 629.458 365.514 629.379 365.305C628.58 363.174 627.744 361.062 626.893 358.948C625.675 355.922 624.414 352.904 623.145 349.895L620.692 344.156C620.04 342.642 619.397 341.121 618.753 339.599C616.44 334.12 614.118 328.624 611.622 323.234C611.187 322.295 610.743 321.356 610.299 320.425C606.709 312.946 602.446 305.607 596.421 299.824C594.864 298.337 593.212 297.008 591.473 295.824C589.065 294.163 586.516 292.763 583.873 291.512C583.021 291.112 582.178 290.72 581.307 290.364C581.273 290.346 581.246 290.33 581.22 290.32C579.662 289.642 578.098 289.007 576.515 288.398C576.559 288.303 576.603 288.207 576.654 288.112C576.663 288.086 576.68 288.05 576.698 288.024C576.959 287.503 576.177 287.042 575.907 287.563C575.872 287.625 575.845 287.685 575.819 287.746C575.758 287.85 575.714 287.963 575.662 288.068C574.906 287.79 574.158 287.503 573.401 287.216C572.853 287.016 572.617 287.895 573.166 288.095C573.862 288.356 574.557 288.626 575.261 288.887C572.991 293.46 570.861 298.097 568.896 302.801C568.852 302.905 568.808 303.002 568.765 303.105C567.782 305.453 566.851 307.818 565.956 310.201C565.443 311.558 564.633 313.193 564.052 314.854C563.825 315.496 563.634 316.149 563.505 316.793C563.27 318.028 563.262 319.236 563.705 320.314C564.445 322.097 565.392 323.837 566.401 325.55C566.818 326.262 567.244 326.976 567.67 327.68C568.253 328.654 568.826 329.619 569.375 330.576C572.271 335.672 575.235 340.715 578.288 345.716C578.497 346.072 578.714 346.428 578.94 346.776C578.94 346.794 578.958 346.81 578.966 346.828C584.331 355.594 589.923 364.212 595.732 372.681C595.958 373.012 596.175 373.334 596.402 373.656C590.584 373.968 584.81 372.952 579.062 372.142C577.166 371.872 575.271 371.603 573.367 371.333C572.984 371.281 572.601 371.229 572.209 371.176C568.653 370.671 565.096 370.168 561.539 369.663C561.279 369.628 561.088 369.732 560.982 369.985C559.095 374.628 556.704 379.011 553.825 383.089C553.617 383.394 553.4 383.698 553.183 384.002C552.775 383.742 552.399 383.498 552.087 383.281C551.444 382.855 551.043 382.541 551.112 382.481C551.582 382.142 551.13 381.351 550.66 381.699C549.887 382.264 550.026 382.89 550.531 383.455C551.026 384.02 551.879 384.533 552.53 384.899C551.939 385.681 551.331 386.465 550.704 387.221C550.33 387.672 550.974 388.317 551.347 387.864C552.025 387.038 552.686 386.185 553.33 385.333C557.078 387.49 560.869 389.568 564.704 391.559C565.148 391.786 565.591 392.021 566.035 392.238C566.878 392.681 567.73 393.107 568.583 393.525C573.339 395.898 578.167 398.116 583.07 400.151C584.653 400.803 586.245 401.438 587.844 402.055C592.557 403.873 597.341 405.508 602.193 406.907C605.523 407.889 608.88 408.75 612.272 409.498C616.272 410.377 620.298 411.09 624.358 411.621C627.732 412.072 631.74 412.969 635.132 412.195C638.098 411.517 639.21 409.265 639.14 406.377C639.129 405.498 639.086 404.619 639.016 403.732Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M593.571 510.405C595.928 511.335 597.633 512.996 598.11 515.684C598.617 518.565 598.498 521.694 598.382 524.743C598.333 526.039 598.284 527.32 598.284 528.562C598.284 529.335 598.29 530.11 598.296 530.885C598.31 532.54 598.323 534.196 598.276 535.848C598.232 537.161 598.119 538.492 597.319 539.562C596.101 541.188 593.989 541.649 591.98 541.91C591.657 541.949 591.339 541.983 591.028 542.017C590.576 542.066 590.14 542.114 589.728 542.17L560.658 546.205L540.839 548.961L535.266 549.735L508.03 553.519C505.929 553.81 503.827 554.117 501.724 554.423C494.93 555.412 488.122 556.404 481.289 556.928C479.898 557.032 478.506 557.109 477.124 557.145C475.142 557.198 473.159 557.188 471.194 557.093C470.889 557.093 470.585 557.077 470.289 557.059C468.358 556.955 466.436 556.78 464.514 556.537C461.68 556.189 458.853 555.694 456.019 555.05C449.005 553.459 442.072 551.42 435.151 549.386C433.869 549.009 432.587 548.632 431.305 548.259C430.957 548.151 430.611 548.05 430.263 547.95C430.08 547.896 429.897 547.843 429.713 547.789C426.374 546.816 423.044 545.842 419.704 544.859C410.391 542.12 401.087 539.329 391.782 536.528C389.886 535.963 387.982 535.39 386.086 534.815C386.017 534.955 385.895 535.058 385.695 535.05C383.268 534.972 380.65 534.702 378.494 533.407C373.793 530.595 376.109 525.327 378.035 520.947C378.51 519.867 378.961 518.841 379.277 517.919C379.459 517.385 379.64 516.844 379.822 516.3C380.978 512.845 382.18 509.251 384.051 506.171C384.168 505.967 384.3 505.765 384.432 505.562C384.447 505.539 384.462 505.516 384.477 505.493C385.53 503.892 386.782 502.457 388.33 501.284C393.7 497.212 400.693 497.661 406.992 498.066C407.313 498.087 407.631 498.107 407.948 498.127C416.94 498.684 425.94 498.449 434.923 497.866C439.036 497.604 443.142 497.283 447.246 496.961C448.28 496.878 449.313 496.793 450.347 496.709C457.584 496.118 464.821 495.526 472.065 495.169C472.369 495.152 472.673 495.134 472.978 495.126C473.107 495.116 473.246 495.108 473.386 495.108C475.725 494.996 478.064 494.909 480.403 494.865C483.254 494.795 486.116 494.778 488.977 494.83C506.639 495.142 524.231 497.177 541.675 500.029C542.465 500.159 543.256 500.29 544.048 500.429C551.44 501.655 558.797 503.039 566.154 504.499C566.537 504.575 566.92 504.652 567.304 504.729C567.764 504.821 568.224 504.914 568.684 505.004C573.023 505.873 577.363 506.761 581.693 507.674C582.739 507.888 583.807 508.077 584.887 508.268C585.207 508.325 585.527 508.382 585.849 508.439C587.319 508.701 588.789 508.978 590.223 509.344C591.371 509.631 592.493 509.969 593.571 510.405ZM379.234 532.745C380.451 533.111 381.66 533.475 382.868 533.841C381.599 533.668 380.33 533.345 379.234 532.745Z",
            fill: "#C25A3E"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M262.077 535.455C261.598 535.268 261.097 535.077 260.604 534.904C256.137 533.221 252.201 531.851 251.298 531.519C251.797 530.737 252.319 529.961 252.814 529.171C253.251 528.469 251.528 528.238 251.074 528.944C250.663 529.617 250.176 530.288 249.747 530.965L248.399 530.482C247.693 530.211 246.974 529.953 246.251 529.685C246.106 529.569 245.965 529.505 245.837 529.472C246.173 529.175 246.18 528.728 245.492 528.637C245.35 528.618 245.208 528.597 245.066 528.578C244.64 528.52 244.239 528.66 243.965 528.878C243.832 528.975 243.7 529.072 243.569 529.169C243.352 529.341 243.368 529.565 243.476 529.733C244.238 530.879 246.938 531.53 248.993 532.146C246.348 536.252 242.208 541.839 237.358 548.018L237.362 548.028C228.013 559.989 216.127 574.191 207.886 584.205C218.342 582.179 228.765 580.076 239.185 577.92C252.511 566.225 267.778 551.406 273.734 545.216C275.243 543.637 276.163 542.623 276.282 542.356C276.759 541.287 269.069 538.104 262.077 535.455Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M541.995 280.581C541.961 280.32 541.717 278.025 541.353 274.615C541.335 274.45 541.318 274.285 541.301 274.12C541.283 274.007 541.275 273.885 541.267 273.772C541.207 273.233 541.153 272.658 541.084 272.077C541.04 271.685 541.006 271.295 540.962 270.877C540.762 268.999 540.554 266.947 540.336 264.824C539.64 258.051 538.874 250.554 538.379 245.589C538.188 243.771 538.048 242.293 537.943 241.31C537.917 240.998 537.891 240.727 537.874 240.519C537.84 240.24 537.822 240.067 537.822 239.988C534.44 241.058 531.082 242.205 527.726 243.431C527.657 243.457 527.587 243.483 527.518 243.509C524.778 244.5 522.039 245.562 519.318 246.666C517.804 247.274 516.3 247.919 514.796 248.561C513.84 248.969 512.353 249.405 511.188 250.144C510.318 250.684 509.64 251.388 509.457 252.388C509.422 252.579 509.465 253.884 509.553 255.797C509.57 256.068 509.579 256.354 509.596 256.649C509.744 259.884 510.005 264.458 510.275 268.528C510.388 270.172 510.492 271.737 510.605 273.102C510.675 273.927 510.744 274.675 510.796 275.328C510.822 275.537 510.84 275.745 510.858 275.945C510.901 276.336 510.935 276.675 510.979 276.953C511.04 277.431 511.092 277.745 511.144 277.849C511.292 278.145 511.474 278.388 511.709 278.535C512.196 278.848 513.265 278.805 513.822 278.891C513.979 278.917 514.657 278.961 515.718 279.013C521.074 279.291 536.083 279.908 541.179 280.769C541.466 280.821 541.752 280.873 542.049 280.926C542.021 280.816 542.004 280.693 541.995 280.581Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M545.822 219.282C545.552 220.826 545.244 222.386 544.872 223.942C544.823 224.167 544.773 224.402 544.715 224.626C544.415 225.885 544.07 227.15 543.688 228.414C543.54 228.926 543.374 229.436 543.207 229.955C542.944 230.743 542.671 231.529 542.38 232.297C542.002 233.325 541.589 234.34 541.14 235.335C541.035 235.566 540.931 235.806 540.818 236.037C540.109 237.583 539.322 239.079 538.439 240.505C538.156 240.981 537.856 241.456 537.547 241.913C536.142 244.03 534.488 246.006 532.585 247.703C532.345 247.908 532.114 248.114 531.867 248.309C531.388 248.71 530.902 249.084 530.399 249.438C527.302 251.613 523.767 252.835 520.131 253.757C516.254 254.748 512.31 255.481 508.335 255.948C507.978 255.991 507.601 256.034 507.224 256.076C503.58 256.506 499.614 256.973 496.064 256.223C489.767 254.889 485.781 248.999 485.1 242.878C484.806 240.181 485.025 237.467 485.45 234.801C485.476 234.657 485.494 234.512 485.521 234.367C485.551 234.16 485.581 233.961 485.62 233.763C485.635 233.663 485.659 233.555 485.674 233.456C485.756 232.977 485.848 232.499 485.939 232.021C486.74 227.882 487.66 223.749 488.633 219.637C488.993 218.107 489.365 216.569 489.76 215.051C489.9 214.53 490.029 214.009 490.169 213.497C490.622 211.799 491.091 210.112 491.588 208.427C491.745 207.916 491.902 207.396 492.068 206.886C493.567 202.038 495.315 197.27 497.448 192.659C498.168 191.087 498.907 189.46 499.935 188.06C500.182 187.719 500.456 187.387 500.739 187.076C501.982 185.742 503.578 184.794 505.224 184.049C508.98 182.311 513.112 181.618 517.239 181.843C517.403 181.853 517.488 181.958 517.499 182.086C520.699 181.284 523.996 182.292 526.906 183.717C533.302 186.863 539.884 191.013 543.291 197.481C546.812 204.167 547.097 211.97 545.822 219.282Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M494.099 214.534C493.78 216.646 494.361 218.484 495.397 218.641C496.433 218.798 497.532 217.213 497.851 215.102C498.17 212.991 497.589 211.152 496.553 210.995C495.517 210.838 494.419 212.423 494.099 214.534Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M492.42 212.969C492.898 212.63 492.289 211.952 491.82 212.29C491.681 212.394 491.542 212.491 491.394 212.595C491.247 212.482 491.082 212.499 490.942 212.595C490.795 212.69 490.69 212.881 490.725 213.082C490.542 213.213 490.36 213.352 490.178 213.474C490.108 213.526 490.031 213.577 489.961 213.631C488.604 214.596 487.257 215.561 485.927 216.561C484.718 217.466 483.466 218.465 482.77 219.821C482.709 219.917 482.657 220.012 482.613 220.118C482.526 220.309 482.456 220.492 482.404 220.665C481.387 223.822 484.561 225.3 487.021 226.682C487.029 226.682 487.029 226.69 487.039 226.69C487.831 227.134 488.726 227.908 489.569 227.333C490.518 226.716 490.891 224.055 491.178 223.011C491.935 220.246 493.231 216.15 491.875 213.359C492.063 213.239 492.246 213.1 492.42 212.969Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M504.751 203.987C502.768 201.109 498.378 200.534 496.247 202.326C493.873 204.335 495.368 207.074 497.856 207.675C498.917 207.927 501.761 209.145 502.682 209.292C503.778 209.475 504.787 208.814 505.318 207.692C505.881 206.474 505.446 204.996 504.751 203.987Z",
            fill: "#996048"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M493.593 233.538C492.399 234.983 490.822 235.431 488.981 235.417C488.023 235.417 486.96 235.375 486.028 235.076C485.822 235.009 485.636 234.916 485.45 234.806C485.476 234.661 485.494 234.516 485.521 234.372C485.551 234.164 485.581 233.965 485.62 233.767C485.99 233.998 486.379 234.202 486.837 234.31C488.817 234.77 491.436 234.728 492.827 233.038C493.201 232.585 493.965 233.085 493.593 233.538Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M559.083 209.43C558.908 205.151 557.787 200.873 555.552 197.36C553.943 194.847 551.908 192.603 549.622 190.638C547.169 188.525 544.43 186.725 541.631 185.273C537.509 183.134 533.065 181.655 528.508 180.899C519.682 179.411 510.447 180.586 502.368 184.672C502.046 184.838 502.046 185.629 502.056 185.742C502.056 185.794 502.056 185.856 502.048 185.908C501.917 189.777 502.239 194.212 505.117 197.143C505.256 197.282 505.413 197.413 505.561 197.534C506.595 198.578 507.978 199.247 509.334 199.977C510.673 200.699 512.439 201.752 512.813 203.369C513.239 205.256 511.395 207.091 511.021 208.909C510.681 210.5 510.916 211.735 511.509 212.734C511.726 213.108 511.996 213.446 512.3 213.769C512.3 213.769 512.3 213.769 512.308 213.777C513.587 215.116 515.525 216.038 517.317 217.099C518.517 217.795 519.639 218.559 520.464 219.542C521.612 220.942 522.551 222.742 522.491 224.602C522.318 225.245 522.169 225.898 522.047 226.542C522.022 226.603 522.004 226.663 521.978 226.733C521.978 226.75 521.986 226.759 521.996 226.776C521.987 226.811 521.978 226.854 521.978 226.89C521.169 231.282 521.526 235.499 525.292 238.89C526.796 240.239 527.396 241.638 527.726 243.43C527.796 243.804 527.857 244.204 527.909 244.621C528.014 245.526 527.971 246.499 528.831 247.082C529.561 247.577 530.804 247.49 531.639 247.577C531.97 247.611 532.292 247.639 532.622 247.673C534.231 247.838 535.84 248.003 537.44 248.16C537.7 248.186 537.875 247.925 537.901 247.708C537.971 246.952 538.136 246.248 538.379 245.586C539.492 242.412 542.248 240.126 545.074 237.908C546.97 236.412 548.883 234.942 550.353 233.255C551.275 232.559 555.927 227.281 558.318 217.499C558.935 214.952 559.214 212.195 559.083 209.43Z",
            fill: "#996048"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M524.638 219.831C524.586 219.553 524.516 219.274 524.421 219.005C524.248 218.5 523.985 218.031 523.621 217.615C523.613 217.597 523.595 217.589 523.586 217.571C523.194 217.119 522.724 216.797 522.203 216.596H522.195C521.508 216.318 520.743 216.248 519.959 216.336C519.959 216.328 519.951 216.336 519.951 216.336C519.394 216.388 518.829 216.519 518.29 216.702C518.238 216.71 518.195 216.727 518.151 216.745C517.855 216.849 517.586 216.972 517.316 217.101C516.351 217.563 515.507 218.171 514.925 218.832C514.803 218.971 514.847 219.119 514.942 219.224C513.369 221.493 510.411 225.902 513.464 227.833C514.029 228.189 514.646 228.433 515.282 228.573C515.96 228.738 516.657 228.781 517.369 228.729C517.9 228.695 518.421 228.608 518.934 228.469C519.995 228.182 521.021 227.677 521.848 227.008C521.856 227.008 521.856 227 521.856 227C521.9 226.966 521.944 226.939 521.978 226.897C522.213 226.714 522.43 226.514 522.63 226.296C524.055 224.744 525.038 222.091 524.638 219.831Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M518.51 220.74C518.38 220.169 517.489 220.358 517.62 220.931C518.136 223.191 516.427 225.18 514.118 225.013C513.534 224.971 513.482 225.88 514.066 225.922C516.973 226.131 519.16 223.58 518.51 220.74Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M579.989 194.038C578.867 190.35 576.136 187.35 572.788 185.516C572.127 185.142 571.431 184.82 570.727 184.551C566.162 182.786 561.075 183.23 556.675 185.273C554.075 186.482 551.449 188.299 549.623 190.638C548.344 192.255 547.457 194.133 547.223 196.221C547.205 196.422 547.3 196.552 547.44 196.613C545.892 200.005 549.1 203.04 551.778 204.926C554.092 206.551 556.526 208.135 559.083 209.43C561.179 210.49 563.361 211.361 565.639 211.908C569.144 212.744 574.404 213.239 577.005 210.126C577.301 209.778 577.526 209.386 577.683 208.978C578.3 207.421 577.988 205.569 576.77 204.5C576.667 204.405 576.562 204.317 576.448 204.24C576.526 204.196 576.613 204.152 576.691 204.1C580.118 202.1 581.145 197.856 579.989 194.038Z",
            fill: "#996048"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M490.829 211.081C490.873 211.308 490.899 211.525 490.907 211.751C490.933 212.03 490.941 212.308 490.94 212.596C490.931 213.143 490.888 213.7 490.792 214.257C490.514 215.96 489.836 217.526 488.845 218.735C488.663 218.979 488.453 219.214 488.228 219.431C487.08 220.543 485.758 221.126 484.419 221.126C484.166 221.126 483.915 221.108 483.663 221.065C483.219 220.995 482.801 220.856 482.401 220.665C481.366 220.16 480.496 219.265 479.879 218.047C479.054 216.404 478.785 214.369 479.123 212.316C479.202 211.829 479.316 211.36 479.463 210.898C479.533 210.646 479.619 210.403 479.724 210.168C480.185 208.994 480.862 207.952 481.697 207.142C483.046 205.82 484.671 205.237 486.254 205.507C487.837 205.768 489.186 206.838 490.038 208.525C490.394 209.22 490.646 209.994 490.785 210.803C490.811 210.89 490.821 210.986 490.829 211.073V211.081ZM483.81 220.169C485.106 220.388 486.445 219.892 487.593 218.779C488.767 217.631 489.584 215.97 489.896 214.106C489.921 213.95 489.947 213.785 489.956 213.628C490.042 212.967 490.051 212.325 489.982 211.698C489.956 211.376 489.912 211.062 489.842 210.75C489.713 210.107 489.504 209.498 489.225 208.941C488.505 207.515 487.391 206.61 486.104 206.401C485.904 206.367 485.704 206.35 485.504 206.35C484.398 206.35 483.294 206.845 482.329 207.793C481.651 208.455 481.094 209.281 480.686 210.22C480.556 210.507 480.443 210.811 480.347 211.115C480.2 211.551 480.095 212.003 480.017 212.464C479.705 214.325 479.948 216.16 480.695 217.63C481.209 218.656 481.922 219.404 482.766 219.821C483.096 219.996 483.444 220.108 483.81 220.169Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M524.478 218.334C519.255 213.662 511.87 212.577 505.143 211.885C496.732 211.018 488.241 210.707 479.804 210.174C479.219 210.137 479.221 211.047 479.804 211.084C487.378 211.563 494.966 211.936 502.528 212.555C509.742 213.148 518.195 213.932 523.835 218.978C524.269 219.367 524.916 218.725 524.478 218.334Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M582.575 291.116C579.273 289.004 575.361 287.604 571.775 286.052C568.165 284.49 564.527 282.99 560.864 281.555C552.267 278.19 543.529 275.18 534.68 272.55C528.267 270.644 520.045 268.916 515.374 275.094C503.754 279.98 492.206 285.04 480.749 290.295C476.197 292.384 470.354 294.2 467.157 298.301C463.728 302.697 464.708 309.175 465.067 314.331C466.023 328.094 466.137 324.773 467.855 338.455L474.228 342.551L479.69 436.845C503.024 438.762 524.581 443.136 547.964 443.673C552.971 431.384 558.099 417.791 561.588 406.694C566.689 390.476 571.476 374.16 575.946 357.757C580.303 341.776 585.422 325.454 586.742 308.87C587.212 302.95 588.378 294.828 582.575 291.116Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M500.29 316.39C499.116 313.982 497.942 311.564 496.767 309.156C493.959 303.391 491.15 297.616 488.341 291.851C487.88 290.895 487.41 289.938 486.949 288.981C486.941 288.973 486.941 288.973 486.931 288.963C488.654 288.285 490.401 287.659 492.175 287.085C492.732 286.903 492.487 286.025 491.932 286.207C486.219 288.05 480.818 290.442 475.662 293.276C472.67 294.911 469.766 296.702 466.94 298.607H466.93C460.887 302.677 455.182 307.294 449.738 312.217C442.895 318.399 436.45 325.079 430.233 331.757C425.399 336.948 420.633 342.192 415.764 347.332C415.268 347.853 414.772 348.384 414.276 348.905C413.051 350.201 411.824 351.497 410.589 352.784C409.363 354.053 408.128 355.306 406.867 356.532C406.65 356.749 406.431 356.967 406.206 357.175C404.772 358.565 403.302 359.906 401.788 361.193C401.476 361.463 401.162 361.724 400.84 361.984C400.727 362.08 400.615 362.167 400.492 362.263C397.822 364.401 394.882 366.219 391.552 367.114C387.934 368.089 384.135 368.002 380.457 367.497C378.465 367.236 374.03 366.618 368.465 365.836C367.3 365.671 366.092 365.496 364.839 365.322C362.466 364.984 359.952 364.618 357.387 364.244C356.761 364.157 356.134 364.061 355.5 363.974C350.935 363.304 346.264 362.609 341.969 361.947C340.796 361.756 339.656 361.582 338.552 361.408C337.613 361.251 336.708 361.104 335.83 360.965C330.979 360.173 327.082 359.487 325.083 359.008C323.996 358.755 324.369 357.947 324.995 357.225C325.343 356.817 325.779 356.434 326.073 356.181C326.187 356.094 326.282 356.024 326.344 355.972C326.284 356.016 326.179 356.086 326.039 356.189C325.97 356.233 325.892 356.293 325.805 356.354C325.431 356.615 325.083 356.919 324.752 357.25C323.875 358.111 323.109 359.154 322.318 360.041C321.283 361.214 320.239 362.388 319.204 363.563C318.9 363.903 318.604 364.242 318.3 364.58C318.169 364.727 318.039 364.876 317.908 365.024C317.717 365.25 317.743 365.58 318.003 365.746C320.203 367.12 322.412 368.477 324.647 369.798C325.091 370.058 325.526 370.319 325.968 370.572C327.403 371.423 328.839 372.25 330.281 373.068C332.551 374.355 334.829 375.616 337.124 376.833C345.316 381.233 353.708 385.268 362.264 388.921C369.707 392.104 377.282 395 384.943 397.6C389.239 399.06 393.63 400.512 398.004 400.609C399.726 400.653 401.439 400.488 403.152 400.027C404.178 399.756 405.204 399.374 406.221 398.879C409.491 397.279 412.326 394.914 415.187 392.696C418.761 389.931 422.326 387.166 425.9 384.391C427.595 383.079 429.292 381.766 430.987 380.443C436.431 376.226 441.874 372.009 447.318 367.782C456.371 360.764 465.414 353.746 474.467 346.738C474.884 346.408 475.302 346.095 475.718 345.773C475.718 345.773 475.726 345.773 475.726 345.765C476.188 345.399 476.657 345.035 477.118 344.679C481.467 341.313 485.805 337.939 490.154 334.574C492.179 333 494.197 331.435 496.223 329.869C498.013 328.478 500.213 327.174 501.701 325.451C504.159 322.581 501.655 319.181 500.29 316.39Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M635.616 362.948C634.712 361.122 633.808 359.296 632.895 357.469C632.4 356.479 631.904 355.486 631.409 354.487C629.948 351.548 628.469 348.6 626.973 345.661C622.321 336.521 617.503 327.444 612.225 318.67C609.104 313.47 605.826 308.382 602.321 303.443C599.634 299.651 596.668 296.017 592.93 293.208C592.329 292.747 591.703 292.313 591.068 291.903C589.737 291.034 588.347 290.278 586.92 289.572C584.66 288.442 582.312 287.485 579.972 286.563C571.91 283.406 563.772 280.301 555.424 277.936C552.667 277.154 549.893 276.458 547.093 275.867C545.641 275.571 544.179 275.292 542.701 275.049C542.693 275.049 542.675 275.049 542.666 275.041C542.395 274.997 542.135 274.954 541.866 274.91L541.848 274.779L540.77 265.275C540.744 265.022 540.596 264.857 540.334 264.823C540.326 264.823 540.326 264.823 540.317 264.823C530.116 263.64 519.856 264.918 510.272 268.527C509.759 268.728 509.246 268.927 508.733 269.136C508.541 269.213 508.41 269.362 508.41 269.579C508.376 272.022 508.359 274.457 508.341 276.901C498.497 279.997 488.801 283.537 479.288 287.536C474.367 289.605 469.358 291.667 464.819 294.492C464.731 294.544 464.636 294.596 464.55 294.657C460.307 297.335 456.567 300.71 453.045 304.249C450.331 306.98 447.654 309.745 445.001 312.528C439.757 318.006 434.601 323.564 429.374 329.05C425.226 333.407 421.069 337.773 416.921 342.129C415.304 343.824 413.573 345.477 411.982 347.216C411.538 347.693 411.113 348.172 410.703 348.668C409.808 349.728 409.424 350.494 410.06 351.799C410.226 352.129 410.4 352.459 410.591 352.781C411.966 355.121 414.027 357.329 415.574 359.469C417.496 362.104 419.409 364.748 421.339 367.364C421.339 367.372 421.347 367.372 421.347 367.382C424.538 371.756 427.756 376.113 430.991 380.443C431.826 381.583 432.678 382.713 433.521 383.843C433.66 384.026 433.929 384.173 434.156 384.008C443 377.591 451.722 370.999 460.322 364.233C463.869 361.451 467.391 358.616 470.896 355.763C472.748 367.772 474.262 379.825 475.418 391.903C475.661 394.364 475.879 396.834 476.087 399.303C476.452 403.572 476.765 407.843 477.035 412.112C477.131 413.669 477.218 415.225 477.305 416.782C477.436 419 477.54 421.208 477.644 423.418C477.757 425.819 477.383 429.166 478.853 431.271C479.018 431.506 479.201 431.706 479.4 431.88C480.6 432.924 482.418 432.94 484.105 432.888C484.783 432.87 485.435 432.844 486.018 432.862C494.176 433.115 502.314 433.932 510.366 435.245C510.018 435.689 509.67 436.14 509.366 436.62C509.036 437.115 509.827 437.576 510.148 437.089C510.54 436.488 510.965 435.941 511.401 435.42C512.348 435.577 513.296 435.742 514.245 435.925C514.818 436.02 515.062 435.151 514.48 435.038C513.688 434.89 512.897 434.767 512.106 434.63C514.959 431.682 518.724 430.056 522.715 429.03C525.862 428.238 529.168 427.812 532.307 427.439C533.837 427.256 535.368 427.073 536.898 426.908C543.046 426.212 549.221 425.586 555.351 424.725C556.368 424.578 557.378 424.429 558.395 424.274C561.221 423.838 561.438 421.761 562.143 419.239C562.978 416.221 563.786 413.178 564.577 410.134C564.864 409.012 565.152 407.882 565.429 406.76C565.821 405.177 566.212 403.596 566.586 402.012C567.273 399.186 567.943 396.359 568.587 393.525C569.526 389.411 570.431 385.289 571.309 381.168C571.309 381.15 571.317 381.142 571.317 381.124C572.021 377.864 572.699 374.594 573.369 371.333C574.465 366.038 575.526 360.733 576.586 355.428C576.586 355.42 576.586 355.41 576.594 355.402C576.612 355.263 576.646 355.123 576.672 354.984C576.68 355.002 576.69 355.01 576.698 355.018V355.026C578.646 358.722 581.072 362.14 583.724 365.41C585.542 367.654 587.394 370.288 589.559 372.211C591.351 373.802 593.376 373.054 595.56 372.706C595.621 372.698 595.673 372.688 595.733 372.68C607.073 370.802 618.298 368.332 629.378 365.306C629.517 365.272 629.665 365.228 629.804 365.185C630.134 365.107 630.456 365.011 630.778 364.914C632.308 364.506 633.822 364.071 635.343 363.627C635.642 363.531 635.746 363.218 635.616 362.948Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M547.569 443.665C547.022 438.109 546.274 432.577 545.361 427.116C545.317 426.856 545.021 426.768 544.804 426.804C542.186 427.212 539.578 427.621 536.961 428.029C536.943 427.656 536.927 427.282 536.899 426.908C536.752 423.995 536.577 421.073 536.394 418.159C536.368 417.907 536.203 417.724 535.933 417.708C529.872 417.395 523.803 417.091 517.732 416.838C510.593 416.552 503.453 416.343 496.305 416.333C490.383 416.315 484.453 416.429 478.521 416.725C478.113 416.743 477.713 416.759 477.304 416.786C477.199 416.794 477.087 416.794 476.982 416.804C476.747 416.812 476.521 417.005 476.53 417.265C476.695 423.118 476.94 428.97 477.208 434.814C459.425 430.171 441.512 425.988 423.51 422.284C419.241 421.405 414.937 420.492 410.605 419.614C394.092 416.258 377.178 413.38 360.464 414.822C350.759 415.666 341.246 418.196 332.732 422.988C329.202 424.979 325.792 427.205 322.444 429.562C317.062 433.362 311.87 437.485 306.714 441.467C299.096 447.363 291.608 453.416 284.234 459.616L284.226 459.625C274.756 467.59 265.478 475.781 256.347 484.139C245.043 494.479 233.965 505.061 222.989 515.749C221.537 517.167 220.085 518.593 218.641 520.01C213.276 525.271 207.927 530.549 202.596 535.846C202.37 536.072 202.465 536.532 202.797 536.611C205.335 537.133 207.867 537.672 210.397 538.229C211.658 538.507 212.919 538.786 214.181 539.072L214.99 539.255C216.12 539.516 217.251 539.768 218.381 540.037C218.877 540.15 219.364 540.264 219.851 540.376C221.546 540.767 223.243 541.175 224.93 541.593C227.225 542.15 229.521 542.723 231.808 543.306C233.374 543.706 234.939 544.114 236.505 544.531C236.844 544.609 237.191 544.705 237.531 544.802C238.062 544.941 238.591 545.08 239.122 545.227C239.392 545.297 239.653 545.367 239.914 545.444C240.383 545.558 240.845 545.687 241.305 545.818C241.965 545.993 242.626 546.166 243.278 546.357C244.217 546.61 245.156 546.871 246.095 547.139C246.738 547.313 247.382 547.496 248.017 547.679C251.008 548.53 253.99 549.401 256.964 550.296C261.426 551.627 265.87 553.018 270.296 554.453C273.904 555.627 277.522 556.827 281.113 558.072C284.33 559.176 287.731 560.785 291.208 560.584C294.27 560.419 296.704 558.662 299.087 556.896C301.775 554.913 304.392 552.836 306.957 550.714C307.148 550.566 307.323 550.401 307.514 550.244C306.678 557.531 303.819 575.212 302.95 582.49C328.316 583.091 353.69 583.674 379.064 584.257C382.569 571.795 388.151 548.967 391.776 536.531C392.906 532.636 394.054 528.731 395.202 524.835C396.785 519.444 398.41 514.069 400.011 508.686C411.421 512.678 423.082 515.921 434.908 518.4C439.369 519.321 443.847 520.148 448.351 520.86C453.674 521.704 459.029 522.39 464.404 522.921C466.682 523.148 468.961 523.339 471.247 523.504C471.543 523.53 471.848 523.548 472.152 523.565C474.378 523.73 476.604 523.852 478.839 523.957C481.447 524.078 484.065 524.156 486.683 524.2C490.639 524.26 494.674 524.278 498.718 524.113C508.397 523.756 518.092 522.382 526.841 518.234C532.44 515.583 537.423 511.642 540.884 506.46C542.154 504.556 543.19 502.53 544.041 500.435C545.875 495.895 546.85 491 547.425 486.147C547.894 482.252 548.216 478.337 548.415 474.407C548.935 464.187 548.587 453.873 547.569 443.665Z",
            fill: "#FCBD58"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M635.616 362.948C634.712 361.122 633.808 359.296 632.895 357.469C632.4 356.479 631.904 355.486 631.409 354.487C629.948 351.548 628.469 348.6 626.973 345.661C622.321 336.521 617.503 327.444 612.225 318.67C609.104 313.47 605.826 308.382 602.321 303.443C599.634 299.651 596.668 296.017 592.93 293.208C592.329 292.747 591.703 292.313 591.068 291.903C589.737 291.034 588.347 290.278 586.92 289.572C585.894 290.207 584.877 290.851 583.877 291.512C583.738 291.599 583.599 291.694 583.469 291.782C578.425 295.13 573.599 298.851 569.025 302.887C568.938 302.957 568.86 303.034 568.773 303.104C566.694 304.938 564.669 306.834 562.703 308.791C561.078 310.391 559.495 312.035 557.947 313.704C552.895 319.157 548.234 324.948 544.017 330.941C532.112 347.811 522.215 366.724 518.129 387.099C518.121 387.143 518.111 387.195 518.103 387.238C516.808 393.761 516.068 400.795 516.46 407.665C516.591 409.857 516.834 412.031 517.208 414.17C517.355 415.065 517.538 415.962 517.739 416.84C518.747 421.17 520.357 425.301 522.722 429.031C525.869 428.24 529.174 427.814 532.314 427.44C533.843 427.257 535.375 427.074 536.905 426.909C543.053 426.213 549.227 425.588 555.358 424.727C556.375 424.579 557.385 424.431 558.402 424.275C561.228 423.84 561.445 421.762 562.149 419.24C562.985 416.223 563.793 413.179 564.584 410.136C564.871 409.014 565.159 407.884 565.436 406.762C565.827 405.179 566.219 403.597 566.593 402.014C567.28 399.187 567.95 396.361 568.594 393.526C569.533 389.413 570.438 385.291 571.315 381.169C571.315 381.151 571.324 381.143 571.324 381.125C572.028 377.865 572.706 374.595 573.376 371.334C574.472 366.039 575.533 360.734 576.593 355.429C576.593 355.421 576.593 355.411 576.601 355.403C576.619 355.264 576.653 355.125 576.679 354.986C576.687 355.003 576.697 355.011 576.705 355.02V355.028C578.653 358.724 581.079 362.141 583.731 365.411C585.549 367.655 587.401 370.289 589.565 372.212C591.357 373.803 593.383 373.055 595.566 372.707C595.628 372.699 595.68 372.69 595.74 372.681C607.08 370.804 618.305 368.333 629.385 365.307C629.524 365.273 629.671 365.23 629.811 365.186C630.141 365.108 630.463 365.013 630.785 364.916C632.315 364.508 633.829 364.072 635.35 363.629C635.642 363.531 635.746 363.218 635.616 362.948Z",
            fill: "#442828"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M496.681 520.927C491.881 513.744 486.272 507.17 480.064 501.161C477.907 499.064 475.681 497.047 473.386 495.108C473.255 494.986 473.115 494.873 472.986 494.768C472.69 494.507 472.395 494.255 472.099 494.028C466.933 489.716 461.455 485.75 455.777 482.123C445.968 475.827 435.551 470.514 425.028 466.088C404.167 457.314 381.861 451.993 359.278 450.461C358.052 450.374 356.835 450.304 355.6 450.235C347.555 449.843 339.485 449.93 331.433 450.505C315.416 451.653 299.545 454.732 284.24 459.61L284.232 459.618C274.761 467.583 265.483 475.774 256.353 484.132C245.048 494.472 233.97 505.055 222.994 515.742C221.542 517.16 220.09 518.587 218.646 520.003C213.281 525.264 207.933 530.542 202.602 535.839C202.375 536.065 202.471 536.525 202.802 536.605C205.341 537.126 207.872 537.665 210.403 538.222C211.664 538.5 212.925 538.779 214.186 539.065L214.995 539.248C216.125 539.509 217.257 539.761 218.387 540.03C218.882 540.144 219.37 540.257 219.857 540.369C221.552 540.76 223.248 541.168 224.935 541.586C227.231 542.143 229.526 542.716 231.814 543.299C233.379 543.699 234.945 544.107 236.51 544.525C236.85 544.602 237.197 544.698 237.536 544.795C238.067 544.934 238.597 545.073 239.128 545.221C239.388 545.29 239.659 545.36 239.919 545.429C240.381 545.551 240.85 545.672 241.31 545.812C241.971 545.986 242.631 546.16 243.284 546.351C243.874 546.508 244.475 546.673 245.066 546.838C245.414 546.933 245.752 547.029 246.1 547.134C246.743 547.307 247.387 547.49 248.022 547.673C251.014 548.525 253.996 549.395 256.97 550.291C261.431 551.621 265.875 553.012 270.301 554.448C273.91 555.622 277.528 556.821 281.118 558.066C284.335 559.17 287.736 560.779 291.214 560.579C294.275 560.413 296.71 558.657 299.093 556.891C301.78 554.908 304.398 552.831 306.962 550.708C307.153 550.561 307.328 550.396 307.519 550.239C306.684 557.526 303.825 575.207 302.955 582.485C328.321 583.085 353.696 583.668 379.07 584.251C382.575 571.789 388.157 548.961 391.782 536.525C392.912 532.63 394.06 528.726 395.207 524.829C396.79 519.438 398.416 514.064 400.017 508.681C411.427 512.673 423.087 515.916 434.913 518.394C439.375 519.315 443.853 520.142 448.357 520.855C453.679 521.698 459.035 522.385 464.409 522.916C466.687 523.142 468.966 523.333 471.253 523.498C471.549 523.524 471.853 523.542 472.157 523.56C474.383 523.725 476.609 523.846 478.845 523.952C481.453 524.073 484.071 524.151 486.688 524.194C490.645 524.255 494.679 524.272 498.723 524.107C498.064 523.041 497.386 521.971 496.681 520.927Z",
            fill: "#E29F3D"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M338.024 364.304C337.614 364.183 337.023 363.009 336.58 362.548C336.458 362.426 336.345 362.347 336.249 362.365C336.249 362.365 336.18 362.122 336.05 361.687C335.989 361.486 335.919 361.243 335.833 360.965C335.746 360.678 335.642 360.356 335.537 360C335.328 358.687 335.006 357.408 334.632 356.147C334.545 355.851 334.459 355.556 334.362 355.26C333.875 353.686 333.336 352.121 332.902 350.512C332.78 350.068 332.693 349.633 332.605 349.217C332.554 348.904 332.502 348.608 332.44 348.312C332.102 346.537 331.692 345.077 329.554 344.25C328.641 343.894 327.719 343.502 326.797 343.102C324.318 342.042 321.796 340.91 319.24 340.293C316.658 339.667 313.883 340.59 311.335 341.537C306.517 340.232 300.683 340.258 296.012 341.563C295.221 341.78 294.22 342.406 294.316 343.276C293.359 343.301 292.359 343.632 292.003 344.545C291.863 344.901 291.872 345.205 291.969 345.476C290.952 345.746 289.9 346.224 289.603 347.284C289.586 347.354 289.569 347.423 289.56 347.501C289.438 348.241 289.794 348.849 290.334 349.363C289.942 349.432 289.568 349.605 289.255 349.971C288.412 350.954 288.969 352.102 289.663 352.971C289.689 353.007 289.715 353.041 289.759 353.075C289.976 353.361 290.228 353.649 290.489 353.926C291.863 355.422 293.602 356.866 295.211 357.891C295.585 358.126 295.967 358.309 296.359 358.466C296.846 358.762 297.334 359.057 297.819 359.335C298.271 359.605 298.724 359.856 299.176 360.101C302.351 361.849 305.663 363.318 309.011 364.702C309.602 364.944 310.202 365.189 310.793 365.423C312.054 365.937 313.324 366.432 314.585 366.937C317.21 367.981 319.836 369.016 322.472 370.042C323.089 370.285 323.707 370.52 324.316 370.754C326.307 371.536 328.29 372.302 330.281 373.068C331.968 373.712 333.655 374.355 335.342 374.999C335.533 375.069 335.829 374.912 335.855 374.703C336.098 372.894 336.446 371.112 336.899 369.354C336.977 369.032 337.064 368.719 337.152 368.407C337.49 367.198 337.874 365.998 338.308 364.816C338.388 364.601 338.223 364.358 338.024 364.304Z",
            fill: "#E68B60"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M317.9 347.412C315.93 344.778 314.104 343.104 310.754 342.72C306.293 342.211 301.727 342.218 297.246 342.337C296.662 342.352 296.659 343.262 297.246 343.247C300.665 343.155 304.082 343.192 307.497 343.39C309.175 343.487 311.087 343.454 312.693 343.991C314.662 344.649 315.919 346.274 317.114 347.871C317.46 348.335 318.252 347.882 317.9 347.412Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M314.944 350.142C312.191 348.144 309.838 346.289 306.39 345.773C302.277 345.159 298.054 345.214 293.908 345.203C293.322 345.201 293.321 346.112 293.908 346.113C297.649 346.123 301.409 346.116 305.131 346.532C308.97 346.962 311.454 348.727 314.484 350.927C314.959 351.272 315.413 350.483 314.944 350.142Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M312.113 354.154C310.41 353.704 309.261 352.495 307.777 351.649C306.381 350.852 304.815 350.635 303.247 350.405C299.523 349.861 295.778 349.521 292.018 349.346C291.432 349.319 291.434 350.229 292.018 350.257C295.973 350.441 299.944 350.767 303.855 351.41C305.547 351.688 306.976 352.17 308.403 353.158C309.54 353.946 310.513 354.674 311.871 355.033C312.438 355.182 312.679 354.304 312.113 354.154Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M327.212 346.709C324.524 345.301 321.789 344 319.001 342.805C318.469 342.577 318.005 343.36 318.541 343.591C321.329 344.786 324.065 346.087 326.752 347.496C327.27 347.767 327.732 346.982 327.212 346.709Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M610.561 403.55C606.249 394.219 602.003 384.862 597.824 375.479C597.578 374.927 596.68 375.295 596.926 375.848C601.106 385.231 605.352 394.588 609.663 403.919C609.917 404.469 610.815 404.102 610.561 403.55Z",
            fill: "#C46A47"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M475.583 296.097C475.34 295.565 474.555 296.028 474.797 296.557C482.15 312.71 482.167 331.664 474.843 347.83C474.603 348.359 475.388 348.822 475.629 348.29C483.102 331.796 483.085 312.577 475.583 296.097Z",
            fill: "#87423A"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M588.89 302.452C585.764 317.469 582.101 332.367 577.906 347.12C577.746 347.684 578.647 347.816 578.805 347.259C583.001 332.506 586.664 317.608 589.789 302.591C589.908 302.016 589.009 301.88 588.89 302.452Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M557.564 207.095C554.562 202.673 551.969 198.021 549.788 193.142C549.55 192.609 548.765 193.071 549.002 193.602C551.183 198.481 553.775 203.133 556.777 207.555C557.105 208.036 557.894 207.581 557.564 207.095Z",
            fill: "#442828"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M396.21 509.535C389.281 507.016 382.28 504.697 375.206 502.616C369.228 500.856 363.715 499.864 358.144 503.304C352.469 506.807 347.453 511.717 342.412 516.051C336.954 520.743 331.578 525.532 326.291 530.414C320.262 535.981 314.35 541.673 308.548 547.475C308.133 547.89 308.777 548.534 309.192 548.119C321.51 535.801 334.337 523.999 347.661 512.775C350.924 510.027 354.147 507.087 357.682 504.69C361.688 501.976 365.778 501.244 370.51 502.288C379.141 504.192 387.678 507.394 395.97 510.41C396.52 510.613 396.758 509.734 396.21 509.535Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M648.717 412.194C648.691 412.228 648.673 412.263 648.648 412.297C648.447 412.602 648.239 412.924 648.031 413.262C641.387 423.497 626.77 445.959 615.342 463.36C613.821 465.682 612.429 467.804 611.203 469.656C604.272 470.23 595.672 470.899 586.149 471.621C574.497 472.5 561.462 473.455 548.418 474.404C522.565 476.282 496.66 478.161 481.347 479.439C481.277 479.542 480.929 485.283 480.398 494.865C480.293 496.813 480.181 498.917 480.058 501.161C479.702 507.674 479.293 515.396 478.841 523.953C478.31 534.048 477.727 545.311 477.118 557.145C476.796 563.415 476.285 608.255 475.954 614.76C474.128 614.726 472.292 614.672 470.466 614.629C470.162 614.62 469.866 614.611 469.562 614.603C467.823 614.559 466.083 614.515 464.352 614.464C464.352 607.776 464.516 562.832 464.508 556.536C464.49 544.075 464.456 532.588 464.403 522.917C464.333 510.134 464.22 500.525 464.046 496.011C461.272 500.264 455.68 509.134 448.35 520.856C443.359 528.857 437.55 538.178 431.297 548.257C426.087 556.64 406.157 589.784 400.514 598.888C399.227 598.854 397.94 598.819 396.653 598.793C396.245 598.785 395.835 598.775 395.426 598.767C395.078 598.759 394.721 598.749 394.373 598.741C392.364 598.697 390.355 598.646 388.338 598.602C393.922 588.88 414.017 554.736 419.695 544.858C424.807 535.952 429.913 527.084 434.904 518.395C439.105 511.091 443.235 503.908 447.235 496.96C450.149 491.882 453 486.925 455.766 482.125C457.879 478.455 459.932 474.88 461.923 471.411L462.392 470.602C466.297 463.81 469.957 457.445 473.305 451.636C473.627 451.08 473.94 450.523 474.262 449.975C476.983 445.245 479.479 440.905 481.714 437.028C482.549 435.584 483.339 434.201 484.097 432.888C487.053 427.748 489.418 423.636 491.063 420.774C492.262 418.705 494.114 417.148 496.298 416.33C497.177 415.992 498.106 415.774 499.063 415.696C501.81 415.469 504.959 415.2 508.454 414.904C508.82 414.869 509.202 414.843 509.576 414.817C511.977 414.608 514.525 414.391 517.194 414.164C529.595 413.12 544.717 411.825 560.352 410.495C561.752 410.373 563.161 410.252 564.569 410.129C577.3 409.033 590.23 407.929 602.187 406.902C616.561 405.667 629.527 404.545 639.005 403.728C644.37 403.272 649.526 410.942 648.717 412.194Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M593.583 515.084C557.166 520.4 520.728 525.563 484.269 530.572C483.689 530.651 483.895 531.538 484.472 531.459C520.932 526.449 557.371 521.286 593.788 515.97C594.367 515.888 594.161 515.001 593.583 515.084Z",
            fill: "#2B1919"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M473.41 479.874L472.984 494.771L472.976 495.127L472.159 523.563L471.194 557.094L470.473 614.63C470.169 614.622 469.873 614.612 469.568 614.604L470.289 557.059L471.254 523.501L472.063 495.169L472.097 494.03L472.505 479.839C472.811 479.856 473.115 479.866 473.41 479.874Z",
            fill: "#AD7D68"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M503.452 424.586L502.835 425.561L456.191 499.851L456.008 500.155L440.999 524.321L423.293 552.818L395.433 598.772C395.084 598.764 394.728 598.755 394.38 598.747L422.528 552.333L440.242 523.81L455.19 499.73L455.799 498.766L501.705 425.667L502.322 424.693L503.452 424.586Z",
            fill: "#AD7D68"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M648.649 412.299C648.448 412.603 648.241 412.925 648.032 413.264L586.665 418.273L586.317 418.307L558.176 420.75L524.985 423.62L502.837 425.559L501.707 425.663L502.323 424.688L503.453 424.585L524.923 422.707L558.141 419.828L586.177 417.394L587.307 417.298L648.649 412.299Z",
            fill: "#AD7D68"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M537.202 224.58C535.47 227.388 533.093 229.619 530.189 231.182C529.696 231.447 530.134 232.199 530.628 231.933C533.659 230.302 536.147 227.947 537.954 225.019C538.248 224.542 537.496 224.106 537.202 224.58Z",
            fill: "#442828"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M520.275 187.268C516.479 186.374 512.66 187.098 509.478 189.359C509.025 189.681 509.459 190.435 509.917 190.11C512.913 187.982 516.459 187.261 520.044 188.106C520.589 188.236 520.821 187.397 520.275 187.268Z",
            fill: "#442828"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M528.118 204.242C525.106 204.738 522.398 205.977 520.025 207.892C519.59 208.244 520.208 208.855 520.64 208.507C522.896 206.687 525.494 205.551 528.35 205.082C528.9 204.99 528.667 204.152 528.118 204.242Z",
            fill: "#442828"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M582.437 274.189C571.558 269.841 559.923 268.65 548.305 268.399C555.617 267.215 562.723 264.886 569.305 261.425C576.844 257.468 586.001 251.598 587.401 242.45C587.435 242.197 587.288 241.875 586.975 241.902C577.932 242.65 569.158 245.216 561.165 249.294C558.408 250.703 555.747 252.294 553.2 254.051C549.365 256.694 545.8 259.72 542.556 263.086C542.425 262.207 542.079 261.433 541.13 260.989C540.008 260.468 538.478 260.415 537.287 260.207C535.765 259.946 534.235 259.712 532.704 259.503C529.738 259.095 526.764 258.781 523.782 258.564C521.025 258.363 518.26 258.242 515.503 258.208C515.173 258.2 514.843 258.19 514.512 258.19C512.486 258.182 509.738 257.79 507.956 259.016C506.747 259.833 506.174 261.242 505.774 262.65C505.609 263.215 505.477 263.772 505.348 264.293C505.035 265.537 504.783 266.78 504.566 268.041C503.913 270.041 503.357 272.067 502.983 274.12C502.766 275.285 502.583 276.764 503.661 277.589C504.826 278.468 506.766 277.937 508.069 277.737C510.939 277.293 513.765 276.754 516.599 276.276C519.321 275.807 522.052 275.389 524.826 275.154C525.461 275.103 526.095 275.051 526.74 275.015C531.096 274.711 535.462 274.685 539.827 274.876C543.209 281.068 551.131 283.668 558.054 284.163C558.601 284.207 559.158 284.233 559.723 284.259C562.583 284.398 565.662 284.363 568.628 283.921C574.55 283.059 580.072 280.616 582.698 274.824C582.829 274.546 582.715 274.293 582.437 274.189Z",
            fill: "white"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M541.208 263.491C541.178 266.56 540.521 269.482 539.217 272.261C538.981 272.765 539.73 273.207 539.967 272.701C541.336 269.784 542.046 266.713 542.077 263.491C542.083 262.931 541.213 262.93 541.208 263.491Z",
            fill: "#AFD0DB"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M515.505 258.206C515.174 258.198 514.844 258.189 514.514 258.189C512.487 258.18 509.74 257.789 507.957 259.014C506.748 259.832 506.175 261.24 505.775 262.649C506.314 263.814 507.358 264.666 509.115 264.857C512.184 265.187 514.871 262.979 515.462 260.005C515.592 259.32 515.61 258.728 515.505 258.206Z",
            fill: "#AFD0DB"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M524.609 268.337C521.94 266.45 518.079 267.224 516.549 270.199C515.548 272.146 515.644 274.434 516.601 276.278C519.322 275.808 522.053 275.391 524.828 275.156C525.462 275.104 526.097 275.052 526.741 275.017C527.549 272.668 526.652 269.781 524.609 268.337Z",
            fill: "#AFD0DB"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M561.167 249.293C558.41 250.701 555.748 252.293 553.202 254.049C553.506 254.944 553.932 255.728 554.393 256.231C556.576 258.597 560.498 258.788 562.48 256.066C564.333 253.51 563.255 250.936 561.167 249.293Z",
            fill: "#AFD0DB"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M565.68 276.051C561.027 275.12 558.845 280.251 559.723 284.26C562.583 284.4 565.662 284.364 568.628 283.922C568.827 283.583 568.994 283.226 569.133 282.835C570.09 280.085 568.707 276.66 565.68 276.051Z",
            fill: "#AFD0DB"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask8_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask8_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M229.907 600.233C227.291 590.122 214.584 545.738 211.843 535.666C206.494 515.925 200.982 496.224 194.96 476.676C188.072 454.329 180.473 432.136 171.651 410.463C165.292 394.84 158.299 379.488 150.458 364.547C145.735 355.563 140.723 346.722 135.384 338.093C130.67 330.475 125.889 321.903 118.338 316.708C114.653 314.178 109.91 312.629 105.371 312.871C105.102 312.88 104.841 312.899 104.582 312.928C102.09 313.168 99.6944 313.957 97.5599 315.42C90.3742 320.374 90.9024 330.264 91.6626 337.911C93.3945 355.361 99.0994 372.022 105.891 388.116C107.045 390.858 108.229 393.571 109.431 396.273C118.127 415.84 127.237 435.215 135.635 454.935C150.036 488.71 173.217 557.289 185.252 591.988C186.685 592.691 188.129 593.364 189.581 594.018C194.94 596.422 200.423 598.549 206.041 600.386C206.329 600.492 206.609 600.588 206.897 600.664C209.446 601.501 212.024 602.27 214.631 602.983C217.045 603.637 219.469 604.252 221.904 604.829C225.117 605.59 228.339 606.282 231.582 606.916C231.043 604.686 230.484 602.455 229.907 600.233Z",
            fill: "#4A6144"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M275.498 533.848C273.084 521.659 270.534 509.452 267.707 497.293C264.233 482.392 260.319 467.587 255.662 453.071C251.891 441.297 246.369 429.262 235.46 422.509C233.027 420.989 230.371 419.796 227.591 419.075C227.332 419.008 227.052 418.93 226.774 418.873C226.484 418.806 226.196 418.738 225.899 418.671C223.147 418.113 220.011 417.892 217.616 419.267C212.959 421.932 213.066 428.541 213.46 433.187C214.922 450.637 217.875 467.905 221.329 485.096C223.475 495.86 225.832 506.567 228.121 517.274C232.305 536.753 241.99 584.787 246.166 604.267C251.591 604.989 257.037 605.586 262.481 606.114C263.405 606.2 264.337 606.297 265.27 606.373C265.463 606.392 265.655 606.411 265.848 606.421C266.011 606.44 266.166 606.459 266.328 606.469C266.435 606.478 266.53 606.488 266.637 606.497C266.8 606.516 266.974 606.526 267.137 606.535C269.032 606.718 270.927 606.873 272.823 607.036C273.122 607.065 273.429 607.084 273.728 607.103C278.913 607.526 284.107 607.883 289.303 608.199C286.741 592.915 278.518 549.076 275.498 533.848Z",
            fill: "#4A6144"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M135.385 338.093C140.724 346.722 145.736 355.563 150.459 364.547C158.299 379.488 165.293 394.84 171.653 410.462C166.911 410.492 162.159 410.202 157.435 409.587C152.942 409.01 148.517 408.135 144.179 406.99C143.881 406.923 143.574 406.836 143.275 406.75C129.653 403.055 116.955 396.658 105.892 388.116C99.1008 372.022 93.3959 355.361 91.664 337.911C90.9038 330.264 90.3756 320.374 97.5613 315.42C99.6958 313.957 102.091 313.168 104.583 312.928C104.842 312.899 105.103 312.88 105.372 312.871C109.911 312.629 114.654 314.178 118.339 316.708C125.161 321.401 129.722 328.851 134.015 335.864C134.474 336.613 134.93 337.358 135.385 338.093ZM235.461 422.508C246.369 429.261 251.891 441.295 255.662 453.069C260.318 467.585 264.233 482.391 267.707 497.293C260.742 499.265 253.219 499.399 246.12 497.918L246.064 497.906C245.763 497.843 245.456 497.778 245.157 497.706C242.945 497.197 240.78 496.523 238.692 495.706C232.286 493.185 226.514 489.51 221.329 485.094C217.875 467.903 214.922 450.636 213.46 433.186C213.066 428.54 212.959 421.93 217.616 419.266C220.011 417.89 223.147 418.112 225.899 418.67C226.101 418.715 226.299 418.761 226.496 418.807C226.589 418.829 226.681 418.85 226.774 418.872C226.992 418.917 227.211 418.974 227.421 419.029C227.478 419.044 227.535 419.059 227.591 419.074C230.371 419.794 233.027 420.987 235.461 422.508Z",
            fill: "#789173"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M206.897 600.665C206.607 600.589 206.329 600.492 206.041 600.387C205.81 599.454 205.57 598.531 205.33 597.597C199.154 573.567 182.282 515.435 174.605 491.847C166.938 468.26 158.521 444.912 149.383 421.863C147.382 416.812 145.342 411.782 143.274 406.751C135.789 388.521 127.988 370.417 120.398 352.245C114.954 339.2 109.615 326.117 104.583 312.929C104.843 312.901 105.103 312.882 105.372 312.872C111.519 328.975 118.127 344.916 124.823 360.817C131.298 376.2 137.849 391.553 144.179 406.992C147.325 414.669 150.423 422.375 153.424 430.109C162.399 453.226 170.634 476.641 178.128 500.286C185.033 522.121 201.26 578.472 206.897 600.665Z",
            fill: "#374234"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M266.636 606.499C266.531 606.489 266.435 606.479 266.328 606.47C266.164 606.46 266.01 606.441 265.848 606.422C261.134 579.641 250.573 524.353 245.157 497.706C244.637 495.109 244.109 492.503 243.57 489.905C240.512 475.024 237.539 460.104 233.892 445.356C231.651 436.332 229.092 427.385 225.899 418.67C226.196 418.737 226.486 418.805 226.773 418.872C230.39 428.78 233.18 438.987 235.615 449.251C239.433 465.383 242.878 481.631 246.119 497.918C249.044 512.483 251.796 527.076 254.536 541.65C256.806 553.731 264.51 594.387 266.636 606.499Z",
            fill: "#374234"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M169.06 589.059C163.789 577.65 161.067 565.35 157.578 553.334C154.322 542.12 150.047 531.241 146.185 520.222C126.726 464.706 93.976 420.771 67.5371 398.035C55.3877 387.578 42.0441 378.556 27.7492 371.34C27.7505 371.345 27.7519 371.351 27.7519 371.356C25.1274 369.772 22.451 368.284 19.7665 366.88C4.06312 358.66 -26.0511 352.308 -43.208 347.868C-43.5506 347.779 -43.9136 348.101 -43.799 348.46C-31.1855 388.128 -2.82911 427.533 19.1878 463.042C30.2085 480.816 43.0267 497.416 57.8047 512.231C73.5682 528.034 90.4835 543.018 107.983 556.872C117.44 564.358 127.228 571.44 137.475 577.809C142.697 581.055 148.032 584.135 153.5 586.948C158.213 589.372 163.478 591.599 168.772 589.768C169.086 589.657 169.195 589.353 169.06 589.059Z",
            fill: "#4A6144"
          }
        )),
        /* @__PURE__ */ import_react_18_2162.default.createElement(
          "mask",
          {
            id: "mask9_531_12634",
            style: MASK_ALPHA_STYLE,
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "743",
            height: "577"
          },
          /* @__PURE__ */ import_react_18_2162.default.createElement(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M732.598 270.993C723.101 236.662 707.884 200.574 686.866 166.328C683.057 160.11 679.04 153.954 674.839 147.875C674.7 147.666 674.553 147.467 674.404 147.258C659.369 125.579 641.881 104.961 621.923 86.3865C620.428 84.9958 618.924 83.6215 617.402 82.2553C609.602 75.2375 601.436 68.5418 592.897 62.2201C592.445 61.8816 592.002 61.5499 591.548 61.2197C590.261 60.2711 588.966 59.3322 587.661 58.4027C583.122 55.1763 578.487 52.0455 573.747 49.0375C572.522 48.2541 571.287 47.4803 570.052 46.7242C569.608 46.4457 569.156 46.1673 568.703 45.8984C559.694 40.3847 550.329 35.2803 540.616 30.6373C540.556 30.6032 540.486 30.5759 540.424 30.5417C536.625 28.7238 532.772 26.9851 528.867 25.3159C523.58 23.0545 518.197 20.924 512.711 18.9328C506.823 16.7941 500.824 14.8193 494.701 13.0287C494.283 12.8976 493.866 12.7762 493.45 12.6547C478.658 8.36788 463.214 5.08964 447.091 2.94144C379.793 -6.0321 300.878 4.81941 210.161 45.2816C144.603 74.5251 72.7835 138.336 41 202.33C22.2955 239.984 6.11992 282.385 1.39908 325.169C1.39089 325.273 1.38134 325.378 1.3636 325.481C1.33767 325.672 1.31992 325.863 1.30218 326.046C0.615687 332.464 0.188506 338.89 0.0492962 345.308C-0.21138 357.43 0.552907 369.526 2.5537 381.501C4.45896 392.901 7.47516 404.188 11.7893 415.285C22.2941 442.33 39.5984 465.922 59.2256 487.113C63.4428 491.67 67.7651 496.114 72.1556 500.452C75.5827 503.844 79.0424 507.218 82.565 510.54C84.9916 512.843 87.4441 515.123 89.9308 517.366C90.9312 518.279 91.9398 519.184 92.9565 520.071C98.1564 524.672 103.495 529.106 109.027 533.298C110.018 534.054 111.018 534.794 112.019 535.533C112.305 535.742 112.592 535.951 112.88 536.16C113.367 536.516 113.863 536.864 114.358 537.204C120.914 541.847 127.759 545.926 134.872 549.447C135.22 549.621 135.576 549.795 135.933 549.951C137.228 550.586 138.533 551.194 139.846 551.785C144.689 553.959 149.646 555.881 154.725 557.542C154.985 557.638 155.238 557.725 155.498 557.794C157.802 558.551 160.133 559.247 162.49 559.891C164.673 560.482 166.864 561.039 169.064 561.56C171.969 562.246 174.883 562.873 177.813 563.447C182.161 564.299 186.543 565.031 190.935 565.673C192.292 565.874 193.657 566.065 195.023 566.238C199.928 566.891 204.849 567.43 209.771 567.908C210.606 567.985 211.45 568.073 212.293 568.142C212.466 568.16 212.641 568.176 212.814 568.186C212.962 568.204 213.101 568.22 213.25 568.23C213.345 568.238 213.433 568.247 213.528 568.256C213.676 568.273 213.833 568.282 213.98 568.29C215.693 568.455 217.406 568.594 219.12 568.742C219.39 568.767 219.668 568.785 219.937 568.803C224.624 569.185 229.32 569.507 234.017 569.794C234.46 569.82 234.895 569.846 235.338 569.872C243.859 570.367 252.381 570.723 260.913 571.011C268.304 571.254 275.696 571.455 283.088 571.628C290.454 571.811 297.81 571.984 305.176 572.159C330.542 572.759 355.916 573.342 381.292 573.924C388.509 574.089 395.736 574.263 402.962 574.429C405.737 574.49 408.502 574.558 411.275 574.62C412.562 574.646 413.849 574.681 415.136 574.715C431.658 575.115 448.198 575.662 464.746 576.124C466.477 576.176 468.216 576.219 469.956 576.263C470.26 576.271 470.556 576.281 470.861 576.289C472.687 576.333 474.521 576.384 476.349 576.42C492.618 576.828 508.888 577.08 525.15 576.977C528.933 576.959 532.715 576.915 536.498 576.855C537.837 576.829 539.177 576.803 540.516 576.768C558.299 576.36 576.212 575.125 593.814 572.246C597.144 571.707 600.466 571.107 603.77 570.428C604.075 570.377 604.387 570.315 604.691 570.245C606.013 569.977 607.335 569.698 608.648 569.402C621.474 566.559 634.048 562.689 646.196 557.481C674.841 545.201 701.251 525.662 717.607 498.748C727.007 483.27 732.129 465.851 735.155 448.093C737.685 433.266 739.259 418.206 740.347 403.153C740.373 402.815 740.399 402.475 740.425 402.137C740.711 398.128 740.964 394.11 741.19 390.102C743.467 350.274 743.258 309.551 732.598 270.993Z",
              fill: "white"
            }
          )
        ),
        /* @__PURE__ */ import_react_18_2162.default.createElement("g", { mask: "url(#mask9_531_12634)" }, /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M379.11 204.53C352.792 220.002 319.662 212.445 305.099 187.672C290.537 162.9 300.817 128.553 326.397 111.892C352.07 95.1703 385.812 106.891 400.374 131.664C414.938 156.436 405.415 189.066 379.11 204.53ZM367.91 140.973C363.308 143.679 361.647 149.406 364.195 153.741C366.744 158.075 372.556 159.409 377.157 156.702C381.76 153.997 383.433 148.262 380.885 143.928C378.337 139.593 372.513 138.267 367.91 140.973Z",
            fill: "#67B4F0"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M207.389 247.1L211.766 254.545C213.235 257.042 216.583 257.805 219.234 256.245L327.91 192.359L310.687 163.059C299.042 169.742 287.396 176.424 275.752 183.106C259.156 192.628 242.561 202.151 225.966 211.674C215.558 217.646 201.175 229.64 205.712 243.4C206.134 244.67 206.691 245.911 207.389 247.1Z",
            fill: "#67B4F0"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M229.795 244.597C232.414 245.661 235.067 246.649 237.738 247.577C240.435 248.514 243.107 250.125 246.027 250.538C250.315 251.144 251.183 248.66 252.329 245.059C253.337 241.894 254.154 238.664 254.946 235.439C255.1 234.808 255.531 230.811 256.11 230.501C256.092 230.511 229.795 244.597 229.795 244.597Z",
            fill: "#67B4F0"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M289.3 209.617C289.3 209.617 307.714 217.104 309.699 215.129C311.683 213.154 315.615 195.52 315.615 195.52L289.3 209.617Z",
            fill: "#67B4F0"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M246.62 231.383C246.62 231.383 265.034 238.87 267.019 236.896C269.003 234.922 272.935 217.287 272.935 217.287L246.62 231.383Z",
            fill: "#67B4F0"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            d: "M207.389 247.1L208.406 248.829L306.984 190.88L303.92 185.667L205.712 243.4C206.134 244.67 206.691 245.911 207.389 247.1Z",
            fill: "#105CD1"
          }
        ), /* @__PURE__ */ import_react_18_2162.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M374.35 196.437C353.146 208.902 321.971 201.66 313.152 180.24C302.961 155.488 311.802 133.755 333.005 121.29C354.21 108.825 379.756 117.724 391.495 137.692C403.234 157.66 395.555 183.971 374.35 196.437ZM367.91 140.973C363.308 143.679 361.647 149.406 364.195 153.741C366.744 158.075 372.556 159.409 377.156 156.702C381.76 153.997 383.433 148.262 380.885 143.928C378.337 139.593 372.513 138.267 367.91 140.973Z",
            fill: "#105CD1"
          }
        ))
      );
    }
  });

  // web-app/src/app/login/AuthForm.tsx
  function SignUpForm({ goToState, onLogin }) {
    const styles = useStyles82();
    const [email, setEmail] = (0, import_react_18_2163.useState)("");
    const [password, setPassword] = (0, import_react_18_2163.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react_18_2163.useState)("");
    const [name, setName] = (0, import_react_18_2163.useState)("");
    const [error, setError] = (0, import_react_18_2163.useState)("");
    const [processing, setProcessing] = (0, import_react_18_2163.useState)(false);
    const onSubmit = async (e) => {
      e.stopPropagation();
      e.preventDefault();
      if (!email || !password || !name) {
        return setError("Please fill all the fields");
      }
      if (!EMAIL_REGEX.test(email)) {
        return setError("Please enter a valid email address");
      }
      if (password.length < 6) {
        return setError("Password must be at least 6 characters");
      }
      if (confirmPassword !== password) {
        return setError("Passwords do not match");
      }
      try {
        onLogin({
          userId: "test",
          isNew: true
        });
      } catch (error2) {
        const { message } = error2;
        setError(message);
      } finally {
        setProcessing(false);
      }
    };
    return /* @__PURE__ */ import_react_18_2163.default.createElement("form", { className: cn(styles.form), onSubmit }, /* @__PURE__ */ import_react_18_2163.default.createElement(H12, { className: cn(styles.h1) }, "Sign Up"), /* @__PURE__ */ import_react_18_2163.default.createElement(H22, { className: cn(styles.h2) }, "Create your free account"), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: email,
        type: "email",
        placeholder: "Email",
        autoComplete: "Username",
        onChange: (e) => setEmail(e.target.value),
        required: true
      }
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: password,
        type: "password",
        placeholder: "Password",
        autoComplete: "new-password",
        onChange: (e) => setPassword(e.target.value),
        required: true
      }
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: confirmPassword,
        type: "password",
        name: "validatePassword",
        placeholder: "Confirm Password",
        autoComplete: "new-password",
        onChange: (e) => setConfirmPassword(e.target.value),
        required: true
      }
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: name,
        type: "text",
        name: "name",
        placeholder: "Full name",
        onChange: (e) => setName(e.target.value),
        required: true
      }
    ), error && /* @__PURE__ */ import_react_18_2163.default.createElement("p", { className: cn(styles.error) }, error), /* @__PURE__ */ import_react_18_2163.default.createElement(
      RaisedButton,
      {
        className: cn(styles.button),
        disabled: !email || !password || processing
      },
      "Sign up"
    ), /* @__PURE__ */ import_react_18_2163.default.createElement("p", null, "Already have an account?", " ", /* @__PURE__ */ import_react_18_2163.default.createElement(
      "span",
      {
        className: cn(styles.link),
        onClick: () => goToState("login" /* LOGIN */)
      },
      "Log in"
    )));
  }
  function LoginForm({ goToState, onLogin }) {
    const styles = useStyles82();
    const [email, setEmail] = (0, import_react_18_2163.useState)("");
    const [password, setPassword] = (0, import_react_18_2163.useState)("");
    const [error, setError] = (0, import_react_18_2163.useState)("");
    const [processing, setProcessing] = (0, import_react_18_2163.useState)(false);
    const onSubmit = async (e) => {
      e.stopPropagation();
      e.preventDefault();
      if (!email || !password) {
        return setError("Please enter email address and password");
      }
      if (!EMAIL_REGEX.test(email)) {
        return setError("Please enter a valid email address");
      }
      if (password.length < 6) {
        return setError("Password must be at least 6 characters");
      }
      setProcessing(true);
      setError("");
      try {
        onLogin({ userId: "test" });
      } catch (error2) {
        const { message } = error2;
        setProcessing(false);
        setError(message);
      }
    };
    return /* @__PURE__ */ import_react_18_2163.default.createElement("form", { className: cn(styles.form), onSubmit }, /* @__PURE__ */ import_react_18_2163.default.createElement(H12, { className: cn(styles.h1) }, "Sign In"), /* @__PURE__ */ import_react_18_2163.default.createElement(H22, { className: cn(styles.h2) }, "Welcome back to Ovvio"), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: email,
        type: "email",
        name: "email",
        placeholder: "email",
        autoComplete: "username",
        onChange: (e) => setEmail(e.target.value),
        required: true
      }
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: password,
        type: "password",
        name: "password",
        placeholder: "password",
        autoComplete: "current-password",
        onChange: (e) => setPassword(e.target.value),
        required: true
      }
    ), error && /* @__PURE__ */ import_react_18_2163.default.createElement("p", { className: cn(styles.error) }, error), /* @__PURE__ */ import_react_18_2163.default.createElement(
      RaisedButton,
      {
        className: cn(styles.button),
        disabled: !email || !password || processing
      },
      "Log in"
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      "p",
      {
        className: cn(styles.link),
        onClick: () => goToState("reset-password" /* RESET_PASSWORD */)
      },
      "Forgot password?"
    ), /* @__PURE__ */ import_react_18_2163.default.createElement("p", null, "Don't have an account yet?", " ", /* @__PURE__ */ import_react_18_2163.default.createElement(
      "span",
      {
        className: cn(styles.link),
        onClick: () => goToState("sign-up" /* SIGN_UP */)
      },
      "Sign up"
    )));
  }
  function ResetPasswordForm({ goToState }) {
    const styles = useStyles82();
    const toastProvider = (0, import_react_18_2163.useContext)(toastContext);
    const [email, setEmail] = (0, import_react_18_2163.useState)("");
    const [error, setError] = (0, import_react_18_2163.useState)("");
    const [processing, setProcessing] = (0, import_react_18_2163.useState)(false);
    const onSubmit = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (!email || !EMAIL_REGEX.test(email)) {
        return setError("Please enter a valid email address");
      }
      setProcessing(true);
      try {
        toastProvider.displayToast({
          duration: 2e3,
          text: "Email sent. check your inbox"
        });
        goToState("login" /* LOGIN */);
      } catch (err) {
        if (err.code === "auth/invalid-email") {
          return setError("Please enter a valid email address");
        }
        if (err.code === "auth/user-not-found") {
          return setError("The requested email does not exist");
        }
        setError("Something went wrong, please try again");
      } finally {
        setProcessing(false);
      }
    };
    return /* @__PURE__ */ import_react_18_2163.default.createElement("form", { className: cn(styles.form), onSubmit }, /* @__PURE__ */ import_react_18_2163.default.createElement(H12, { className: cn(styles.h1) }, "Forgot Password?"), /* @__PURE__ */ import_react_18_2163.default.createElement(H22, { className: cn(styles.h2) }, "Enter your email to receive your password reset instructions"), /* @__PURE__ */ import_react_18_2163.default.createElement(
      TextField_default,
      {
        className: cn(styles.text),
        value: email,
        type: "email",
        name: "email",
        placeholder: "email",
        onChange: (e) => setEmail(e.currentTarget.value),
        required: true
      }
    ), error && /* @__PURE__ */ import_react_18_2163.default.createElement("p", { className: cn(styles.error) }, error), /* @__PURE__ */ import_react_18_2163.default.createElement(
      RaisedButton,
      {
        className: cn(styles.button),
        disabled: !email || processing
      },
      "RESET PASSWORD"
    ), /* @__PURE__ */ import_react_18_2163.default.createElement(
      "p",
      {
        className: cn(styles.link),
        onClick: () => goToState("login" /* LOGIN */)
      },
      "Back to login"
    ));
  }
  function AuthFormView({ onLogin }) {
    const [loginState, setLoginState] = (0, import_react_18_2163.useState)("sign-up" /* SIGN_UP */);
    const [requestPassword, setRequestPassword] = (0, import_react_18_2163.useState)(false);
    const [knownEmail, setKnownEmail] = (0, import_react_18_2163.useState)("");
    const [currentPassword, setCurrentPassword] = (0, import_react_18_2163.useState)("");
    const credentials = (0, import_react_18_2163.useRef)(null);
    const linkAccount = async (event) => {
      event.preventDefault();
      event.stopPropagation();
      onLogin({ userId: "test" });
    };
    const dismissLink = () => {
      setKnownEmail("");
      setCurrentPassword("");
      setRequestPassword(false);
      credentials.current = null;
    };
    let content = null;
    if (loginState === "sign-up" /* SIGN_UP */) {
      content = /* @__PURE__ */ import_react_18_2163.default.createElement(
        SignUpForm,
        {
          goToState: setLoginState,
          onLogin
        }
      );
    } else if (loginState === "reset-password" /* RESET_PASSWORD */) {
      content = /* @__PURE__ */ import_react_18_2163.default.createElement(ResetPasswordForm, { goToState: setLoginState });
    } else {
      content = /* @__PURE__ */ import_react_18_2163.default.createElement(
        LoginForm,
        {
          goToState: setLoginState,
          onLogin
        }
      );
    }
    return /* @__PURE__ */ import_react_18_2163.default.createElement(import_react_18_2163.default.Fragment, null, content, /* @__PURE__ */ import_react_18_2163.default.createElement(
      Dialog,
      {
        className: cn(layout.column),
        open: requestPassword,
        onClickOutside: dismissLink
      },
      /* @__PURE__ */ import_react_18_2163.default.createElement("form", { onSubmit: linkAccount }, /* @__PURE__ */ import_react_18_2163.default.createElement("p", null, "The email '", knownEmail, "' is already registered, please enter the password to link your Google account"), /* @__PURE__ */ import_react_18_2163.default.createElement(TextField_default, { type: "email", readOnly: true, value: knownEmail }), /* @__PURE__ */ import_react_18_2163.default.createElement(
        TextField_default,
        {
          name: "currentPassword",
          type: "password",
          value: currentPassword,
          onChange: (e) => setCurrentPassword(e.currentTarget.value)
        }
      ), /* @__PURE__ */ import_react_18_2163.default.createElement(RaisedButton, null, "Link accounts"))
    ));
  }
  var import_react_18_2163, useStyles82, EMAIL_REGEX;
  var init_AuthForm = __esm({
    "web-app/src/app/login/AuthForm.tsx"() {
      import_react_18_2163 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_css_objects();
      init_styles();
      init_inputs();
      init_buttons();
      init_dialog();
      init_toast();
      init_texts();
      useStyles82 = makeStyles((theme) => ({
        form: {
          alignItems: "stretch",
          width: "100%",
          maxWidth: styleguide.gridbase * 37,
          textAlign: "center",
          basedOn: [layout.column]
        },
        h1: {
          marginBottom: styleguide.gridbase * 2
        },
        h2: {
          marginBottom: styleguide.gridbase * 3
        },
        text: {
          marginBottom: styleguide.gridbase * 3
        },
        button: {
          height: styleguide.gridbase * 5,
          margin: 0,
          marginBottom: styleguide.gridbase * 3
        },
        googleButton: {
          color: theme.background.text,
          border: `1px solid ${theme.primary[500]}`,
          backgroundColor: theme.background[0],
          padding: 0,
          ":hover": {
            ":not(disabled)": {
              backgroundColor: theme.background[0]
            }
          },
          googleIcon: {
            width: styleguide.gridbase * 5,
            height: styleguide.gridbase * 5
          },
          basedOn: [useRaisedButtonStyles.raisedButton]
        },
        googleIcon: {},
        link: {
          color: theme.primary[500],
          cursor: "pointer"
        },
        error: {
          color: "red"
        }
      }));
      EMAIL_REGEX = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
    }
  });

  // web-app/src/app/login/index.tsx
  function LoginView({ children }) {
    const [sessionInfo, setSessionInfo] = (0, import_react_18_2164.useState)({
      userId: "ofri",
      sessionId: uniqueId()
    });
    const [processing, setProcessing] = (0, import_react_18_2164.useState)(false);
    const onLogin = async (info) => {
      setProcessing(true);
    };
    if (processing) {
      return null;
    }
    if (sessionInfo) {
      return /* @__PURE__ */ import_react_18_2164.default.createElement(LoggerProvider, { sessionInfo }, /* @__PURE__ */ import_react_18_2164.default.createElement(
        CfdsClientProvider,
        {
          userId: sessionInfo.userId,
          sessionId: sessionInfo.sessionId
        },
        children
      ));
    }
    return /* @__PURE__ */ import_react_18_2164.default.createElement(LoginPage, { onLogin });
  }
  var import_react_18_2164, useStyles83, LoginPage;
  var init_login = __esm({
    "web-app/src/app/login/index.tsx"() {
      import_react_18_2164 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_common();
      init_styles();
      init_buttons();
      init_css_objects();
      init_responsive();
      init_graph();
      init_illustrations();
      init_AuthForm();
      init_logger();
      useStyles83 = makeStyles((theme) => ({
        root: {
          alignItems: "stretch",
          basedOn: [layout.row, layout.flex]
        },
        ladyContainer: {
          backgroundColor: theme.background[100],
          flexBasis: "50%",
          basedOn: [layout.column, layout.centerCenter, layout.flexSpacer],
          [MediaQueries.Mobile]: {
            display: "none"
          }
        },
        illustration: {
          boxSizing: "border-box",
          padding: styleguide.gridbase * 2,
          width: "100%",
          maxWidth: styleguide.gridbase * 80
        },
        formContainer: {
          backgroundColor: theme.background[0],
          flexBasis: "50%",
          flexShrink: 1,
          basedOn: [layout.column, layout.centerCenter, layout.flex],
          [MediaQueries.Mobile]: {
            flexBasis: "100%"
          }
        },
        plant: {
          alignSelf: "flex-end",
          marginRight: styleguide.gridbase * 8
        }
      }));
      LoginPage = ({ onLogin }) => {
        const styles = useStyles83();
        return /* @__PURE__ */ import_react_18_2164.default.createElement("div", { className: cn(styles.root) }, /* @__PURE__ */ import_react_18_2164.default.createElement("div", { className: cn(styles.ladyContainer) }, /* @__PURE__ */ import_react_18_2164.default.createElement(LoginIllustration, { className: cn(styles.illustration) })), /* @__PURE__ */ import_react_18_2164.default.createElement("div", { className: cn(styles.formContainer) }, /* @__PURE__ */ import_react_18_2164.default.createElement(AuthFormView, { onLogin })));
      };
    }
  });

  // web-app/src/core/feature-toggle/features.tsx
  function getFeatureConfig(feature) {
    return featureStatus[feature];
  }
  var featureStatus;
  var init_features = __esm({
    "web-app/src/core/feature-toggle/features.tsx"() {
      featureStatus = {
        ["BoardView" /* BoardView */]: { status: "active" },
        ["ExportDemoData" /* ExportDemoData */]: { status: "beta" },
        ["Userpilot" /* Userpilot */]: { status: "active" },
        ["Mobile" /* Mobile */]: { status: "beta" }
      };
    }
  });

  // web-app/src/core/feature-toggle/index.tsx
  function isFeatureActive(featureId) {
    const featureConf = getFeatureConfig(featureId);
    const query = new URLSearchParams(window.location.search);
    const forceProd = (query.get("forceProd") || "false").toLowerCase() === "true";
    switch (featureConf.status) {
      case "disabled":
      default: {
        return false;
      }
    }
  }
  function useIsFeatureActive(featureId) {
    return isFeatureActive(featureId);
  }
  var import_react_18_2165;
  var init_feature_toggle = __esm({
    "web-app/src/core/feature-toggle/index.tsx"() {
      import_react_18_2165 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_features();
    }
  });

  // web-app/src/app/mobile-blocker.tsx
  function isOnMobile() {
    if (window.innerWidth <= 768 /* Medium */ || window.innerHeight <= 400) {
      return true;
    }
    if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
      return true;
    }
    return false;
  }
  function MobileBlockView() {
    const styles = useStyles84();
    return /* @__PURE__ */ import_react_18_2166.default.createElement("div", { className: cn(styles.blockRoot) }, /* @__PURE__ */ import_react_18_2166.default.createElement(H32, null, "Hey there"), /* @__PURE__ */ import_react_18_2166.default.createElement(Bold2, null, "We currently do not support mobile devices, please visit this site from a computer"));
  }
  function MobileBlockerImpl({ children }) {
    const [isBlocking, setIsBlocking] = (0, import_react_18_2166.useState)(() => isOnMobile());
    (0, import_react_18_2166.useEffect)(() => {
      const handler = () => {
        setIsBlocking(isOnMobile());
      };
      addEventListener("resize", handler);
      return () => removeEventListener("resize", handler);
    }, [isBlocking]);
    if (isBlocking) {
      return /* @__PURE__ */ import_react_18_2166.default.createElement(MobileBlockView, null);
    }
    return /* @__PURE__ */ import_react_18_2166.default.createElement(import_react_18_2166.default.Fragment, null, children);
  }
  function MobileBlocker({ children }) {
    const isMobileSupported = useIsFeatureActive("Mobile" /* Mobile */);
    if (!isMobileSupported) {
      return /* @__PURE__ */ import_react_18_2166.default.createElement(MobileBlockerImpl, null, children);
    }
    return /* @__PURE__ */ import_react_18_2166.default.createElement(import_react_18_2166.default.Fragment, null, children);
  }
  var import_react_18_2166, useStyles84;
  var init_mobile_blocker = __esm({
    "web-app/src/app/mobile-blocker.tsx"() {
      import_react_18_2166 = __toESM(__require("https://esm.sh/react@18.2.0"));
      init_styles();
      init_texts();
      init_css_objects();
      init_responsive();
      init_feature_toggle();
      useStyles84 = makeStyles((theme) => ({
        blockRoot: {
          backgroundColor: "#e8ecfc",
          padding: [styleguide.gridbase],
          textAlign: "center",
          basedOn: [layout.column, layout.centerCenter, layout.flex]
        }
      }));
    }
  });

  // web-app/src/app/login-async.tsx
  var login_async_exports = {};
  __export(login_async_exports, {
    default: () => LoginAsync
  });
  function LoginAsync() {
    return (
      // <FirebaseAppInit>
      // <EventLoggerProvider>
      /* @__PURE__ */ import_react_18_2167.default.createElement(import_react_18_2167.default.StrictMode, null, /* @__PURE__ */ import_react_18_2167.default.createElement(import_react_router_dom_6_75.RouterProvider, { router }), /* @__PURE__ */ import_react_18_2167.default.createElement(ToastProvider, null, /* @__PURE__ */ import_react_18_2167.default.createElement(import_react_router_dom_6_75.Route, { path: "/" }, /* @__PURE__ */ import_react_18_2167.default.createElement(LoginView, null, /* @__PURE__ */ import_react_18_2167.default.createElement(MobileBlocker, null, /* @__PURE__ */ import_react_18_2167.default.createElement(import_react_18_2167.Suspense, { fallback: /* @__PURE__ */ import_react_18_2167.default.createElement(import_react_18_2167.Fragment, null) }, /* @__PURE__ */ import_react_18_2167.default.createElement(LazyApp, null)))))))
    );
  }
  var import_react_18_2167, import_react_router_dom_6_75, LazyApp, router;
  var init_login_async = __esm({
    "web-app/src/app/login-async.tsx"() {
      import_react_18_2167 = __toESM(__require("https://esm.sh/react@18.2.0"));
      import_react_router_dom_6_75 = __require("https://esm.sh/react-router-dom@6.7.0");
      init_toast();
      init_login();
      init_mobile_blocker();
      LazyApp = (0, import_react_18_2167.lazy)(() => Promise.resolve().then(() => (init_app(), app_exports)));
      router = (0, import_react_router_dom_6_75.createBrowserRouter)([]);
    }
  });

  // web-app/src/index.tsx
  var import_react_18_2169 = __toESM(__require("https://esm.sh/react@18.2.0"));
  var import_react_dom_18_26 = __require("https://esm.sh/react-dom@18.2.0");

  // web-app/src/app/app-async.tsx
  var import_react_18_2168 = __toESM(__require("https://esm.sh/react@18.2.0"));
  init_context();
  var LazyLogin = (0, import_react_18_2168.lazy)(() => Promise.resolve().then(() => (init_login_async(), login_async_exports)));
  function AppAsync() {
    return /* @__PURE__ */ import_react_18_2168.default.createElement(StyleProvider, { dev: false }, /* @__PURE__ */ import_react_18_2168.default.createElement(import_react_18_2168.Fragment, null, /* @__PURE__ */ import_react_18_2168.default.createElement(import_react_18_2168.Suspense, { fallback: /* @__PURE__ */ import_react_18_2168.default.createElement(import_react_18_2168.Fragment, null) }, /* @__PURE__ */ import_react_18_2168.default.createElement(LazyLogin, null))));
  }

  // web-app/src/index.tsx
  (0, import_react_dom_18_26.render)(/* @__PURE__ */ import_react_18_2169.default.createElement(AppAsync, null), document.getElementById("root"));
})();
